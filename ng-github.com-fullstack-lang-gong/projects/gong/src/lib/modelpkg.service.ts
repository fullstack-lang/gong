// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { ModelPkgAPI } from './modelpkg-api'
import { ModelPkg, CopyModelPkgToModelPkgAPI } from './modelpkg'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class ModelPkgService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  ModelPkgServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private modelpkgsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.modelpkgsUrl = origin + '/api/github.com/fullstack-lang/gong/go/v1/modelpkgs';
  }

  /** GET modelpkgs from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<ModelPkgAPI[]> {
    return this.getModelPkgs(Name, frontRepo)
  }
  getModelPkgs(Name: string, frontRepo: FrontRepo): Observable<ModelPkgAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<ModelPkgAPI[]>(this.modelpkgsUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<ModelPkgAPI[]>('getModelPkgs', []))
      );
  }

  /** GET modelpkg by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<ModelPkgAPI> {
    return this.getModelPkg(id, Name, frontRepo)
  }
  getModelPkg(id: number, Name: string, frontRepo: FrontRepo): Observable<ModelPkgAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.modelpkgsUrl}/${id}`;
    return this.http.get<ModelPkgAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched modelpkg id=${id}`)),
      catchError(this.handleError<ModelPkgAPI>(`getModelPkg id=${id}`))
    );
  }

  // postFront copy modelpkg to a version with encoded pointers and post to the back
  postFront(modelpkg: ModelPkg, Name: string): Observable<ModelPkgAPI> {
    let modelpkgAPI = new ModelPkgAPI
    CopyModelPkgToModelPkgAPI(modelpkg, modelpkgAPI)
    const id = typeof modelpkgAPI === 'number' ? modelpkgAPI : modelpkgAPI.ID
    const url = `${this.modelpkgsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<ModelPkgAPI>(url, modelpkgAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<ModelPkgAPI>('postModelPkg'))
    );
  }
  
  /** POST: add a new modelpkg to the server */
  post(modelpkgdb: ModelPkgAPI, Name: string, frontRepo: FrontRepo): Observable<ModelPkgAPI> {
    return this.postModelPkg(modelpkgdb, Name, frontRepo)
  }
  postModelPkg(modelpkgdb: ModelPkgAPI, Name: string, frontRepo: FrontRepo): Observable<ModelPkgAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<ModelPkgAPI>(this.modelpkgsUrl, modelpkgdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted modelpkgdb id=${modelpkgdb.ID}`)
      }),
      catchError(this.handleError<ModelPkgAPI>('postModelPkg'))
    );
  }

  /** DELETE: delete the modelpkgdb from the server */
  delete(modelpkgdb: ModelPkgAPI | number, Name: string): Observable<ModelPkgAPI> {
    return this.deleteModelPkg(modelpkgdb, Name)
  }
  deleteModelPkg(modelpkgdb: ModelPkgAPI | number, Name: string): Observable<ModelPkgAPI> {
    const id = typeof modelpkgdb === 'number' ? modelpkgdb : modelpkgdb.ID;
    const url = `${this.modelpkgsUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<ModelPkgAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted modelpkgdb id=${id}`)),
      catchError(this.handleError<ModelPkgAPI>('deleteModelPkg'))
    );
  }

  // updateFront copy modelpkg to a version with encoded pointers and update to the back
  updateFront(modelpkg: ModelPkg, Name: string): Observable<ModelPkgAPI> {
    let modelpkgAPI = new ModelPkgAPI
    CopyModelPkgToModelPkgAPI(modelpkg, modelpkgAPI)
    const id = typeof modelpkgAPI === 'number' ? modelpkgAPI : modelpkgAPI.ID
    const url = `${this.modelpkgsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<ModelPkgAPI>(url, modelpkgAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<ModelPkgAPI>('updateModelPkg'))
    );
  }

  /** PUT: update the modelpkgdb on the server */
  update(modelpkgdb: ModelPkgAPI, Name: string, frontRepo: FrontRepo): Observable<ModelPkgAPI> {
    return this.updateModelPkg(modelpkgdb, Name, frontRepo)
  }
  updateModelPkg(modelpkgdb: ModelPkgAPI, Name: string, frontRepo: FrontRepo): Observable<ModelPkgAPI> {
    const id = typeof modelpkgdb === 'number' ? modelpkgdb : modelpkgdb.ID;
    const url = `${this.modelpkgsUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<ModelPkgAPI>(url, modelpkgdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated modelpkgdb id=${modelpkgdb.ID}`)
      }),
      catchError(this.handleError<ModelPkgAPI>('updateModelPkg'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in ModelPkgService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("ModelPkgService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
