// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { SliceOfPointerToGongStructFieldAPI } from './sliceofpointertogongstructfield-api'
import { SliceOfPointerToGongStructField, CopySliceOfPointerToGongStructFieldToSliceOfPointerToGongStructFieldAPI } from './sliceofpointertogongstructfield'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { GongStructAPI } from './gongstruct-api'

@Injectable({
  providedIn: 'root'
})
export class SliceOfPointerToGongStructFieldService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  SliceOfPointerToGongStructFieldServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private sliceofpointertogongstructfieldsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.sliceofpointertogongstructfieldsUrl = origin + '/api/github.com/fullstack-lang/gong/go/v1/sliceofpointertogongstructfields';
  }

  /** GET sliceofpointertogongstructfields from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<SliceOfPointerToGongStructFieldAPI[]> {
    return this.getSliceOfPointerToGongStructFields(GONG__StackPath, frontRepo)
  }
  getSliceOfPointerToGongStructFields(GONG__StackPath: string, frontRepo: FrontRepo): Observable<SliceOfPointerToGongStructFieldAPI[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<SliceOfPointerToGongStructFieldAPI[]>(this.sliceofpointertogongstructfieldsUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<SliceOfPointerToGongStructFieldAPI[]>('getSliceOfPointerToGongStructFields', []))
      );
  }

  /** GET sliceofpointertogongstructfield by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SliceOfPointerToGongStructFieldAPI> {
    return this.getSliceOfPointerToGongStructField(id, GONG__StackPath, frontRepo)
  }
  getSliceOfPointerToGongStructField(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SliceOfPointerToGongStructFieldAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.sliceofpointertogongstructfieldsUrl}/${id}`;
    return this.http.get<SliceOfPointerToGongStructFieldAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched sliceofpointertogongstructfield id=${id}`)),
      catchError(this.handleError<SliceOfPointerToGongStructFieldAPI>(`getSliceOfPointerToGongStructField id=${id}`))
    );
  }

  // postFront copy sliceofpointertogongstructfield to a version with encoded pointers and post to the back
  postFront(sliceofpointertogongstructfield: SliceOfPointerToGongStructField, GONG__StackPath: string): Observable<SliceOfPointerToGongStructFieldAPI> {
    let sliceofpointertogongstructfieldAPI = new SliceOfPointerToGongStructFieldAPI
    CopySliceOfPointerToGongStructFieldToSliceOfPointerToGongStructFieldAPI(sliceofpointertogongstructfield, sliceofpointertogongstructfieldAPI)
    const id = typeof sliceofpointertogongstructfieldAPI === 'number' ? sliceofpointertogongstructfieldAPI : sliceofpointertogongstructfieldAPI.ID
    const url = `${this.sliceofpointertogongstructfieldsUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SliceOfPointerToGongStructFieldAPI>(url, sliceofpointertogongstructfieldAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SliceOfPointerToGongStructFieldAPI>('postSliceOfPointerToGongStructField'))
    );
  }
  
  /** POST: add a new sliceofpointertogongstructfield to the server */
  post(sliceofpointertogongstructfielddb: SliceOfPointerToGongStructFieldAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SliceOfPointerToGongStructFieldAPI> {
    return this.postSliceOfPointerToGongStructField(sliceofpointertogongstructfielddb, GONG__StackPath, frontRepo)
  }
  postSliceOfPointerToGongStructField(sliceofpointertogongstructfielddb: SliceOfPointerToGongStructFieldAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SliceOfPointerToGongStructFieldAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SliceOfPointerToGongStructFieldAPI>(this.sliceofpointertogongstructfieldsUrl, sliceofpointertogongstructfielddb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted sliceofpointertogongstructfielddb id=${sliceofpointertogongstructfielddb.ID}`)
      }),
      catchError(this.handleError<SliceOfPointerToGongStructFieldAPI>('postSliceOfPointerToGongStructField'))
    );
  }

  /** DELETE: delete the sliceofpointertogongstructfielddb from the server */
  delete(sliceofpointertogongstructfielddb: SliceOfPointerToGongStructFieldAPI | number, GONG__StackPath: string): Observable<SliceOfPointerToGongStructFieldAPI> {
    return this.deleteSliceOfPointerToGongStructField(sliceofpointertogongstructfielddb, GONG__StackPath)
  }
  deleteSliceOfPointerToGongStructField(sliceofpointertogongstructfielddb: SliceOfPointerToGongStructFieldAPI | number, GONG__StackPath: string): Observable<SliceOfPointerToGongStructFieldAPI> {
    const id = typeof sliceofpointertogongstructfielddb === 'number' ? sliceofpointertogongstructfielddb : sliceofpointertogongstructfielddb.ID;
    const url = `${this.sliceofpointertogongstructfieldsUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<SliceOfPointerToGongStructFieldAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted sliceofpointertogongstructfielddb id=${id}`)),
      catchError(this.handleError<SliceOfPointerToGongStructFieldAPI>('deleteSliceOfPointerToGongStructField'))
    );
  }

  // updateFront copy sliceofpointertogongstructfield to a version with encoded pointers and update to the back
  updateFront(sliceofpointertogongstructfield: SliceOfPointerToGongStructField, GONG__StackPath: string): Observable<SliceOfPointerToGongStructFieldAPI> {
    let sliceofpointertogongstructfieldAPI = new SliceOfPointerToGongStructFieldAPI
    CopySliceOfPointerToGongStructFieldToSliceOfPointerToGongStructFieldAPI(sliceofpointertogongstructfield, sliceofpointertogongstructfieldAPI)
    const id = typeof sliceofpointertogongstructfieldAPI === 'number' ? sliceofpointertogongstructfieldAPI : sliceofpointertogongstructfieldAPI.ID
    const url = `${this.sliceofpointertogongstructfieldsUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<SliceOfPointerToGongStructFieldAPI>(url, sliceofpointertogongstructfieldAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SliceOfPointerToGongStructFieldAPI>('updateSliceOfPointerToGongStructField'))
    );
  }

  /** PUT: update the sliceofpointertogongstructfielddb on the server */
  update(sliceofpointertogongstructfielddb: SliceOfPointerToGongStructFieldAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SliceOfPointerToGongStructFieldAPI> {
    return this.updateSliceOfPointerToGongStructField(sliceofpointertogongstructfielddb, GONG__StackPath, frontRepo)
  }
  updateSliceOfPointerToGongStructField(sliceofpointertogongstructfielddb: SliceOfPointerToGongStructFieldAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SliceOfPointerToGongStructFieldAPI> {
    const id = typeof sliceofpointertogongstructfielddb === 'number' ? sliceofpointertogongstructfielddb : sliceofpointertogongstructfielddb.ID;
    const url = `${this.sliceofpointertogongstructfieldsUrl}/${id}`;


    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<SliceOfPointerToGongStructFieldAPI>(url, sliceofpointertogongstructfielddb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated sliceofpointertogongstructfielddb id=${sliceofpointertogongstructfielddb.ID}`)
      }),
      catchError(this.handleError<SliceOfPointerToGongStructFieldAPI>('updateSliceOfPointerToGongStructField'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in SliceOfPointerToGongStructFieldService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("SliceOfPointerToGongStructFieldService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
