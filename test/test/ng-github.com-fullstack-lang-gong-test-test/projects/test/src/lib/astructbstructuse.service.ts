// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { AstructBstructUseAPI } from './astructbstructuse-api'
import { AstructBstructUse, CopyAstructBstructUseToAstructBstructUseAPI } from './astructbstructuse'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { BstructAPI } from './bstruct-api'

@Injectable({
  providedIn: 'root'
})
export class AstructBstructUseService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  AstructBstructUseServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private astructbstructusesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.astructbstructusesUrl = origin + '/api/github.com/fullstack-lang/gong/test/test/go/v1/astructbstructuses';
  }

  /** GET astructbstructuses from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<AstructBstructUseAPI[]> {
    return this.getAstructBstructUses(Name, frontRepo)
  }
  getAstructBstructUses(Name: string, frontRepo: FrontRepo): Observable<AstructBstructUseAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<AstructBstructUseAPI[]>(this.astructbstructusesUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<AstructBstructUseAPI[]>('getAstructBstructUses', []))
      );
  }

  /** GET astructbstructuse by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<AstructBstructUseAPI> {
    return this.getAstructBstructUse(id, Name, frontRepo)
  }
  getAstructBstructUse(id: number, Name: string, frontRepo: FrontRepo): Observable<AstructBstructUseAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.astructbstructusesUrl}/${id}`;
    return this.http.get<AstructBstructUseAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched astructbstructuse id=${id}`)),
      catchError(this.handleError<AstructBstructUseAPI>(`getAstructBstructUse id=${id}`))
    );
  }

  // postFront copy astructbstructuse to a version with encoded pointers and post to the back
  postFront(astructbstructuse: AstructBstructUse, Name: string): Observable<AstructBstructUseAPI> {
    let astructbstructuseAPI = new AstructBstructUseAPI
    CopyAstructBstructUseToAstructBstructUseAPI(astructbstructuse, astructbstructuseAPI)
    const id = typeof astructbstructuseAPI === 'number' ? astructbstructuseAPI : astructbstructuseAPI.ID
    const url = `${this.astructbstructusesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<AstructBstructUseAPI>(url, astructbstructuseAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<AstructBstructUseAPI>('postAstructBstructUse'))
    );
  }

  /** POST: add a new astructbstructuse to the server */
  post(astructbstructusedb: AstructBstructUseAPI, Name: string, frontRepo: FrontRepo): Observable<AstructBstructUseAPI> {
    return this.postAstructBstructUse(astructbstructusedb, Name, frontRepo)
  }
  postAstructBstructUse(astructbstructusedb: AstructBstructUseAPI, Name: string, frontRepo: FrontRepo): Observable<AstructBstructUseAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<AstructBstructUseAPI>(this.astructbstructusesUrl, astructbstructusedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted astructbstructusedb id=${astructbstructusedb.ID}`)
      }),
      catchError(this.handleError<AstructBstructUseAPI>('postAstructBstructUse'))
    );
  }

  /** DELETE: delete the astructbstructusedb from the server */
  delete(astructbstructusedb: AstructBstructUseAPI | number, Name: string): Observable<AstructBstructUseAPI> {
    return this.deleteAstructBstructUse(astructbstructusedb, Name)
  }
  deleteAstructBstructUse(astructbstructusedb: AstructBstructUseAPI | number, Name: string): Observable<AstructBstructUseAPI> {
    const id = typeof astructbstructusedb === 'number' ? astructbstructusedb : astructbstructusedb.ID;
    const url = `${this.astructbstructusesUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<AstructBstructUseAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted astructbstructusedb id=${id}`)),
      catchError(this.handleError<AstructBstructUseAPI>('deleteAstructBstructUse'))
    );
  }

  // updateFront copy astructbstructuse to a version with encoded pointers and update to the back
  updateFront(astructbstructuse: AstructBstructUse, Name: string): Observable<AstructBstructUseAPI> {
    let astructbstructuseAPI = new AstructBstructUseAPI
    CopyAstructBstructUseToAstructBstructUseAPI(astructbstructuse, astructbstructuseAPI)
    const id = typeof astructbstructuseAPI === 'number' ? astructbstructuseAPI : astructbstructuseAPI.ID
    const url = `${this.astructbstructusesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<AstructBstructUseAPI>(url, astructbstructuseAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<AstructBstructUseAPI>('updateAstructBstructUse'))
    );
  }

  /** PUT: update the astructbstructusedb on the server */
  update(astructbstructusedb: AstructBstructUseAPI, Name: string, frontRepo: FrontRepo): Observable<AstructBstructUseAPI> {
    return this.updateAstructBstructUse(astructbstructusedb, Name, frontRepo)
  }
  updateAstructBstructUse(astructbstructusedb: AstructBstructUseAPI, Name: string, frontRepo: FrontRepo): Observable<AstructBstructUseAPI> {
    const id = typeof astructbstructusedb === 'number' ? astructbstructusedb : astructbstructusedb.ID;
    const url = `${this.astructbstructusesUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<AstructBstructUseAPI>(url, astructbstructusedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated astructbstructusedb id=${astructbstructusedb.ID}`)
      }),
      catchError(this.handleError<AstructBstructUseAPI>('updateAstructBstructUse'))
    );
  }

  // updateFrontWithMouseEvent
  updateFrontWithMouseEvent(astructbstructuse: AstructBstructUse, Name: string, gong__mouseEvent: MouseEvent): Observable<AstructBstructUseAPI> {
    let astructbstructuseAPI = new AstructBstructUseAPI
    CopyAstructBstructUseToAstructBstructUseAPI(astructbstructuse, astructbstructuseAPI)
    const id = typeof astructbstructuseAPI === 'number' ? astructbstructuseAPI : astructbstructuseAPI.ID
    const url = `${this.astructbstructusesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    params = params.append("shiftKey", gong__mouseEvent.shiftKey)
    params = params.append("altKey", gong__mouseEvent.altKey)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<AstructBstructUseAPI>(url, astructbstructuseAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<AstructBstructUseAPI>('updateAstructBstructUse'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in AstructBstructUseService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging
      console.error("AstructBstructUseService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
