// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/test/go/db"
	"github.com/fullstack-lang/gong/test/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Fstruct_sql sql.NullBool
var dummy_Fstruct_time time.Duration
var dummy_Fstruct_sort sort.Float64Slice

// FstructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fstructAPI
type FstructAPI struct {
	gorm.Model

	models.Fstruct_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FstructPointersEncoding FstructPointersEncoding
}

// FstructPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FstructPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FstructDB describes a fstruct in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model fstructDB
type FstructDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field fstructDB.Name
	Name_Data sql.NullString

	// Declation for basic field fstructDB.Date
	Date_Data sql.NullTime

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FstructPointersEncoding
}

// FstructDBs arrays fstructDBs
// swagger:response fstructDBsResponse
type FstructDBs []FstructDB

// FstructDBResponse provides response
// swagger:response fstructDBResponse
type FstructDBResponse struct {
	FstructDB
}

// FstructWOP is a Fstruct without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FstructWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Date time.Time `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Fstruct_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Date",
}

type BackRepoFstructStruct struct {
	// stores FstructDB according to their gorm ID
	Map_FstructDBID_FstructDB map[uint]*FstructDB

	// stores FstructDB ID according to Fstruct address
	Map_FstructPtr_FstructDBID map[*models.Fstruct]uint

	// stores Fstruct according to their gorm ID
	Map_FstructDBID_FstructPtr map[uint]*models.Fstruct

	db db.DBInterface

	stage *models.Stage
}

func (backRepoFstruct *BackRepoFstructStruct) GetStage() (stage *models.Stage) {
	stage = backRepoFstruct.stage
	return
}

func (backRepoFstruct *BackRepoFstructStruct) GetDB() db.DBInterface {
	return backRepoFstruct.db
}

// GetFstructDBFromFstructPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFstruct *BackRepoFstructStruct) GetFstructDBFromFstructPtr(fstruct *models.Fstruct) (fstructDB *FstructDB) {
	id := backRepoFstruct.Map_FstructPtr_FstructDBID[fstruct]
	fstructDB = backRepoFstruct.Map_FstructDBID_FstructDB[id]
	return
}

// BackRepoFstruct.CommitPhaseOne commits all staged instances of Fstruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFstruct *BackRepoFstructStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var fstructs []*models.Fstruct
	for fstruct := range stage.Fstructs {
		fstructs = append(fstructs, fstruct)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(fstructs, func(i, j int) bool {
		return stage.FstructMap_Staged_Order[fstructs[i]] < stage.FstructMap_Staged_Order[fstructs[j]]
	})

	for _, fstruct := range fstructs {
		backRepoFstruct.CommitPhaseOneInstance(fstruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, fstruct := range backRepoFstruct.Map_FstructDBID_FstructPtr {
		if _, ok := stage.Fstructs[fstruct]; !ok {
			backRepoFstruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFstruct.CommitDeleteInstance commits deletion of Fstruct to the BackRepo
func (backRepoFstruct *BackRepoFstructStruct) CommitDeleteInstance(id uint) (Error error) {

	fstruct := backRepoFstruct.Map_FstructDBID_FstructPtr[id]

	// fstruct is not staged anymore, remove fstructDB
	fstructDB := backRepoFstruct.Map_FstructDBID_FstructDB[id]
	db, _ := backRepoFstruct.db.Unscoped()
	_, err := db.Delete(fstructDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoFstruct.Map_FstructPtr_FstructDBID, fstruct)
	delete(backRepoFstruct.Map_FstructDBID_FstructPtr, id)
	delete(backRepoFstruct.Map_FstructDBID_FstructDB, id)

	return
}

// BackRepoFstruct.CommitPhaseOneInstance commits fstruct staged instances of Fstruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFstruct *BackRepoFstructStruct) CommitPhaseOneInstance(fstruct *models.Fstruct) (Error error) {

	// check if the fstruct is not commited yet
	if _, ok := backRepoFstruct.Map_FstructPtr_FstructDBID[fstruct]; ok {
		return
	}

	// initiate fstruct
	var fstructDB FstructDB
	fstructDB.CopyBasicFieldsFromFstruct(fstruct)

	_, err := backRepoFstruct.db.Create(&fstructDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoFstruct.Map_FstructPtr_FstructDBID[fstruct] = fstructDB.ID
	backRepoFstruct.Map_FstructDBID_FstructPtr[fstructDB.ID] = fstruct
	backRepoFstruct.Map_FstructDBID_FstructDB[fstructDB.ID] = &fstructDB

	return
}

// BackRepoFstruct.CommitPhaseTwo commits all staged instances of Fstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFstruct *BackRepoFstructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, fstruct := range backRepoFstruct.Map_FstructDBID_FstructPtr {
		backRepoFstruct.CommitPhaseTwoInstance(backRepo, idx, fstruct)
	}

	return
}

// BackRepoFstruct.CommitPhaseTwoInstance commits {{structname }} of models.Fstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFstruct *BackRepoFstructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, fstruct *models.Fstruct) (Error error) {

	// fetch matching fstructDB
	if fstructDB, ok := backRepoFstruct.Map_FstructDBID_FstructDB[idx]; ok {

		fstructDB.CopyBasicFieldsFromFstruct(fstruct)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoFstruct.db.Save(fstructDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Fstruct intance %s", fstruct.Name))
		return err
	}

	return
}

// BackRepoFstruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFstruct *BackRepoFstructStruct) CheckoutPhaseOne() (Error error) {

	fstructDBArray := make([]FstructDB, 0)
	_, err := backRepoFstruct.db.Find(&fstructDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	fstructInstancesToBeRemovedFromTheStage := make(map[*models.Fstruct]any)
	for key, value := range backRepoFstruct.stage.Fstructs {
		fstructInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, fstructDB := range fstructDBArray {
		backRepoFstruct.CheckoutPhaseOneInstance(&fstructDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		fstruct, ok := backRepoFstruct.Map_FstructDBID_FstructPtr[fstructDB.ID]
		if ok {
			delete(fstructInstancesToBeRemovedFromTheStage, fstruct)
		}
	}

	// remove from stage and back repo's 3 maps all fstructs that are not in the checkout
	for fstruct := range fstructInstancesToBeRemovedFromTheStage {
		fstruct.Unstage(backRepoFstruct.GetStage())

		// remove instance from the back repo 3 maps
		fstructID := backRepoFstruct.Map_FstructPtr_FstructDBID[fstruct]
		delete(backRepoFstruct.Map_FstructPtr_FstructDBID, fstruct)
		delete(backRepoFstruct.Map_FstructDBID_FstructDB, fstructID)
		delete(backRepoFstruct.Map_FstructDBID_FstructPtr, fstructID)
	}

	return
}

// CheckoutPhaseOneInstance takes a fstructDB that has been found in the DB, updates the backRepo and stages the
// models version of the fstructDB
func (backRepoFstruct *BackRepoFstructStruct) CheckoutPhaseOneInstance(fstructDB *FstructDB) (Error error) {

	fstruct, ok := backRepoFstruct.Map_FstructDBID_FstructPtr[fstructDB.ID]
	if !ok {
		fstruct = new(models.Fstruct)

		backRepoFstruct.Map_FstructDBID_FstructPtr[fstructDB.ID] = fstruct
		backRepoFstruct.Map_FstructPtr_FstructDBID[fstruct] = fstructDB.ID

		// append model store with the new element
		fstruct.Name = fstructDB.Name_Data.String
		fstruct.Stage(backRepoFstruct.GetStage())
	}
	fstructDB.CopyBasicFieldsToFstruct(fstruct)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	fstruct.Stage(backRepoFstruct.GetStage())

	// preserve pointer to fstructDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FstructDBID_FstructDB)[fstructDB hold variable pointers
	fstructDB_Data := *fstructDB
	preservedPtrToFstruct := &fstructDB_Data
	backRepoFstruct.Map_FstructDBID_FstructDB[fstructDB.ID] = preservedPtrToFstruct

	return
}

// BackRepoFstruct.CheckoutPhaseTwo Checkouts all staged instances of Fstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFstruct *BackRepoFstructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fstructDB := range backRepoFstruct.Map_FstructDBID_FstructDB {
		backRepoFstruct.CheckoutPhaseTwoInstance(backRepo, fstructDB)
	}
	return
}

// BackRepoFstruct.CheckoutPhaseTwoInstance Checkouts staged instances of Fstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFstruct *BackRepoFstructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fstructDB *FstructDB) (Error error) {

	fstruct := backRepoFstruct.Map_FstructDBID_FstructPtr[fstructDB.ID]

	fstructDB.DecodePointers(backRepo, fstruct)

	return
}

func (fstructDB *FstructDB) DecodePointers(backRepo *BackRepoStruct, fstruct *models.Fstruct) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFstruct allows commit of a single fstruct (if already staged)
func (backRepo *BackRepoStruct) CommitFstruct(fstruct *models.Fstruct) {
	backRepo.BackRepoFstruct.CommitPhaseOneInstance(fstruct)
	if id, ok := backRepo.BackRepoFstruct.Map_FstructPtr_FstructDBID[fstruct]; ok {
		backRepo.BackRepoFstruct.CommitPhaseTwoInstance(backRepo, id, fstruct)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFstruct allows checkout of a single fstruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFstruct(fstruct *models.Fstruct) {
	// check if the fstruct is staged
	if _, ok := backRepo.BackRepoFstruct.Map_FstructPtr_FstructDBID[fstruct]; ok {

		if id, ok := backRepo.BackRepoFstruct.Map_FstructPtr_FstructDBID[fstruct]; ok {
			var fstructDB FstructDB
			fstructDB.ID = id

			if _, err := backRepo.BackRepoFstruct.db.First(&fstructDB, id); err != nil {
				log.Fatalln("CheckoutFstruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFstruct.CheckoutPhaseOneInstance(&fstructDB)
			backRepo.BackRepoFstruct.CheckoutPhaseTwoInstance(backRepo, &fstructDB)
		}
	}
}

// CopyBasicFieldsFromFstruct
func (fstructDB *FstructDB) CopyBasicFieldsFromFstruct(fstruct *models.Fstruct) {
	// insertion point for fields commit

	fstructDB.Name_Data.String = fstruct.Name
	fstructDB.Name_Data.Valid = true

	fstructDB.Date_Data.Time = fstruct.Date
	fstructDB.Date_Data.Valid = true
}

// CopyBasicFieldsFromFstruct_WOP
func (fstructDB *FstructDB) CopyBasicFieldsFromFstruct_WOP(fstruct *models.Fstruct_WOP) {
	// insertion point for fields commit

	fstructDB.Name_Data.String = fstruct.Name
	fstructDB.Name_Data.Valid = true

	fstructDB.Date_Data.Time = fstruct.Date
	fstructDB.Date_Data.Valid = true
}

// CopyBasicFieldsFromFstructWOP
func (fstructDB *FstructDB) CopyBasicFieldsFromFstructWOP(fstruct *FstructWOP) {
	// insertion point for fields commit

	fstructDB.Name_Data.String = fstruct.Name
	fstructDB.Name_Data.Valid = true

	fstructDB.Date_Data.Time = fstruct.Date
	fstructDB.Date_Data.Valid = true
}

// CopyBasicFieldsToFstruct
func (fstructDB *FstructDB) CopyBasicFieldsToFstruct(fstruct *models.Fstruct) {
	// insertion point for checkout of basic fields (back repo to stage)
	fstruct.Name = fstructDB.Name_Data.String
	fstruct.Date = fstructDB.Date_Data.Time
}

// CopyBasicFieldsToFstruct_WOP
func (fstructDB *FstructDB) CopyBasicFieldsToFstruct_WOP(fstruct *models.Fstruct_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	fstruct.Name = fstructDB.Name_Data.String
	fstruct.Date = fstructDB.Date_Data.Time
}

// CopyBasicFieldsToFstructWOP
func (fstructDB *FstructDB) CopyBasicFieldsToFstructWOP(fstruct *FstructWOP) {
	fstruct.ID = int(fstructDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	fstruct.Name = fstructDB.Name_Data.String
	fstruct.Date = fstructDB.Date_Data.Time
}

// Backup generates a json file from a slice of all FstructDB instances in the backrepo
func (backRepoFstruct *BackRepoFstructStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FstructDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FstructDB, 0)
	for _, fstructDB := range backRepoFstruct.Map_FstructDBID_FstructDB {
		forBackup = append(forBackup, fstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Fstruct ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Fstruct file", err.Error())
	}
}

// Backup generates a json file from a slice of all FstructDB instances in the backrepo
func (backRepoFstruct *BackRepoFstructStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FstructDB, 0)
	for _, fstructDB := range backRepoFstruct.Map_FstructDBID_FstructDB {
		forBackup = append(forBackup, fstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Fstruct")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Fstruct_Fields, -1)
	for _, fstructDB := range forBackup {

		var fstructWOP FstructWOP
		fstructDB.CopyBasicFieldsToFstructWOP(&fstructWOP)

		row := sh.AddRow()
		row.WriteStruct(&fstructWOP, -1)
	}
}

// RestoreXL from the "Fstruct" sheet all FstructDB instances
func (backRepoFstruct *BackRepoFstructStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFstructid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Fstruct"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFstruct.rowVisitorFstruct)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFstruct *BackRepoFstructStruct) rowVisitorFstruct(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var fstructWOP FstructWOP
		row.ReadStruct(&fstructWOP)

		// add the unmarshalled struct to the stage
		fstructDB := new(FstructDB)
		fstructDB.CopyBasicFieldsFromFstructWOP(&fstructWOP)

		fstructDB_ID_atBackupTime := fstructDB.ID
		fstructDB.ID = 0
		_, err := backRepoFstruct.db.Create(fstructDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFstruct.Map_FstructDBID_FstructDB[fstructDB.ID] = fstructDB
		BackRepoFstructid_atBckpTime_newID[fstructDB_ID_atBackupTime] = fstructDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FstructDB.json" in dirPath that stores an array
// of FstructDB and stores it in the database
// the map BackRepoFstructid_atBckpTime_newID is updated accordingly
func (backRepoFstruct *BackRepoFstructStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFstructid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FstructDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Fstruct file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FstructDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FstructDBID_FstructDB
	for _, fstructDB := range forRestore {

		fstructDB_ID_atBackupTime := fstructDB.ID
		fstructDB.ID = 0
		_, err := backRepoFstruct.db.Create(fstructDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFstruct.Map_FstructDBID_FstructDB[fstructDB.ID] = fstructDB
		BackRepoFstructid_atBckpTime_newID[fstructDB_ID_atBackupTime] = fstructDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Fstruct file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Fstruct>id_atBckpTime_newID
// to compute new index
func (backRepoFstruct *BackRepoFstructStruct) RestorePhaseTwo() {

	for _, fstructDB := range backRepoFstruct.Map_FstructDBID_FstructDB {

		// next line of code is to avert unused variable compilation error
		_ = fstructDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoFstruct.db.Model(fstructDB)
		_, err := db.Updates(*fstructDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoFstruct.ResetReversePointers commits all staged instances of Fstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFstruct *BackRepoFstructStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, fstruct := range backRepoFstruct.Map_FstructDBID_FstructPtr {
		backRepoFstruct.ResetReversePointersInstance(backRepo, idx, fstruct)
	}

	return
}

func (backRepoFstruct *BackRepoFstructStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, fstruct *models.Fstruct) (Error error) {

	// fetch matching fstructDB
	if fstructDB, ok := backRepoFstruct.Map_FstructDBID_FstructDB[idx]; ok {
		_ = fstructDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFstructid_atBckpTime_newID map[uint]uint
