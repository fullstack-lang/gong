// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/test/go/db"
	"github.com/fullstack-lang/gong/test/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_F0123456789012345678901234567890_sql sql.NullBool
var dummy_F0123456789012345678901234567890_time time.Duration
var dummy_F0123456789012345678901234567890_sort sort.Float64Slice

// F0123456789012345678901234567890API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model f0123456789012345678901234567890API
type F0123456789012345678901234567890API struct {
	gorm.Model

	models.F0123456789012345678901234567890_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	F0123456789012345678901234567890PointersEncoding F0123456789012345678901234567890PointersEncoding
}

// F0123456789012345678901234567890PointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type F0123456789012345678901234567890PointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// F0123456789012345678901234567890DB describes a f0123456789012345678901234567890 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model f0123456789012345678901234567890DB
type F0123456789012345678901234567890DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field f0123456789012345678901234567890DB.Name
	Name_Data sql.NullString

	// Declation for basic field f0123456789012345678901234567890DB.Date
	Date_Data sql.NullTime

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	F0123456789012345678901234567890PointersEncoding
}

// F0123456789012345678901234567890DBs arrays f0123456789012345678901234567890DBs
// swagger:response f0123456789012345678901234567890DBsResponse
type F0123456789012345678901234567890DBs []F0123456789012345678901234567890DB

// F0123456789012345678901234567890DBResponse provides response
// swagger:response f0123456789012345678901234567890DBResponse
type F0123456789012345678901234567890DBResponse struct {
	F0123456789012345678901234567890DB
}

// F0123456789012345678901234567890WOP is a F0123456789012345678901234567890 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type F0123456789012345678901234567890WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Date time.Time `xlsx:"2"`
	// insertion for WOP pointer fields
}

var F0123456789012345678901234567890_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Date",
}

type BackRepoF0123456789012345678901234567890Struct struct {
	// stores F0123456789012345678901234567890DB according to their gorm ID
	Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB map[uint]*F0123456789012345678901234567890DB

	// stores F0123456789012345678901234567890DB ID according to F0123456789012345678901234567890 address
	Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID map[*models.F0123456789012345678901234567890]uint

	// stores F0123456789012345678901234567890 according to their gorm ID
	Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr map[uint]*models.F0123456789012345678901234567890

	db db.DBInterface

	stage *models.Stage
}

func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) GetStage() (stage *models.Stage) {
	stage = backRepoF0123456789012345678901234567890.stage
	return
}

func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) GetDB() db.DBInterface {
	return backRepoF0123456789012345678901234567890.db
}

// GetF0123456789012345678901234567890DBFromF0123456789012345678901234567890Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) GetF0123456789012345678901234567890DBFromF0123456789012345678901234567890Ptr(f0123456789012345678901234567890 *models.F0123456789012345678901234567890) (f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) {
	id := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID[f0123456789012345678901234567890]
	f0123456789012345678901234567890DB = backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB[id]
	return
}

// BackRepoF0123456789012345678901234567890.CommitPhaseOne commits all staged instances of F0123456789012345678901234567890 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var f0123456789012345678901234567890s []*models.F0123456789012345678901234567890
	for f0123456789012345678901234567890 := range stage.F0123456789012345678901234567890s {
		f0123456789012345678901234567890s = append(f0123456789012345678901234567890s, f0123456789012345678901234567890)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(f0123456789012345678901234567890s, func(i, j int) bool {
		return stage.F0123456789012345678901234567890Map_Staged_Order[f0123456789012345678901234567890s[i]] < stage.F0123456789012345678901234567890Map_Staged_Order[f0123456789012345678901234567890s[j]]
	})

	for _, f0123456789012345678901234567890 := range f0123456789012345678901234567890s {
		backRepoF0123456789012345678901234567890.CommitPhaseOneInstance(f0123456789012345678901234567890)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, f0123456789012345678901234567890 := range backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr {
		if _, ok := stage.F0123456789012345678901234567890s[f0123456789012345678901234567890]; !ok {
			backRepoF0123456789012345678901234567890.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoF0123456789012345678901234567890.CommitDeleteInstance commits deletion of F0123456789012345678901234567890 to the BackRepo
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CommitDeleteInstance(id uint) (Error error) {

	f0123456789012345678901234567890 := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr[id]

	// f0123456789012345678901234567890 is not staged anymore, remove f0123456789012345678901234567890DB
	f0123456789012345678901234567890DB := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB[id]
	db, _ := backRepoF0123456789012345678901234567890.db.Unscoped()
	_, err := db.Delete(f0123456789012345678901234567890DB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID, f0123456789012345678901234567890)
	delete(backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr, id)
	delete(backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB, id)

	return
}

// BackRepoF0123456789012345678901234567890.CommitPhaseOneInstance commits f0123456789012345678901234567890 staged instances of F0123456789012345678901234567890 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CommitPhaseOneInstance(f0123456789012345678901234567890 *models.F0123456789012345678901234567890) (Error error) {

	// check if the f0123456789012345678901234567890 is not commited yet
	if _, ok := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID[f0123456789012345678901234567890]; ok {
		return
	}

	// initiate f0123456789012345678901234567890
	var f0123456789012345678901234567890DB F0123456789012345678901234567890DB
	f0123456789012345678901234567890DB.CopyBasicFieldsFromF0123456789012345678901234567890(f0123456789012345678901234567890)

	_, err := backRepoF0123456789012345678901234567890.db.Create(&f0123456789012345678901234567890DB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID[f0123456789012345678901234567890] = f0123456789012345678901234567890DB.ID
	backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr[f0123456789012345678901234567890DB.ID] = f0123456789012345678901234567890
	backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB[f0123456789012345678901234567890DB.ID] = &f0123456789012345678901234567890DB

	return
}

// BackRepoF0123456789012345678901234567890.CommitPhaseTwo commits all staged instances of F0123456789012345678901234567890 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, f0123456789012345678901234567890 := range backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr {
		backRepoF0123456789012345678901234567890.CommitPhaseTwoInstance(backRepo, idx, f0123456789012345678901234567890)
	}

	return
}

// BackRepoF0123456789012345678901234567890.CommitPhaseTwoInstance commits {{structname }} of models.F0123456789012345678901234567890 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, f0123456789012345678901234567890 *models.F0123456789012345678901234567890) (Error error) {

	// fetch matching f0123456789012345678901234567890DB
	if f0123456789012345678901234567890DB, ok := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB[idx]; ok {

		f0123456789012345678901234567890DB.CopyBasicFieldsFromF0123456789012345678901234567890(f0123456789012345678901234567890)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoF0123456789012345678901234567890.db.Save(f0123456789012345678901234567890DB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown F0123456789012345678901234567890 intance %s", f0123456789012345678901234567890.Name))
		return err
	}

	return
}

// BackRepoF0123456789012345678901234567890.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CheckoutPhaseOne() (Error error) {

	f0123456789012345678901234567890DBArray := make([]F0123456789012345678901234567890DB, 0)
	_, err := backRepoF0123456789012345678901234567890.db.Find(&f0123456789012345678901234567890DBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	f0123456789012345678901234567890InstancesToBeRemovedFromTheStage := make(map[*models.F0123456789012345678901234567890]any)
	for key, value := range backRepoF0123456789012345678901234567890.stage.F0123456789012345678901234567890s {
		f0123456789012345678901234567890InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, f0123456789012345678901234567890DB := range f0123456789012345678901234567890DBArray {
		backRepoF0123456789012345678901234567890.CheckoutPhaseOneInstance(&f0123456789012345678901234567890DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		f0123456789012345678901234567890, ok := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr[f0123456789012345678901234567890DB.ID]
		if ok {
			delete(f0123456789012345678901234567890InstancesToBeRemovedFromTheStage, f0123456789012345678901234567890)
		}
	}

	// remove from stage and back repo's 3 maps all f0123456789012345678901234567890s that are not in the checkout
	for f0123456789012345678901234567890 := range f0123456789012345678901234567890InstancesToBeRemovedFromTheStage {
		f0123456789012345678901234567890.Unstage(backRepoF0123456789012345678901234567890.GetStage())

		// remove instance from the back repo 3 maps
		f0123456789012345678901234567890ID := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID[f0123456789012345678901234567890]
		delete(backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID, f0123456789012345678901234567890)
		delete(backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB, f0123456789012345678901234567890ID)
		delete(backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr, f0123456789012345678901234567890ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a f0123456789012345678901234567890DB that has been found in the DB, updates the backRepo and stages the
// models version of the f0123456789012345678901234567890DB
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CheckoutPhaseOneInstance(f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) (Error error) {

	f0123456789012345678901234567890, ok := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr[f0123456789012345678901234567890DB.ID]
	if !ok {
		f0123456789012345678901234567890 = new(models.F0123456789012345678901234567890)

		backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr[f0123456789012345678901234567890DB.ID] = f0123456789012345678901234567890
		backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID[f0123456789012345678901234567890] = f0123456789012345678901234567890DB.ID

		// append model store with the new element
		f0123456789012345678901234567890.Name = f0123456789012345678901234567890DB.Name_Data.String
		f0123456789012345678901234567890.Stage(backRepoF0123456789012345678901234567890.GetStage())
	}
	f0123456789012345678901234567890DB.CopyBasicFieldsToF0123456789012345678901234567890(f0123456789012345678901234567890)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	f0123456789012345678901234567890.Stage(backRepoF0123456789012345678901234567890.GetStage())

	// preserve pointer to f0123456789012345678901234567890DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB)[f0123456789012345678901234567890DB hold variable pointers
	f0123456789012345678901234567890DB_Data := *f0123456789012345678901234567890DB
	preservedPtrToF0123456789012345678901234567890 := &f0123456789012345678901234567890DB_Data
	backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB[f0123456789012345678901234567890DB.ID] = preservedPtrToF0123456789012345678901234567890

	return
}

// BackRepoF0123456789012345678901234567890.CheckoutPhaseTwo Checkouts all staged instances of F0123456789012345678901234567890 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, f0123456789012345678901234567890DB := range backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB {
		backRepoF0123456789012345678901234567890.CheckoutPhaseTwoInstance(backRepo, f0123456789012345678901234567890DB)
	}
	return
}

// BackRepoF0123456789012345678901234567890.CheckoutPhaseTwoInstance Checkouts staged instances of F0123456789012345678901234567890 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) (Error error) {

	f0123456789012345678901234567890 := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr[f0123456789012345678901234567890DB.ID]

	f0123456789012345678901234567890DB.DecodePointers(backRepo, f0123456789012345678901234567890)

	return
}

func (f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) DecodePointers(backRepo *BackRepoStruct, f0123456789012345678901234567890 *models.F0123456789012345678901234567890) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitF0123456789012345678901234567890 allows commit of a single f0123456789012345678901234567890 (if already staged)
func (backRepo *BackRepoStruct) CommitF0123456789012345678901234567890(f0123456789012345678901234567890 *models.F0123456789012345678901234567890) {
	backRepo.BackRepoF0123456789012345678901234567890.CommitPhaseOneInstance(f0123456789012345678901234567890)
	if id, ok := backRepo.BackRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID[f0123456789012345678901234567890]; ok {
		backRepo.BackRepoF0123456789012345678901234567890.CommitPhaseTwoInstance(backRepo, id, f0123456789012345678901234567890)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitF0123456789012345678901234567890 allows checkout of a single f0123456789012345678901234567890 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutF0123456789012345678901234567890(f0123456789012345678901234567890 *models.F0123456789012345678901234567890) {
	// check if the f0123456789012345678901234567890 is staged
	if _, ok := backRepo.BackRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID[f0123456789012345678901234567890]; ok {

		if id, ok := backRepo.BackRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890Ptr_F0123456789012345678901234567890DBID[f0123456789012345678901234567890]; ok {
			var f0123456789012345678901234567890DB F0123456789012345678901234567890DB
			f0123456789012345678901234567890DB.ID = id

			if _, err := backRepo.BackRepoF0123456789012345678901234567890.db.First(&f0123456789012345678901234567890DB, id); err != nil {
				log.Fatalln("CheckoutF0123456789012345678901234567890 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoF0123456789012345678901234567890.CheckoutPhaseOneInstance(&f0123456789012345678901234567890DB)
			backRepo.BackRepoF0123456789012345678901234567890.CheckoutPhaseTwoInstance(backRepo, &f0123456789012345678901234567890DB)
		}
	}
}

// CopyBasicFieldsFromF0123456789012345678901234567890
func (f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) CopyBasicFieldsFromF0123456789012345678901234567890(f0123456789012345678901234567890 *models.F0123456789012345678901234567890) {
	// insertion point for fields commit

	f0123456789012345678901234567890DB.Name_Data.String = f0123456789012345678901234567890.Name
	f0123456789012345678901234567890DB.Name_Data.Valid = true

	f0123456789012345678901234567890DB.Date_Data.Time = f0123456789012345678901234567890.Date
	f0123456789012345678901234567890DB.Date_Data.Valid = true
}

// CopyBasicFieldsFromF0123456789012345678901234567890_WOP
func (f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) CopyBasicFieldsFromF0123456789012345678901234567890_WOP(f0123456789012345678901234567890 *models.F0123456789012345678901234567890_WOP) {
	// insertion point for fields commit

	f0123456789012345678901234567890DB.Name_Data.String = f0123456789012345678901234567890.Name
	f0123456789012345678901234567890DB.Name_Data.Valid = true

	f0123456789012345678901234567890DB.Date_Data.Time = f0123456789012345678901234567890.Date
	f0123456789012345678901234567890DB.Date_Data.Valid = true
}

// CopyBasicFieldsFromF0123456789012345678901234567890WOP
func (f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) CopyBasicFieldsFromF0123456789012345678901234567890WOP(f0123456789012345678901234567890 *F0123456789012345678901234567890WOP) {
	// insertion point for fields commit

	f0123456789012345678901234567890DB.Name_Data.String = f0123456789012345678901234567890.Name
	f0123456789012345678901234567890DB.Name_Data.Valid = true

	f0123456789012345678901234567890DB.Date_Data.Time = f0123456789012345678901234567890.Date
	f0123456789012345678901234567890DB.Date_Data.Valid = true
}

// CopyBasicFieldsToF0123456789012345678901234567890
func (f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) CopyBasicFieldsToF0123456789012345678901234567890(f0123456789012345678901234567890 *models.F0123456789012345678901234567890) {
	// insertion point for checkout of basic fields (back repo to stage)
	f0123456789012345678901234567890.Name = f0123456789012345678901234567890DB.Name_Data.String
	f0123456789012345678901234567890.Date = f0123456789012345678901234567890DB.Date_Data.Time
}

// CopyBasicFieldsToF0123456789012345678901234567890_WOP
func (f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) CopyBasicFieldsToF0123456789012345678901234567890_WOP(f0123456789012345678901234567890 *models.F0123456789012345678901234567890_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	f0123456789012345678901234567890.Name = f0123456789012345678901234567890DB.Name_Data.String
	f0123456789012345678901234567890.Date = f0123456789012345678901234567890DB.Date_Data.Time
}

// CopyBasicFieldsToF0123456789012345678901234567890WOP
func (f0123456789012345678901234567890DB *F0123456789012345678901234567890DB) CopyBasicFieldsToF0123456789012345678901234567890WOP(f0123456789012345678901234567890 *F0123456789012345678901234567890WOP) {
	f0123456789012345678901234567890.ID = int(f0123456789012345678901234567890DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	f0123456789012345678901234567890.Name = f0123456789012345678901234567890DB.Name_Data.String
	f0123456789012345678901234567890.Date = f0123456789012345678901234567890DB.Date_Data.Time
}

// Backup generates a json file from a slice of all F0123456789012345678901234567890DB instances in the backrepo
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "F0123456789012345678901234567890DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*F0123456789012345678901234567890DB, 0)
	for _, f0123456789012345678901234567890DB := range backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB {
		forBackup = append(forBackup, f0123456789012345678901234567890DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json F0123456789012345678901234567890 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json F0123456789012345678901234567890 file", err.Error())
	}
}

// Backup generates a json file from a slice of all F0123456789012345678901234567890DB instances in the backrepo
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*F0123456789012345678901234567890DB, 0)
	for _, f0123456789012345678901234567890DB := range backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB {
		forBackup = append(forBackup, f0123456789012345678901234567890DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("F0123456789012345678901234567890")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&F0123456789012345678901234567890_Fields, -1)
	for _, f0123456789012345678901234567890DB := range forBackup {

		var f0123456789012345678901234567890WOP F0123456789012345678901234567890WOP
		f0123456789012345678901234567890DB.CopyBasicFieldsToF0123456789012345678901234567890WOP(&f0123456789012345678901234567890WOP)

		row := sh.AddRow()
		row.WriteStruct(&f0123456789012345678901234567890WOP, -1)
	}
}

// RestoreXL from the "F0123456789012345678901234567890" sheet all F0123456789012345678901234567890DB instances
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoF0123456789012345678901234567890id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["F0123456789012345678901234567890"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoF0123456789012345678901234567890.rowVisitorF0123456789012345678901234567890)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) rowVisitorF0123456789012345678901234567890(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var f0123456789012345678901234567890WOP F0123456789012345678901234567890WOP
		row.ReadStruct(&f0123456789012345678901234567890WOP)

		// add the unmarshalled struct to the stage
		f0123456789012345678901234567890DB := new(F0123456789012345678901234567890DB)
		f0123456789012345678901234567890DB.CopyBasicFieldsFromF0123456789012345678901234567890WOP(&f0123456789012345678901234567890WOP)

		f0123456789012345678901234567890DB_ID_atBackupTime := f0123456789012345678901234567890DB.ID
		f0123456789012345678901234567890DB.ID = 0
		_, err := backRepoF0123456789012345678901234567890.db.Create(f0123456789012345678901234567890DB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB[f0123456789012345678901234567890DB.ID] = f0123456789012345678901234567890DB
		BackRepoF0123456789012345678901234567890id_atBckpTime_newID[f0123456789012345678901234567890DB_ID_atBackupTime] = f0123456789012345678901234567890DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "F0123456789012345678901234567890DB.json" in dirPath that stores an array
// of F0123456789012345678901234567890DB and stores it in the database
// the map BackRepoF0123456789012345678901234567890id_atBckpTime_newID is updated accordingly
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoF0123456789012345678901234567890id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "F0123456789012345678901234567890DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json F0123456789012345678901234567890 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*F0123456789012345678901234567890DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB
	for _, f0123456789012345678901234567890DB := range forRestore {

		f0123456789012345678901234567890DB_ID_atBackupTime := f0123456789012345678901234567890DB.ID
		f0123456789012345678901234567890DB.ID = 0
		_, err := backRepoF0123456789012345678901234567890.db.Create(f0123456789012345678901234567890DB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB[f0123456789012345678901234567890DB.ID] = f0123456789012345678901234567890DB
		BackRepoF0123456789012345678901234567890id_atBckpTime_newID[f0123456789012345678901234567890DB_ID_atBackupTime] = f0123456789012345678901234567890DB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json F0123456789012345678901234567890 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<F0123456789012345678901234567890>id_atBckpTime_newID
// to compute new index
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) RestorePhaseTwo() {

	for _, f0123456789012345678901234567890DB := range backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB {

		// next line of code is to avert unused variable compilation error
		_ = f0123456789012345678901234567890DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoF0123456789012345678901234567890.db.Model(f0123456789012345678901234567890DB)
		_, err := db.Updates(*f0123456789012345678901234567890DB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoF0123456789012345678901234567890.ResetReversePointers commits all staged instances of F0123456789012345678901234567890 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, f0123456789012345678901234567890 := range backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890Ptr {
		backRepoF0123456789012345678901234567890.ResetReversePointersInstance(backRepo, idx, f0123456789012345678901234567890)
	}

	return
}

func (backRepoF0123456789012345678901234567890 *BackRepoF0123456789012345678901234567890Struct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, f0123456789012345678901234567890 *models.F0123456789012345678901234567890) (Error error) {

	// fetch matching f0123456789012345678901234567890DB
	if f0123456789012345678901234567890DB, ok := backRepoF0123456789012345678901234567890.Map_F0123456789012345678901234567890DBID_F0123456789012345678901234567890DB[idx]; ok {
		_ = f0123456789012345678901234567890DB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoF0123456789012345678901234567890id_atBckpTime_newID map[uint]uint
