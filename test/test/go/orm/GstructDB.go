// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/test/go/db"
	"github.com/fullstack-lang/gong/test/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Gstruct_sql sql.NullBool
var dummy_Gstruct_time time.Duration
var dummy_Gstruct_sort sort.Float64Slice

// GstructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gstructAPI
type GstructAPI struct {
	gorm.Model

	models.Gstruct_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GstructPointersEncoding GstructPointersEncoding
}

// GstructPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GstructPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// GstructDB describes a gstruct in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model gstructDB
type GstructDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field gstructDB.Name
	Name_Data sql.NullString

	// Declation for basic field gstructDB.Floatfield
	Floatfield_Data sql.NullFloat64

	// Declation for basic field gstructDB.Floatfield2
	Floatfield2_Data sql.NullFloat64

	// Declation for basic field gstructDB.Intfield
	Intfield_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GstructPointersEncoding
}

// GstructDBs arrays gstructDBs
// swagger:response gstructDBsResponse
type GstructDBs []GstructDB

// GstructDBResponse provides response
// swagger:response gstructDBResponse
type GstructDBResponse struct {
	GstructDB
}

// GstructWOP is a Gstruct without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GstructWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Floatfield float64 `xlsx:"2"`

	Floatfield2 float64 `xlsx:"3"`

	Intfield int `xlsx:"4"`
	// insertion for WOP pointer fields
}

var Gstruct_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Floatfield",
	"Floatfield2",
	"Intfield",
}

type BackRepoGstructStruct struct {
	// stores GstructDB according to their gorm ID
	Map_GstructDBID_GstructDB map[uint]*GstructDB

	// stores GstructDB ID according to Gstruct address
	Map_GstructPtr_GstructDBID map[*models.Gstruct]uint

	// stores Gstruct according to their gorm ID
	Map_GstructDBID_GstructPtr map[uint]*models.Gstruct

	db db.DBInterface

	stage *models.Stage
}

func (backRepoGstruct *BackRepoGstructStruct) GetStage() (stage *models.Stage) {
	stage = backRepoGstruct.stage
	return
}

func (backRepoGstruct *BackRepoGstructStruct) GetDB() db.DBInterface {
	return backRepoGstruct.db
}

// GetGstructDBFromGstructPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGstruct *BackRepoGstructStruct) GetGstructDBFromGstructPtr(gstruct *models.Gstruct) (gstructDB *GstructDB) {
	id := backRepoGstruct.Map_GstructPtr_GstructDBID[gstruct]
	gstructDB = backRepoGstruct.Map_GstructDBID_GstructDB[id]
	return
}

// BackRepoGstruct.CommitPhaseOne commits all staged instances of Gstruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGstruct *BackRepoGstructStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var gstructs []*models.Gstruct
	for gstruct := range stage.Gstructs {
		gstructs = append(gstructs, gstruct)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(gstructs, func(i, j int) bool {
		return stage.GstructMap_Staged_Order[gstructs[i]] < stage.GstructMap_Staged_Order[gstructs[j]]
	})

	for _, gstruct := range gstructs {
		backRepoGstruct.CommitPhaseOneInstance(gstruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gstruct := range backRepoGstruct.Map_GstructDBID_GstructPtr {
		if _, ok := stage.Gstructs[gstruct]; !ok {
			backRepoGstruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGstruct.CommitDeleteInstance commits deletion of Gstruct to the BackRepo
func (backRepoGstruct *BackRepoGstructStruct) CommitDeleteInstance(id uint) (Error error) {

	gstruct := backRepoGstruct.Map_GstructDBID_GstructPtr[id]

	// gstruct is not staged anymore, remove gstructDB
	gstructDB := backRepoGstruct.Map_GstructDBID_GstructDB[id]
	db, _ := backRepoGstruct.db.Unscoped()
	_, err := db.Delete(gstructDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoGstruct.Map_GstructPtr_GstructDBID, gstruct)
	delete(backRepoGstruct.Map_GstructDBID_GstructPtr, id)
	delete(backRepoGstruct.Map_GstructDBID_GstructDB, id)

	return
}

// BackRepoGstruct.CommitPhaseOneInstance commits gstruct staged instances of Gstruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGstruct *BackRepoGstructStruct) CommitPhaseOneInstance(gstruct *models.Gstruct) (Error error) {

	// check if the gstruct is not commited yet
	if _, ok := backRepoGstruct.Map_GstructPtr_GstructDBID[gstruct]; ok {
		return
	}

	// initiate gstruct
	var gstructDB GstructDB
	gstructDB.CopyBasicFieldsFromGstruct(gstruct)

	_, err := backRepoGstruct.db.Create(&gstructDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoGstruct.Map_GstructPtr_GstructDBID[gstruct] = gstructDB.ID
	backRepoGstruct.Map_GstructDBID_GstructPtr[gstructDB.ID] = gstruct
	backRepoGstruct.Map_GstructDBID_GstructDB[gstructDB.ID] = &gstructDB

	return
}

// BackRepoGstruct.CommitPhaseTwo commits all staged instances of Gstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGstruct *BackRepoGstructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gstruct := range backRepoGstruct.Map_GstructDBID_GstructPtr {
		backRepoGstruct.CommitPhaseTwoInstance(backRepo, idx, gstruct)
	}

	return
}

// BackRepoGstruct.CommitPhaseTwoInstance commits {{structname }} of models.Gstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGstruct *BackRepoGstructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gstruct *models.Gstruct) (Error error) {

	// fetch matching gstructDB
	if gstructDB, ok := backRepoGstruct.Map_GstructDBID_GstructDB[idx]; ok {

		gstructDB.CopyBasicFieldsFromGstruct(gstruct)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoGstruct.db.Save(gstructDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Gstruct intance %s", gstruct.Name))
		return err
	}

	return
}

// BackRepoGstruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGstruct *BackRepoGstructStruct) CheckoutPhaseOne() (Error error) {

	gstructDBArray := make([]GstructDB, 0)
	_, err := backRepoGstruct.db.Find(&gstructDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	gstructInstancesToBeRemovedFromTheStage := make(map[*models.Gstruct]any)
	for key, value := range backRepoGstruct.stage.Gstructs {
		gstructInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, gstructDB := range gstructDBArray {
		backRepoGstruct.CheckoutPhaseOneInstance(&gstructDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		gstruct, ok := backRepoGstruct.Map_GstructDBID_GstructPtr[gstructDB.ID]
		if ok {
			delete(gstructInstancesToBeRemovedFromTheStage, gstruct)
		}
	}

	// remove from stage and back repo's 3 maps all gstructs that are not in the checkout
	for gstruct := range gstructInstancesToBeRemovedFromTheStage {
		gstruct.Unstage(backRepoGstruct.GetStage())

		// remove instance from the back repo 3 maps
		gstructID := backRepoGstruct.Map_GstructPtr_GstructDBID[gstruct]
		delete(backRepoGstruct.Map_GstructPtr_GstructDBID, gstruct)
		delete(backRepoGstruct.Map_GstructDBID_GstructDB, gstructID)
		delete(backRepoGstruct.Map_GstructDBID_GstructPtr, gstructID)
	}

	return
}

// CheckoutPhaseOneInstance takes a gstructDB that has been found in the DB, updates the backRepo and stages the
// models version of the gstructDB
func (backRepoGstruct *BackRepoGstructStruct) CheckoutPhaseOneInstance(gstructDB *GstructDB) (Error error) {

	gstruct, ok := backRepoGstruct.Map_GstructDBID_GstructPtr[gstructDB.ID]
	if !ok {
		gstruct = new(models.Gstruct)

		backRepoGstruct.Map_GstructDBID_GstructPtr[gstructDB.ID] = gstruct
		backRepoGstruct.Map_GstructPtr_GstructDBID[gstruct] = gstructDB.ID

		// append model store with the new element
		gstruct.Name = gstructDB.Name_Data.String
		gstruct.Stage(backRepoGstruct.GetStage())
	}
	gstructDB.CopyBasicFieldsToGstruct(gstruct)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	gstruct.Stage(backRepoGstruct.GetStage())

	// preserve pointer to gstructDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GstructDBID_GstructDB)[gstructDB hold variable pointers
	gstructDB_Data := *gstructDB
	preservedPtrToGstruct := &gstructDB_Data
	backRepoGstruct.Map_GstructDBID_GstructDB[gstructDB.ID] = preservedPtrToGstruct

	return
}

// BackRepoGstruct.CheckoutPhaseTwo Checkouts all staged instances of Gstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGstruct *BackRepoGstructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gstructDB := range backRepoGstruct.Map_GstructDBID_GstructDB {
		backRepoGstruct.CheckoutPhaseTwoInstance(backRepo, gstructDB)
	}
	return
}

// BackRepoGstruct.CheckoutPhaseTwoInstance Checkouts staged instances of Gstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGstruct *BackRepoGstructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gstructDB *GstructDB) (Error error) {

	gstruct := backRepoGstruct.Map_GstructDBID_GstructPtr[gstructDB.ID]

	gstructDB.DecodePointers(backRepo, gstruct)

	return
}

func (gstructDB *GstructDB) DecodePointers(backRepo *BackRepoStruct, gstruct *models.Gstruct) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGstruct allows commit of a single gstruct (if already staged)
func (backRepo *BackRepoStruct) CommitGstruct(gstruct *models.Gstruct) {
	backRepo.BackRepoGstruct.CommitPhaseOneInstance(gstruct)
	if id, ok := backRepo.BackRepoGstruct.Map_GstructPtr_GstructDBID[gstruct]; ok {
		backRepo.BackRepoGstruct.CommitPhaseTwoInstance(backRepo, id, gstruct)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGstruct allows checkout of a single gstruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGstruct(gstruct *models.Gstruct) {
	// check if the gstruct is staged
	if _, ok := backRepo.BackRepoGstruct.Map_GstructPtr_GstructDBID[gstruct]; ok {

		if id, ok := backRepo.BackRepoGstruct.Map_GstructPtr_GstructDBID[gstruct]; ok {
			var gstructDB GstructDB
			gstructDB.ID = id

			if _, err := backRepo.BackRepoGstruct.db.First(&gstructDB, id); err != nil {
				log.Fatalln("CheckoutGstruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGstruct.CheckoutPhaseOneInstance(&gstructDB)
			backRepo.BackRepoGstruct.CheckoutPhaseTwoInstance(backRepo, &gstructDB)
		}
	}
}

// CopyBasicFieldsFromGstruct
func (gstructDB *GstructDB) CopyBasicFieldsFromGstruct(gstruct *models.Gstruct) {
	// insertion point for fields commit

	gstructDB.Name_Data.String = gstruct.Name
	gstructDB.Name_Data.Valid = true

	gstructDB.Floatfield_Data.Float64 = gstruct.Floatfield
	gstructDB.Floatfield_Data.Valid = true

	gstructDB.Floatfield2_Data.Float64 = gstruct.Floatfield2
	gstructDB.Floatfield2_Data.Valid = true

	gstructDB.Intfield_Data.Int64 = int64(gstruct.Intfield)
	gstructDB.Intfield_Data.Valid = true
}

// CopyBasicFieldsFromGstruct_WOP
func (gstructDB *GstructDB) CopyBasicFieldsFromGstruct_WOP(gstruct *models.Gstruct_WOP) {
	// insertion point for fields commit

	gstructDB.Name_Data.String = gstruct.Name
	gstructDB.Name_Data.Valid = true

	gstructDB.Floatfield_Data.Float64 = gstruct.Floatfield
	gstructDB.Floatfield_Data.Valid = true

	gstructDB.Floatfield2_Data.Float64 = gstruct.Floatfield2
	gstructDB.Floatfield2_Data.Valid = true

	gstructDB.Intfield_Data.Int64 = int64(gstruct.Intfield)
	gstructDB.Intfield_Data.Valid = true
}

// CopyBasicFieldsFromGstructWOP
func (gstructDB *GstructDB) CopyBasicFieldsFromGstructWOP(gstruct *GstructWOP) {
	// insertion point for fields commit

	gstructDB.Name_Data.String = gstruct.Name
	gstructDB.Name_Data.Valid = true

	gstructDB.Floatfield_Data.Float64 = gstruct.Floatfield
	gstructDB.Floatfield_Data.Valid = true

	gstructDB.Floatfield2_Data.Float64 = gstruct.Floatfield2
	gstructDB.Floatfield2_Data.Valid = true

	gstructDB.Intfield_Data.Int64 = int64(gstruct.Intfield)
	gstructDB.Intfield_Data.Valid = true
}

// CopyBasicFieldsToGstruct
func (gstructDB *GstructDB) CopyBasicFieldsToGstruct(gstruct *models.Gstruct) {
	// insertion point for checkout of basic fields (back repo to stage)
	gstruct.Name = gstructDB.Name_Data.String
	gstruct.Floatfield = gstructDB.Floatfield_Data.Float64
	gstruct.Floatfield2 = gstructDB.Floatfield2_Data.Float64
	gstruct.Intfield = int(gstructDB.Intfield_Data.Int64)
}

// CopyBasicFieldsToGstruct_WOP
func (gstructDB *GstructDB) CopyBasicFieldsToGstruct_WOP(gstruct *models.Gstruct_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	gstruct.Name = gstructDB.Name_Data.String
	gstruct.Floatfield = gstructDB.Floatfield_Data.Float64
	gstruct.Floatfield2 = gstructDB.Floatfield2_Data.Float64
	gstruct.Intfield = int(gstructDB.Intfield_Data.Int64)
}

// CopyBasicFieldsToGstructWOP
func (gstructDB *GstructDB) CopyBasicFieldsToGstructWOP(gstruct *GstructWOP) {
	gstruct.ID = int(gstructDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	gstruct.Name = gstructDB.Name_Data.String
	gstruct.Floatfield = gstructDB.Floatfield_Data.Float64
	gstruct.Floatfield2 = gstructDB.Floatfield2_Data.Float64
	gstruct.Intfield = int(gstructDB.Intfield_Data.Int64)
}

// Backup generates a json file from a slice of all GstructDB instances in the backrepo
func (backRepoGstruct *BackRepoGstructStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GstructDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GstructDB, 0)
	for _, gstructDB := range backRepoGstruct.Map_GstructDBID_GstructDB {
		forBackup = append(forBackup, gstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Gstruct ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Gstruct file", err.Error())
	}
}

// Backup generates a json file from a slice of all GstructDB instances in the backrepo
func (backRepoGstruct *BackRepoGstructStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GstructDB, 0)
	for _, gstructDB := range backRepoGstruct.Map_GstructDBID_GstructDB {
		forBackup = append(forBackup, gstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Gstruct")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Gstruct_Fields, -1)
	for _, gstructDB := range forBackup {

		var gstructWOP GstructWOP
		gstructDB.CopyBasicFieldsToGstructWOP(&gstructWOP)

		row := sh.AddRow()
		row.WriteStruct(&gstructWOP, -1)
	}
}

// RestoreXL from the "Gstruct" sheet all GstructDB instances
func (backRepoGstruct *BackRepoGstructStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGstructid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Gstruct"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGstruct.rowVisitorGstruct)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGstruct *BackRepoGstructStruct) rowVisitorGstruct(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var gstructWOP GstructWOP
		row.ReadStruct(&gstructWOP)

		// add the unmarshalled struct to the stage
		gstructDB := new(GstructDB)
		gstructDB.CopyBasicFieldsFromGstructWOP(&gstructWOP)

		gstructDB_ID_atBackupTime := gstructDB.ID
		gstructDB.ID = 0
		_, err := backRepoGstruct.db.Create(gstructDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGstruct.Map_GstructDBID_GstructDB[gstructDB.ID] = gstructDB
		BackRepoGstructid_atBckpTime_newID[gstructDB_ID_atBackupTime] = gstructDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GstructDB.json" in dirPath that stores an array
// of GstructDB and stores it in the database
// the map BackRepoGstructid_atBckpTime_newID is updated accordingly
func (backRepoGstruct *BackRepoGstructStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGstructid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GstructDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Gstruct file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GstructDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GstructDBID_GstructDB
	for _, gstructDB := range forRestore {

		gstructDB_ID_atBackupTime := gstructDB.ID
		gstructDB.ID = 0
		_, err := backRepoGstruct.db.Create(gstructDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGstruct.Map_GstructDBID_GstructDB[gstructDB.ID] = gstructDB
		BackRepoGstructid_atBckpTime_newID[gstructDB_ID_atBackupTime] = gstructDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Gstruct file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Gstruct>id_atBckpTime_newID
// to compute new index
func (backRepoGstruct *BackRepoGstructStruct) RestorePhaseTwo() {

	for _, gstructDB := range backRepoGstruct.Map_GstructDBID_GstructDB {

		// next line of code is to avert unused variable compilation error
		_ = gstructDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoGstruct.db.Model(gstructDB)
		_, err := db.Updates(*gstructDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoGstruct.ResetReversePointers commits all staged instances of Gstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGstruct *BackRepoGstructStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, gstruct := range backRepoGstruct.Map_GstructDBID_GstructPtr {
		backRepoGstruct.ResetReversePointersInstance(backRepo, idx, gstruct)
	}

	return
}

func (backRepoGstruct *BackRepoGstructStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, gstruct *models.Gstruct) (Error error) {

	// fetch matching gstructDB
	if gstructDB, ok := backRepoGstruct.Map_GstructDBID_GstructDB[idx]; ok {
		_ = gstructDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGstructid_atBckpTime_newID map[uint]uint
