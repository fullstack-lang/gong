// generated by ModelGongEnumFileTemplate
package models

// insertion point of enum utility functions
// Utility function for AEnumType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (aenumtype AEnumType) ToString() (res string) {

	// migration of former implementation of enum
	switch aenumtype {
	// insertion code per enum code
	case ENUM_VAL1:
		res = "ENUM_VAL1_NOT_THE_SAME"
	case ENUM_VAL2:
		res = "ENUM_VAL2"
	}
	return
}

func (aenumtype *AEnumType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "ENUM_VAL1_NOT_THE_SAME":
		*aenumtype = ENUM_VAL1
	case "ENUM_VAL2":
		*aenumtype = ENUM_VAL2
	default:
		return errUnkownEnum
	}
	return
}

func (aenumtype *AEnumType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "ENUM_VAL1":
		*aenumtype = ENUM_VAL1
	case "ENUM_VAL2":
		*aenumtype = ENUM_VAL2
	default:
		return errUnkownEnum
	}
	return
}

func (aenumtype *AEnumType) ToCodeString() (res string) {

	switch *aenumtype {
	// insertion code per enum code
	case ENUM_VAL1:
		res = "ENUM_VAL1"
	case ENUM_VAL2:
		res = "ENUM_VAL2"
	}
	return
}

// Utility function for BEnumType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (benumtype BEnumType) ToString() (res string) {

	// migration of former implementation of enum
	switch benumtype {
	// insertion code per enum code
	case BENUM_VAL1:
		res = "BENUM_VAL1_NOT_THE_SAME"
	case BENUM_VAL2:
		res = "BENUM_VAL2"
	}
	return
}

func (benumtype *BEnumType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "BENUM_VAL1_NOT_THE_SAME":
		*benumtype = BENUM_VAL1
	case "BENUM_VAL2":
		*benumtype = BENUM_VAL2
	default:
		return errUnkownEnum
	}
	return
}

func (benumtype *BEnumType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "BENUM_VAL1":
		*benumtype = BENUM_VAL1
	case "BENUM_VAL2":
		*benumtype = BENUM_VAL2
	default:
		return errUnkownEnum
	}
	return
}

func (benumtype *BEnumType) ToCodeString() (res string) {

	switch *benumtype {
	// insertion code per enum code
	case BENUM_VAL1:
		res = "BENUM_VAL1"
	case BENUM_VAL2:
		res = "BENUM_VAL2"
	}
	return
}

// Utility function for CEnumTypeInt
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (cenumtypeint CEnumTypeInt) ToInt() (res int) {

	// migration of former implementation of enum
	switch cenumtypeint {
	// insertion code per enum code
	case CENUM_VAL1:
		res = 0
	case CENUM_VAL2:
		res = 1
	}
	return
}

func (cenumtypeint *CEnumTypeInt) FromInt(input int) (err error) {

	switch input {
	// insertion code per enum code
	case 0:
		*cenumtypeint = CENUM_VAL1
	case 1:
		*cenumtypeint = CENUM_VAL2
	default:
		return errUnkownEnum
	}
	return
}

func (cenumtypeint *CEnumTypeInt) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "CENUM_VAL1":
		*cenumtypeint = CENUM_VAL1
	case "CENUM_VAL2":
		*cenumtypeint = CENUM_VAL2
	default:
		return errUnkownEnum
	}
	return
}

func (cenumtypeint *CEnumTypeInt) ToCodeString() (res string) {

	switch *cenumtypeint {
	// insertion code per enum code
	case CENUM_VAL1:
		res = "CENUM_VAL1"
	case CENUM_VAL2:
		res = "CENUM_VAL2"
	}
	return
}

// Utility function for GONG__ExpressionType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (gong__expressiontype GONG__ExpressionType) ToString() (res string) {

	// migration of former implementation of enum
	switch gong__expressiontype {
	// insertion code per enum code
	case GONG__STRUCT_INSTANCE:
		res = "STRUCT_INSTANCE"
	case GONG__FIELD_OR_CONST_VALUE:
		res = "FIELD_OR_CONST_VALUE"
	case GONG__FIELD_VALUE:
		res = "FIELD_VALUE"
	case GONG__ENUM_CAST_INT:
		res = "ENUM_CAST_INT"
	case GONG__ENUM_CAST_STRING:
		res = "ENUM_CAST_STRING"
	case GONG__IDENTIFIER_CONST:
		res = "IDENTIFIER_CONST"
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "STRUCT_INSTANCE":
		*gong__expressiontype = GONG__STRUCT_INSTANCE
	case "FIELD_OR_CONST_VALUE":
		*gong__expressiontype = GONG__FIELD_OR_CONST_VALUE
	case "FIELD_VALUE":
		*gong__expressiontype = GONG__FIELD_VALUE
	case "ENUM_CAST_INT":
		*gong__expressiontype = GONG__ENUM_CAST_INT
	case "ENUM_CAST_STRING":
		*gong__expressiontype = GONG__ENUM_CAST_STRING
	case "IDENTIFIER_CONST":
		*gong__expressiontype = GONG__IDENTIFIER_CONST
	default:
		return errUnkownEnum
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "GONG__STRUCT_INSTANCE":
		*gong__expressiontype = GONG__STRUCT_INSTANCE
	case "GONG__FIELD_OR_CONST_VALUE":
		*gong__expressiontype = GONG__FIELD_OR_CONST_VALUE
	case "GONG__FIELD_VALUE":
		*gong__expressiontype = GONG__FIELD_VALUE
	case "GONG__ENUM_CAST_INT":
		*gong__expressiontype = GONG__ENUM_CAST_INT
	case "GONG__ENUM_CAST_STRING":
		*gong__expressiontype = GONG__ENUM_CAST_STRING
	case "GONG__IDENTIFIER_CONST":
		*gong__expressiontype = GONG__IDENTIFIER_CONST
	default:
		return errUnkownEnum
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) ToCodeString() (res string) {

	switch *gong__expressiontype {
	// insertion code per enum code
	case GONG__STRUCT_INSTANCE:
		res = "GONG__STRUCT_INSTANCE"
	case GONG__FIELD_OR_CONST_VALUE:
		res = "GONG__FIELD_OR_CONST_VALUE"
	case GONG__FIELD_VALUE:
		res = "GONG__FIELD_VALUE"
	case GONG__ENUM_CAST_INT:
		res = "GONG__ENUM_CAST_INT"
	case GONG__ENUM_CAST_STRING:
		res = "GONG__ENUM_CAST_STRING"
	case GONG__IDENTIFIER_CONST:
		res = "GONG__IDENTIFIER_CONST"
	}
	return
}

// Last line of the template
