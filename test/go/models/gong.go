// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Astructs           map[*Astruct]any
	Astructs_mapString map[string]*Astruct

	AstructBstruct2Uses           map[*AstructBstruct2Use]any
	AstructBstruct2Uses_mapString map[string]*AstructBstruct2Use

	AstructBstructUses           map[*AstructBstructUse]any
	AstructBstructUses_mapString map[string]*AstructBstructUse

	Bstructs           map[*Bstruct]any
	Bstructs_mapString map[string]*Bstruct

	Dstructs           map[*Dstruct]any
	Dstructs_mapString map[string]*Dstruct

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitAstruct(astruct *Astruct)
	CheckoutAstruct(astruct *Astruct)
	CommitAstructBstruct2Use(astructbstruct2use *AstructBstruct2Use)
	CheckoutAstructBstruct2Use(astructbstruct2use *AstructBstruct2Use)
	CommitAstructBstructUse(astructbstructuse *AstructBstructUse)
	CheckoutAstructBstructUse(astructbstructuse *AstructBstructUse)
	CommitBstruct(bstruct *Bstruct)
	CheckoutBstruct(bstruct *Bstruct)
	CommitDstruct(dstruct *Dstruct)
	CheckoutDstruct(dstruct *Dstruct)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Astructs:           make(map[*Astruct]any),
	Astructs_mapString: make(map[string]*Astruct),

	AstructBstruct2Uses:           make(map[*AstructBstruct2Use]any),
	AstructBstruct2Uses_mapString: make(map[string]*AstructBstruct2Use),

	AstructBstructUses:           make(map[*AstructBstructUse]any),
	AstructBstructUses_mapString: make(map[string]*AstructBstructUse),

	Bstructs:           make(map[*Bstruct]any),
	Bstructs_mapString: make(map[string]*Bstruct),

	Dstructs:           make(map[*Dstruct]any),
	Dstructs_mapString: make(map[string]*Dstruct),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Astruct"] = len(stage.Astructs)
	stage.Map_GongStructName_InstancesNb["AstructBstruct2Use"] = len(stage.AstructBstruct2Uses)
	stage.Map_GongStructName_InstancesNb["AstructBstructUse"] = len(stage.AstructBstructUses)
	stage.Map_GongStructName_InstancesNb["Bstruct"] = len(stage.Bstructs)
	stage.Map_GongStructName_InstancesNb["Dstruct"] = len(stage.Dstructs)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Astruct"] = len(stage.Astructs)
	stage.Map_GongStructName_InstancesNb["AstructBstruct2Use"] = len(stage.AstructBstruct2Uses)
	stage.Map_GongStructName_InstancesNb["AstructBstructUse"] = len(stage.AstructBstructUses)
	stage.Map_GongStructName_InstancesNb["Bstruct"] = len(stage.Bstructs)
	stage.Map_GongStructName_InstancesNb["Dstruct"] = len(stage.Dstructs)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts astruct to the model stage
func (astruct *Astruct) Stage() *Astruct {
	Stage.Astructs[astruct] = __member
	Stage.Astructs_mapString[astruct.Name] = astruct

	return astruct
}

// Unstage removes astruct off the model stage
func (astruct *Astruct) Unstage() *Astruct {
	delete(Stage.Astructs, astruct)
	delete(Stage.Astructs_mapString, astruct.Name)
	return astruct
}

// commit astruct to the back repo (if it is already staged)
func (astruct *Astruct) Commit() *Astruct {
	if _, ok := Stage.Astructs[astruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAstruct(astruct)
		}
	}
	return astruct
}

// Checkout astruct to the back repo (if it is already staged)
func (astruct *Astruct) Checkout() *Astruct {
	if _, ok := Stage.Astructs[astruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAstruct(astruct)
		}
	}
	return astruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of astruct to the model stage
func (astruct *Astruct) StageCopy() *Astruct {
	_astruct := new(Astruct)
	*_astruct = *astruct
	_astruct.Stage()
	return _astruct
}

// StageAndCommit appends astruct to the model stage and commit to the orm repo
func (astruct *Astruct) StageAndCommit() *Astruct {
	astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
	return astruct
}

// DeleteStageAndCommit appends astruct to the model stage and commit to the orm repo
func (astruct *Astruct) DeleteStageAndCommit() *Astruct {
	astruct.Unstage()
	DeleteORMAstruct(astruct)
	return astruct
}

// StageCopyAndCommit appends a copy of astruct to the model stage and commit to the orm repo
func (astruct *Astruct) StageCopyAndCommit() *Astruct {
	_astruct := new(Astruct)
	*_astruct = *astruct
	_astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
	return _astruct
}

// CreateORMAstruct enables dynamic staging of a Astruct instance
func CreateORMAstruct(astruct *Astruct) {
	astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
}

// DeleteORMAstruct enables dynamic staging of a Astruct instance
func DeleteORMAstruct(astruct *Astruct) {
	astruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAstruct(astruct)
	}
}

// for satisfaction of GongStruct interface
func (astruct *Astruct) GetName() (res string) {
	return astruct.Name
}

// Stage puts astructbstruct2use to the model stage
func (astructbstruct2use *AstructBstruct2Use) Stage() *AstructBstruct2Use {
	Stage.AstructBstruct2Uses[astructbstruct2use] = __member
	Stage.AstructBstruct2Uses_mapString[astructbstruct2use.Name] = astructbstruct2use

	return astructbstruct2use
}

// Unstage removes astructbstruct2use off the model stage
func (astructbstruct2use *AstructBstruct2Use) Unstage() *AstructBstruct2Use {
	delete(Stage.AstructBstruct2Uses, astructbstruct2use)
	delete(Stage.AstructBstruct2Uses_mapString, astructbstruct2use.Name)
	return astructbstruct2use
}

// commit astructbstruct2use to the back repo (if it is already staged)
func (astructbstruct2use *AstructBstruct2Use) Commit() *AstructBstruct2Use {
	if _, ok := Stage.AstructBstruct2Uses[astructbstruct2use]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAstructBstruct2Use(astructbstruct2use)
		}
	}
	return astructbstruct2use
}

// Checkout astructbstruct2use to the back repo (if it is already staged)
func (astructbstruct2use *AstructBstruct2Use) Checkout() *AstructBstruct2Use {
	if _, ok := Stage.AstructBstruct2Uses[astructbstruct2use]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAstructBstruct2Use(astructbstruct2use)
		}
	}
	return astructbstruct2use
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of astructbstruct2use to the model stage
func (astructbstruct2use *AstructBstruct2Use) StageCopy() *AstructBstruct2Use {
	_astructbstruct2use := new(AstructBstruct2Use)
	*_astructbstruct2use = *astructbstruct2use
	_astructbstruct2use.Stage()
	return _astructbstruct2use
}

// StageAndCommit appends astructbstruct2use to the model stage and commit to the orm repo
func (astructbstruct2use *AstructBstruct2Use) StageAndCommit() *AstructBstruct2Use {
	astructbstruct2use.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstruct2Use(astructbstruct2use)
	}
	return astructbstruct2use
}

// DeleteStageAndCommit appends astructbstruct2use to the model stage and commit to the orm repo
func (astructbstruct2use *AstructBstruct2Use) DeleteStageAndCommit() *AstructBstruct2Use {
	astructbstruct2use.Unstage()
	DeleteORMAstructBstruct2Use(astructbstruct2use)
	return astructbstruct2use
}

// StageCopyAndCommit appends a copy of astructbstruct2use to the model stage and commit to the orm repo
func (astructbstruct2use *AstructBstruct2Use) StageCopyAndCommit() *AstructBstruct2Use {
	_astructbstruct2use := new(AstructBstruct2Use)
	*_astructbstruct2use = *astructbstruct2use
	_astructbstruct2use.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstruct2Use(astructbstruct2use)
	}
	return _astructbstruct2use
}

// CreateORMAstructBstruct2Use enables dynamic staging of a AstructBstruct2Use instance
func CreateORMAstructBstruct2Use(astructbstruct2use *AstructBstruct2Use) {
	astructbstruct2use.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstruct2Use(astructbstruct2use)
	}
}

// DeleteORMAstructBstruct2Use enables dynamic staging of a AstructBstruct2Use instance
func DeleteORMAstructBstruct2Use(astructbstruct2use *AstructBstruct2Use) {
	astructbstruct2use.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAstructBstruct2Use(astructbstruct2use)
	}
}

// for satisfaction of GongStruct interface
func (astructbstruct2use *AstructBstruct2Use) GetName() (res string) {
	return astructbstruct2use.Name
}

// Stage puts astructbstructuse to the model stage
func (astructbstructuse *AstructBstructUse) Stage() *AstructBstructUse {
	Stage.AstructBstructUses[astructbstructuse] = __member
	Stage.AstructBstructUses_mapString[astructbstructuse.Name] = astructbstructuse

	return astructbstructuse
}

// Unstage removes astructbstructuse off the model stage
func (astructbstructuse *AstructBstructUse) Unstage() *AstructBstructUse {
	delete(Stage.AstructBstructUses, astructbstructuse)
	delete(Stage.AstructBstructUses_mapString, astructbstructuse.Name)
	return astructbstructuse
}

// commit astructbstructuse to the back repo (if it is already staged)
func (astructbstructuse *AstructBstructUse) Commit() *AstructBstructUse {
	if _, ok := Stage.AstructBstructUses[astructbstructuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAstructBstructUse(astructbstructuse)
		}
	}
	return astructbstructuse
}

// Checkout astructbstructuse to the back repo (if it is already staged)
func (astructbstructuse *AstructBstructUse) Checkout() *AstructBstructUse {
	if _, ok := Stage.AstructBstructUses[astructbstructuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAstructBstructUse(astructbstructuse)
		}
	}
	return astructbstructuse
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of astructbstructuse to the model stage
func (astructbstructuse *AstructBstructUse) StageCopy() *AstructBstructUse {
	_astructbstructuse := new(AstructBstructUse)
	*_astructbstructuse = *astructbstructuse
	_astructbstructuse.Stage()
	return _astructbstructuse
}

// StageAndCommit appends astructbstructuse to the model stage and commit to the orm repo
func (astructbstructuse *AstructBstructUse) StageAndCommit() *AstructBstructUse {
	astructbstructuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstructUse(astructbstructuse)
	}
	return astructbstructuse
}

// DeleteStageAndCommit appends astructbstructuse to the model stage and commit to the orm repo
func (astructbstructuse *AstructBstructUse) DeleteStageAndCommit() *AstructBstructUse {
	astructbstructuse.Unstage()
	DeleteORMAstructBstructUse(astructbstructuse)
	return astructbstructuse
}

// StageCopyAndCommit appends a copy of astructbstructuse to the model stage and commit to the orm repo
func (astructbstructuse *AstructBstructUse) StageCopyAndCommit() *AstructBstructUse {
	_astructbstructuse := new(AstructBstructUse)
	*_astructbstructuse = *astructbstructuse
	_astructbstructuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstructUse(astructbstructuse)
	}
	return _astructbstructuse
}

// CreateORMAstructBstructUse enables dynamic staging of a AstructBstructUse instance
func CreateORMAstructBstructUse(astructbstructuse *AstructBstructUse) {
	astructbstructuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstructUse(astructbstructuse)
	}
}

// DeleteORMAstructBstructUse enables dynamic staging of a AstructBstructUse instance
func DeleteORMAstructBstructUse(astructbstructuse *AstructBstructUse) {
	astructbstructuse.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAstructBstructUse(astructbstructuse)
	}
}

// for satisfaction of GongStruct interface
func (astructbstructuse *AstructBstructUse) GetName() (res string) {
	return astructbstructuse.Name
}

// Stage puts bstruct to the model stage
func (bstruct *Bstruct) Stage() *Bstruct {
	Stage.Bstructs[bstruct] = __member
	Stage.Bstructs_mapString[bstruct.Name] = bstruct

	return bstruct
}

// Unstage removes bstruct off the model stage
func (bstruct *Bstruct) Unstage() *Bstruct {
	delete(Stage.Bstructs, bstruct)
	delete(Stage.Bstructs_mapString, bstruct.Name)
	return bstruct
}

// commit bstruct to the back repo (if it is already staged)
func (bstruct *Bstruct) Commit() *Bstruct {
	if _, ok := Stage.Bstructs[bstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitBstruct(bstruct)
		}
	}
	return bstruct
}

// Checkout bstruct to the back repo (if it is already staged)
func (bstruct *Bstruct) Checkout() *Bstruct {
	if _, ok := Stage.Bstructs[bstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutBstruct(bstruct)
		}
	}
	return bstruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of bstruct to the model stage
func (bstruct *Bstruct) StageCopy() *Bstruct {
	_bstruct := new(Bstruct)
	*_bstruct = *bstruct
	_bstruct.Stage()
	return _bstruct
}

// StageAndCommit appends bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) StageAndCommit() *Bstruct {
	bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
	return bstruct
}

// DeleteStageAndCommit appends bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) DeleteStageAndCommit() *Bstruct {
	bstruct.Unstage()
	DeleteORMBstruct(bstruct)
	return bstruct
}

// StageCopyAndCommit appends a copy of bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) StageCopyAndCommit() *Bstruct {
	_bstruct := new(Bstruct)
	*_bstruct = *bstruct
	_bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
	return _bstruct
}

// CreateORMBstruct enables dynamic staging of a Bstruct instance
func CreateORMBstruct(bstruct *Bstruct) {
	bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
}

// DeleteORMBstruct enables dynamic staging of a Bstruct instance
func DeleteORMBstruct(bstruct *Bstruct) {
	bstruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMBstruct(bstruct)
	}
}

// for satisfaction of GongStruct interface
func (bstruct *Bstruct) GetName() (res string) {
	return bstruct.Name
}

// Stage puts dstruct to the model stage
func (dstruct *Dstruct) Stage() *Dstruct {
	Stage.Dstructs[dstruct] = __member
	Stage.Dstructs_mapString[dstruct.Name] = dstruct

	return dstruct
}

// Unstage removes dstruct off the model stage
func (dstruct *Dstruct) Unstage() *Dstruct {
	delete(Stage.Dstructs, dstruct)
	delete(Stage.Dstructs_mapString, dstruct.Name)
	return dstruct
}

// commit dstruct to the back repo (if it is already staged)
func (dstruct *Dstruct) Commit() *Dstruct {
	if _, ok := Stage.Dstructs[dstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDstruct(dstruct)
		}
	}
	return dstruct
}

// Checkout dstruct to the back repo (if it is already staged)
func (dstruct *Dstruct) Checkout() *Dstruct {
	if _, ok := Stage.Dstructs[dstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDstruct(dstruct)
		}
	}
	return dstruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of dstruct to the model stage
func (dstruct *Dstruct) StageCopy() *Dstruct {
	_dstruct := new(Dstruct)
	*_dstruct = *dstruct
	_dstruct.Stage()
	return _dstruct
}

// StageAndCommit appends dstruct to the model stage and commit to the orm repo
func (dstruct *Dstruct) StageAndCommit() *Dstruct {
	dstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDstruct(dstruct)
	}
	return dstruct
}

// DeleteStageAndCommit appends dstruct to the model stage and commit to the orm repo
func (dstruct *Dstruct) DeleteStageAndCommit() *Dstruct {
	dstruct.Unstage()
	DeleteORMDstruct(dstruct)
	return dstruct
}

// StageCopyAndCommit appends a copy of dstruct to the model stage and commit to the orm repo
func (dstruct *Dstruct) StageCopyAndCommit() *Dstruct {
	_dstruct := new(Dstruct)
	*_dstruct = *dstruct
	_dstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDstruct(dstruct)
	}
	return _dstruct
}

// CreateORMDstruct enables dynamic staging of a Dstruct instance
func CreateORMDstruct(dstruct *Dstruct) {
	dstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDstruct(dstruct)
	}
}

// DeleteORMDstruct enables dynamic staging of a Dstruct instance
func DeleteORMDstruct(dstruct *Dstruct) {
	dstruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDstruct(dstruct)
	}
}

// for satisfaction of GongStruct interface
func (dstruct *Dstruct) GetName() (res string) {
	return dstruct.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMAstruct(Astruct *Astruct)
	CreateORMAstructBstruct2Use(AstructBstruct2Use *AstructBstruct2Use)
	CreateORMAstructBstructUse(AstructBstructUse *AstructBstructUse)
	CreateORMBstruct(Bstruct *Bstruct)
	CreateORMDstruct(Dstruct *Dstruct)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMAstruct(Astruct *Astruct)
	DeleteORMAstructBstruct2Use(AstructBstruct2Use *AstructBstruct2Use)
	DeleteORMAstructBstructUse(AstructBstructUse *AstructBstructUse)
	DeleteORMBstruct(Bstruct *Bstruct)
	DeleteORMDstruct(Dstruct *Dstruct)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Astructs = make(map[*Astruct]any)
	stage.Astructs_mapString = make(map[string]*Astruct)

	stage.AstructBstruct2Uses = make(map[*AstructBstruct2Use]any)
	stage.AstructBstruct2Uses_mapString = make(map[string]*AstructBstruct2Use)

	stage.AstructBstructUses = make(map[*AstructBstructUse]any)
	stage.AstructBstructUses_mapString = make(map[string]*AstructBstructUse)

	stage.Bstructs = make(map[*Bstruct]any)
	stage.Bstructs_mapString = make(map[string]*Bstruct)

	stage.Dstructs = make(map[*Dstruct]any)
	stage.Dstructs_mapString = make(map[string]*Dstruct)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Astructs = nil
	stage.Astructs_mapString = nil

	stage.AstructBstruct2Uses = nil
	stage.AstructBstruct2Uses_mapString = nil

	stage.AstructBstructUses = nil
	stage.AstructBstructUses_mapString = nil

	stage.Bstructs = nil
	stage.Bstructs_mapString = nil

	stage.Dstructs = nil
	stage.Dstructs_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const StringEnumInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Astruct_Identifiers := make(map[*Astruct]string)
	_ = map_Astruct_Identifiers

	astructOrdered := []*Astruct{}
	for astruct := range stage.Astructs {
		astructOrdered = append(astructOrdered, astruct)
	}
	sort.Slice(astructOrdered[:], func(i, j int) bool {
		return astructOrdered[i].Name < astructOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Astruct"
	for idx, astruct := range astructOrdered {

		id = generatesIdentifier("Astruct", idx, astruct.Name)
		map_Astruct_Identifiers[astruct] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Astruct")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", astruct.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Astruct %s values setup", astruct.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(astruct.Name))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Date")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", astruct.Date.String())
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Booleanfield")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", astruct.Booleanfield))
		initializerStatements += setValueField

		if astruct.Aenum != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Aenum")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+astruct.Aenum.ToCodeString())
			initializerStatements += setValueField
		}

		if astruct.Aenum_2 != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Aenum_2")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+astruct.Aenum_2.ToCodeString())
			initializerStatements += setValueField
		}

		if astruct.Benum != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Benum")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+astruct.Benum.ToCodeString())
			initializerStatements += setValueField
		}

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CEnum")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+astruct.CEnum.ToCodeString())
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(astruct.CName))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CFloatfield")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", astruct.CFloatfield))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Floatfield")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", astruct.Floatfield))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Intfield")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", astruct.Intfield))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Anotherbooleanfield")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", astruct.Anotherbooleanfield))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Duration1")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", astruct.Duration1))
		initializerStatements += setValueField

	}

	map_AstructBstruct2Use_Identifiers := make(map[*AstructBstruct2Use]string)
	_ = map_AstructBstruct2Use_Identifiers

	astructbstruct2useOrdered := []*AstructBstruct2Use{}
	for astructbstruct2use := range stage.AstructBstruct2Uses {
		astructbstruct2useOrdered = append(astructbstruct2useOrdered, astructbstruct2use)
	}
	sort.Slice(astructbstruct2useOrdered[:], func(i, j int) bool {
		return astructbstruct2useOrdered[i].Name < astructbstruct2useOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of AstructBstruct2Use"
	for idx, astructbstruct2use := range astructbstruct2useOrdered {

		id = generatesIdentifier("AstructBstruct2Use", idx, astructbstruct2use.Name)
		map_AstructBstruct2Use_Identifiers[astructbstruct2use] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "AstructBstruct2Use")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", astructbstruct2use.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// AstructBstruct2Use %s values setup", astructbstruct2use.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(astructbstruct2use.Name))
		initializerStatements += setValueField

	}

	map_AstructBstructUse_Identifiers := make(map[*AstructBstructUse]string)
	_ = map_AstructBstructUse_Identifiers

	astructbstructuseOrdered := []*AstructBstructUse{}
	for astructbstructuse := range stage.AstructBstructUses {
		astructbstructuseOrdered = append(astructbstructuseOrdered, astructbstructuse)
	}
	sort.Slice(astructbstructuseOrdered[:], func(i, j int) bool {
		return astructbstructuseOrdered[i].Name < astructbstructuseOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of AstructBstructUse"
	for idx, astructbstructuse := range astructbstructuseOrdered {

		id = generatesIdentifier("AstructBstructUse", idx, astructbstructuse.Name)
		map_AstructBstructUse_Identifiers[astructbstructuse] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "AstructBstructUse")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", astructbstructuse.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// AstructBstructUse %s values setup", astructbstructuse.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(astructbstructuse.Name))
		initializerStatements += setValueField

	}

	map_Bstruct_Identifiers := make(map[*Bstruct]string)
	_ = map_Bstruct_Identifiers

	bstructOrdered := []*Bstruct{}
	for bstruct := range stage.Bstructs {
		bstructOrdered = append(bstructOrdered, bstruct)
	}
	sort.Slice(bstructOrdered[:], func(i, j int) bool {
		return bstructOrdered[i].Name < bstructOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Bstruct"
	for idx, bstruct := range bstructOrdered {

		id = generatesIdentifier("Bstruct", idx, bstruct.Name)
		map_Bstruct_Identifiers[bstruct] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Bstruct")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", bstruct.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Bstruct %s values setup", bstruct.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(bstruct.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Floatfield")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", bstruct.Floatfield))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Floatfield2")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", bstruct.Floatfield2))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Intfield")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", bstruct.Intfield))
		initializerStatements += setValueField

	}

	map_Dstruct_Identifiers := make(map[*Dstruct]string)
	_ = map_Dstruct_Identifiers

	dstructOrdered := []*Dstruct{}
	for dstruct := range stage.Dstructs {
		dstructOrdered = append(dstructOrdered, dstruct)
	}
	sort.Slice(dstructOrdered[:], func(i, j int) bool {
		return dstructOrdered[i].Name < dstructOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Dstruct"
	for idx, dstruct := range dstructOrdered {

		id = generatesIdentifier("Dstruct", idx, dstruct.Name)
		map_Dstruct_Identifiers[dstruct] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Dstruct")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", dstruct.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Dstruct %s values setup", dstruct.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(dstruct.Name))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, astruct := range astructOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Astruct", idx, astruct.Name)
		map_Astruct_Identifiers[astruct] = id

		// Initialisation of values
		if astruct.Bstruct != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Bstruct")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bstruct_Identifiers[astruct.Bstruct])
			pointersInitializesStatements += setPointerField
		}

		if astruct.Associationtob != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Associationtob")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bstruct_Identifiers[astruct.Associationtob])
			pointersInitializesStatements += setPointerField
		}

		if astruct.Anotherassociationtob_2 != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Anotherassociationtob_2")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bstruct_Identifiers[astruct.Anotherassociationtob_2])
			pointersInitializesStatements += setPointerField
		}

		for _, _bstruct := range astruct.Anarrayofb {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Anarrayofb")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bstruct_Identifiers[_bstruct])
			pointersInitializesStatements += setPointerField
		}

		for _, _bstruct := range astruct.Anotherarrayofb {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Anotherarrayofb")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bstruct_Identifiers[_bstruct])
			pointersInitializesStatements += setPointerField
		}

		for _, _astruct := range astruct.Anarrayofa {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Anarrayofa")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Astruct_Identifiers[_astruct])
			pointersInitializesStatements += setPointerField
		}

		for _, _astructbstructuse := range astruct.AnarrayofbUse {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "AnarrayofbUse")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_AstructBstructUse_Identifiers[_astructbstructuse])
			pointersInitializesStatements += setPointerField
		}

		for _, _astructbstruct2use := range astruct.Anarrayofb2Use {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Anarrayofb2Use")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_AstructBstruct2Use_Identifiers[_astructbstruct2use])
			pointersInitializesStatements += setPointerField
		}

		if astruct.AnAstruct != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "AnAstruct")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Astruct_Identifiers[astruct.AnAstruct])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, astructbstruct2use := range astructbstruct2useOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("AstructBstruct2Use", idx, astructbstruct2use.Name)
		map_AstructBstruct2Use_Identifiers[astructbstruct2use] = id

		// Initialisation of values
		if astructbstruct2use.Bstrcut2 != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Bstrcut2")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bstruct_Identifiers[astructbstruct2use.Bstrcut2])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, astructbstructuse := range astructbstructuseOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("AstructBstructUse", idx, astructbstructuse.Name)
		map_AstructBstructUse_Identifiers[astructbstructuse] = id

		// Initialisation of values
		if astructbstructuse.Bstruct2 != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Bstruct2")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bstruct_Identifiers[astructbstructuse.Bstruct2])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, bstruct := range bstructOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Bstruct", idx, bstruct.Name)
		map_Bstruct_Identifiers[bstruct] = id

		// Initialisation of values
	}

	for idx, dstruct := range dstructOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Dstruct", idx, dstruct.Name)
		map_Dstruct_Identifiers[dstruct] = id

		// Initialisation of values
	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of functions that provide maps for reverse associations

// generate function for reverse association maps of Astruct
func (stageStruct *StageStruct) CreateReverseMap_Astruct_Bstruct() (res map[*Bstruct][]*Astruct) {
	res = make(map[*Bstruct][]*Astruct)

	for astruct := range stageStruct.Astructs {
		if astruct.Bstruct != nil {
			bstruct_ := astruct.Bstruct
			var astructs []*Astruct
			_, ok := res[bstruct_]
			if ok {
				astructs = res[bstruct_]
			} else {
				astructs = make([]*Astruct, 0)
			}
			astructs = append(astructs, astruct)
			res[bstruct_] = astructs
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Astruct_Associationtob() (res map[*Bstruct][]*Astruct) {
	res = make(map[*Bstruct][]*Astruct)

	for astruct := range stageStruct.Astructs {
		if astruct.Associationtob != nil {
			bstruct_ := astruct.Associationtob
			var astructs []*Astruct
			_, ok := res[bstruct_]
			if ok {
				astructs = res[bstruct_]
			} else {
				astructs = make([]*Astruct, 0)
			}
			astructs = append(astructs, astruct)
			res[bstruct_] = astructs
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Astruct_Anotherassociationtob_2() (res map[*Bstruct][]*Astruct) {
	res = make(map[*Bstruct][]*Astruct)

	for astruct := range stageStruct.Astructs {
		if astruct.Anotherassociationtob_2 != nil {
			bstruct_ := astruct.Anotherassociationtob_2
			var astructs []*Astruct
			_, ok := res[bstruct_]
			if ok {
				astructs = res[bstruct_]
			} else {
				astructs = make([]*Astruct, 0)
			}
			astructs = append(astructs, astruct)
			res[bstruct_] = astructs
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Astruct_Anarrayofb() (res map[*Bstruct]*Astruct) {
	res = make(map[*Bstruct]*Astruct)

	for astruct := range stageStruct.Astructs {
		for _, bstruct_ := range astruct.Anarrayofb {
			res[bstruct_] = astruct
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Astruct_Anotherarrayofb() (res map[*Bstruct]*Astruct) {
	res = make(map[*Bstruct]*Astruct)

	for astruct := range stageStruct.Astructs {
		for _, bstruct_ := range astruct.Anotherarrayofb {
			res[bstruct_] = astruct
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Astruct_Anarrayofa() (res map[*Astruct]*Astruct) {
	res = make(map[*Astruct]*Astruct)

	for astruct := range stageStruct.Astructs {
		for _, astruct_ := range astruct.Anarrayofa {
			res[astruct_] = astruct
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Astruct_AnarrayofbUse() (res map[*AstructBstructUse]*Astruct) {
	res = make(map[*AstructBstructUse]*Astruct)

	for astruct := range stageStruct.Astructs {
		for _, astructbstructuse_ := range astruct.AnarrayofbUse {
			res[astructbstructuse_] = astruct
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Astruct_Anarrayofb2Use() (res map[*AstructBstruct2Use]*Astruct) {
	res = make(map[*AstructBstruct2Use]*Astruct)

	for astruct := range stageStruct.Astructs {
		for _, astructbstruct2use_ := range astruct.Anarrayofb2Use {
			res[astructbstruct2use_] = astruct
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Astruct_AnAstruct() (res map[*Astruct][]*Astruct) {
	res = make(map[*Astruct][]*Astruct)

	for astruct := range stageStruct.Astructs {
		if astruct.AnAstruct != nil {
			astruct_ := astruct.AnAstruct
			var astructs []*Astruct
			_, ok := res[astruct_]
			if ok {
				astructs = res[astruct_]
			} else {
				astructs = make([]*Astruct, 0)
			}
			astructs = append(astructs, astruct)
			res[astruct_] = astructs
		}
	}

	return
}

// generate function for reverse association maps of AstructBstruct2Use
func (stageStruct *StageStruct) CreateReverseMap_AstructBstruct2Use_Bstrcut2() (res map[*Bstruct][]*AstructBstruct2Use) {
	res = make(map[*Bstruct][]*AstructBstruct2Use)

	for astructbstruct2use := range stageStruct.AstructBstruct2Uses {
		if astructbstruct2use.Bstrcut2 != nil {
			bstruct_ := astructbstruct2use.Bstrcut2
			var astructbstruct2uses []*AstructBstruct2Use
			_, ok := res[bstruct_]
			if ok {
				astructbstruct2uses = res[bstruct_]
			} else {
				astructbstruct2uses = make([]*AstructBstruct2Use, 0)
			}
			astructbstruct2uses = append(astructbstruct2uses, astructbstruct2use)
			res[bstruct_] = astructbstruct2uses
		}
	}

	return
}

// generate function for reverse association maps of AstructBstructUse
func (stageStruct *StageStruct) CreateReverseMap_AstructBstructUse_Bstruct2() (res map[*Bstruct][]*AstructBstructUse) {
	res = make(map[*Bstruct][]*AstructBstructUse)

	for astructbstructuse := range stageStruct.AstructBstructUses {
		if astructbstructuse.Bstruct2 != nil {
			bstruct_ := astructbstructuse.Bstruct2
			var astructbstructuses []*AstructBstructUse
			_, ok := res[bstruct_]
			if ok {
				astructbstructuses = res[bstruct_]
			} else {
				astructbstructuses = make([]*AstructBstructUse, 0)
			}
			astructbstructuses = append(astructbstructuses, astructbstructuse)
			res[bstruct_] = astructbstructuses
		}
	}

	return
}

// generate function for reverse association maps of Bstruct

// generate function for reverse association maps of Dstruct

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Astruct | AstructBstruct2Use | AstructBstructUse | Bstruct | Dstruct
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*Astruct | *AstructBstruct2Use | *AstructBstructUse | *Bstruct | *Dstruct
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Astruct]any |
		map[*AstructBstruct2Use]any |
		map[*AstructBstructUse]any |
		map[*Bstruct]any |
		map[*Dstruct]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Astruct |
		map[string]*AstructBstruct2Use |
		map[string]*AstructBstructUse |
		map[string]*Bstruct |
		map[string]*Dstruct |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Astruct]any:
		return any(&Stage.Astructs).(*Type)
	case map[*AstructBstruct2Use]any:
		return any(&Stage.AstructBstruct2Uses).(*Type)
	case map[*AstructBstructUse]any:
		return any(&Stage.AstructBstructUses).(*Type)
	case map[*Bstruct]any:
		return any(&Stage.Bstructs).(*Type)
	case map[*Dstruct]any:
		return any(&Stage.Dstructs).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Astruct:
		return any(&Stage.Astructs_mapString).(*Type)
	case map[string]*AstructBstruct2Use:
		return any(&Stage.AstructBstruct2Uses_mapString).(*Type)
	case map[string]*AstructBstructUse:
		return any(&Stage.AstructBstructUses_mapString).(*Type)
	case map[string]*Bstruct:
		return any(&Stage.Bstructs_mapString).(*Type)
	case map[string]*Dstruct:
		return any(&Stage.Dstructs_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct]() *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Astruct:
		return any(&Stage.Astructs).(*map[*Type]any)
	case AstructBstruct2Use:
		return any(&Stage.AstructBstruct2Uses).(*map[*Type]any)
	case AstructBstructUse:
		return any(&Stage.AstructBstructUses).(*map[*Type]any)
	case Bstruct:
		return any(&Stage.Bstructs).(*map[*Type]any)
	case Dstruct:
		return any(&Stage.Dstructs).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct]() *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Astruct:
		return any(&Stage.Astructs_mapString).(*map[string]*Type)
	case AstructBstruct2Use:
		return any(&Stage.AstructBstruct2Uses_mapString).(*map[string]*Type)
	case AstructBstructUse:
		return any(&Stage.AstructBstructUses_mapString).(*map[string]*Type)
	case Bstruct:
		return any(&Stage.Bstructs_mapString).(*map[string]*Type)
	case Dstruct:
		return any(&Stage.Dstructs_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Astruct:
		return any(&Astruct{
			// Initialisation of associations
			// field is initialized with an instance of Bstruct (Cstruct as it is a composite) with the name of the field
			Cstruct: Cstruct{
				Bstruct: &Bstruct{Name: "Bstruct"},
			},
			// field is initialized with an instance of Bstruct with the name of the field
			Associationtob: &Bstruct{Name: "Associationtob"},
			// field is initialized with an instance of Bstruct with the name of the field
			Anotherassociationtob_2: &Bstruct{Name: "Anotherassociationtob_2"},
			// field is initialized with an instance of Bstruct with the name of the field
			Anarrayofb: []*Bstruct{{Name: "Anarrayofb"}},
			// field is initialized with an instance of Bstruct with the name of the field
			Anotherarrayofb: []*Bstruct{{Name: "Anotherarrayofb"}},
			// field is initialized with an instance of Astruct with the name of the field
			Anarrayofa: []*Astruct{{Name: "Anarrayofa"}},
			// field is initialized with an instance of AstructBstructUse with the name of the field
			AnarrayofbUse: []*AstructBstructUse{{Name: "AnarrayofbUse"}},
			// field is initialized with an instance of AstructBstruct2Use with the name of the field
			Anarrayofb2Use: []*AstructBstruct2Use{{Name: "Anarrayofb2Use"}},
			// field is initialized with an instance of Astruct with the name of the field
			AnAstruct: &Astruct{Name: "AnAstruct"},
		}).(*Type)
	case AstructBstruct2Use:
		return any(&AstructBstruct2Use{
			// Initialisation of associations
			// field is initialized with an instance of Bstruct with the name of the field
			Bstrcut2: &Bstruct{Name: "Bstrcut2"},
		}).(*Type)
	case AstructBstructUse:
		return any(&AstructBstructUse{
			// Initialisation of associations
			// field is initialized with an instance of Bstruct with the name of the field
			Bstruct2: &Bstruct{Name: "Bstruct2"},
		}).(*Type)
	case Bstruct:
		return any(&Bstruct{
			// Initialisation of associations
		}).(*Type)
	case Dstruct:
		return any(&Dstruct{
			// Initialisation of associations
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Astruct
	case Astruct:
		switch fieldname {
		// insertion point for per direct association field
		case "Bstruct":
			res := make(map[*Bstruct][]*Astruct)
			for astruct := range Stage.Astructs {
				if astruct.Bstruct != nil {
					bstruct_ := astruct.Bstruct
					var astructs []*Astruct
					_, ok := res[bstruct_]
					if ok {
						astructs = res[bstruct_]
					} else {
						astructs = make([]*Astruct, 0)
					}
					astructs = append(astructs, astruct)
					res[bstruct_] = astructs
				}
			}
			return any(res).(map[*End][]*Start)
		case "Associationtob":
			res := make(map[*Bstruct][]*Astruct)
			for astruct := range Stage.Astructs {
				if astruct.Associationtob != nil {
					bstruct_ := astruct.Associationtob
					var astructs []*Astruct
					_, ok := res[bstruct_]
					if ok {
						astructs = res[bstruct_]
					} else {
						astructs = make([]*Astruct, 0)
					}
					astructs = append(astructs, astruct)
					res[bstruct_] = astructs
				}
			}
			return any(res).(map[*End][]*Start)
		case "Anotherassociationtob_2":
			res := make(map[*Bstruct][]*Astruct)
			for astruct := range Stage.Astructs {
				if astruct.Anotherassociationtob_2 != nil {
					bstruct_ := astruct.Anotherassociationtob_2
					var astructs []*Astruct
					_, ok := res[bstruct_]
					if ok {
						astructs = res[bstruct_]
					} else {
						astructs = make([]*Astruct, 0)
					}
					astructs = append(astructs, astruct)
					res[bstruct_] = astructs
				}
			}
			return any(res).(map[*End][]*Start)
		case "AnAstruct":
			res := make(map[*Astruct][]*Astruct)
			for astruct := range Stage.Astructs {
				if astruct.AnAstruct != nil {
					astruct_ := astruct.AnAstruct
					var astructs []*Astruct
					_, ok := res[astruct_]
					if ok {
						astructs = res[astruct_]
					} else {
						astructs = make([]*Astruct, 0)
					}
					astructs = append(astructs, astruct)
					res[astruct_] = astructs
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of AstructBstruct2Use
	case AstructBstruct2Use:
		switch fieldname {
		// insertion point for per direct association field
		case "Bstrcut2":
			res := make(map[*Bstruct][]*AstructBstruct2Use)
			for astructbstruct2use := range Stage.AstructBstruct2Uses {
				if astructbstruct2use.Bstrcut2 != nil {
					bstruct_ := astructbstruct2use.Bstrcut2
					var astructbstruct2uses []*AstructBstruct2Use
					_, ok := res[bstruct_]
					if ok {
						astructbstruct2uses = res[bstruct_]
					} else {
						astructbstruct2uses = make([]*AstructBstruct2Use, 0)
					}
					astructbstruct2uses = append(astructbstruct2uses, astructbstruct2use)
					res[bstruct_] = astructbstruct2uses
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of AstructBstructUse
	case AstructBstructUse:
		switch fieldname {
		// insertion point for per direct association field
		case "Bstruct2":
			res := make(map[*Bstruct][]*AstructBstructUse)
			for astructbstructuse := range Stage.AstructBstructUses {
				if astructbstructuse.Bstruct2 != nil {
					bstruct_ := astructbstructuse.Bstruct2
					var astructbstructuses []*AstructBstructUse
					_, ok := res[bstruct_]
					if ok {
						astructbstructuses = res[bstruct_]
					} else {
						astructbstructuses = make([]*AstructBstructUse, 0)
					}
					astructbstructuses = append(astructbstructuses, astructbstructuse)
					res[bstruct_] = astructbstructuses
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Bstruct
	case Bstruct:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Dstruct
	case Dstruct:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Astruct
	case Astruct:
		switch fieldname {
		// insertion point for per direct association field
		case "Anarrayofb":
			res := make(map[*Bstruct]*Astruct)
			for astruct := range Stage.Astructs {
				for _, bstruct_ := range astruct.Anarrayofb {
					res[bstruct_] = astruct
				}
			}
			return any(res).(map[*End]*Start)
		case "Anotherarrayofb":
			res := make(map[*Bstruct]*Astruct)
			for astruct := range Stage.Astructs {
				for _, bstruct_ := range astruct.Anotherarrayofb {
					res[bstruct_] = astruct
				}
			}
			return any(res).(map[*End]*Start)
		case "Anarrayofa":
			res := make(map[*Astruct]*Astruct)
			for astruct := range Stage.Astructs {
				for _, astruct_ := range astruct.Anarrayofa {
					res[astruct_] = astruct
				}
			}
			return any(res).(map[*End]*Start)
		case "AnarrayofbUse":
			res := make(map[*AstructBstructUse]*Astruct)
			for astruct := range Stage.Astructs {
				for _, astructbstructuse_ := range astruct.AnarrayofbUse {
					res[astructbstructuse_] = astruct
				}
			}
			return any(res).(map[*End]*Start)
		case "Anarrayofb2Use":
			res := make(map[*AstructBstruct2Use]*Astruct)
			for astruct := range Stage.Astructs {
				for _, astructbstruct2use_ := range astruct.Anarrayofb2Use {
					res[astructbstruct2use_] = astruct
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of AstructBstruct2Use
	case AstructBstruct2Use:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of AstructBstructUse
	case AstructBstructUse:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Bstruct
	case Bstruct:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Dstruct
	case Dstruct:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Astruct:
		res = "Astruct"
	case AstructBstruct2Use:
		res = "AstructBstruct2Use"
	case AstructBstructUse:
		res = "AstructBstructUse"
	case Bstruct:
		res = "Bstruct"
	case Dstruct:
		res = "Dstruct"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Astruct:
		res = []string{"Name", "Date", "Booleanfield", "Aenum", "Aenum_2", "Benum", "CEnum", "CName", "CFloatfield", "Bstruct", "Floatfield", "Intfield", "Anotherbooleanfield", "Duration1", "Associationtob", "Anotherassociationtob_2", "Anarrayofb", "Anotherarrayofb", "Anarrayofa", "AnarrayofbUse", "Anarrayofb2Use", "AnAstruct"}
	case AstructBstruct2Use:
		res = []string{"Name", "Bstrcut2"}
	case AstructBstructUse:
		res = []string{"Name", "Bstruct2"}
	case Bstruct:
		res = []string{"Name", "Floatfield", "Floatfield2", "Intfield"}
	case Dstruct:
		res = []string{"Name"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Astruct:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Astruct).Name
		case "Date":
			res = any(instance).(Astruct).Date.String()
		case "Booleanfield":
			res = fmt.Sprintf("%t", any(instance).(Astruct).Booleanfield)
		case "Aenum":
			enum := any(instance).(Astruct).Aenum
			res = enum.ToCodeString()
		case "Aenum_2":
			enum := any(instance).(Astruct).Aenum_2
			res = enum.ToCodeString()
		case "Benum":
			enum := any(instance).(Astruct).Benum
			res = enum.ToCodeString()
		case "CEnum":
			enum := any(instance).(Astruct).CEnum
			res = enum.ToCodeString()
		case "CName":
			res = any(instance).(Astruct).CName
		case "CFloatfield":
			res = fmt.Sprintf("%f", any(instance).(Astruct).CFloatfield)
		case "Bstruct":
			if any(instance).(Astruct).Bstruct != nil {
				res = any(instance).(Astruct).Bstruct.Name
			}
		case "Floatfield":
			res = fmt.Sprintf("%f", any(instance).(Astruct).Floatfield)
		case "Intfield":
			res = fmt.Sprintf("%d", any(instance).(Astruct).Intfield)
		case "Anotherbooleanfield":
			res = fmt.Sprintf("%t", any(instance).(Astruct).Anotherbooleanfield)
		case "Duration1":
			res = fmt.Sprintf("%d", any(instance).(Astruct).Duration1)
		case "Associationtob":
			if any(instance).(Astruct).Associationtob != nil {
				res = any(instance).(Astruct).Associationtob.Name
			}
		case "Anotherassociationtob_2":
			if any(instance).(Astruct).Anotherassociationtob_2 != nil {
				res = any(instance).(Astruct).Anotherassociationtob_2.Name
			}
		case "Anarrayofb":
			for idx, __instance__ := range any(instance).(Astruct).Anarrayofb {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Anotherarrayofb":
			for idx, __instance__ := range any(instance).(Astruct).Anotherarrayofb {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Anarrayofa":
			for idx, __instance__ := range any(instance).(Astruct).Anarrayofa {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "AnarrayofbUse":
			for idx, __instance__ := range any(instance).(Astruct).AnarrayofbUse {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Anarrayofb2Use":
			for idx, __instance__ := range any(instance).(Astruct).Anarrayofb2Use {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "AnAstruct":
			if any(instance).(Astruct).AnAstruct != nil {
				res = any(instance).(Astruct).AnAstruct.Name
			}
		}
	case AstructBstruct2Use:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(AstructBstruct2Use).Name
		case "Bstrcut2":
			if any(instance).(AstructBstruct2Use).Bstrcut2 != nil {
				res = any(instance).(AstructBstruct2Use).Bstrcut2.Name
			}
		}
	case AstructBstructUse:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(AstructBstructUse).Name
		case "Bstruct2":
			if any(instance).(AstructBstructUse).Bstruct2 != nil {
				res = any(instance).(AstructBstructUse).Bstruct2.Name
			}
		}
	case Bstruct:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Bstruct).Name
		case "Floatfield":
			res = fmt.Sprintf("%f", any(instance).(Bstruct).Floatfield)
		case "Floatfield2":
			res = fmt.Sprintf("%f", any(instance).(Bstruct).Floatfield2)
		case "Intfield":
			res = fmt.Sprintf("%d", any(instance).(Bstruct).Intfield)
		}
	case Dstruct:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Dstruct).Name
		}
	}
	return
}

// insertion point of enum utility functions
// Utility function for AEnumType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (aenumtype AEnumType) ToString() (res string) {

	// migration of former implementation of enum
	switch aenumtype {
	// insertion code per enum code
	case ENUM_VAL1:
		res = "ENUM_VAL1_NOT_THE_SAME"
	case ENUM_VAL2:
		res = "ENUM_VAL2"
	}
	return
}

func (aenumtype *AEnumType) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "ENUM_VAL1_NOT_THE_SAME":
		*aenumtype = ENUM_VAL1
	case "ENUM_VAL2":
		*aenumtype = ENUM_VAL2
	}
}

func (aenumtype *AEnumType) ToCodeString() (res string) {

	switch *aenumtype {
	// insertion code per enum code
	case ENUM_VAL1:
		res = "ENUM_VAL1"
	case ENUM_VAL2:
		res = "ENUM_VAL2"
	}
	return
}

// Utility function for BEnumType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (benumtype BEnumType) ToString() (res string) {

	// migration of former implementation of enum
	switch benumtype {
	// insertion code per enum code
	case BENUM_VAL1:
		res = "BENUM_VAL1_NOT_THE_SAME"
	case BENUM_VAL2:
		res = "BENUM_VAL2"
	}
	return
}

func (benumtype *BEnumType) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "BENUM_VAL1_NOT_THE_SAME":
		*benumtype = BENUM_VAL1
	case "BENUM_VAL2":
		*benumtype = BENUM_VAL2
	}
}

func (benumtype *BEnumType) ToCodeString() (res string) {

	switch *benumtype {
	// insertion code per enum code
	case BENUM_VAL1:
		res = "BENUM_VAL1"
	case BENUM_VAL2:
		res = "BENUM_VAL2"
	}
	return
}

// Utility function for CEnumTypeInt
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (cenumtypeint CEnumTypeInt) ToInt() (res int) {

	// migration of former implementation of enum
	switch cenumtypeint {
	// insertion code per enum code
	case CENUM_VAL1:
		res = 0
	case CENUM_VAL2:
		res = 1
	}
	return
}

func (cenumtypeint *CEnumTypeInt) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*cenumtypeint = CENUM_VAL1
	case 1:
		*cenumtypeint = CENUM_VAL2
	}
}

func (cenumtypeint *CEnumTypeInt) ToCodeString() (res string) {

	switch *cenumtypeint {
	// insertion code per enum code
	case CENUM_VAL1:
		res = "CENUM_VAL1"
	case CENUM_VAL2:
		res = "CENUM_VAL2"
	}
	return
}

// Last line of the template
