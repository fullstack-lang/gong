// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Aclasss           map[*Aclass]struct{}
	Aclasss_mapString map[string]*Aclass

	Bclasss           map[*Bclass]struct{}
	Bclasss_mapString map[string]*Bclass

	Dclasss           map[*Dclass]struct{}
	Dclasss_mapString map[string]*Dclass

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitAclass(aclass *Aclass)
	CheckoutAclass(aclass *Aclass)
	CommitBclass(bclass *Bclass)
	CheckoutBclass(bclass *Bclass)
	CommitDclass(dclass *Dclass)
	CheckoutDclass(dclass *Dclass)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Aclasss:           make(map[*Aclass]struct{}, 0),
	Aclasss_mapString: make(map[string]*Aclass, 0),

	Bclasss:           make(map[*Bclass]struct{}, 0),
	Bclasss_mapString: make(map[string]*Bclass, 0),

	Dclasss:           make(map[*Dclass]struct{}, 0),
	Dclasss_mapString: make(map[string]*Dclass, 0),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getAclassOrderedStructWithNameField() []*Aclass {
	// have alphabetical order generation
	aclassOrdered := []*Aclass{}
	for aclass := range stage.Aclasss {
		aclassOrdered = append(aclassOrdered, aclass)
	}
	sort.Slice(aclassOrdered[:], func(i, j int) bool {
		return aclassOrdered[i].Name < aclassOrdered[j].Name
	})
	return aclassOrdered
}

// Stage puts aclass to the model stage
func (aclass *Aclass) Stage() *Aclass {
	Stage.Aclasss[aclass] = __member
	Stage.Aclasss_mapString[aclass.Name] = aclass

	return aclass
}

// Unstage removes aclass off the model stage
func (aclass *Aclass) Unstage() *Aclass {
	delete(Stage.Aclasss, aclass)
	delete(Stage.Aclasss_mapString, aclass.Name)
	return aclass
}

// commit aclass to the back repo (if it is already staged)
func (aclass *Aclass) Commit() *Aclass {
	if _, ok := Stage.Aclasss[aclass]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAclass(aclass)
		}
	}
	return aclass
}

// Checkout aclass to the back repo (if it is already staged)
func (aclass *Aclass) Checkout() *Aclass {
	if _, ok := Stage.Aclasss[aclass]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAclass(aclass)
		}
	}
	return aclass
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of aclass to the model stage
func (aclass *Aclass) StageCopy() *Aclass {
	_aclass := new(Aclass)
	*_aclass = *aclass
	_aclass.Stage()
	return _aclass
}

// StageAndCommit appends aclass to the model stage and commit to the orm repo
func (aclass *Aclass) StageAndCommit() *Aclass {
	aclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAclass(aclass)
	}
	return aclass
}

// DeleteStageAndCommit appends aclass to the model stage and commit to the orm repo
func (aclass *Aclass) DeleteStageAndCommit() *Aclass {
	aclass.Unstage()
	DeleteORMAclass(aclass)
	return aclass
}

// StageCopyAndCommit appends a copy of aclass to the model stage and commit to the orm repo
func (aclass *Aclass) StageCopyAndCommit() *Aclass {
	_aclass := new(Aclass)
	*_aclass = *aclass
	_aclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAclass(aclass)
	}
	return _aclass
}

// CreateORMAclass enables dynamic staging of a Aclass instance
func CreateORMAclass(aclass *Aclass) {
	aclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAclass(aclass)
	}
}

// DeleteORMAclass enables dynamic staging of a Aclass instance
func DeleteORMAclass(aclass *Aclass) {
	aclass.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAclass(aclass)
	}
}

func (stage *StageStruct) getBclassOrderedStructWithNameField() []*Bclass {
	// have alphabetical order generation
	bclassOrdered := []*Bclass{}
	for bclass := range stage.Bclasss {
		bclassOrdered = append(bclassOrdered, bclass)
	}
	sort.Slice(bclassOrdered[:], func(i, j int) bool {
		return bclassOrdered[i].Name < bclassOrdered[j].Name
	})
	return bclassOrdered
}

// Stage puts bclass to the model stage
func (bclass *Bclass) Stage() *Bclass {
	Stage.Bclasss[bclass] = __member
	Stage.Bclasss_mapString[bclass.Name] = bclass

	return bclass
}

// Unstage removes bclass off the model stage
func (bclass *Bclass) Unstage() *Bclass {
	delete(Stage.Bclasss, bclass)
	delete(Stage.Bclasss_mapString, bclass.Name)
	return bclass
}

// commit bclass to the back repo (if it is already staged)
func (bclass *Bclass) Commit() *Bclass {
	if _, ok := Stage.Bclasss[bclass]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitBclass(bclass)
		}
	}
	return bclass
}

// Checkout bclass to the back repo (if it is already staged)
func (bclass *Bclass) Checkout() *Bclass {
	if _, ok := Stage.Bclasss[bclass]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutBclass(bclass)
		}
	}
	return bclass
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of bclass to the model stage
func (bclass *Bclass) StageCopy() *Bclass {
	_bclass := new(Bclass)
	*_bclass = *bclass
	_bclass.Stage()
	return _bclass
}

// StageAndCommit appends bclass to the model stage and commit to the orm repo
func (bclass *Bclass) StageAndCommit() *Bclass {
	bclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBclass(bclass)
	}
	return bclass
}

// DeleteStageAndCommit appends bclass to the model stage and commit to the orm repo
func (bclass *Bclass) DeleteStageAndCommit() *Bclass {
	bclass.Unstage()
	DeleteORMBclass(bclass)
	return bclass
}

// StageCopyAndCommit appends a copy of bclass to the model stage and commit to the orm repo
func (bclass *Bclass) StageCopyAndCommit() *Bclass {
	_bclass := new(Bclass)
	*_bclass = *bclass
	_bclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBclass(bclass)
	}
	return _bclass
}

// CreateORMBclass enables dynamic staging of a Bclass instance
func CreateORMBclass(bclass *Bclass) {
	bclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBclass(bclass)
	}
}

// DeleteORMBclass enables dynamic staging of a Bclass instance
func DeleteORMBclass(bclass *Bclass) {
	bclass.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMBclass(bclass)
	}
}

func (stage *StageStruct) getDclassOrderedStructWithNameField() []*Dclass {
	// have alphabetical order generation
	dclassOrdered := []*Dclass{}
	for dclass := range stage.Dclasss {
		dclassOrdered = append(dclassOrdered, dclass)
	}
	sort.Slice(dclassOrdered[:], func(i, j int) bool {
		return dclassOrdered[i].Name < dclassOrdered[j].Name
	})
	return dclassOrdered
}

// Stage puts dclass to the model stage
func (dclass *Dclass) Stage() *Dclass {
	Stage.Dclasss[dclass] = __member
	Stage.Dclasss_mapString[dclass.Name] = dclass

	return dclass
}

// Unstage removes dclass off the model stage
func (dclass *Dclass) Unstage() *Dclass {
	delete(Stage.Dclasss, dclass)
	delete(Stage.Dclasss_mapString, dclass.Name)
	return dclass
}

// commit dclass to the back repo (if it is already staged)
func (dclass *Dclass) Commit() *Dclass {
	if _, ok := Stage.Dclasss[dclass]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDclass(dclass)
		}
	}
	return dclass
}

// Checkout dclass to the back repo (if it is already staged)
func (dclass *Dclass) Checkout() *Dclass {
	if _, ok := Stage.Dclasss[dclass]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDclass(dclass)
		}
	}
	return dclass
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of dclass to the model stage
func (dclass *Dclass) StageCopy() *Dclass {
	_dclass := new(Dclass)
	*_dclass = *dclass
	_dclass.Stage()
	return _dclass
}

// StageAndCommit appends dclass to the model stage and commit to the orm repo
func (dclass *Dclass) StageAndCommit() *Dclass {
	dclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDclass(dclass)
	}
	return dclass
}

// DeleteStageAndCommit appends dclass to the model stage and commit to the orm repo
func (dclass *Dclass) DeleteStageAndCommit() *Dclass {
	dclass.Unstage()
	DeleteORMDclass(dclass)
	return dclass
}

// StageCopyAndCommit appends a copy of dclass to the model stage and commit to the orm repo
func (dclass *Dclass) StageCopyAndCommit() *Dclass {
	_dclass := new(Dclass)
	*_dclass = *dclass
	_dclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDclass(dclass)
	}
	return _dclass
}

// CreateORMDclass enables dynamic staging of a Dclass instance
func CreateORMDclass(dclass *Dclass) {
	dclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDclass(dclass)
	}
}

// DeleteORMDclass enables dynamic staging of a Dclass instance
func DeleteORMDclass(dclass *Dclass) {
	dclass.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDclass(dclass)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMAclass(Aclass *Aclass)
	CreateORMBclass(Bclass *Bclass)
	CreateORMDclass(Dclass *Dclass)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMAclass(Aclass *Aclass)
	DeleteORMBclass(Bclass *Bclass)
	DeleteORMDclass(Dclass *Dclass)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Aclasss = make(map[*Aclass]struct{}, 0)
	stage.Aclasss_mapString = make(map[string]*Aclass, 0)

	stage.Bclasss = make(map[*Bclass]struct{}, 0)
	stage.Bclasss_mapString = make(map[string]*Bclass, 0)

	stage.Dclasss = make(map[*Dclass]struct{}, 0)
	stage.Dclasss_mapString = make(map[string]*Dclass, 0)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Aclasss = nil
	stage.Aclasss_mapString = nil

	stage.Bclasss = nil
	stage.Bclasss_mapString = nil

	stage.Dclasss = nil
	stage.Dclasss_mapString = nil

}
