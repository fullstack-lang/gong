// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Astructs           map[*Astruct]struct{}
	Astructs_mapString map[string]*Astruct

	AstructBstruct2Uses           map[*AstructBstruct2Use]struct{}
	AstructBstruct2Uses_mapString map[string]*AstructBstruct2Use

	AstructBstructUses           map[*AstructBstructUse]struct{}
	AstructBstructUses_mapString map[string]*AstructBstructUse

	Bstructs           map[*Bstruct]struct{}
	Bstructs_mapString map[string]*Bstruct

	Dstructs           map[*Dstruct]struct{}
	Dstructs_mapString map[string]*Dstruct

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitAstruct(astruct *Astruct)
	CheckoutAstruct(astruct *Astruct)
	CommitAstructBstruct2Use(astructbstruct2use *AstructBstruct2Use)
	CheckoutAstructBstruct2Use(astructbstruct2use *AstructBstruct2Use)
	CommitAstructBstructUse(astructbstructuse *AstructBstructUse)
	CheckoutAstructBstructUse(astructbstructuse *AstructBstructUse)
	CommitBstruct(bstruct *Bstruct)
	CheckoutBstruct(bstruct *Bstruct)
	CommitDstruct(dstruct *Dstruct)
	CheckoutDstruct(dstruct *Dstruct)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Astructs:           make(map[*Astruct]struct{}),
	Astructs_mapString: make(map[string]*Astruct),

	AstructBstruct2Uses:           make(map[*AstructBstruct2Use]struct{}),
	AstructBstruct2Uses_mapString: make(map[string]*AstructBstruct2Use),

	AstructBstructUses:           make(map[*AstructBstructUse]struct{}),
	AstructBstructUses_mapString: make(map[string]*AstructBstructUse),

	Bstructs:           make(map[*Bstruct]struct{}),
	Bstructs_mapString: make(map[string]*Bstruct),

	Dstructs:           make(map[*Dstruct]struct{}),
	Dstructs_mapString: make(map[string]*Dstruct),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getAstructOrderedStructWithNameField() []*Astruct {
	// have alphabetical order generation
	astructOrdered := []*Astruct{}
	for astruct := range stage.Astructs {
		astructOrdered = append(astructOrdered, astruct)
	}
	sort.Slice(astructOrdered[:], func(i, j int) bool {
		return astructOrdered[i].Name < astructOrdered[j].Name
	})
	return astructOrdered
}

// Stage puts astruct to the model stage
func (astruct *Astruct) Stage() *Astruct {
	Stage.Astructs[astruct] = __member
	Stage.Astructs_mapString[astruct.Name] = astruct

	return astruct
}

// Unstage removes astruct off the model stage
func (astruct *Astruct) Unstage() *Astruct {
	delete(Stage.Astructs, astruct)
	delete(Stage.Astructs_mapString, astruct.Name)
	return astruct
}

// commit astruct to the back repo (if it is already staged)
func (astruct *Astruct) Commit() *Astruct {
	if _, ok := Stage.Astructs[astruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAstruct(astruct)
		}
	}
	return astruct
}

// Checkout astruct to the back repo (if it is already staged)
func (astruct *Astruct) Checkout() *Astruct {
	if _, ok := Stage.Astructs[astruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAstruct(astruct)
		}
	}
	return astruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of astruct to the model stage
func (astruct *Astruct) StageCopy() *Astruct {
	_astruct := new(Astruct)
	*_astruct = *astruct
	_astruct.Stage()
	return _astruct
}

// StageAndCommit appends astruct to the model stage and commit to the orm repo
func (astruct *Astruct) StageAndCommit() *Astruct {
	astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
	return astruct
}

// DeleteStageAndCommit appends astruct to the model stage and commit to the orm repo
func (astruct *Astruct) DeleteStageAndCommit() *Astruct {
	astruct.Unstage()
	DeleteORMAstruct(astruct)
	return astruct
}

// StageCopyAndCommit appends a copy of astruct to the model stage and commit to the orm repo
func (astruct *Astruct) StageCopyAndCommit() *Astruct {
	_astruct := new(Astruct)
	*_astruct = *astruct
	_astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
	return _astruct
}

// CreateORMAstruct enables dynamic staging of a Astruct instance
func CreateORMAstruct(astruct *Astruct) {
	astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
}

// DeleteORMAstruct enables dynamic staging of a Astruct instance
func DeleteORMAstruct(astruct *Astruct) {
	astruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAstruct(astruct)
	}
}

func (stage *StageStruct) getAstructBstruct2UseOrderedStructWithNameField() []*AstructBstruct2Use {
	// have alphabetical order generation
	astructbstruct2useOrdered := []*AstructBstruct2Use{}
	for astructbstruct2use := range stage.AstructBstruct2Uses {
		astructbstruct2useOrdered = append(astructbstruct2useOrdered, astructbstruct2use)
	}
	sort.Slice(astructbstruct2useOrdered[:], func(i, j int) bool {
		return astructbstruct2useOrdered[i].Name < astructbstruct2useOrdered[j].Name
	})
	return astructbstruct2useOrdered
}

// Stage puts astructbstruct2use to the model stage
func (astructbstruct2use *AstructBstruct2Use) Stage() *AstructBstruct2Use {
	Stage.AstructBstruct2Uses[astructbstruct2use] = __member
	Stage.AstructBstruct2Uses_mapString[astructbstruct2use.Name] = astructbstruct2use

	return astructbstruct2use
}

// Unstage removes astructbstruct2use off the model stage
func (astructbstruct2use *AstructBstruct2Use) Unstage() *AstructBstruct2Use {
	delete(Stage.AstructBstruct2Uses, astructbstruct2use)
	delete(Stage.AstructBstruct2Uses_mapString, astructbstruct2use.Name)
	return astructbstruct2use
}

// commit astructbstruct2use to the back repo (if it is already staged)
func (astructbstruct2use *AstructBstruct2Use) Commit() *AstructBstruct2Use {
	if _, ok := Stage.AstructBstruct2Uses[astructbstruct2use]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAstructBstruct2Use(astructbstruct2use)
		}
	}
	return astructbstruct2use
}

// Checkout astructbstruct2use to the back repo (if it is already staged)
func (astructbstruct2use *AstructBstruct2Use) Checkout() *AstructBstruct2Use {
	if _, ok := Stage.AstructBstruct2Uses[astructbstruct2use]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAstructBstruct2Use(astructbstruct2use)
		}
	}
	return astructbstruct2use
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of astructbstruct2use to the model stage
func (astructbstruct2use *AstructBstruct2Use) StageCopy() *AstructBstruct2Use {
	_astructbstruct2use := new(AstructBstruct2Use)
	*_astructbstruct2use = *astructbstruct2use
	_astructbstruct2use.Stage()
	return _astructbstruct2use
}

// StageAndCommit appends astructbstruct2use to the model stage and commit to the orm repo
func (astructbstruct2use *AstructBstruct2Use) StageAndCommit() *AstructBstruct2Use {
	astructbstruct2use.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstruct2Use(astructbstruct2use)
	}
	return astructbstruct2use
}

// DeleteStageAndCommit appends astructbstruct2use to the model stage and commit to the orm repo
func (astructbstruct2use *AstructBstruct2Use) DeleteStageAndCommit() *AstructBstruct2Use {
	astructbstruct2use.Unstage()
	DeleteORMAstructBstruct2Use(astructbstruct2use)
	return astructbstruct2use
}

// StageCopyAndCommit appends a copy of astructbstruct2use to the model stage and commit to the orm repo
func (astructbstruct2use *AstructBstruct2Use) StageCopyAndCommit() *AstructBstruct2Use {
	_astructbstruct2use := new(AstructBstruct2Use)
	*_astructbstruct2use = *astructbstruct2use
	_astructbstruct2use.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstruct2Use(astructbstruct2use)
	}
	return _astructbstruct2use
}

// CreateORMAstructBstruct2Use enables dynamic staging of a AstructBstruct2Use instance
func CreateORMAstructBstruct2Use(astructbstruct2use *AstructBstruct2Use) {
	astructbstruct2use.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstruct2Use(astructbstruct2use)
	}
}

// DeleteORMAstructBstruct2Use enables dynamic staging of a AstructBstruct2Use instance
func DeleteORMAstructBstruct2Use(astructbstruct2use *AstructBstruct2Use) {
	astructbstruct2use.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAstructBstruct2Use(astructbstruct2use)
	}
}

func (stage *StageStruct) getAstructBstructUseOrderedStructWithNameField() []*AstructBstructUse {
	// have alphabetical order generation
	astructbstructuseOrdered := []*AstructBstructUse{}
	for astructbstructuse := range stage.AstructBstructUses {
		astructbstructuseOrdered = append(astructbstructuseOrdered, astructbstructuse)
	}
	sort.Slice(astructbstructuseOrdered[:], func(i, j int) bool {
		return astructbstructuseOrdered[i].Name < astructbstructuseOrdered[j].Name
	})
	return astructbstructuseOrdered
}

// Stage puts astructbstructuse to the model stage
func (astructbstructuse *AstructBstructUse) Stage() *AstructBstructUse {
	Stage.AstructBstructUses[astructbstructuse] = __member
	Stage.AstructBstructUses_mapString[astructbstructuse.Name] = astructbstructuse

	return astructbstructuse
}

// Unstage removes astructbstructuse off the model stage
func (astructbstructuse *AstructBstructUse) Unstage() *AstructBstructUse {
	delete(Stage.AstructBstructUses, astructbstructuse)
	delete(Stage.AstructBstructUses_mapString, astructbstructuse.Name)
	return astructbstructuse
}

// commit astructbstructuse to the back repo (if it is already staged)
func (astructbstructuse *AstructBstructUse) Commit() *AstructBstructUse {
	if _, ok := Stage.AstructBstructUses[astructbstructuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAstructBstructUse(astructbstructuse)
		}
	}
	return astructbstructuse
}

// Checkout astructbstructuse to the back repo (if it is already staged)
func (astructbstructuse *AstructBstructUse) Checkout() *AstructBstructUse {
	if _, ok := Stage.AstructBstructUses[astructbstructuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAstructBstructUse(astructbstructuse)
		}
	}
	return astructbstructuse
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of astructbstructuse to the model stage
func (astructbstructuse *AstructBstructUse) StageCopy() *AstructBstructUse {
	_astructbstructuse := new(AstructBstructUse)
	*_astructbstructuse = *astructbstructuse
	_astructbstructuse.Stage()
	return _astructbstructuse
}

// StageAndCommit appends astructbstructuse to the model stage and commit to the orm repo
func (astructbstructuse *AstructBstructUse) StageAndCommit() *AstructBstructUse {
	astructbstructuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstructUse(astructbstructuse)
	}
	return astructbstructuse
}

// DeleteStageAndCommit appends astructbstructuse to the model stage and commit to the orm repo
func (astructbstructuse *AstructBstructUse) DeleteStageAndCommit() *AstructBstructUse {
	astructbstructuse.Unstage()
	DeleteORMAstructBstructUse(astructbstructuse)
	return astructbstructuse
}

// StageCopyAndCommit appends a copy of astructbstructuse to the model stage and commit to the orm repo
func (astructbstructuse *AstructBstructUse) StageCopyAndCommit() *AstructBstructUse {
	_astructbstructuse := new(AstructBstructUse)
	*_astructbstructuse = *astructbstructuse
	_astructbstructuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstructUse(astructbstructuse)
	}
	return _astructbstructuse
}

// CreateORMAstructBstructUse enables dynamic staging of a AstructBstructUse instance
func CreateORMAstructBstructUse(astructbstructuse *AstructBstructUse) {
	astructbstructuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstructBstructUse(astructbstructuse)
	}
}

// DeleteORMAstructBstructUse enables dynamic staging of a AstructBstructUse instance
func DeleteORMAstructBstructUse(astructbstructuse *AstructBstructUse) {
	astructbstructuse.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAstructBstructUse(astructbstructuse)
	}
}

func (stage *StageStruct) getBstructOrderedStructWithNameField() []*Bstruct {
	// have alphabetical order generation
	bstructOrdered := []*Bstruct{}
	for bstruct := range stage.Bstructs {
		bstructOrdered = append(bstructOrdered, bstruct)
	}
	sort.Slice(bstructOrdered[:], func(i, j int) bool {
		return bstructOrdered[i].Name < bstructOrdered[j].Name
	})
	return bstructOrdered
}

// Stage puts bstruct to the model stage
func (bstruct *Bstruct) Stage() *Bstruct {
	Stage.Bstructs[bstruct] = __member
	Stage.Bstructs_mapString[bstruct.Name] = bstruct

	return bstruct
}

// Unstage removes bstruct off the model stage
func (bstruct *Bstruct) Unstage() *Bstruct {
	delete(Stage.Bstructs, bstruct)
	delete(Stage.Bstructs_mapString, bstruct.Name)
	return bstruct
}

// commit bstruct to the back repo (if it is already staged)
func (bstruct *Bstruct) Commit() *Bstruct {
	if _, ok := Stage.Bstructs[bstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitBstruct(bstruct)
		}
	}
	return bstruct
}

// Checkout bstruct to the back repo (if it is already staged)
func (bstruct *Bstruct) Checkout() *Bstruct {
	if _, ok := Stage.Bstructs[bstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutBstruct(bstruct)
		}
	}
	return bstruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of bstruct to the model stage
func (bstruct *Bstruct) StageCopy() *Bstruct {
	_bstruct := new(Bstruct)
	*_bstruct = *bstruct
	_bstruct.Stage()
	return _bstruct
}

// StageAndCommit appends bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) StageAndCommit() *Bstruct {
	bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
	return bstruct
}

// DeleteStageAndCommit appends bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) DeleteStageAndCommit() *Bstruct {
	bstruct.Unstage()
	DeleteORMBstruct(bstruct)
	return bstruct
}

// StageCopyAndCommit appends a copy of bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) StageCopyAndCommit() *Bstruct {
	_bstruct := new(Bstruct)
	*_bstruct = *bstruct
	_bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
	return _bstruct
}

// CreateORMBstruct enables dynamic staging of a Bstruct instance
func CreateORMBstruct(bstruct *Bstruct) {
	bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
}

// DeleteORMBstruct enables dynamic staging of a Bstruct instance
func DeleteORMBstruct(bstruct *Bstruct) {
	bstruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMBstruct(bstruct)
	}
}

func (stage *StageStruct) getDstructOrderedStructWithNameField() []*Dstruct {
	// have alphabetical order generation
	dstructOrdered := []*Dstruct{}
	for dstruct := range stage.Dstructs {
		dstructOrdered = append(dstructOrdered, dstruct)
	}
	sort.Slice(dstructOrdered[:], func(i, j int) bool {
		return dstructOrdered[i].Name < dstructOrdered[j].Name
	})
	return dstructOrdered
}

// Stage puts dstruct to the model stage
func (dstruct *Dstruct) Stage() *Dstruct {
	Stage.Dstructs[dstruct] = __member
	Stage.Dstructs_mapString[dstruct.Name] = dstruct

	return dstruct
}

// Unstage removes dstruct off the model stage
func (dstruct *Dstruct) Unstage() *Dstruct {
	delete(Stage.Dstructs, dstruct)
	delete(Stage.Dstructs_mapString, dstruct.Name)
	return dstruct
}

// commit dstruct to the back repo (if it is already staged)
func (dstruct *Dstruct) Commit() *Dstruct {
	if _, ok := Stage.Dstructs[dstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDstruct(dstruct)
		}
	}
	return dstruct
}

// Checkout dstruct to the back repo (if it is already staged)
func (dstruct *Dstruct) Checkout() *Dstruct {
	if _, ok := Stage.Dstructs[dstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDstruct(dstruct)
		}
	}
	return dstruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of dstruct to the model stage
func (dstruct *Dstruct) StageCopy() *Dstruct {
	_dstruct := new(Dstruct)
	*_dstruct = *dstruct
	_dstruct.Stage()
	return _dstruct
}

// StageAndCommit appends dstruct to the model stage and commit to the orm repo
func (dstruct *Dstruct) StageAndCommit() *Dstruct {
	dstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDstruct(dstruct)
	}
	return dstruct
}

// DeleteStageAndCommit appends dstruct to the model stage and commit to the orm repo
func (dstruct *Dstruct) DeleteStageAndCommit() *Dstruct {
	dstruct.Unstage()
	DeleteORMDstruct(dstruct)
	return dstruct
}

// StageCopyAndCommit appends a copy of dstruct to the model stage and commit to the orm repo
func (dstruct *Dstruct) StageCopyAndCommit() *Dstruct {
	_dstruct := new(Dstruct)
	*_dstruct = *dstruct
	_dstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDstruct(dstruct)
	}
	return _dstruct
}

// CreateORMDstruct enables dynamic staging of a Dstruct instance
func CreateORMDstruct(dstruct *Dstruct) {
	dstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDstruct(dstruct)
	}
}

// DeleteORMDstruct enables dynamic staging of a Dstruct instance
func DeleteORMDstruct(dstruct *Dstruct) {
	dstruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDstruct(dstruct)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMAstruct(Astruct *Astruct)
	CreateORMAstructBstruct2Use(AstructBstruct2Use *AstructBstruct2Use)
	CreateORMAstructBstructUse(AstructBstructUse *AstructBstructUse)
	CreateORMBstruct(Bstruct *Bstruct)
	CreateORMDstruct(Dstruct *Dstruct)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMAstruct(Astruct *Astruct)
	DeleteORMAstructBstruct2Use(AstructBstruct2Use *AstructBstruct2Use)
	DeleteORMAstructBstructUse(AstructBstructUse *AstructBstructUse)
	DeleteORMBstruct(Bstruct *Bstruct)
	DeleteORMDstruct(Dstruct *Dstruct)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Astructs = make(map[*Astruct]struct{})
	stage.Astructs_mapString = make(map[string]*Astruct)

	stage.AstructBstruct2Uses = make(map[*AstructBstruct2Use]struct{})
	stage.AstructBstruct2Uses_mapString = make(map[string]*AstructBstruct2Use)

	stage.AstructBstructUses = make(map[*AstructBstructUse]struct{})
	stage.AstructBstructUses_mapString = make(map[string]*AstructBstructUse)

	stage.Bstructs = make(map[*Bstruct]struct{})
	stage.Bstructs_mapString = make(map[string]*Bstruct)

	stage.Dstructs = make(map[*Dstruct]struct{})
	stage.Dstructs_mapString = make(map[string]*Dstruct)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Astructs = nil
	stage.Astructs_mapString = nil

	stage.AstructBstruct2Uses = nil
	stage.AstructBstruct2Uses_mapString = nil

	stage.AstructBstructUses = nil
	stage.AstructBstructUses_mapString = nil

	stage.Bstructs = nil
	stage.Bstructs_mapString = nil

	stage.Dstructs = nil
	stage.Dstructs_mapString = nil

}
