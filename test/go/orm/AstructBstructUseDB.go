// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AstructBstructUse_sql sql.NullBool
var dummy_AstructBstructUse_time time.Duration
var dummy_AstructBstructUse_sort sort.Float64Slice

// AstructBstructUseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model astructbstructuseAPI
type AstructBstructUseAPI struct {
	gorm.Model

	models.AstructBstructUse

	// encoding of pointers
	AstructBstructUsePointersEnconding
}

// AstructBstructUsePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AstructBstructUsePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Bstruct2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Bstruct2ID sql.NullInt64

	// Implementation of a reverse ID for field Astruct{}.AnarrayofbUse []*AstructBstructUse
	Astruct_AnarrayofbUseDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Astruct_AnarrayofbUseDBID_Index sql.NullInt64
}

// AstructBstructUseDB describes a astructbstructuse in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model astructbstructuseDB
type AstructBstructUseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field astructbstructuseDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString
	// encoding of pointers
	AstructBstructUsePointersEnconding
}

// AstructBstructUseDBs arrays astructbstructuseDBs
// swagger:response astructbstructuseDBsResponse
type AstructBstructUseDBs []AstructBstructUseDB

// AstructBstructUseDBResponse provides response
// swagger:response astructbstructuseDBResponse
type AstructBstructUseDBResponse struct {
	AstructBstructUseDB
}

// AstructBstructUseWOP is a AstructBstructUse without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AstructBstructUseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var AstructBstructUse_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAstructBstructUseStruct struct {
	// stores AstructBstructUseDB according to their gorm ID
	Map_AstructBstructUseDBID_AstructBstructUseDB *map[uint]*AstructBstructUseDB

	// stores AstructBstructUseDB ID according to AstructBstructUse address
	Map_AstructBstructUsePtr_AstructBstructUseDBID *map[*models.AstructBstructUse]uint

	// stores AstructBstructUse according to their gorm ID
	Map_AstructBstructUseDBID_AstructBstructUsePtr *map[uint]*models.AstructBstructUse

	db *gorm.DB
}

func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) GetDB() *gorm.DB {
	return backRepoAstructBstructUse.db
}

// GetAstructBstructUseDBFromAstructBstructUsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) GetAstructBstructUseDBFromAstructBstructUsePtr(astructbstructuse *models.AstructBstructUse) (astructbstructuseDB *AstructBstructUseDB) {
	id := (*backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astructbstructuse]
	astructbstructuseDB = (*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[id]
	return
}

// BackRepoAstructBstructUse.Init set up the BackRepo of the AstructBstructUse
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) Init(db *gorm.DB) (Error error) {

	if backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr != nil {
		err := errors.New("In Init, backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr should be nil")
		return err
	}

	if backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB != nil {
		err := errors.New("In Init, backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB should be nil")
		return err
	}

	if backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID != nil {
		err := errors.New("In Init, backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.AstructBstructUse, 0)
	backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr = &tmp

	tmpDB := make(map[uint]*AstructBstructUseDB, 0)
	backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB = &tmpDB

	tmpID := make(map[*models.AstructBstructUse]uint, 0)
	backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID = &tmpID

	backRepoAstructBstructUse.db = db
	return
}

// BackRepoAstructBstructUse.CommitPhaseOne commits all staged instances of AstructBstructUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for astructbstructuse := range stage.AstructBstructUses {
		backRepoAstructBstructUse.CommitPhaseOneInstance(astructbstructuse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, astructbstructuse := range *backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr {
		if _, ok := stage.AstructBstructUses[astructbstructuse]; !ok {
			backRepoAstructBstructUse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAstructBstructUse.CommitDeleteInstance commits deletion of AstructBstructUse to the BackRepo
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CommitDeleteInstance(id uint) (Error error) {

	astructbstructuse := (*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr)[id]

	// astructbstructuse is not staged anymore, remove astructbstructuseDB
	astructbstructuseDB := (*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[id]
	query := backRepoAstructBstructUse.db.Unscoped().Delete(&astructbstructuseDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID), astructbstructuse)
	delete((*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr), id)
	delete((*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB), id)

	return
}

// BackRepoAstructBstructUse.CommitPhaseOneInstance commits astructbstructuse staged instances of AstructBstructUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CommitPhaseOneInstance(astructbstructuse *models.AstructBstructUse) (Error error) {

	// check if the astructbstructuse is not commited yet
	if _, ok := (*backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astructbstructuse]; ok {
		return
	}

	// initiate astructbstructuse
	var astructbstructuseDB AstructBstructUseDB
	astructbstructuseDB.CopyBasicFieldsFromAstructBstructUse(astructbstructuse)

	query := backRepoAstructBstructUse.db.Create(&astructbstructuseDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astructbstructuse] = astructbstructuseDB.ID
	(*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr)[astructbstructuseDB.ID] = astructbstructuse
	(*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[astructbstructuseDB.ID] = &astructbstructuseDB

	return
}

// BackRepoAstructBstructUse.CommitPhaseTwo commits all staged instances of AstructBstructUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, astructbstructuse := range *backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr {
		backRepoAstructBstructUse.CommitPhaseTwoInstance(backRepo, idx, astructbstructuse)
	}

	return
}

// BackRepoAstructBstructUse.CommitPhaseTwoInstance commits {{structname }} of models.AstructBstructUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, astructbstructuse *models.AstructBstructUse) (Error error) {

	// fetch matching astructbstructuseDB
	if astructbstructuseDB, ok := (*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[idx]; ok {

		astructbstructuseDB.CopyBasicFieldsFromAstructBstructUse(astructbstructuse)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value astructbstructuse.Bstruct2 translates to updating the astructbstructuse.Bstruct2ID
		astructbstructuseDB.Bstruct2ID.Valid = true // allow for a 0 value (nil association)
		if astructbstructuse.Bstruct2 != nil {
			if Bstruct2Id, ok := (*backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID)[astructbstructuse.Bstruct2]; ok {
				astructbstructuseDB.Bstruct2ID.Int64 = int64(Bstruct2Id)
				astructbstructuseDB.Bstruct2ID.Valid = true
			}
		}

		query := backRepoAstructBstructUse.db.Save(&astructbstructuseDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AstructBstructUse intance %s", astructbstructuse.Name))
		return err
	}

	return
}

// BackRepoAstructBstructUse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CheckoutPhaseOne() (Error error) {

	astructbstructuseDBArray := make([]AstructBstructUseDB, 0)
	query := backRepoAstructBstructUse.db.Find(&astructbstructuseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	astructbstructuseInstancesToBeRemovedFromTheStage := make(map[*models.AstructBstructUse]any)
	for key, value := range models.Stage.AstructBstructUses {
		astructbstructuseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, astructbstructuseDB := range astructbstructuseDBArray {
		backRepoAstructBstructUse.CheckoutPhaseOneInstance(&astructbstructuseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		astructbstructuse, ok := (*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr)[astructbstructuseDB.ID]
		if ok {
			delete(astructbstructuseInstancesToBeRemovedFromTheStage, astructbstructuse)
		}
	}

	// remove from stage and back repo's 3 maps all astructbstructuses that are not in the checkout
	for astructbstructuse := range astructbstructuseInstancesToBeRemovedFromTheStage {
		astructbstructuse.Unstage()

		// remove instance from the back repo 3 maps
		astructbstructuseID := (*backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astructbstructuse]
		delete((*backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID), astructbstructuse)
		delete((*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB), astructbstructuseID)
		delete((*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr), astructbstructuseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a astructbstructuseDB that has been found in the DB, updates the backRepo and stages the
// models version of the astructbstructuseDB
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CheckoutPhaseOneInstance(astructbstructuseDB *AstructBstructUseDB) (Error error) {

	astructbstructuse, ok := (*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr)[astructbstructuseDB.ID]
	if !ok {
		astructbstructuse = new(models.AstructBstructUse)

		(*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr)[astructbstructuseDB.ID] = astructbstructuse
		(*backRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astructbstructuse] = astructbstructuseDB.ID

		// append model store with the new element
		astructbstructuse.Name = astructbstructuseDB.Name_Data.String
		astructbstructuse.Stage()
	}
	astructbstructuseDB.CopyBasicFieldsToAstructBstructUse(astructbstructuse)

	// preserve pointer to astructbstructuseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AstructBstructUseDBID_AstructBstructUseDB)[astructbstructuseDB hold variable pointers
	astructbstructuseDB_Data := *astructbstructuseDB
	preservedPtrToAstructBstructUse := &astructbstructuseDB_Data
	(*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[astructbstructuseDB.ID] = preservedPtrToAstructBstructUse

	return
}

// BackRepoAstructBstructUse.CheckoutPhaseTwo Checkouts all staged instances of AstructBstructUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, astructbstructuseDB := range *backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB {
		backRepoAstructBstructUse.CheckoutPhaseTwoInstance(backRepo, astructbstructuseDB)
	}
	return
}

// BackRepoAstructBstructUse.CheckoutPhaseTwoInstance Checkouts staged instances of AstructBstructUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, astructbstructuseDB *AstructBstructUseDB) (Error error) {

	astructbstructuse := (*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr)[astructbstructuseDB.ID]
	_ = astructbstructuse // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Bstruct2 field
	if astructbstructuseDB.Bstruct2ID.Int64 != 0 {
		astructbstructuse.Bstruct2 = (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr)[uint(astructbstructuseDB.Bstruct2ID.Int64)]
	}
	return
}

// CommitAstructBstructUse allows commit of a single astructbstructuse (if already staged)
func (backRepo *BackRepoStruct) CommitAstructBstructUse(astructbstructuse *models.AstructBstructUse) {
	backRepo.BackRepoAstructBstructUse.CommitPhaseOneInstance(astructbstructuse)
	if id, ok := (*backRepo.BackRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astructbstructuse]; ok {
		backRepo.BackRepoAstructBstructUse.CommitPhaseTwoInstance(backRepo, id, astructbstructuse)
	}
}

// CommitAstructBstructUse allows checkout of a single astructbstructuse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAstructBstructUse(astructbstructuse *models.AstructBstructUse) {
	// check if the astructbstructuse is staged
	if _, ok := (*backRepo.BackRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astructbstructuse]; ok {

		if id, ok := (*backRepo.BackRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astructbstructuse]; ok {
			var astructbstructuseDB AstructBstructUseDB
			astructbstructuseDB.ID = id

			if err := backRepo.BackRepoAstructBstructUse.db.First(&astructbstructuseDB, id).Error; err != nil {
				log.Panicln("CheckoutAstructBstructUse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAstructBstructUse.CheckoutPhaseOneInstance(&astructbstructuseDB)
			backRepo.BackRepoAstructBstructUse.CheckoutPhaseTwoInstance(backRepo, &astructbstructuseDB)
		}
	}
}

// CopyBasicFieldsFromAstructBstructUse
func (astructbstructuseDB *AstructBstructUseDB) CopyBasicFieldsFromAstructBstructUse(astructbstructuse *models.AstructBstructUse) {
	// insertion point for fields commit

	astructbstructuseDB.Name_Data.String = astructbstructuse.Name
	astructbstructuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAstructBstructUseWOP
func (astructbstructuseDB *AstructBstructUseDB) CopyBasicFieldsFromAstructBstructUseWOP(astructbstructuse *AstructBstructUseWOP) {
	// insertion point for fields commit

	astructbstructuseDB.Name_Data.String = astructbstructuse.Name
	astructbstructuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAstructBstructUse
func (astructbstructuseDB *AstructBstructUseDB) CopyBasicFieldsToAstructBstructUse(astructbstructuse *models.AstructBstructUse) {
	// insertion point for checkout of basic fields (back repo to stage)
	astructbstructuse.Name = astructbstructuseDB.Name_Data.String
}

// CopyBasicFieldsToAstructBstructUseWOP
func (astructbstructuseDB *AstructBstructUseDB) CopyBasicFieldsToAstructBstructUseWOP(astructbstructuse *AstructBstructUseWOP) {
	astructbstructuse.ID = int(astructbstructuseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	astructbstructuse.Name = astructbstructuseDB.Name_Data.String
}

// Backup generates a json file from a slice of all AstructBstructUseDB instances in the backrepo
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AstructBstructUseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AstructBstructUseDB, 0)
	for _, astructbstructuseDB := range *backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB {
		forBackup = append(forBackup, astructbstructuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json AstructBstructUse ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json AstructBstructUse file", err.Error())
	}
}

// Backup generates a json file from a slice of all AstructBstructUseDB instances in the backrepo
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AstructBstructUseDB, 0)
	for _, astructbstructuseDB := range *backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB {
		forBackup = append(forBackup, astructbstructuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AstructBstructUse")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AstructBstructUse_Fields, -1)
	for _, astructbstructuseDB := range forBackup {

		var astructbstructuseWOP AstructBstructUseWOP
		astructbstructuseDB.CopyBasicFieldsToAstructBstructUseWOP(&astructbstructuseWOP)

		row := sh.AddRow()
		row.WriteStruct(&astructbstructuseWOP, -1)
	}
}

// RestoreXL from the "AstructBstructUse" sheet all AstructBstructUseDB instances
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAstructBstructUseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AstructBstructUse"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAstructBstructUse.rowVisitorAstructBstructUse)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) rowVisitorAstructBstructUse(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var astructbstructuseWOP AstructBstructUseWOP
		row.ReadStruct(&astructbstructuseWOP)

		// add the unmarshalled struct to the stage
		astructbstructuseDB := new(AstructBstructUseDB)
		astructbstructuseDB.CopyBasicFieldsFromAstructBstructUseWOP(&astructbstructuseWOP)

		astructbstructuseDB_ID_atBackupTime := astructbstructuseDB.ID
		astructbstructuseDB.ID = 0
		query := backRepoAstructBstructUse.db.Create(astructbstructuseDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[astructbstructuseDB.ID] = astructbstructuseDB
		BackRepoAstructBstructUseid_atBckpTime_newID[astructbstructuseDB_ID_atBackupTime] = astructbstructuseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AstructBstructUseDB.json" in dirPath that stores an array
// of AstructBstructUseDB and stores it in the database
// the map BackRepoAstructBstructUseid_atBckpTime_newID is updated accordingly
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAstructBstructUseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AstructBstructUseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json AstructBstructUse file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AstructBstructUseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AstructBstructUseDBID_AstructBstructUseDB
	for _, astructbstructuseDB := range forRestore {

		astructbstructuseDB_ID_atBackupTime := astructbstructuseDB.ID
		astructbstructuseDB.ID = 0
		query := backRepoAstructBstructUse.db.Create(astructbstructuseDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[astructbstructuseDB.ID] = astructbstructuseDB
		BackRepoAstructBstructUseid_atBckpTime_newID[astructbstructuseDB_ID_atBackupTime] = astructbstructuseDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json AstructBstructUse file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AstructBstructUse>id_atBckpTime_newID
// to compute new index
func (backRepoAstructBstructUse *BackRepoAstructBstructUseStruct) RestorePhaseTwo() {

	for _, astructbstructuseDB := range *backRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB {

		// next line of code is to avert unused variable compilation error
		_ = astructbstructuseDB

		// insertion point for reindexing pointers encoding
		// reindexing Bstruct2 field
		if astructbstructuseDB.Bstruct2ID.Int64 != 0 {
			astructbstructuseDB.Bstruct2ID.Int64 = int64(BackRepoBstructid_atBckpTime_newID[uint(astructbstructuseDB.Bstruct2ID.Int64)])
			astructbstructuseDB.Bstruct2ID.Valid = true
		}

		// This reindex astructbstructuse.AnarrayofbUse
		if astructbstructuseDB.Astruct_AnarrayofbUseDBID.Int64 != 0 {
			astructbstructuseDB.Astruct_AnarrayofbUseDBID.Int64 =
				int64(BackRepoAstructid_atBckpTime_newID[uint(astructbstructuseDB.Astruct_AnarrayofbUseDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoAstructBstructUse.db.Model(astructbstructuseDB).Updates(*astructbstructuseDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAstructBstructUseid_atBckpTime_newID map[uint]uint
