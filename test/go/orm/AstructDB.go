// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Astruct_sql sql.NullBool
var dummy_Astruct_time time.Duration
var dummy_Astruct_sort sort.Float64Slice

// AstructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model astructAPI
type AstructAPI struct {
	gorm.Model

	models.Astruct_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AstructPointersEncoding AstructPointersEncoding
}

// AstructPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AstructPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Associationtob is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AssociationtobID sql.NullInt64

	// field Anarrayofb is a slice of pointers to another Struct (optional or 0..1)
	Anarrayofb IntSlice `gorm:"type:TEXT"`

	// field Anotherassociationtob_2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Anotherassociationtob_2ID sql.NullInt64

	// field Bstruct is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	BstructID sql.NullInt64

	// field Bstruct2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Bstruct2ID sql.NullInt64

	// field Dstruct is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DstructID sql.NullInt64

	// field Dstruct2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Dstruct2ID sql.NullInt64

	// field Dstruct3 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Dstruct3ID sql.NullInt64

	// field Dstruct4 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Dstruct4ID sql.NullInt64

	// field Anarrayofa is a slice of pointers to another Struct (optional or 0..1)
	Anarrayofa IntSlice `gorm:"type:TEXT"`

	// field Anotherarrayofb is a slice of pointers to another Struct (optional or 0..1)
	Anotherarrayofb IntSlice `gorm:"type:TEXT"`

	// field AnarrayofbUse is a slice of pointers to another Struct (optional or 0..1)
	AnarrayofbUse IntSlice `gorm:"type:TEXT"`

	// field Anarrayofb2Use is a slice of pointers to another Struct (optional or 0..1)
	Anarrayofb2Use IntSlice `gorm:"type:TEXT"`

	// field AnAstruct is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnAstructID sql.NullInt64
}

// AstructDB describes a astruct in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model astructDB
type AstructDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field astructDB.Name
	Name_Data sql.NullString

	AnonymousStructField1 struct {

		// Declation for basic field astructDB.TheName1
		TheName1_Data sql.NullString

	} `gorm:"embedded"`

	AnonymousStructField2 struct {

		// Declation for basic field astructDB.TheName1
		TheName1_Data sql.NullString

	} `gorm:"embedded"`

	// Declation for basic field astructDB.Date
	Date_Data sql.NullTime

	// Declation for basic field astructDB.Booleanfield
	// provide the sql storage for the boolan
	Booleanfield_Data sql.NullBool

	// Declation for basic field astructDB.Aenum
	Aenum_Data sql.NullString

	// Declation for basic field astructDB.Aenum_2
	Aenum_2_Data sql.NullString

	// Declation for basic field astructDB.Benum
	Benum_Data sql.NullString

	// Declation for basic field astructDB.CEnum
	CEnum_Data sql.NullInt64

	// Declation for basic field astructDB.CName
	CName_Data sql.NullString

	// Declation for basic field astructDB.CFloatfield
	CFloatfield_Data sql.NullFloat64

	// Declation for basic field astructDB.Floatfield
	Floatfield_Data sql.NullFloat64

	// Declation for basic field astructDB.Intfield
	Intfield_Data sql.NullInt64

	// Declation for basic field astructDB.Anotherbooleanfield
	// provide the sql storage for the boolan
	Anotherbooleanfield_Data sql.NullBool

	// Declation for basic field astructDB.Duration1
	Duration1_Data sql.NullInt64

	// Declation for basic field astructDB.StructRef
	StructRef_Data sql.NullString

	// Declation for basic field astructDB.FieldRef
	FieldRef_Data sql.NullString

	// Declation for basic field astructDB.EnumIntRef
	EnumIntRef_Data sql.NullString

	// Declation for basic field astructDB.EnumStringRef
	EnumStringRef_Data sql.NullString

	// Declation for basic field astructDB.EnumValue
	EnumValue_Data sql.NullString

	// Declation for basic field astructDB.ConstIdentifierValue
	ConstIdentifierValue_Data sql.NullString

	// Declation for basic field astructDB.TextFieldBespokeSize
	TextFieldBespokeSize_Data sql.NullString

	// Declation for basic field astructDB.TextArea
	TextArea_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AstructPointersEncoding
}

// AstructDBs arrays astructDBs
// swagger:response astructDBsResponse
type AstructDBs []AstructDB

// AstructDBResponse provides response
// swagger:response astructDBResponse
type AstructDBResponse struct {
	AstructDB
}

// AstructWOP is a Astruct without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AstructWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	AnonymousStructField1 struct {

		TheName1 string `xlsx:"2"`

	} `gorm:"embedded"`

	AnonymousStructField2 struct {

		TheName1 string `xlsx:"3"`

	} `gorm:"embedded"`

	Date time.Time `xlsx:"4"`

	Booleanfield bool `xlsx:"5"`

	Aenum models.AEnumType `xlsx:"6"`

	Aenum_2 models.AEnumType `xlsx:"7"`

	Benum models.BEnumType `xlsx:"8"`

	CEnum models.CEnumTypeInt `xlsx:"9"`

	CName string `xlsx:"10"`

	CFloatfield float64 `xlsx:"11"`

	Floatfield float64 `xlsx:"12"`

	Intfield int `xlsx:"13"`

	Anotherbooleanfield bool `xlsx:"14"`

	Duration1 time.Duration `xlsx:"15"`

	StructRef string `xlsx:"16"`

	FieldRef string `xlsx:"17"`

	EnumIntRef string `xlsx:"18"`

	EnumStringRef string `xlsx:"19"`

	EnumValue string `xlsx:"20"`

	ConstIdentifierValue string `xlsx:"21"`

	TextFieldBespokeSize string `xlsx:"22"`

	TextArea string `xlsx:"23"`
	// insertion for WOP pointer fields
}

var Astruct_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"AnonymousStructField1.TheName1",
	"AnonymousStructField2.TheName1",
	"Date",
	"Booleanfield",
	"Aenum",
	"Aenum_2",
	"Benum",
	"CEnum",
	"CName",
	"CFloatfield",
	"Floatfield",
	"Intfield",
	"Anotherbooleanfield",
	"Duration1",
	"StructRef",
	"FieldRef",
	"EnumIntRef",
	"EnumStringRef",
	"EnumValue",
	"ConstIdentifierValue",
	"TextFieldBespokeSize",
	"TextArea",
}

type BackRepoAstructStruct struct {
	// stores AstructDB according to their gorm ID
	Map_AstructDBID_AstructDB map[uint]*AstructDB

	// stores AstructDB ID according to Astruct address
	Map_AstructPtr_AstructDBID map[*models.Astruct]uint

	// stores Astruct according to their gorm ID
	Map_AstructDBID_AstructPtr map[uint]*models.Astruct

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAstruct *BackRepoAstructStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAstruct.stage
	return
}

func (backRepoAstruct *BackRepoAstructStruct) GetDB() *gorm.DB {
	return backRepoAstruct.db
}

// GetAstructDBFromAstructPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAstruct *BackRepoAstructStruct) GetAstructDBFromAstructPtr(astruct *models.Astruct) (astructDB *AstructDB) {
	id := backRepoAstruct.Map_AstructPtr_AstructDBID[astruct]
	astructDB = backRepoAstruct.Map_AstructDBID_AstructDB[id]
	return
}

// BackRepoAstruct.CommitPhaseOne commits all staged instances of Astruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAstruct *BackRepoAstructStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for astruct := range stage.Astructs {
		backRepoAstruct.CommitPhaseOneInstance(astruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, astruct := range backRepoAstruct.Map_AstructDBID_AstructPtr {
		if _, ok := stage.Astructs[astruct]; !ok {
			backRepoAstruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAstruct.CommitDeleteInstance commits deletion of Astruct to the BackRepo
func (backRepoAstruct *BackRepoAstructStruct) CommitDeleteInstance(id uint) (Error error) {

	astruct := backRepoAstruct.Map_AstructDBID_AstructPtr[id]

	// astruct is not staged anymore, remove astructDB
	astructDB := backRepoAstruct.Map_AstructDBID_AstructDB[id]
	query := backRepoAstruct.db.Unscoped().Delete(&astructDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAstruct.Map_AstructPtr_AstructDBID, astruct)
	delete(backRepoAstruct.Map_AstructDBID_AstructPtr, id)
	delete(backRepoAstruct.Map_AstructDBID_AstructDB, id)

	return
}

// BackRepoAstruct.CommitPhaseOneInstance commits astruct staged instances of Astruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAstruct *BackRepoAstructStruct) CommitPhaseOneInstance(astruct *models.Astruct) (Error error) {

	// check if the astruct is not commited yet
	if _, ok := backRepoAstruct.Map_AstructPtr_AstructDBID[astruct]; ok {
		return
	}

	// initiate astruct
	var astructDB AstructDB
	astructDB.CopyBasicFieldsFromAstruct(astruct)

	query := backRepoAstruct.db.Create(&astructDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAstruct.Map_AstructPtr_AstructDBID[astruct] = astructDB.ID
	backRepoAstruct.Map_AstructDBID_AstructPtr[astructDB.ID] = astruct
	backRepoAstruct.Map_AstructDBID_AstructDB[astructDB.ID] = &astructDB

	return
}

// BackRepoAstruct.CommitPhaseTwo commits all staged instances of Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, astruct := range backRepoAstruct.Map_AstructDBID_AstructPtr {
		backRepoAstruct.CommitPhaseTwoInstance(backRepo, idx, astruct)
	}

	return
}

// BackRepoAstruct.CommitPhaseTwoInstance commits {{structname }} of models.Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, astruct *models.Astruct) (Error error) {

	// fetch matching astructDB
	if astructDB, ok := backRepoAstruct.Map_AstructDBID_AstructDB[idx]; ok {

		astructDB.CopyBasicFieldsFromAstruct(astruct)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value astruct.Associationtob translates to updating the astruct.AssociationtobID
		astructDB.AssociationtobID.Valid = true // allow for a 0 value (nil association)
		if astruct.Associationtob != nil {
			if AssociationtobId, ok := backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID[astruct.Associationtob]; ok {
				astructDB.AssociationtobID.Int64 = int64(AssociationtobId)
				astructDB.AssociationtobID.Valid = true
			}
		} else {
			astructDB.AssociationtobID.Int64 = 0
			astructDB.AssociationtobID.Valid = true
		}

		// 1. reset
		astructDB.AstructPointersEncoding.Anarrayofb = make([]int, 0)
		// 2. encode
		for _, bstructAssocEnd := range astruct.Anarrayofb {
			bstructAssocEnd_DB :=
				backRepo.BackRepoBstruct.GetBstructDBFromBstructPtr(bstructAssocEnd)
			
			// the stage might be inconsistant, meaning that the bstructAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if bstructAssocEnd_DB == nil {
				continue
			}
			
			astructDB.AstructPointersEncoding.Anarrayofb =
				append(astructDB.AstructPointersEncoding.Anarrayofb, int(bstructAssocEnd_DB.ID))
		}

		// commit pointer value astruct.Anotherassociationtob_2 translates to updating the astruct.Anotherassociationtob_2ID
		astructDB.Anotherassociationtob_2ID.Valid = true // allow for a 0 value (nil association)
		if astruct.Anotherassociationtob_2 != nil {
			if Anotherassociationtob_2Id, ok := backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID[astruct.Anotherassociationtob_2]; ok {
				astructDB.Anotherassociationtob_2ID.Int64 = int64(Anotherassociationtob_2Id)
				astructDB.Anotherassociationtob_2ID.Valid = true
			}
		} else {
			astructDB.Anotherassociationtob_2ID.Int64 = 0
			astructDB.Anotherassociationtob_2ID.Valid = true
		}

		// commit pointer value astruct.Bstruct translates to updating the astruct.BstructID
		astructDB.BstructID.Valid = true // allow for a 0 value (nil association)
		if astruct.Bstruct != nil {
			if BstructId, ok := backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID[astruct.Bstruct]; ok {
				astructDB.BstructID.Int64 = int64(BstructId)
				astructDB.BstructID.Valid = true
			}
		} else {
			astructDB.BstructID.Int64 = 0
			astructDB.BstructID.Valid = true
		}

		// commit pointer value astruct.Bstruct2 translates to updating the astruct.Bstruct2ID
		astructDB.Bstruct2ID.Valid = true // allow for a 0 value (nil association)
		if astruct.Bstruct2 != nil {
			if Bstruct2Id, ok := backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID[astruct.Bstruct2]; ok {
				astructDB.Bstruct2ID.Int64 = int64(Bstruct2Id)
				astructDB.Bstruct2ID.Valid = true
			}
		} else {
			astructDB.Bstruct2ID.Int64 = 0
			astructDB.Bstruct2ID.Valid = true
		}

		// commit pointer value astruct.Dstruct translates to updating the astruct.DstructID
		astructDB.DstructID.Valid = true // allow for a 0 value (nil association)
		if astruct.Dstruct != nil {
			if DstructId, ok := backRepo.BackRepoDstruct.Map_DstructPtr_DstructDBID[astruct.Dstruct]; ok {
				astructDB.DstructID.Int64 = int64(DstructId)
				astructDB.DstructID.Valid = true
			}
		} else {
			astructDB.DstructID.Int64 = 0
			astructDB.DstructID.Valid = true
		}

		// commit pointer value astruct.Dstruct2 translates to updating the astruct.Dstruct2ID
		astructDB.Dstruct2ID.Valid = true // allow for a 0 value (nil association)
		if astruct.Dstruct2 != nil {
			if Dstruct2Id, ok := backRepo.BackRepoDstruct.Map_DstructPtr_DstructDBID[astruct.Dstruct2]; ok {
				astructDB.Dstruct2ID.Int64 = int64(Dstruct2Id)
				astructDB.Dstruct2ID.Valid = true
			}
		} else {
			astructDB.Dstruct2ID.Int64 = 0
			astructDB.Dstruct2ID.Valid = true
		}

		// commit pointer value astruct.Dstruct3 translates to updating the astruct.Dstruct3ID
		astructDB.Dstruct3ID.Valid = true // allow for a 0 value (nil association)
		if astruct.Dstruct3 != nil {
			if Dstruct3Id, ok := backRepo.BackRepoDstruct.Map_DstructPtr_DstructDBID[astruct.Dstruct3]; ok {
				astructDB.Dstruct3ID.Int64 = int64(Dstruct3Id)
				astructDB.Dstruct3ID.Valid = true
			}
		} else {
			astructDB.Dstruct3ID.Int64 = 0
			astructDB.Dstruct3ID.Valid = true
		}

		// commit pointer value astruct.Dstruct4 translates to updating the astruct.Dstruct4ID
		astructDB.Dstruct4ID.Valid = true // allow for a 0 value (nil association)
		if astruct.Dstruct4 != nil {
			if Dstruct4Id, ok := backRepo.BackRepoDstruct.Map_DstructPtr_DstructDBID[astruct.Dstruct4]; ok {
				astructDB.Dstruct4ID.Int64 = int64(Dstruct4Id)
				astructDB.Dstruct4ID.Valid = true
			}
		} else {
			astructDB.Dstruct4ID.Int64 = 0
			astructDB.Dstruct4ID.Valid = true
		}

		// 1. reset
		astructDB.AstructPointersEncoding.Anarrayofa = make([]int, 0)
		// 2. encode
		for _, astructAssocEnd := range astruct.Anarrayofa {
			astructAssocEnd_DB :=
				backRepo.BackRepoAstruct.GetAstructDBFromAstructPtr(astructAssocEnd)
			
			// the stage might be inconsistant, meaning that the astructAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if astructAssocEnd_DB == nil {
				continue
			}
			
			astructDB.AstructPointersEncoding.Anarrayofa =
				append(astructDB.AstructPointersEncoding.Anarrayofa, int(astructAssocEnd_DB.ID))
		}

		// 1. reset
		astructDB.AstructPointersEncoding.Anotherarrayofb = make([]int, 0)
		// 2. encode
		for _, bstructAssocEnd := range astruct.Anotherarrayofb {
			bstructAssocEnd_DB :=
				backRepo.BackRepoBstruct.GetBstructDBFromBstructPtr(bstructAssocEnd)
			
			// the stage might be inconsistant, meaning that the bstructAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if bstructAssocEnd_DB == nil {
				continue
			}
			
			astructDB.AstructPointersEncoding.Anotherarrayofb =
				append(astructDB.AstructPointersEncoding.Anotherarrayofb, int(bstructAssocEnd_DB.ID))
		}

		// 1. reset
		astructDB.AstructPointersEncoding.AnarrayofbUse = make([]int, 0)
		// 2. encode
		for _, astructbstructuseAssocEnd := range astruct.AnarrayofbUse {
			astructbstructuseAssocEnd_DB :=
				backRepo.BackRepoAstructBstructUse.GetAstructBstructUseDBFromAstructBstructUsePtr(astructbstructuseAssocEnd)
			
			// the stage might be inconsistant, meaning that the astructbstructuseAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if astructbstructuseAssocEnd_DB == nil {
				continue
			}
			
			astructDB.AstructPointersEncoding.AnarrayofbUse =
				append(astructDB.AstructPointersEncoding.AnarrayofbUse, int(astructbstructuseAssocEnd_DB.ID))
		}

		// 1. reset
		astructDB.AstructPointersEncoding.Anarrayofb2Use = make([]int, 0)
		// 2. encode
		for _, astructbstruct2useAssocEnd := range astruct.Anarrayofb2Use {
			astructbstruct2useAssocEnd_DB :=
				backRepo.BackRepoAstructBstruct2Use.GetAstructBstruct2UseDBFromAstructBstruct2UsePtr(astructbstruct2useAssocEnd)
			
			// the stage might be inconsistant, meaning that the astructbstruct2useAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if astructbstruct2useAssocEnd_DB == nil {
				continue
			}
			
			astructDB.AstructPointersEncoding.Anarrayofb2Use =
				append(astructDB.AstructPointersEncoding.Anarrayofb2Use, int(astructbstruct2useAssocEnd_DB.ID))
		}

		// commit pointer value astruct.AnAstruct translates to updating the astruct.AnAstructID
		astructDB.AnAstructID.Valid = true // allow for a 0 value (nil association)
		if astruct.AnAstruct != nil {
			if AnAstructId, ok := backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID[astruct.AnAstruct]; ok {
				astructDB.AnAstructID.Int64 = int64(AnAstructId)
				astructDB.AnAstructID.Valid = true
			}
		} else {
			astructDB.AnAstructID.Int64 = 0
			astructDB.AnAstructID.Valid = true
		}

		query := backRepoAstruct.db.Save(&astructDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Astruct intance %s", astruct.Name))
		return err
	}

	return
}

// BackRepoAstruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAstruct *BackRepoAstructStruct) CheckoutPhaseOne() (Error error) {

	astructDBArray := make([]AstructDB, 0)
	query := backRepoAstruct.db.Find(&astructDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	astructInstancesToBeRemovedFromTheStage := make(map[*models.Astruct]any)
	for key, value := range backRepoAstruct.stage.Astructs {
		astructInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, astructDB := range astructDBArray {
		backRepoAstruct.CheckoutPhaseOneInstance(&astructDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		astruct, ok := backRepoAstruct.Map_AstructDBID_AstructPtr[astructDB.ID]
		if ok {
			delete(astructInstancesToBeRemovedFromTheStage, astruct)
		}
	}

	// remove from stage and back repo's 3 maps all astructs that are not in the checkout
	for astruct := range astructInstancesToBeRemovedFromTheStage {
		astruct.Unstage(backRepoAstruct.GetStage())

		// remove instance from the back repo 3 maps
		astructID := backRepoAstruct.Map_AstructPtr_AstructDBID[astruct]
		delete(backRepoAstruct.Map_AstructPtr_AstructDBID, astruct)
		delete(backRepoAstruct.Map_AstructDBID_AstructDB, astructID)
		delete(backRepoAstruct.Map_AstructDBID_AstructPtr, astructID)
	}

	return
}

// CheckoutPhaseOneInstance takes a astructDB that has been found in the DB, updates the backRepo and stages the
// models version of the astructDB
func (backRepoAstruct *BackRepoAstructStruct) CheckoutPhaseOneInstance(astructDB *AstructDB) (Error error) {

	astruct, ok := backRepoAstruct.Map_AstructDBID_AstructPtr[astructDB.ID]
	if !ok {
		astruct = new(models.Astruct)

		backRepoAstruct.Map_AstructDBID_AstructPtr[astructDB.ID] = astruct
		backRepoAstruct.Map_AstructPtr_AstructDBID[astruct] = astructDB.ID

		// append model store with the new element
		astruct.Name = astructDB.Name_Data.String
		astruct.Stage(backRepoAstruct.GetStage())
	}
	astructDB.CopyBasicFieldsToAstruct(astruct)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	astruct.Stage(backRepoAstruct.GetStage())

	// preserve pointer to astructDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AstructDBID_AstructDB)[astructDB hold variable pointers
	astructDB_Data := *astructDB
	preservedPtrToAstruct := &astructDB_Data
	backRepoAstruct.Map_AstructDBID_AstructDB[astructDB.ID] = preservedPtrToAstruct

	return
}

// BackRepoAstruct.CheckoutPhaseTwo Checkouts all staged instances of Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, astructDB := range backRepoAstruct.Map_AstructDBID_AstructDB {
		backRepoAstruct.CheckoutPhaseTwoInstance(backRepo, astructDB)
	}
	return
}

// BackRepoAstruct.CheckoutPhaseTwoInstance Checkouts staged instances of Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, astructDB *AstructDB) (Error error) {

	astruct := backRepoAstruct.Map_AstructDBID_AstructPtr[astructDB.ID]

	astructDB.DecodePointers(backRepo, astruct)

	return
}

func (astructDB *AstructDB) DecodePointers(backRepo *BackRepoStruct, astruct *models.Astruct) {

	// insertion point for checkout of pointer encoding
	// Associationtob field, hello here
	astruct.Associationtob = nil
	if astructDB.AssociationtobID.Int64 != 0 {
		astruct.Associationtob = backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr[uint(astructDB.AssociationtobID.Int64)]
	}
	// This loop redeem astruct.Anarrayofb in the stage from the encode in the back repo
	// It parses all BstructDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.Anarrayofb = astruct.Anarrayofb[:0]
	for _, _Bstructid := range astructDB.AstructPointersEncoding.Anarrayofb {
		astruct.Anarrayofb = append(astruct.Anarrayofb, backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr[uint(_Bstructid)])
	}

	// Anotherassociationtob_2 field, hello here
	astruct.Anotherassociationtob_2 = nil
	if astructDB.Anotherassociationtob_2ID.Int64 != 0 {
		astruct.Anotherassociationtob_2 = backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr[uint(astructDB.Anotherassociationtob_2ID.Int64)]
	}
	// Bstruct field, hello here
	astruct.Bstruct = nil
	if astructDB.BstructID.Int64 != 0 {
		astruct.Bstruct = backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr[uint(astructDB.BstructID.Int64)]
	}
	// Bstruct2 field, hello here
	astruct.Bstruct2 = nil
	if astructDB.Bstruct2ID.Int64 != 0 {
		astruct.Bstruct2 = backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr[uint(astructDB.Bstruct2ID.Int64)]
	}
	// Dstruct field, hello here
	astruct.Dstruct = nil
	if astructDB.DstructID.Int64 != 0 {
		astruct.Dstruct = backRepo.BackRepoDstruct.Map_DstructDBID_DstructPtr[uint(astructDB.DstructID.Int64)]
	}
	// Dstruct2 field, hello here
	astruct.Dstruct2 = nil
	if astructDB.Dstruct2ID.Int64 != 0 {
		astruct.Dstruct2 = backRepo.BackRepoDstruct.Map_DstructDBID_DstructPtr[uint(astructDB.Dstruct2ID.Int64)]
	}
	// Dstruct3 field, hello here
	astruct.Dstruct3 = nil
	if astructDB.Dstruct3ID.Int64 != 0 {
		astruct.Dstruct3 = backRepo.BackRepoDstruct.Map_DstructDBID_DstructPtr[uint(astructDB.Dstruct3ID.Int64)]
	}
	// Dstruct4 field, hello here
	astruct.Dstruct4 = nil
	if astructDB.Dstruct4ID.Int64 != 0 {
		astruct.Dstruct4 = backRepo.BackRepoDstruct.Map_DstructDBID_DstructPtr[uint(astructDB.Dstruct4ID.Int64)]
	}
	// This loop redeem astruct.Anarrayofa in the stage from the encode in the back repo
	// It parses all AstructDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.Anarrayofa = astruct.Anarrayofa[:0]
	for _, _Astructid := range astructDB.AstructPointersEncoding.Anarrayofa {
		astruct.Anarrayofa = append(astruct.Anarrayofa, backRepo.BackRepoAstruct.Map_AstructDBID_AstructPtr[uint(_Astructid)])
	}

	// This loop redeem astruct.Anotherarrayofb in the stage from the encode in the back repo
	// It parses all BstructDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.Anotherarrayofb = astruct.Anotherarrayofb[:0]
	for _, _Bstructid := range astructDB.AstructPointersEncoding.Anotherarrayofb {
		astruct.Anotherarrayofb = append(astruct.Anotherarrayofb, backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr[uint(_Bstructid)])
	}

	// This loop redeem astruct.AnarrayofbUse in the stage from the encode in the back repo
	// It parses all AstructBstructUseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.AnarrayofbUse = astruct.AnarrayofbUse[:0]
	for _, _AstructBstructUseid := range astructDB.AstructPointersEncoding.AnarrayofbUse {
		astruct.AnarrayofbUse = append(astruct.AnarrayofbUse, backRepo.BackRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr[uint(_AstructBstructUseid)])
	}

	// This loop redeem astruct.Anarrayofb2Use in the stage from the encode in the back repo
	// It parses all AstructBstruct2UseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.Anarrayofb2Use = astruct.Anarrayofb2Use[:0]
	for _, _AstructBstruct2Useid := range astructDB.AstructPointersEncoding.Anarrayofb2Use {
		astruct.Anarrayofb2Use = append(astruct.Anarrayofb2Use, backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr[uint(_AstructBstruct2Useid)])
	}

	// AnAstruct field, hello here
	astruct.AnAstruct = nil
	if astructDB.AnAstructID.Int64 != 0 {
		astruct.AnAstruct = backRepo.BackRepoAstruct.Map_AstructDBID_AstructPtr[uint(astructDB.AnAstructID.Int64)]
	}
	return
}

// CommitAstruct allows commit of a single astruct (if already staged)
func (backRepo *BackRepoStruct) CommitAstruct(astruct *models.Astruct) {
	backRepo.BackRepoAstruct.CommitPhaseOneInstance(astruct)
	if id, ok := backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID[astruct]; ok {
		backRepo.BackRepoAstruct.CommitPhaseTwoInstance(backRepo, id, astruct)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAstruct allows checkout of a single astruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAstruct(astruct *models.Astruct) {
	// check if the astruct is staged
	if _, ok := backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID[astruct]; ok {

		if id, ok := backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID[astruct]; ok {
			var astructDB AstructDB
			astructDB.ID = id

			if err := backRepo.BackRepoAstruct.db.First(&astructDB, id).Error; err != nil {
				log.Fatalln("CheckoutAstruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAstruct.CheckoutPhaseOneInstance(&astructDB)
			backRepo.BackRepoAstruct.CheckoutPhaseTwoInstance(backRepo, &astructDB)
		}
	}
}

// CopyBasicFieldsFromAstruct
func (astructDB *AstructDB) CopyBasicFieldsFromAstruct(astruct *models.Astruct) {
	// insertion point for fields commit

	astructDB.Name_Data.String = astruct.Name
	astructDB.Name_Data.Valid = true

	astructDB.AnonymousStructField1.TheName1_Data.String = astruct.AnonymousStructField1.TheName1
	astructDB.AnonymousStructField1.TheName1_Data.Valid = true

	astructDB.AnonymousStructField2.TheName1_Data.String = astruct.AnonymousStructField2.TheName1
	astructDB.AnonymousStructField2.TheName1_Data.Valid = true

	astructDB.Date_Data.Time = astruct.Date
	astructDB.Date_Data.Valid = true

	astructDB.Booleanfield_Data.Bool = astruct.Booleanfield
	astructDB.Booleanfield_Data.Valid = true

	astructDB.Aenum_Data.String = astruct.Aenum.ToString()
	astructDB.Aenum_Data.Valid = true

	astructDB.Aenum_2_Data.String = astruct.Aenum_2.ToString()
	astructDB.Aenum_2_Data.Valid = true

	astructDB.Benum_Data.String = astruct.Benum.ToString()
	astructDB.Benum_Data.Valid = true

	astructDB.CEnum_Data.Int64 = int64(astruct.CEnum)
	astructDB.CEnum_Data.Valid = true

	astructDB.CName_Data.String = astruct.CName
	astructDB.CName_Data.Valid = true

	astructDB.CFloatfield_Data.Float64 = astruct.CFloatfield
	astructDB.CFloatfield_Data.Valid = true

	astructDB.Floatfield_Data.Float64 = astruct.Floatfield
	astructDB.Floatfield_Data.Valid = true

	astructDB.Intfield_Data.Int64 = int64(astruct.Intfield)
	astructDB.Intfield_Data.Valid = true

	astructDB.Anotherbooleanfield_Data.Bool = astruct.Anotherbooleanfield
	astructDB.Anotherbooleanfield_Data.Valid = true

	astructDB.Duration1_Data.Int64 = int64(astruct.Duration1)
	astructDB.Duration1_Data.Valid = true

	astructDB.StructRef_Data.String = astruct.StructRef
	astructDB.StructRef_Data.Valid = true

	astructDB.FieldRef_Data.String = astruct.FieldRef
	astructDB.FieldRef_Data.Valid = true

	astructDB.EnumIntRef_Data.String = astruct.EnumIntRef
	astructDB.EnumIntRef_Data.Valid = true

	astructDB.EnumStringRef_Data.String = astruct.EnumStringRef
	astructDB.EnumStringRef_Data.Valid = true

	astructDB.EnumValue_Data.String = astruct.EnumValue
	astructDB.EnumValue_Data.Valid = true

	astructDB.ConstIdentifierValue_Data.String = astruct.ConstIdentifierValue
	astructDB.ConstIdentifierValue_Data.Valid = true

	astructDB.TextFieldBespokeSize_Data.String = astruct.TextFieldBespokeSize
	astructDB.TextFieldBespokeSize_Data.Valid = true

	astructDB.TextArea_Data.String = astruct.TextArea
	astructDB.TextArea_Data.Valid = true
}

// CopyBasicFieldsFromAstruct_WOP
func (astructDB *AstructDB) CopyBasicFieldsFromAstruct_WOP(astruct *models.Astruct_WOP) {
	// insertion point for fields commit

	astructDB.Name_Data.String = astruct.Name
	astructDB.Name_Data.Valid = true

	astructDB.AnonymousStructField1.TheName1_Data.String = astruct.AnonymousStructField1.TheName1
	astructDB.AnonymousStructField1.TheName1_Data.Valid = true

	astructDB.AnonymousStructField2.TheName1_Data.String = astruct.AnonymousStructField2.TheName1
	astructDB.AnonymousStructField2.TheName1_Data.Valid = true

	astructDB.Date_Data.Time = astruct.Date
	astructDB.Date_Data.Valid = true

	astructDB.Booleanfield_Data.Bool = astruct.Booleanfield
	astructDB.Booleanfield_Data.Valid = true

	astructDB.Aenum_Data.String = astruct.Aenum.ToString()
	astructDB.Aenum_Data.Valid = true

	astructDB.Aenum_2_Data.String = astruct.Aenum_2.ToString()
	astructDB.Aenum_2_Data.Valid = true

	astructDB.Benum_Data.String = astruct.Benum.ToString()
	astructDB.Benum_Data.Valid = true

	astructDB.CEnum_Data.Int64 = int64(astruct.CEnum)
	astructDB.CEnum_Data.Valid = true

	astructDB.CName_Data.String = astruct.CName
	astructDB.CName_Data.Valid = true

	astructDB.CFloatfield_Data.Float64 = astruct.CFloatfield
	astructDB.CFloatfield_Data.Valid = true

	astructDB.Floatfield_Data.Float64 = astruct.Floatfield
	astructDB.Floatfield_Data.Valid = true

	astructDB.Intfield_Data.Int64 = int64(astruct.Intfield)
	astructDB.Intfield_Data.Valid = true

	astructDB.Anotherbooleanfield_Data.Bool = astruct.Anotherbooleanfield
	astructDB.Anotherbooleanfield_Data.Valid = true

	astructDB.Duration1_Data.Int64 = int64(astruct.Duration1)
	astructDB.Duration1_Data.Valid = true

	astructDB.StructRef_Data.String = astruct.StructRef
	astructDB.StructRef_Data.Valid = true

	astructDB.FieldRef_Data.String = astruct.FieldRef
	astructDB.FieldRef_Data.Valid = true

	astructDB.EnumIntRef_Data.String = astruct.EnumIntRef
	astructDB.EnumIntRef_Data.Valid = true

	astructDB.EnumStringRef_Data.String = astruct.EnumStringRef
	astructDB.EnumStringRef_Data.Valid = true

	astructDB.EnumValue_Data.String = astruct.EnumValue
	astructDB.EnumValue_Data.Valid = true

	astructDB.ConstIdentifierValue_Data.String = astruct.ConstIdentifierValue
	astructDB.ConstIdentifierValue_Data.Valid = true

	astructDB.TextFieldBespokeSize_Data.String = astruct.TextFieldBespokeSize
	astructDB.TextFieldBespokeSize_Data.Valid = true

	astructDB.TextArea_Data.String = astruct.TextArea
	astructDB.TextArea_Data.Valid = true
}

// CopyBasicFieldsFromAstructWOP
func (astructDB *AstructDB) CopyBasicFieldsFromAstructWOP(astruct *AstructWOP) {
	// insertion point for fields commit

	astructDB.Name_Data.String = astruct.Name
	astructDB.Name_Data.Valid = true

	astructDB.AnonymousStructField1.TheName1_Data.String = astruct.AnonymousStructField1.TheName1
	astructDB.AnonymousStructField1.TheName1_Data.Valid = true

	astructDB.AnonymousStructField2.TheName1_Data.String = astruct.AnonymousStructField2.TheName1
	astructDB.AnonymousStructField2.TheName1_Data.Valid = true

	astructDB.Date_Data.Time = astruct.Date
	astructDB.Date_Data.Valid = true

	astructDB.Booleanfield_Data.Bool = astruct.Booleanfield
	astructDB.Booleanfield_Data.Valid = true

	astructDB.Aenum_Data.String = astruct.Aenum.ToString()
	astructDB.Aenum_Data.Valid = true

	astructDB.Aenum_2_Data.String = astruct.Aenum_2.ToString()
	astructDB.Aenum_2_Data.Valid = true

	astructDB.Benum_Data.String = astruct.Benum.ToString()
	astructDB.Benum_Data.Valid = true

	astructDB.CEnum_Data.Int64 = int64(astruct.CEnum)
	astructDB.CEnum_Data.Valid = true

	astructDB.CName_Data.String = astruct.CName
	astructDB.CName_Data.Valid = true

	astructDB.CFloatfield_Data.Float64 = astruct.CFloatfield
	astructDB.CFloatfield_Data.Valid = true

	astructDB.Floatfield_Data.Float64 = astruct.Floatfield
	astructDB.Floatfield_Data.Valid = true

	astructDB.Intfield_Data.Int64 = int64(astruct.Intfield)
	astructDB.Intfield_Data.Valid = true

	astructDB.Anotherbooleanfield_Data.Bool = astruct.Anotherbooleanfield
	astructDB.Anotherbooleanfield_Data.Valid = true

	astructDB.Duration1_Data.Int64 = int64(astruct.Duration1)
	astructDB.Duration1_Data.Valid = true

	astructDB.StructRef_Data.String = astruct.StructRef
	astructDB.StructRef_Data.Valid = true

	astructDB.FieldRef_Data.String = astruct.FieldRef
	astructDB.FieldRef_Data.Valid = true

	astructDB.EnumIntRef_Data.String = astruct.EnumIntRef
	astructDB.EnumIntRef_Data.Valid = true

	astructDB.EnumStringRef_Data.String = astruct.EnumStringRef
	astructDB.EnumStringRef_Data.Valid = true

	astructDB.EnumValue_Data.String = astruct.EnumValue
	astructDB.EnumValue_Data.Valid = true

	astructDB.ConstIdentifierValue_Data.String = astruct.ConstIdentifierValue
	astructDB.ConstIdentifierValue_Data.Valid = true

	astructDB.TextFieldBespokeSize_Data.String = astruct.TextFieldBespokeSize
	astructDB.TextFieldBespokeSize_Data.Valid = true

	astructDB.TextArea_Data.String = astruct.TextArea
	astructDB.TextArea_Data.Valid = true
}

// CopyBasicFieldsToAstruct
func (astructDB *AstructDB) CopyBasicFieldsToAstruct(astruct *models.Astruct) {
	// insertion point for checkout of basic fields (back repo to stage)
	astruct.Name = astructDB.Name_Data.String
	astruct.AnonymousStructField1.TheName1 = astructDB.AnonymousStructField1.TheName1_Data.String
	astruct.AnonymousStructField2.TheName1 = astructDB.AnonymousStructField2.TheName1_Data.String
	astruct.Date = astructDB.Date_Data.Time
	astruct.Booleanfield = astructDB.Booleanfield_Data.Bool
	astruct.Aenum.FromString(astructDB.Aenum_Data.String)
	astruct.Aenum_2.FromString(astructDB.Aenum_2_Data.String)
	astruct.Benum.FromString(astructDB.Benum_Data.String)
	astruct.CEnum = models.CEnumTypeInt(astructDB.CEnum_Data.Int64)
	astruct.CName = astructDB.CName_Data.String
	astruct.CFloatfield = astructDB.CFloatfield_Data.Float64
	astruct.Floatfield = astructDB.Floatfield_Data.Float64
	astruct.Intfield = int(astructDB.Intfield_Data.Int64)
	astruct.Anotherbooleanfield = astructDB.Anotherbooleanfield_Data.Bool
	astruct.Duration1 = time.Duration(astructDB.Duration1_Data.Int64)
	astruct.StructRef = astructDB.StructRef_Data.String
	astruct.FieldRef = astructDB.FieldRef_Data.String
	astruct.EnumIntRef = astructDB.EnumIntRef_Data.String
	astruct.EnumStringRef = astructDB.EnumStringRef_Data.String
	astruct.EnumValue = astructDB.EnumValue_Data.String
	astruct.ConstIdentifierValue = astructDB.ConstIdentifierValue_Data.String
	astruct.TextFieldBespokeSize = astructDB.TextFieldBespokeSize_Data.String
	astruct.TextArea = astructDB.TextArea_Data.String
}

// CopyBasicFieldsToAstruct_WOP
func (astructDB *AstructDB) CopyBasicFieldsToAstruct_WOP(astruct *models.Astruct_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	astruct.Name = astructDB.Name_Data.String
	astruct.AnonymousStructField1.TheName1 = astructDB.AnonymousStructField1.TheName1_Data.String
	astruct.AnonymousStructField2.TheName1 = astructDB.AnonymousStructField2.TheName1_Data.String
	astruct.Date = astructDB.Date_Data.Time
	astruct.Booleanfield = astructDB.Booleanfield_Data.Bool
	astruct.Aenum.FromString(astructDB.Aenum_Data.String)
	astruct.Aenum_2.FromString(astructDB.Aenum_2_Data.String)
	astruct.Benum.FromString(astructDB.Benum_Data.String)
	astruct.CEnum = models.CEnumTypeInt(astructDB.CEnum_Data.Int64)
	astruct.CName = astructDB.CName_Data.String
	astruct.CFloatfield = astructDB.CFloatfield_Data.Float64
	astruct.Floatfield = astructDB.Floatfield_Data.Float64
	astruct.Intfield = int(astructDB.Intfield_Data.Int64)
	astruct.Anotherbooleanfield = astructDB.Anotherbooleanfield_Data.Bool
	astruct.Duration1 = time.Duration(astructDB.Duration1_Data.Int64)
	astruct.StructRef = astructDB.StructRef_Data.String
	astruct.FieldRef = astructDB.FieldRef_Data.String
	astruct.EnumIntRef = astructDB.EnumIntRef_Data.String
	astruct.EnumStringRef = astructDB.EnumStringRef_Data.String
	astruct.EnumValue = astructDB.EnumValue_Data.String
	astruct.ConstIdentifierValue = astructDB.ConstIdentifierValue_Data.String
	astruct.TextFieldBespokeSize = astructDB.TextFieldBespokeSize_Data.String
	astruct.TextArea = astructDB.TextArea_Data.String
}

// CopyBasicFieldsToAstructWOP
func (astructDB *AstructDB) CopyBasicFieldsToAstructWOP(astruct *AstructWOP) {
	astruct.ID = int(astructDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	astruct.Name = astructDB.Name_Data.String
	astruct.AnonymousStructField1.TheName1 = astructDB.AnonymousStructField1.TheName1_Data.String
	astruct.AnonymousStructField2.TheName1 = astructDB.AnonymousStructField2.TheName1_Data.String
	astruct.Date = astructDB.Date_Data.Time
	astruct.Booleanfield = astructDB.Booleanfield_Data.Bool
	astruct.Aenum.FromString(astructDB.Aenum_Data.String)
	astruct.Aenum_2.FromString(astructDB.Aenum_2_Data.String)
	astruct.Benum.FromString(astructDB.Benum_Data.String)
	astruct.CEnum = models.CEnumTypeInt(astructDB.CEnum_Data.Int64)
	astruct.CName = astructDB.CName_Data.String
	astruct.CFloatfield = astructDB.CFloatfield_Data.Float64
	astruct.Floatfield = astructDB.Floatfield_Data.Float64
	astruct.Intfield = int(astructDB.Intfield_Data.Int64)
	astruct.Anotherbooleanfield = astructDB.Anotherbooleanfield_Data.Bool
	astruct.Duration1 = time.Duration(astructDB.Duration1_Data.Int64)
	astruct.StructRef = astructDB.StructRef_Data.String
	astruct.FieldRef = astructDB.FieldRef_Data.String
	astruct.EnumIntRef = astructDB.EnumIntRef_Data.String
	astruct.EnumStringRef = astructDB.EnumStringRef_Data.String
	astruct.EnumValue = astructDB.EnumValue_Data.String
	astruct.ConstIdentifierValue = astructDB.ConstIdentifierValue_Data.String
	astruct.TextFieldBespokeSize = astructDB.TextFieldBespokeSize_Data.String
	astruct.TextArea = astructDB.TextArea_Data.String
}

// Backup generates a json file from a slice of all AstructDB instances in the backrepo
func (backRepoAstruct *BackRepoAstructStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AstructDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AstructDB, 0)
	for _, astructDB := range backRepoAstruct.Map_AstructDBID_AstructDB {
		forBackup = append(forBackup, astructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Astruct ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Astruct file", err.Error())
	}
}

// Backup generates a json file from a slice of all AstructDB instances in the backrepo
func (backRepoAstruct *BackRepoAstructStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AstructDB, 0)
	for _, astructDB := range backRepoAstruct.Map_AstructDBID_AstructDB {
		forBackup = append(forBackup, astructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Astruct")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Astruct_Fields, -1)
	for _, astructDB := range forBackup {

		var astructWOP AstructWOP
		astructDB.CopyBasicFieldsToAstructWOP(&astructWOP)

		row := sh.AddRow()
		row.WriteStruct(&astructWOP, -1)
	}
}

// RestoreXL from the "Astruct" sheet all AstructDB instances
func (backRepoAstruct *BackRepoAstructStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAstructid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Astruct"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAstruct.rowVisitorAstruct)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAstruct *BackRepoAstructStruct) rowVisitorAstruct(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var astructWOP AstructWOP
		row.ReadStruct(&astructWOP)

		// add the unmarshalled struct to the stage
		astructDB := new(AstructDB)
		astructDB.CopyBasicFieldsFromAstructWOP(&astructWOP)

		astructDB_ID_atBackupTime := astructDB.ID
		astructDB.ID = 0
		query := backRepoAstruct.db.Create(astructDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAstruct.Map_AstructDBID_AstructDB[astructDB.ID] = astructDB
		BackRepoAstructid_atBckpTime_newID[astructDB_ID_atBackupTime] = astructDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AstructDB.json" in dirPath that stores an array
// of AstructDB and stores it in the database
// the map BackRepoAstructid_atBckpTime_newID is updated accordingly
func (backRepoAstruct *BackRepoAstructStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAstructid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AstructDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Astruct file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AstructDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AstructDBID_AstructDB
	for _, astructDB := range forRestore {

		astructDB_ID_atBackupTime := astructDB.ID
		astructDB.ID = 0
		query := backRepoAstruct.db.Create(astructDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAstruct.Map_AstructDBID_AstructDB[astructDB.ID] = astructDB
		BackRepoAstructid_atBckpTime_newID[astructDB_ID_atBackupTime] = astructDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Astruct file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Astruct>id_atBckpTime_newID
// to compute new index
func (backRepoAstruct *BackRepoAstructStruct) RestorePhaseTwo() {

	for _, astructDB := range backRepoAstruct.Map_AstructDBID_AstructDB {

		// next line of code is to avert unused variable compilation error
		_ = astructDB

		// insertion point for reindexing pointers encoding
		// reindexing Associationtob field
		if astructDB.AssociationtobID.Int64 != 0 {
			astructDB.AssociationtobID.Int64 = int64(BackRepoBstructid_atBckpTime_newID[uint(astructDB.AssociationtobID.Int64)])
			astructDB.AssociationtobID.Valid = true
		}

		// reindexing Anotherassociationtob_2 field
		if astructDB.Anotherassociationtob_2ID.Int64 != 0 {
			astructDB.Anotherassociationtob_2ID.Int64 = int64(BackRepoBstructid_atBckpTime_newID[uint(astructDB.Anotherassociationtob_2ID.Int64)])
			astructDB.Anotherassociationtob_2ID.Valid = true
		}

		// reindexing Bstruct field
		if astructDB.BstructID.Int64 != 0 {
			astructDB.BstructID.Int64 = int64(BackRepoBstructid_atBckpTime_newID[uint(astructDB.BstructID.Int64)])
			astructDB.BstructID.Valid = true
		}

		// reindexing Bstruct2 field
		if astructDB.Bstruct2ID.Int64 != 0 {
			astructDB.Bstruct2ID.Int64 = int64(BackRepoBstructid_atBckpTime_newID[uint(astructDB.Bstruct2ID.Int64)])
			astructDB.Bstruct2ID.Valid = true
		}

		// reindexing Dstruct field
		if astructDB.DstructID.Int64 != 0 {
			astructDB.DstructID.Int64 = int64(BackRepoDstructid_atBckpTime_newID[uint(astructDB.DstructID.Int64)])
			astructDB.DstructID.Valid = true
		}

		// reindexing Dstruct2 field
		if astructDB.Dstruct2ID.Int64 != 0 {
			astructDB.Dstruct2ID.Int64 = int64(BackRepoDstructid_atBckpTime_newID[uint(astructDB.Dstruct2ID.Int64)])
			astructDB.Dstruct2ID.Valid = true
		}

		// reindexing Dstruct3 field
		if astructDB.Dstruct3ID.Int64 != 0 {
			astructDB.Dstruct3ID.Int64 = int64(BackRepoDstructid_atBckpTime_newID[uint(astructDB.Dstruct3ID.Int64)])
			astructDB.Dstruct3ID.Valid = true
		}

		// reindexing Dstruct4 field
		if astructDB.Dstruct4ID.Int64 != 0 {
			astructDB.Dstruct4ID.Int64 = int64(BackRepoDstructid_atBckpTime_newID[uint(astructDB.Dstruct4ID.Int64)])
			astructDB.Dstruct4ID.Valid = true
		}

		// reindexing AnAstruct field
		if astructDB.AnAstructID.Int64 != 0 {
			astructDB.AnAstructID.Int64 = int64(BackRepoAstructid_atBckpTime_newID[uint(astructDB.AnAstructID.Int64)])
			astructDB.AnAstructID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoAstruct.db.Model(astructDB).Updates(*astructDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAstruct.ResetReversePointers commits all staged instances of Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, astruct := range backRepoAstruct.Map_AstructDBID_AstructPtr {
		backRepoAstruct.ResetReversePointersInstance(backRepo, idx, astruct)
	}

	return
}

func (backRepoAstruct *BackRepoAstructStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, astruct *models.Astruct) (Error error) {

	// fetch matching astructDB
	if astructDB, ok := backRepoAstruct.Map_AstructDBID_AstructDB[idx]; ok {
		_ = astructDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAstructid_atBckpTime_newID map[uint]uint
