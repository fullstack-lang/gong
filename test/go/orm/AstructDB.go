// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Astruct_sql sql.NullBool
var dummy_Astruct_time time.Duration
var dummy_Astruct_sort sort.Float64Slice

// AstructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model astructAPI
type AstructAPI struct {
	gorm.Model

	models.Astruct

	// encoding of pointers
	AstructPointersEnconding
}

// AstructPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AstructPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Associationtob is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AssociationtobID sql.NullInt64

	// field Anotherassociationtob_2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Anotherassociationtob_2ID sql.NullInt64

	// Implementation of a reverse ID for field Astruct{}.Anarrayofa []*Astruct
	Astruct_AnarrayofaDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Astruct_AnarrayofaDBID_Index sql.NullInt64
}

// AstructDB describes a astruct in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model astructDB
type AstructDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field astructDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field astructDB.Date
	Date_Data sql.NullTime

	// Declation for basic field astructDB.Booleanfield bool (to be completed)
	// provide the sql storage for the boolan
	Booleanfield_Data sql.NullBool

	// Declation for basic field astructDB.Aenum {{BasicKind}} (to be completed)
	Aenum_Data sql.NullString

	// Declation for basic field astructDB.Aenum_2 {{BasicKind}} (to be completed)
	Aenum_2_Data sql.NullString

	// Declation for basic field astructDB.Benum {{BasicKind}} (to be completed)
	Benum_Data sql.NullString

	// Declation for basic field astructDB.CName {{BasicKind}} (to be completed)
	CName_Data sql.NullString

	// Declation for basic field astructDB.CFloatfield {{BasicKind}} (to be completed)
	CFloatfield_Data sql.NullFloat64

	// Declation for basic field astructDB.Floatfield {{BasicKind}} (to be completed)
	Floatfield_Data sql.NullFloat64

	// Declation for basic field astructDB.Intfield {{BasicKind}} (to be completed)
	Intfield_Data sql.NullInt64

	// Declation for basic field astructDB.Anotherbooleanfield bool (to be completed)
	// provide the sql storage for the boolan
	Anotherbooleanfield_Data sql.NullBool

	// Declation for basic field astructDB.Duration1 {{BasicKind}} (to be completed)
	Duration1_Data sql.NullInt64
	// encoding of pointers
	AstructPointersEnconding
}

// AstructDBs arrays astructDBs
// swagger:response astructDBsResponse
type AstructDBs []AstructDB

// AstructDBResponse provides response
// swagger:response astructDBResponse
type AstructDBResponse struct {
	AstructDB
}

// AstructWOP is a Astruct without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AstructWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Date time.Time `xlsx:"2"`

	Booleanfield bool `xlsx:"3"`

	Aenum models.AEnumType `xlsx:"4"`

	Aenum_2 models.AEnumType `xlsx:"5"`

	Benum models.BEnumType `xlsx:"6"`

	CName string `xlsx:"7"`

	CFloatfield float64 `xlsx:"8"`

	Floatfield float64 `xlsx:"9"`

	Intfield int `xlsx:"10"`

	Anotherbooleanfield bool `xlsx:"11"`

	Duration1 time.Duration `xlsx:"12"`
	// insertion for WOP pointer fields
}

var Astruct_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Date",
	"Booleanfield",
	"Aenum",
	"Aenum_2",
	"Benum",
	"CName",
	"CFloatfield",
	"Floatfield",
	"Intfield",
	"Anotherbooleanfield",
	"Duration1",
}

type BackRepoAstructStruct struct {
	// stores AstructDB according to their gorm ID
	Map_AstructDBID_AstructDB *map[uint]*AstructDB

	// stores AstructDB ID according to Astruct address
	Map_AstructPtr_AstructDBID *map[*models.Astruct]uint

	// stores Astruct according to their gorm ID
	Map_AstructDBID_AstructPtr *map[uint]*models.Astruct

	db *gorm.DB
}

func (backRepoAstruct *BackRepoAstructStruct) GetDB() *gorm.DB {
	return backRepoAstruct.db
}

// GetAstructDBFromAstructPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAstruct *BackRepoAstructStruct) GetAstructDBFromAstructPtr(astruct *models.Astruct) (astructDB *AstructDB) {
	id := (*backRepoAstruct.Map_AstructPtr_AstructDBID)[astruct]
	astructDB = (*backRepoAstruct.Map_AstructDBID_AstructDB)[id]
	return
}

// BackRepoAstruct.Init set up the BackRepo of the Astruct
func (backRepoAstruct *BackRepoAstructStruct) Init(db *gorm.DB) (Error error) {

	if backRepoAstruct.Map_AstructDBID_AstructPtr != nil {
		err := errors.New("In Init, backRepoAstruct.Map_AstructDBID_AstructPtr should be nil")
		return err
	}

	if backRepoAstruct.Map_AstructDBID_AstructDB != nil {
		err := errors.New("In Init, backRepoAstruct.Map_AstructDBID_AstructDB should be nil")
		return err
	}

	if backRepoAstruct.Map_AstructPtr_AstructDBID != nil {
		err := errors.New("In Init, backRepoAstruct.Map_AstructPtr_AstructDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Astruct, 0)
	backRepoAstruct.Map_AstructDBID_AstructPtr = &tmp

	tmpDB := make(map[uint]*AstructDB, 0)
	backRepoAstruct.Map_AstructDBID_AstructDB = &tmpDB

	tmpID := make(map[*models.Astruct]uint, 0)
	backRepoAstruct.Map_AstructPtr_AstructDBID = &tmpID

	backRepoAstruct.db = db
	return
}

// BackRepoAstruct.CommitPhaseOne commits all staged instances of Astruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAstruct *BackRepoAstructStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for astruct := range stage.Astructs {
		backRepoAstruct.CommitPhaseOneInstance(astruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, astruct := range *backRepoAstruct.Map_AstructDBID_AstructPtr {
		if _, ok := stage.Astructs[astruct]; !ok {
			backRepoAstruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAstruct.CommitDeleteInstance commits deletion of Astruct to the BackRepo
func (backRepoAstruct *BackRepoAstructStruct) CommitDeleteInstance(id uint) (Error error) {

	astruct := (*backRepoAstruct.Map_AstructDBID_AstructPtr)[id]

	// astruct is not staged anymore, remove astructDB
	astructDB := (*backRepoAstruct.Map_AstructDBID_AstructDB)[id]
	query := backRepoAstruct.db.Unscoped().Delete(&astructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoAstruct.Map_AstructPtr_AstructDBID), astruct)
	delete((*backRepoAstruct.Map_AstructDBID_AstructPtr), id)
	delete((*backRepoAstruct.Map_AstructDBID_AstructDB), id)

	return
}

// BackRepoAstruct.CommitPhaseOneInstance commits astruct staged instances of Astruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAstruct *BackRepoAstructStruct) CommitPhaseOneInstance(astruct *models.Astruct) (Error error) {

	// check if the astruct is not commited yet
	if _, ok := (*backRepoAstruct.Map_AstructPtr_AstructDBID)[astruct]; ok {
		return
	}

	// initiate astruct
	var astructDB AstructDB
	astructDB.CopyBasicFieldsFromAstruct(astruct)

	query := backRepoAstruct.db.Create(&astructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoAstruct.Map_AstructPtr_AstructDBID)[astruct] = astructDB.ID
	(*backRepoAstruct.Map_AstructDBID_AstructPtr)[astructDB.ID] = astruct
	(*backRepoAstruct.Map_AstructDBID_AstructDB)[astructDB.ID] = &astructDB

	return
}

// BackRepoAstruct.CommitPhaseTwo commits all staged instances of Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, astruct := range *backRepoAstruct.Map_AstructDBID_AstructPtr {
		backRepoAstruct.CommitPhaseTwoInstance(backRepo, idx, astruct)
	}

	return
}

// BackRepoAstruct.CommitPhaseTwoInstance commits {{structname }} of models.Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, astruct *models.Astruct) (Error error) {

	// fetch matching astructDB
	if astructDB, ok := (*backRepoAstruct.Map_AstructDBID_AstructDB)[idx]; ok {

		astructDB.CopyBasicFieldsFromAstruct(astruct)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value astruct.Associationtob translates to updating the astruct.AssociationtobID
		astructDB.AssociationtobID.Valid = true // allow for a 0 value (nil association)
		if astruct.Associationtob != nil {
			if AssociationtobId, ok := (*backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID)[astruct.Associationtob]; ok {
				astructDB.AssociationtobID.Int64 = int64(AssociationtobId)
				astructDB.AssociationtobID.Valid = true
			}
		}

		// commit pointer value astruct.Anotherassociationtob_2 translates to updating the astruct.Anotherassociationtob_2ID
		astructDB.Anotherassociationtob_2ID.Valid = true // allow for a 0 value (nil association)
		if astruct.Anotherassociationtob_2 != nil {
			if Anotherassociationtob_2Id, ok := (*backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID)[astruct.Anotherassociationtob_2]; ok {
				astructDB.Anotherassociationtob_2ID.Int64 = int64(Anotherassociationtob_2Id)
				astructDB.Anotherassociationtob_2ID.Valid = true
			}
		}

		// This loop encodes the slice of pointers astruct.Anarrayofb into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, bstructAssocEnd := range astruct.Anarrayofb {

			// get the back repo instance at the association end
			bstructAssocEnd_DB :=
				backRepo.BackRepoBstruct.GetBstructDBFromBstructPtr(bstructAssocEnd)

			// encode reverse pointer in the association end back repo instance
			bstructAssocEnd_DB.Astruct_AnarrayofbDBID.Int64 = int64(astructDB.ID)
			bstructAssocEnd_DB.Astruct_AnarrayofbDBID.Valid = true
			bstructAssocEnd_DB.Astruct_AnarrayofbDBID_Index.Int64 = int64(idx)
			bstructAssocEnd_DB.Astruct_AnarrayofbDBID_Index.Valid = true
			if q := backRepoAstruct.db.Save(bstructAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers astruct.Anotherarrayofb into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, bstructAssocEnd := range astruct.Anotherarrayofb {

			// get the back repo instance at the association end
			bstructAssocEnd_DB :=
				backRepo.BackRepoBstruct.GetBstructDBFromBstructPtr(bstructAssocEnd)

			// encode reverse pointer in the association end back repo instance
			bstructAssocEnd_DB.Astruct_AnotherarrayofbDBID.Int64 = int64(astructDB.ID)
			bstructAssocEnd_DB.Astruct_AnotherarrayofbDBID.Valid = true
			bstructAssocEnd_DB.Astruct_AnotherarrayofbDBID_Index.Int64 = int64(idx)
			bstructAssocEnd_DB.Astruct_AnotherarrayofbDBID_Index.Valid = true
			if q := backRepoAstruct.db.Save(bstructAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers astruct.Anarrayofa into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, astructAssocEnd := range astruct.Anarrayofa {

			// get the back repo instance at the association end
			astructAssocEnd_DB :=
				backRepo.BackRepoAstruct.GetAstructDBFromAstructPtr(astructAssocEnd)

			// encode reverse pointer in the association end back repo instance
			astructAssocEnd_DB.Astruct_AnarrayofaDBID.Int64 = int64(astructDB.ID)
			astructAssocEnd_DB.Astruct_AnarrayofaDBID.Valid = true
			astructAssocEnd_DB.Astruct_AnarrayofaDBID_Index.Int64 = int64(idx)
			astructAssocEnd_DB.Astruct_AnarrayofaDBID_Index.Valid = true
			if q := backRepoAstruct.db.Save(astructAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers astruct.AnarrayofbUse into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, astructbstructuseAssocEnd := range astruct.AnarrayofbUse {

			// get the back repo instance at the association end
			astructbstructuseAssocEnd_DB :=
				backRepo.BackRepoAstructBstructUse.GetAstructBstructUseDBFromAstructBstructUsePtr(astructbstructuseAssocEnd)

			// encode reverse pointer in the association end back repo instance
			astructbstructuseAssocEnd_DB.Astruct_AnarrayofbUseDBID.Int64 = int64(astructDB.ID)
			astructbstructuseAssocEnd_DB.Astruct_AnarrayofbUseDBID.Valid = true
			astructbstructuseAssocEnd_DB.Astruct_AnarrayofbUseDBID_Index.Int64 = int64(idx)
			astructbstructuseAssocEnd_DB.Astruct_AnarrayofbUseDBID_Index.Valid = true
			if q := backRepoAstruct.db.Save(astructbstructuseAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers astruct.Anarrayofb2Use into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, astructbstruct2useAssocEnd := range astruct.Anarrayofb2Use {

			// get the back repo instance at the association end
			astructbstruct2useAssocEnd_DB :=
				backRepo.BackRepoAstructBstruct2Use.GetAstructBstruct2UseDBFromAstructBstruct2UsePtr(astructbstruct2useAssocEnd)

			// encode reverse pointer in the association end back repo instance
			astructbstruct2useAssocEnd_DB.Astruct_Anarrayofb2UseDBID.Int64 = int64(astructDB.ID)
			astructbstruct2useAssocEnd_DB.Astruct_Anarrayofb2UseDBID.Valid = true
			astructbstruct2useAssocEnd_DB.Astruct_Anarrayofb2UseDBID_Index.Int64 = int64(idx)
			astructbstruct2useAssocEnd_DB.Astruct_Anarrayofb2UseDBID_Index.Valid = true
			if q := backRepoAstruct.db.Save(astructbstruct2useAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoAstruct.db.Save(&astructDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Astruct intance %s", astruct.Name))
		return err
	}

	return
}

// BackRepoAstruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoAstruct *BackRepoAstructStruct) CheckoutPhaseOne() (Error error) {

	astructDBArray := make([]AstructDB, 0)
	query := backRepoAstruct.db.Find(&astructDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	astructInstancesToBeRemovedFromTheStage := make(map[*models.Astruct]struct{})
	for key, value := range models.Stage.Astructs {
		astructInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, astructDB := range astructDBArray {
		backRepoAstruct.CheckoutPhaseOneInstance(&astructDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		astruct, ok := (*backRepoAstruct.Map_AstructDBID_AstructPtr)[astructDB.ID]
		if ok {
			delete(astructInstancesToBeRemovedFromTheStage, astruct)
		}
	}

	// remove from stage and back repo's 3 maps all astructs that are not in the checkout
	for astruct := range astructInstancesToBeRemovedFromTheStage {
		astruct.Unstage()

		// remove instance from the back repo 3 maps
		astructID := (*backRepoAstruct.Map_AstructPtr_AstructDBID)[astruct]
		delete((*backRepoAstruct.Map_AstructPtr_AstructDBID), astruct)
		delete((*backRepoAstruct.Map_AstructDBID_AstructDB), astructID)
		delete((*backRepoAstruct.Map_AstructDBID_AstructPtr), astructID)
	}

	return
}

// CheckoutPhaseOneInstance takes a astructDB that has been found in the DB, updates the backRepo and stages the
// models version of the astructDB
func (backRepoAstruct *BackRepoAstructStruct) CheckoutPhaseOneInstance(astructDB *AstructDB) (Error error) {

	astruct, ok := (*backRepoAstruct.Map_AstructDBID_AstructPtr)[astructDB.ID]
	if !ok {
		astruct = new(models.Astruct)

		(*backRepoAstruct.Map_AstructDBID_AstructPtr)[astructDB.ID] = astruct
		(*backRepoAstruct.Map_AstructPtr_AstructDBID)[astruct] = astructDB.ID

		// append model store with the new element
		astruct.Name = astructDB.Name_Data.String
		astruct.Stage()
	}
	astructDB.CopyBasicFieldsToAstruct(astruct)

	// preserve pointer to astructDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AstructDBID_AstructDB)[astructDB hold variable pointers
	astructDB_Data := *astructDB
	preservedPtrToAstruct := &astructDB_Data
	(*backRepoAstruct.Map_AstructDBID_AstructDB)[astructDB.ID] = preservedPtrToAstruct

	return
}

// BackRepoAstruct.CheckoutPhaseTwo Checkouts all staged instances of Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, astructDB := range *backRepoAstruct.Map_AstructDBID_AstructDB {
		backRepoAstruct.CheckoutPhaseTwoInstance(backRepo, astructDB)
	}
	return
}

// BackRepoAstruct.CheckoutPhaseTwoInstance Checkouts staged instances of Astruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstruct *BackRepoAstructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, astructDB *AstructDB) (Error error) {

	astruct := (*backRepoAstruct.Map_AstructDBID_AstructPtr)[astructDB.ID]
	_ = astruct // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Associationtob field
	if astructDB.AssociationtobID.Int64 != 0 {
		astruct.Associationtob = (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr)[uint(astructDB.AssociationtobID.Int64)]
	}
	// Anotherassociationtob_2 field
	if astructDB.Anotherassociationtob_2ID.Int64 != 0 {
		astruct.Anotherassociationtob_2 = (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr)[uint(astructDB.Anotherassociationtob_2ID.Int64)]
	}
	// This loop redeem astruct.Anarrayofb in the stage from the encode in the back repo
	// It parses all BstructDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.Anarrayofb = astruct.Anarrayofb[:0]
	// 2. loop all instances in the type in the association end
	for _, bstructDB_AssocEnd := range *backRepo.BackRepoBstruct.Map_BstructDBID_BstructDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if bstructDB_AssocEnd.Astruct_AnarrayofbDBID.Int64 == int64(astructDB.ID) {
			// 4. fetch the associated instance in the stage
			bstruct_AssocEnd := (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr)[bstructDB_AssocEnd.ID]
			// 5. append it the association slice
			astruct.Anarrayofb = append(astruct.Anarrayofb, bstruct_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(astruct.Anarrayofb, func(i, j int) bool {
		bstructDB_i_ID := (*backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID)[astruct.Anarrayofb[i]]
		bstructDB_j_ID := (*backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID)[astruct.Anarrayofb[j]]

		bstructDB_i := (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructDB)[bstructDB_i_ID]
		bstructDB_j := (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructDB)[bstructDB_j_ID]

		return bstructDB_i.Astruct_AnarrayofbDBID_Index.Int64 < bstructDB_j.Astruct_AnarrayofbDBID_Index.Int64
	})

	// This loop redeem astruct.Anotherarrayofb in the stage from the encode in the back repo
	// It parses all BstructDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.Anotherarrayofb = astruct.Anotherarrayofb[:0]
	// 2. loop all instances in the type in the association end
	for _, bstructDB_AssocEnd := range *backRepo.BackRepoBstruct.Map_BstructDBID_BstructDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if bstructDB_AssocEnd.Astruct_AnotherarrayofbDBID.Int64 == int64(astructDB.ID) {
			// 4. fetch the associated instance in the stage
			bstruct_AssocEnd := (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr)[bstructDB_AssocEnd.ID]
			// 5. append it the association slice
			astruct.Anotherarrayofb = append(astruct.Anotherarrayofb, bstruct_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(astruct.Anotherarrayofb, func(i, j int) bool {
		bstructDB_i_ID := (*backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID)[astruct.Anotherarrayofb[i]]
		bstructDB_j_ID := (*backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID)[astruct.Anotherarrayofb[j]]

		bstructDB_i := (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructDB)[bstructDB_i_ID]
		bstructDB_j := (*backRepo.BackRepoBstruct.Map_BstructDBID_BstructDB)[bstructDB_j_ID]

		return bstructDB_i.Astruct_AnotherarrayofbDBID_Index.Int64 < bstructDB_j.Astruct_AnotherarrayofbDBID_Index.Int64
	})

	// This loop redeem astruct.Anarrayofa in the stage from the encode in the back repo
	// It parses all AstructDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.Anarrayofa = astruct.Anarrayofa[:0]
	// 2. loop all instances in the type in the association end
	for _, astructDB_AssocEnd := range *backRepo.BackRepoAstruct.Map_AstructDBID_AstructDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if astructDB_AssocEnd.Astruct_AnarrayofaDBID.Int64 == int64(astructDB.ID) {
			// 4. fetch the associated instance in the stage
			astruct_AssocEnd := (*backRepo.BackRepoAstruct.Map_AstructDBID_AstructPtr)[astructDB_AssocEnd.ID]
			// 5. append it the association slice
			astruct.Anarrayofa = append(astruct.Anarrayofa, astruct_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(astruct.Anarrayofa, func(i, j int) bool {
		astructDB_i_ID := (*backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID)[astruct.Anarrayofa[i]]
		astructDB_j_ID := (*backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID)[astruct.Anarrayofa[j]]

		astructDB_i := (*backRepo.BackRepoAstruct.Map_AstructDBID_AstructDB)[astructDB_i_ID]
		astructDB_j := (*backRepo.BackRepoAstruct.Map_AstructDBID_AstructDB)[astructDB_j_ID]

		return astructDB_i.Astruct_AnarrayofaDBID_Index.Int64 < astructDB_j.Astruct_AnarrayofaDBID_Index.Int64
	})

	// This loop redeem astruct.AnarrayofbUse in the stage from the encode in the back repo
	// It parses all AstructBstructUseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.AnarrayofbUse = astruct.AnarrayofbUse[:0]
	// 2. loop all instances in the type in the association end
	for _, astructbstructuseDB_AssocEnd := range *backRepo.BackRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if astructbstructuseDB_AssocEnd.Astruct_AnarrayofbUseDBID.Int64 == int64(astructDB.ID) {
			// 4. fetch the associated instance in the stage
			astructbstructuse_AssocEnd := (*backRepo.BackRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUsePtr)[astructbstructuseDB_AssocEnd.ID]
			// 5. append it the association slice
			astruct.AnarrayofbUse = append(astruct.AnarrayofbUse, astructbstructuse_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(astruct.AnarrayofbUse, func(i, j int) bool {
		astructbstructuseDB_i_ID := (*backRepo.BackRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astruct.AnarrayofbUse[i]]
		astructbstructuseDB_j_ID := (*backRepo.BackRepoAstructBstructUse.Map_AstructBstructUsePtr_AstructBstructUseDBID)[astruct.AnarrayofbUse[j]]

		astructbstructuseDB_i := (*backRepo.BackRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[astructbstructuseDB_i_ID]
		astructbstructuseDB_j := (*backRepo.BackRepoAstructBstructUse.Map_AstructBstructUseDBID_AstructBstructUseDB)[astructbstructuseDB_j_ID]

		return astructbstructuseDB_i.Astruct_AnarrayofbUseDBID_Index.Int64 < astructbstructuseDB_j.Astruct_AnarrayofbUseDBID_Index.Int64
	})

	// This loop redeem astruct.Anarrayofb2Use in the stage from the encode in the back repo
	// It parses all AstructBstruct2UseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	astruct.Anarrayofb2Use = astruct.Anarrayofb2Use[:0]
	// 2. loop all instances in the type in the association end
	for _, astructbstruct2useDB_AssocEnd := range *backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if astructbstruct2useDB_AssocEnd.Astruct_Anarrayofb2UseDBID.Int64 == int64(astructDB.ID) {
			// 4. fetch the associated instance in the stage
			astructbstruct2use_AssocEnd := (*backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr)[astructbstruct2useDB_AssocEnd.ID]
			// 5. append it the association slice
			astruct.Anarrayofb2Use = append(astruct.Anarrayofb2Use, astructbstruct2use_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(astruct.Anarrayofb2Use, func(i, j int) bool {
		astructbstruct2useDB_i_ID := (*backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID)[astruct.Anarrayofb2Use[i]]
		astructbstruct2useDB_j_ID := (*backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID)[astruct.Anarrayofb2Use[j]]

		astructbstruct2useDB_i := (*backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB)[astructbstruct2useDB_i_ID]
		astructbstruct2useDB_j := (*backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB)[astructbstruct2useDB_j_ID]

		return astructbstruct2useDB_i.Astruct_Anarrayofb2UseDBID_Index.Int64 < astructbstruct2useDB_j.Astruct_Anarrayofb2UseDBID_Index.Int64
	})

	return
}

// CommitAstruct allows commit of a single astruct (if already staged)
func (backRepo *BackRepoStruct) CommitAstruct(astruct *models.Astruct) {
	backRepo.BackRepoAstruct.CommitPhaseOneInstance(astruct)
	if id, ok := (*backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID)[astruct]; ok {
		backRepo.BackRepoAstruct.CommitPhaseTwoInstance(backRepo, id, astruct)
	}
}

// CommitAstruct allows checkout of a single astruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAstruct(astruct *models.Astruct) {
	// check if the astruct is staged
	if _, ok := (*backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID)[astruct]; ok {

		if id, ok := (*backRepo.BackRepoAstruct.Map_AstructPtr_AstructDBID)[astruct]; ok {
			var astructDB AstructDB
			astructDB.ID = id

			if err := backRepo.BackRepoAstruct.db.First(&astructDB, id).Error; err != nil {
				log.Panicln("CheckoutAstruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAstruct.CheckoutPhaseOneInstance(&astructDB)
			backRepo.BackRepoAstruct.CheckoutPhaseTwoInstance(backRepo, &astructDB)
		}
	}
}

// CopyBasicFieldsFromAstruct
func (astructDB *AstructDB) CopyBasicFieldsFromAstruct(astruct *models.Astruct) {
	// insertion point for fields commit

	astructDB.Name_Data.String = astruct.Name
	astructDB.Name_Data.Valid = true

	astructDB.Date_Data.Time = astruct.Date
	astructDB.Date_Data.Valid = true

	astructDB.Booleanfield_Data.Bool = astruct.Booleanfield
	astructDB.Booleanfield_Data.Valid = true

	astructDB.Aenum_Data.String = astruct.Aenum.ToString()
	astructDB.Aenum_Data.Valid = true

	astructDB.Aenum_2_Data.String = string(astruct.Aenum_2)
	astructDB.Aenum_2_Data.Valid = true

	astructDB.Benum_Data.String = string(astruct.Benum)
	astructDB.Benum_Data.Valid = true

	astructDB.CName_Data.String = astruct.CName
	astructDB.CName_Data.Valid = true

	astructDB.CFloatfield_Data.Float64 = astruct.CFloatfield
	astructDB.CFloatfield_Data.Valid = true

	astructDB.Floatfield_Data.Float64 = astruct.Floatfield
	astructDB.Floatfield_Data.Valid = true

	astructDB.Intfield_Data.Int64 = int64(astruct.Intfield)
	astructDB.Intfield_Data.Valid = true

	astructDB.Anotherbooleanfield_Data.Bool = astruct.Anotherbooleanfield
	astructDB.Anotherbooleanfield_Data.Valid = true

	astructDB.Duration1_Data.Int64 = int64(astruct.Duration1)
	astructDB.Duration1_Data.Valid = true
}

// CopyBasicFieldsFromAstructWOP
func (astructDB *AstructDB) CopyBasicFieldsFromAstructWOP(astruct *AstructWOP) {
	// insertion point for fields commit

	astructDB.Name_Data.String = astruct.Name
	astructDB.Name_Data.Valid = true

	astructDB.Date_Data.Time = astruct.Date
	astructDB.Date_Data.Valid = true

	astructDB.Booleanfield_Data.Bool = astruct.Booleanfield
	astructDB.Booleanfield_Data.Valid = true

	astructDB.Aenum_Data.String = astruct.Aenum.ToString()
	astructDB.Aenum_Data.Valid = true

	astructDB.Aenum_2_Data.String = string(astruct.Aenum_2)
	astructDB.Aenum_2_Data.Valid = true

	astructDB.Benum_Data.String = string(astruct.Benum)
	astructDB.Benum_Data.Valid = true

	astructDB.CName_Data.String = astruct.CName
	astructDB.CName_Data.Valid = true

	astructDB.CFloatfield_Data.Float64 = astruct.CFloatfield
	astructDB.CFloatfield_Data.Valid = true

	astructDB.Floatfield_Data.Float64 = astruct.Floatfield
	astructDB.Floatfield_Data.Valid = true

	astructDB.Intfield_Data.Int64 = int64(astruct.Intfield)
	astructDB.Intfield_Data.Valid = true

	astructDB.Anotherbooleanfield_Data.Bool = astruct.Anotherbooleanfield
	astructDB.Anotherbooleanfield_Data.Valid = true

	astructDB.Duration1_Data.Int64 = int64(astruct.Duration1)
	astructDB.Duration1_Data.Valid = true
}

// CopyBasicFieldsToAstruct
func (astructDB *AstructDB) CopyBasicFieldsToAstruct(astruct *models.Astruct) {
	// insertion point for checkout of basic fields (back repo to stage)
	astruct.Name = astructDB.Name_Data.String
	astruct.Date = astructDB.Date_Data.Time
	astruct.Booleanfield = astructDB.Booleanfield_Data.Bool
	astruct.Aenum.FromString(astructDB.Aenum_Data.String)
	astruct.Aenum_2 = models.AEnumType(astructDB.Aenum_2_Data.String)
	astruct.Benum = models.BEnumType(astructDB.Benum_Data.String)
	astruct.CName = astructDB.CName_Data.String
	astruct.CFloatfield = astructDB.CFloatfield_Data.Float64
	astruct.Floatfield = astructDB.Floatfield_Data.Float64
	astruct.Intfield = int(astructDB.Intfield_Data.Int64)
	astruct.Anotherbooleanfield = astructDB.Anotherbooleanfield_Data.Bool
	astruct.Duration1 = time.Duration(astructDB.Duration1_Data.Int64)
}

// CopyBasicFieldsToAstructWOP
func (astructDB *AstructDB) CopyBasicFieldsToAstructWOP(astruct *AstructWOP) {
	astruct.ID = int(astructDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	astruct.Name = astructDB.Name_Data.String
	astruct.Date = astructDB.Date_Data.Time
	astruct.Booleanfield = astructDB.Booleanfield_Data.Bool
	astruct.Aenum.FromString(astructDB.Aenum_Data.String)
	astruct.Aenum_2 = models.AEnumType(astructDB.Aenum_2_Data.String)
	astruct.Benum = models.BEnumType(astructDB.Benum_Data.String)
	astruct.CName = astructDB.CName_Data.String
	astruct.CFloatfield = astructDB.CFloatfield_Data.Float64
	astruct.Floatfield = astructDB.Floatfield_Data.Float64
	astruct.Intfield = int(astructDB.Intfield_Data.Int64)
	astruct.Anotherbooleanfield = astructDB.Anotherbooleanfield_Data.Bool
	astruct.Duration1 = time.Duration(astructDB.Duration1_Data.Int64)
}

// Backup generates a json file from a slice of all AstructDB instances in the backrepo
func (backRepoAstruct *BackRepoAstructStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AstructDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AstructDB, 0)
	for _, astructDB := range *backRepoAstruct.Map_AstructDBID_AstructDB {
		forBackup = append(forBackup, astructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Astruct ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Astruct file", err.Error())
	}
}

// Backup generates a json file from a slice of all AstructDB instances in the backrepo
func (backRepoAstruct *BackRepoAstructStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AstructDB, 0)
	for _, astructDB := range *backRepoAstruct.Map_AstructDBID_AstructDB {
		forBackup = append(forBackup, astructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Astruct")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Astruct_Fields, -1)
	for _, astructDB := range forBackup {

		var astructWOP AstructWOP
		astructDB.CopyBasicFieldsToAstructWOP(&astructWOP)

		row := sh.AddRow()
		row.WriteStruct(&astructWOP, -1)
	}
}

// RestoreXL from the "Astruct" sheet all AstructDB instances
func (backRepoAstruct *BackRepoAstructStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAstructid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Astruct"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAstruct.rowVisitorAstruct)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoAstruct *BackRepoAstructStruct) rowVisitorAstruct(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var astructWOP AstructWOP
		row.ReadStruct(&astructWOP)

		// add the unmarshalled struct to the stage
		astructDB := new(AstructDB)
		astructDB.CopyBasicFieldsFromAstructWOP(&astructWOP)

		astructDB_ID_atBackupTime := astructDB.ID
		astructDB.ID = 0
		query := backRepoAstruct.db.Create(astructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAstruct.Map_AstructDBID_AstructDB)[astructDB.ID] = astructDB
		BackRepoAstructid_atBckpTime_newID[astructDB_ID_atBackupTime] = astructDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AstructDB.json" in dirPath that stores an array
// of AstructDB and stores it in the database
// the map BackRepoAstructid_atBckpTime_newID is updated accordingly
func (backRepoAstruct *BackRepoAstructStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAstructid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AstructDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Astruct file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AstructDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AstructDBID_AstructDB
	for _, astructDB := range forRestore {

		astructDB_ID_atBackupTime := astructDB.ID
		astructDB.ID = 0
		query := backRepoAstruct.db.Create(astructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAstruct.Map_AstructDBID_AstructDB)[astructDB.ID] = astructDB
		BackRepoAstructid_atBckpTime_newID[astructDB_ID_atBackupTime] = astructDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Astruct file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Astruct>id_atBckpTime_newID
// to compute new index
func (backRepoAstruct *BackRepoAstructStruct) RestorePhaseTwo() {

	for _, astructDB := range *backRepoAstruct.Map_AstructDBID_AstructDB {

		// next line of code is to avert unused variable compilation error
		_ = astructDB

		// insertion point for reindexing pointers encoding
		// reindexing Associationtob field
		if astructDB.AssociationtobID.Int64 != 0 {
			astructDB.AssociationtobID.Int64 = int64(BackRepoBstructid_atBckpTime_newID[uint(astructDB.AssociationtobID.Int64)])
			astructDB.AssociationtobID.Valid = true
		}

		// reindexing Anotherassociationtob_2 field
		if astructDB.Anotherassociationtob_2ID.Int64 != 0 {
			astructDB.Anotherassociationtob_2ID.Int64 = int64(BackRepoBstructid_atBckpTime_newID[uint(astructDB.Anotherassociationtob_2ID.Int64)])
			astructDB.Anotherassociationtob_2ID.Valid = true
		}

		// This reindex astruct.Anarrayofa
		if astructDB.Astruct_AnarrayofaDBID.Int64 != 0 {
			astructDB.Astruct_AnarrayofaDBID.Int64 =
				int64(BackRepoAstructid_atBckpTime_newID[uint(astructDB.Astruct_AnarrayofaDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoAstruct.db.Model(astructDB).Updates(*astructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAstructid_atBckpTime_newID map[uint]uint
