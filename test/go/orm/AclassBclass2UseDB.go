// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AclassBclass2Use sql.NullBool
var __AclassBclass2Use_time__dummyDeclaration time.Duration
var dummy_AclassBclass2Use_sort sort.Float64Slice

// AclassBclass2UseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model aclassbclass2useAPI
type AclassBclass2UseAPI struct {
	gorm.Model

	models.AclassBclass2Use

	// encoding of pointers
	AclassBclass2UsePointersEnconding
}

// AclassBclass2UsePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AclassBclass2UsePointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// field Bclass2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Bclass2ID sql.NullInt64

	// Implementation of a reverse ID for field Aclass{}.Anarrayofb2Use []*AclassBclass2Use
	Aclass_Anarrayofb2UseDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Aclass_Anarrayofb2UseDBID_Index sql.NullInt64
}

// AclassBclass2UseDB describes a aclassbclass2use in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model aclassbclass2useDB
type AclassBclass2UseDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field aclassbclass2useDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// encoding of pointers
	AclassBclass2UsePointersEnconding
}

// AclassBclass2UseDBs arrays aclassbclass2useDBs
// swagger:response aclassbclass2useDBsResponse
type AclassBclass2UseDBs []AclassBclass2UseDB

// AclassBclass2UseDBResponse provides response
// swagger:response aclassbclass2useDBResponse
type AclassBclass2UseDBResponse struct {
	AclassBclass2UseDB
}

// AclassBclass2UseWOP is a AclassBclass2Use without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AclassBclass2UseWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string
	// insertion for WOP pointer fields
}

var AclassBclass2Use_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAclassBclass2UseStruct struct {
	// stores AclassBclass2UseDB according to their gorm ID
	Map_AclassBclass2UseDBID_AclassBclass2UseDB *map[uint]*AclassBclass2UseDB

	// stores AclassBclass2UseDB ID according to AclassBclass2Use address
	Map_AclassBclass2UsePtr_AclassBclass2UseDBID *map[*models.AclassBclass2Use]uint

	// stores AclassBclass2Use according to their gorm ID
	Map_AclassBclass2UseDBID_AclassBclass2UsePtr *map[uint]*models.AclassBclass2Use

	db *gorm.DB
}

func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) GetDB() *gorm.DB {
	return backRepoAclassBclass2Use.db
}

// GetAclassBclass2UseDBFromAclassBclass2UsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) GetAclassBclass2UseDBFromAclassBclass2UsePtr(aclassbclass2use *models.AclassBclass2Use) (aclassbclass2useDB *AclassBclass2UseDB) {
	id := (*backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID)[aclassbclass2use]
	aclassbclass2useDB = (*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB)[id]
	return
}

// BackRepoAclassBclass2Use.Init set up the BackRepo of the AclassBclass2Use
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) Init(db *gorm.DB) (Error error) {

	if backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr != nil {
		err := errors.New("In Init, backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr should be nil")
		return err
	}

	if backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB != nil {
		err := errors.New("In Init, backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB should be nil")
		return err
	}

	if backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID != nil {
		err := errors.New("In Init, backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.AclassBclass2Use, 0)
	backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr = &tmp

	tmpDB := make(map[uint]*AclassBclass2UseDB, 0)
	backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB = &tmpDB

	tmpID := make(map[*models.AclassBclass2Use]uint, 0)
	backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID = &tmpID

	backRepoAclassBclass2Use.db = db
	return
}

// BackRepoAclassBclass2Use.CommitPhaseOne commits all staged instances of AclassBclass2Use to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for aclassbclass2use := range stage.AclassBclass2Uses {
		backRepoAclassBclass2Use.CommitPhaseOneInstance(aclassbclass2use)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, aclassbclass2use := range *backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr {
		if _, ok := stage.AclassBclass2Uses[aclassbclass2use]; !ok {
			backRepoAclassBclass2Use.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAclassBclass2Use.CommitDeleteInstance commits deletion of AclassBclass2Use to the BackRepo
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CommitDeleteInstance(id uint) (Error error) {

	aclassbclass2use := (*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr)[id]

	// aclassbclass2use is not staged anymore, remove aclassbclass2useDB
	aclassbclass2useDB := (*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB)[id]
	query := backRepoAclassBclass2Use.db.Unscoped().Delete(&aclassbclass2useDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID), aclassbclass2use)
	delete((*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr), id)
	delete((*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB), id)

	return
}

// BackRepoAclassBclass2Use.CommitPhaseOneInstance commits aclassbclass2use staged instances of AclassBclass2Use to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CommitPhaseOneInstance(aclassbclass2use *models.AclassBclass2Use) (Error error) {

	// check if the aclassbclass2use is not commited yet
	if _, ok := (*backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID)[aclassbclass2use]; ok {
		return
	}

	// initiate aclassbclass2use
	var aclassbclass2useDB AclassBclass2UseDB
	aclassbclass2useDB.CopyBasicFieldsFromAclassBclass2Use(aclassbclass2use)

	query := backRepoAclassBclass2Use.db.Create(&aclassbclass2useDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID)[aclassbclass2use] = aclassbclass2useDB.ID
	(*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr)[aclassbclass2useDB.ID] = aclassbclass2use
	(*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB)[aclassbclass2useDB.ID] = &aclassbclass2useDB

	return
}

// BackRepoAclassBclass2Use.CommitPhaseTwo commits all staged instances of AclassBclass2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, aclassbclass2use := range *backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr {
		backRepoAclassBclass2Use.CommitPhaseTwoInstance(backRepo, idx, aclassbclass2use)
	}

	return
}

// BackRepoAclassBclass2Use.CommitPhaseTwoInstance commits {{structname }} of models.AclassBclass2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, aclassbclass2use *models.AclassBclass2Use) (Error error) {

	// fetch matching aclassbclass2useDB
	if aclassbclass2useDB, ok := (*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB)[idx]; ok {

		aclassbclass2useDB.CopyBasicFieldsFromAclassBclass2Use(aclassbclass2use)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value aclassbclass2use.Bclass2 translates to updating the aclassbclass2use.Bclass2ID
		aclassbclass2useDB.Bclass2ID.Valid = true // allow for a 0 value (nil association)
		if aclassbclass2use.Bclass2 != nil {
			if Bclass2Id, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[aclassbclass2use.Bclass2]; ok {
				aclassbclass2useDB.Bclass2ID.Int64 = int64(Bclass2Id)
			}
		}

		query := backRepoAclassBclass2Use.db.Save(&aclassbclass2useDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AclassBclass2Use intance %s", aclassbclass2use.Name))
		return err
	}

	return
}

// BackRepoAclassBclass2Use.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CheckoutPhaseOne() (Error error) {

	aclassbclass2useDBArray := make([]AclassBclass2UseDB, 0)
	query := backRepoAclassBclass2Use.db.Find(&aclassbclass2useDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	aclassbclass2useInstancesToBeRemovedFromTheStage := make(map[*models.AclassBclass2Use]struct{})
	for key, value := range models.Stage.AclassBclass2Uses {
		aclassbclass2useInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, aclassbclass2useDB := range aclassbclass2useDBArray {
		backRepoAclassBclass2Use.CheckoutPhaseOneInstance(&aclassbclass2useDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		aclassbclass2use, ok := (*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr)[aclassbclass2useDB.ID]
		if ok {
			delete(aclassbclass2useInstancesToBeRemovedFromTheStage, aclassbclass2use)
		}
	}

	// remove from stage and back repo's 3 maps all aclassbclass2uses that are not in the checkout
	for aclassbclass2use := range aclassbclass2useInstancesToBeRemovedFromTheStage {
		aclassbclass2use.Unstage()

		// remove instance from the back repo 3 maps
		aclassbclass2useID := (*backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID)[aclassbclass2use]
		delete((*backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID), aclassbclass2use)
		delete((*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB), aclassbclass2useID)
		delete((*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr), aclassbclass2useID)
	}

	return
}

// CheckoutPhaseOneInstance takes a aclassbclass2useDB that has been found in the DB, updates the backRepo and stages the
// models version of the aclassbclass2useDB
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CheckoutPhaseOneInstance(aclassbclass2useDB *AclassBclass2UseDB) (Error error) {

	aclassbclass2use, ok := (*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr)[aclassbclass2useDB.ID]
	if !ok {
		aclassbclass2use = new(models.AclassBclass2Use)

		(*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr)[aclassbclass2useDB.ID] = aclassbclass2use
		(*backRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID)[aclassbclass2use] = aclassbclass2useDB.ID

		// append model store with the new element
		aclassbclass2use.Name = aclassbclass2useDB.Name_Data.String
		aclassbclass2use.Stage()
	}
	aclassbclass2useDB.CopyBasicFieldsToAclassBclass2Use(aclassbclass2use)

	// preserve pointer to aclassbclass2useDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AclassBclass2UseDBID_AclassBclass2UseDB)[aclassbclass2useDB hold variable pointers
	aclassbclass2useDB_Data := *aclassbclass2useDB
	preservedPtrToAclassBclass2Use := &aclassbclass2useDB_Data
	(*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB)[aclassbclass2useDB.ID] = preservedPtrToAclassBclass2Use

	return
}

// BackRepoAclassBclass2Use.CheckoutPhaseTwo Checkouts all staged instances of AclassBclass2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, aclassbclass2useDB := range *backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB {
		backRepoAclassBclass2Use.CheckoutPhaseTwoInstance(backRepo, aclassbclass2useDB)
	}
	return
}

// BackRepoAclassBclass2Use.CheckoutPhaseTwoInstance Checkouts staged instances of AclassBclass2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, aclassbclass2useDB *AclassBclass2UseDB) (Error error) {

	aclassbclass2use := (*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UsePtr)[aclassbclass2useDB.ID]
	_ = aclassbclass2use // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Bclass2 field
	if aclassbclass2useDB.Bclass2ID.Int64 != 0 {
		aclassbclass2use.Bclass2 = (*backRepo.BackRepoBclass.Map_BclassDBID_BclassPtr)[uint(aclassbclass2useDB.Bclass2ID.Int64)]
	}
	return
}

// CommitAclassBclass2Use allows commit of a single aclassbclass2use (if already staged)
func (backRepo *BackRepoStruct) CommitAclassBclass2Use(aclassbclass2use *models.AclassBclass2Use) {
	backRepo.BackRepoAclassBclass2Use.CommitPhaseOneInstance(aclassbclass2use)
	if id, ok := (*backRepo.BackRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID)[aclassbclass2use]; ok {
		backRepo.BackRepoAclassBclass2Use.CommitPhaseTwoInstance(backRepo, id, aclassbclass2use)
	}
}

// CommitAclassBclass2Use allows checkout of a single aclassbclass2use (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAclassBclass2Use(aclassbclass2use *models.AclassBclass2Use) {
	// check if the aclassbclass2use is staged
	if _, ok := (*backRepo.BackRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID)[aclassbclass2use]; ok {

		if id, ok := (*backRepo.BackRepoAclassBclass2Use.Map_AclassBclass2UsePtr_AclassBclass2UseDBID)[aclassbclass2use]; ok {
			var aclassbclass2useDB AclassBclass2UseDB
			aclassbclass2useDB.ID = id

			if err := backRepo.BackRepoAclassBclass2Use.db.First(&aclassbclass2useDB, id).Error; err != nil {
				log.Panicln("CheckoutAclassBclass2Use : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAclassBclass2Use.CheckoutPhaseOneInstance(&aclassbclass2useDB)
			backRepo.BackRepoAclassBclass2Use.CheckoutPhaseTwoInstance(backRepo, &aclassbclass2useDB)
		}
	}
}

// CopyBasicFieldsFromAclassBclass2Use
func (aclassbclass2useDB *AclassBclass2UseDB) CopyBasicFieldsFromAclassBclass2Use(aclassbclass2use *models.AclassBclass2Use) {
	// insertion point for fields commit
	aclassbclass2useDB.Name_Data.String = aclassbclass2use.Name
	aclassbclass2useDB.Name_Data.Valid = true

}

// CopyBasicFieldsFromAclassBclass2UseWOP
func (aclassbclass2useDB *AclassBclass2UseDB) CopyBasicFieldsFromAclassBclass2UseWOP(aclassbclass2use *AclassBclass2UseWOP) {
	// insertion point for fields commit
	aclassbclass2useDB.Name_Data.String = aclassbclass2use.Name
	aclassbclass2useDB.Name_Data.Valid = true

}

// CopyBasicFieldsToAclassBclass2Use
func (aclassbclass2useDB *AclassBclass2UseDB) CopyBasicFieldsToAclassBclass2Use(aclassbclass2use *models.AclassBclass2Use) {
	// insertion point for checkout of basic fields (back repo to stage)
	aclassbclass2use.Name = aclassbclass2useDB.Name_Data.String
}

// CopyBasicFieldsToAclassBclass2UseWOP
func (aclassbclass2useDB *AclassBclass2UseDB) CopyBasicFieldsToAclassBclass2UseWOP(aclassbclass2use *AclassBclass2UseWOP) {
	aclassbclass2use.ID = int(aclassbclass2useDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	aclassbclass2use.Name = aclassbclass2useDB.Name_Data.String
}

// Backup generates a json file from a slice of all AclassBclass2UseDB instances in the backrepo
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AclassBclass2UseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AclassBclass2UseDB, 0)
	for _, aclassbclass2useDB := range *backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB {
		forBackup = append(forBackup, aclassbclass2useDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json AclassBclass2Use ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json AclassBclass2Use file", err.Error())
	}
}

// Backup generates a json file from a slice of all AclassBclass2UseDB instances in the backrepo
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AclassBclass2UseDB, 0)
	for _, aclassbclass2useDB := range *backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB {
		forBackup = append(forBackup, aclassbclass2useDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AclassBclass2Use")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AclassBclass2Use_Fields, -1)
	for _, aclassbclass2useDB := range forBackup {

		var aclassbclass2useWOP AclassBclass2UseWOP
		aclassbclass2useDB.CopyBasicFieldsToAclassBclass2UseWOP(&aclassbclass2useWOP)

		row := sh.AddRow()
		row.WriteStruct(&aclassbclass2useWOP, -1)
	}
}

// RestorePhaseOne read the file "AclassBclass2UseDB.json" in dirPath that stores an array
// of AclassBclass2UseDB and stores it in the database
// the map BackRepoAclassBclass2Useid_atBckpTime_newID is updated accordingly
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAclassBclass2Useid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AclassBclass2UseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json AclassBclass2Use file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AclassBclass2UseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AclassBclass2UseDBID_AclassBclass2UseDB
	for _, aclassbclass2useDB := range forRestore {

		aclassbclass2useDB_ID_atBackupTime := aclassbclass2useDB.ID
		aclassbclass2useDB.ID = 0
		query := backRepoAclassBclass2Use.db.Create(aclassbclass2useDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB)[aclassbclass2useDB.ID] = aclassbclass2useDB
		BackRepoAclassBclass2Useid_atBckpTime_newID[aclassbclass2useDB_ID_atBackupTime] = aclassbclass2useDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json AclassBclass2Use file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AclassBclass2Use>id_atBckpTime_newID
// to compute new index
func (backRepoAclassBclass2Use *BackRepoAclassBclass2UseStruct) RestorePhaseTwo() {

	for _, aclassbclass2useDB := range *backRepoAclassBclass2Use.Map_AclassBclass2UseDBID_AclassBclass2UseDB {

		// next line of code is to avert unused variable compilation error
		_ = aclassbclass2useDB

		// insertion point for reindexing pointers encoding
		// reindexing Bclass2 field
		if aclassbclass2useDB.Bclass2ID.Int64 != 0 {
			aclassbclass2useDB.Bclass2ID.Int64 = int64(BackRepoBclassid_atBckpTime_newID[uint(aclassbclass2useDB.Bclass2ID.Int64)])
		}

		// This reindex aclassbclass2use.Anarrayofb2Use
		if aclassbclass2useDB.Aclass_Anarrayofb2UseDBID.Int64 != 0 {
			aclassbclass2useDB.Aclass_Anarrayofb2UseDBID.Int64 =
				int64(BackRepoAclassid_atBckpTime_newID[uint(aclassbclass2useDB.Aclass_Anarrayofb2UseDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoAclassBclass2Use.db.Model(aclassbclass2useDB).Updates(*aclassbclass2useDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAclassBclass2Useid_atBckpTime_newID map[uint]uint
