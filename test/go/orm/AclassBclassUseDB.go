// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AclassBclassUse sql.NullBool
var __AclassBclassUse_time__dummyDeclaration time.Duration
var dummy_AclassBclassUse_sort sort.Float64Slice

// AclassBclassUseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model aclassbclassuseAPI
type AclassBclassUseAPI struct {
	gorm.Model

	models.AclassBclassUse

	// encoding of pointers
	AclassBclassUsePointersEnconding
}

// AclassBclassUsePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AclassBclassUsePointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// field Bclass2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Bclass2ID sql.NullInt64

	// Implementation of a reverse ID for field Aclass{}.AnarrayofbUse []*AclassBclassUse
	Aclass_AnarrayofbUseDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Aclass_AnarrayofbUseDBID_Index sql.NullInt64
}

// AclassBclassUseDB describes a aclassbclassuse in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model aclassbclassuseDB
type AclassBclassUseDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field aclassbclassuseDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// encoding of pointers
	AclassBclassUsePointersEnconding
}

// AclassBclassUseDBs arrays aclassbclassuseDBs
// swagger:response aclassbclassuseDBsResponse
type AclassBclassUseDBs []AclassBclassUseDB

// AclassBclassUseDBResponse provides response
// swagger:response aclassbclassuseDBResponse
type AclassBclassUseDBResponse struct {
	AclassBclassUseDB
}

// AclassBclassUseWOP is a AclassBclassUse without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AclassBclassUseWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string
	// insertion for WOP pointer fields
}

var AclassBclassUse_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAclassBclassUseStruct struct {
	// stores AclassBclassUseDB according to their gorm ID
	Map_AclassBclassUseDBID_AclassBclassUseDB *map[uint]*AclassBclassUseDB

	// stores AclassBclassUseDB ID according to AclassBclassUse address
	Map_AclassBclassUsePtr_AclassBclassUseDBID *map[*models.AclassBclassUse]uint

	// stores AclassBclassUse according to their gorm ID
	Map_AclassBclassUseDBID_AclassBclassUsePtr *map[uint]*models.AclassBclassUse

	db *gorm.DB
}

func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) GetDB() *gorm.DB {
	return backRepoAclassBclassUse.db
}

// GetAclassBclassUseDBFromAclassBclassUsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) GetAclassBclassUseDBFromAclassBclassUsePtr(aclassbclassuse *models.AclassBclassUse) (aclassbclassuseDB *AclassBclassUseDB) {
	id := (*backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID)[aclassbclassuse]
	aclassbclassuseDB = (*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB)[id]
	return
}

// BackRepoAclassBclassUse.Init set up the BackRepo of the AclassBclassUse
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) Init(db *gorm.DB) (Error error) {

	if backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr != nil {
		err := errors.New("In Init, backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr should be nil")
		return err
	}

	if backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB != nil {
		err := errors.New("In Init, backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB should be nil")
		return err
	}

	if backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID != nil {
		err := errors.New("In Init, backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.AclassBclassUse, 0)
	backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr = &tmp

	tmpDB := make(map[uint]*AclassBclassUseDB, 0)
	backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB = &tmpDB

	tmpID := make(map[*models.AclassBclassUse]uint, 0)
	backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID = &tmpID

	backRepoAclassBclassUse.db = db
	return
}

// BackRepoAclassBclassUse.CommitPhaseOne commits all staged instances of AclassBclassUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for aclassbclassuse := range stage.AclassBclassUses {
		backRepoAclassBclassUse.CommitPhaseOneInstance(aclassbclassuse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, aclassbclassuse := range *backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr {
		if _, ok := stage.AclassBclassUses[aclassbclassuse]; !ok {
			backRepoAclassBclassUse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAclassBclassUse.CommitDeleteInstance commits deletion of AclassBclassUse to the BackRepo
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CommitDeleteInstance(id uint) (Error error) {

	aclassbclassuse := (*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr)[id]

	// aclassbclassuse is not staged anymore, remove aclassbclassuseDB
	aclassbclassuseDB := (*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB)[id]
	query := backRepoAclassBclassUse.db.Unscoped().Delete(&aclassbclassuseDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID), aclassbclassuse)
	delete((*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr), id)
	delete((*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB), id)

	return
}

// BackRepoAclassBclassUse.CommitPhaseOneInstance commits aclassbclassuse staged instances of AclassBclassUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CommitPhaseOneInstance(aclassbclassuse *models.AclassBclassUse) (Error error) {

	// check if the aclassbclassuse is not commited yet
	if _, ok := (*backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID)[aclassbclassuse]; ok {
		return
	}

	// initiate aclassbclassuse
	var aclassbclassuseDB AclassBclassUseDB
	aclassbclassuseDB.CopyBasicFieldsFromAclassBclassUse(aclassbclassuse)

	query := backRepoAclassBclassUse.db.Create(&aclassbclassuseDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID)[aclassbclassuse] = aclassbclassuseDB.ID
	(*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr)[aclassbclassuseDB.ID] = aclassbclassuse
	(*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB)[aclassbclassuseDB.ID] = &aclassbclassuseDB

	return
}

// BackRepoAclassBclassUse.CommitPhaseTwo commits all staged instances of AclassBclassUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, aclassbclassuse := range *backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr {
		backRepoAclassBclassUse.CommitPhaseTwoInstance(backRepo, idx, aclassbclassuse)
	}

	return
}

// BackRepoAclassBclassUse.CommitPhaseTwoInstance commits {{structname }} of models.AclassBclassUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, aclassbclassuse *models.AclassBclassUse) (Error error) {

	// fetch matching aclassbclassuseDB
	if aclassbclassuseDB, ok := (*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB)[idx]; ok {

		aclassbclassuseDB.CopyBasicFieldsFromAclassBclassUse(aclassbclassuse)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value aclassbclassuse.Bclass2 translates to updating the aclassbclassuse.Bclass2ID
		aclassbclassuseDB.Bclass2ID.Valid = true // allow for a 0 value (nil association)
		if aclassbclassuse.Bclass2 != nil {
			if Bclass2Id, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[aclassbclassuse.Bclass2]; ok {
				aclassbclassuseDB.Bclass2ID.Int64 = int64(Bclass2Id)
			}
		}

		query := backRepoAclassBclassUse.db.Save(&aclassbclassuseDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AclassBclassUse intance %s", aclassbclassuse.Name))
		return err
	}

	return
}

// BackRepoAclassBclassUse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CheckoutPhaseOne() (Error error) {

	aclassbclassuseDBArray := make([]AclassBclassUseDB, 0)
	query := backRepoAclassBclassUse.db.Find(&aclassbclassuseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	aclassbclassuseInstancesToBeRemovedFromTheStage := make(map[*models.AclassBclassUse]struct{})
	for key, value := range models.Stage.AclassBclassUses {
		aclassbclassuseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, aclassbclassuseDB := range aclassbclassuseDBArray {
		backRepoAclassBclassUse.CheckoutPhaseOneInstance(&aclassbclassuseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		aclassbclassuse, ok := (*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr)[aclassbclassuseDB.ID]
		if ok {
			delete(aclassbclassuseInstancesToBeRemovedFromTheStage, aclassbclassuse)
		}
	}

	// remove from stage and back repo's 3 maps all aclassbclassuses that are not in the checkout
	for aclassbclassuse := range aclassbclassuseInstancesToBeRemovedFromTheStage {
		aclassbclassuse.Unstage()

		// remove instance from the back repo 3 maps
		aclassbclassuseID := (*backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID)[aclassbclassuse]
		delete((*backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID), aclassbclassuse)
		delete((*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB), aclassbclassuseID)
		delete((*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr), aclassbclassuseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a aclassbclassuseDB that has been found in the DB, updates the backRepo and stages the
// models version of the aclassbclassuseDB
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CheckoutPhaseOneInstance(aclassbclassuseDB *AclassBclassUseDB) (Error error) {

	aclassbclassuse, ok := (*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr)[aclassbclassuseDB.ID]
	if !ok {
		aclassbclassuse = new(models.AclassBclassUse)

		(*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr)[aclassbclassuseDB.ID] = aclassbclassuse
		(*backRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID)[aclassbclassuse] = aclassbclassuseDB.ID

		// append model store with the new element
		aclassbclassuse.Name = aclassbclassuseDB.Name_Data.String
		aclassbclassuse.Stage()
	}
	aclassbclassuseDB.CopyBasicFieldsToAclassBclassUse(aclassbclassuse)

	// preserve pointer to aclassbclassuseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AclassBclassUseDBID_AclassBclassUseDB)[aclassbclassuseDB hold variable pointers
	aclassbclassuseDB_Data := *aclassbclassuseDB
	preservedPtrToAclassBclassUse := &aclassbclassuseDB_Data
	(*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB)[aclassbclassuseDB.ID] = preservedPtrToAclassBclassUse

	return
}

// BackRepoAclassBclassUse.CheckoutPhaseTwo Checkouts all staged instances of AclassBclassUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, aclassbclassuseDB := range *backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB {
		backRepoAclassBclassUse.CheckoutPhaseTwoInstance(backRepo, aclassbclassuseDB)
	}
	return
}

// BackRepoAclassBclassUse.CheckoutPhaseTwoInstance Checkouts staged instances of AclassBclassUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, aclassbclassuseDB *AclassBclassUseDB) (Error error) {

	aclassbclassuse := (*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUsePtr)[aclassbclassuseDB.ID]
	_ = aclassbclassuse // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Bclass2 field
	if aclassbclassuseDB.Bclass2ID.Int64 != 0 {
		aclassbclassuse.Bclass2 = (*backRepo.BackRepoBclass.Map_BclassDBID_BclassPtr)[uint(aclassbclassuseDB.Bclass2ID.Int64)]
	}
	return
}

// CommitAclassBclassUse allows commit of a single aclassbclassuse (if already staged)
func (backRepo *BackRepoStruct) CommitAclassBclassUse(aclassbclassuse *models.AclassBclassUse) {
	backRepo.BackRepoAclassBclassUse.CommitPhaseOneInstance(aclassbclassuse)
	if id, ok := (*backRepo.BackRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID)[aclassbclassuse]; ok {
		backRepo.BackRepoAclassBclassUse.CommitPhaseTwoInstance(backRepo, id, aclassbclassuse)
	}
}

// CommitAclassBclassUse allows checkout of a single aclassbclassuse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAclassBclassUse(aclassbclassuse *models.AclassBclassUse) {
	// check if the aclassbclassuse is staged
	if _, ok := (*backRepo.BackRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID)[aclassbclassuse]; ok {

		if id, ok := (*backRepo.BackRepoAclassBclassUse.Map_AclassBclassUsePtr_AclassBclassUseDBID)[aclassbclassuse]; ok {
			var aclassbclassuseDB AclassBclassUseDB
			aclassbclassuseDB.ID = id

			if err := backRepo.BackRepoAclassBclassUse.db.First(&aclassbclassuseDB, id).Error; err != nil {
				log.Panicln("CheckoutAclassBclassUse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAclassBclassUse.CheckoutPhaseOneInstance(&aclassbclassuseDB)
			backRepo.BackRepoAclassBclassUse.CheckoutPhaseTwoInstance(backRepo, &aclassbclassuseDB)
		}
	}
}

// CopyBasicFieldsFromAclassBclassUse
func (aclassbclassuseDB *AclassBclassUseDB) CopyBasicFieldsFromAclassBclassUse(aclassbclassuse *models.AclassBclassUse) {
	// insertion point for fields commit
	aclassbclassuseDB.Name_Data.String = aclassbclassuse.Name
	aclassbclassuseDB.Name_Data.Valid = true

}

// CopyBasicFieldsFromAclassBclassUseWOP
func (aclassbclassuseDB *AclassBclassUseDB) CopyBasicFieldsFromAclassBclassUseWOP(aclassbclassuse *AclassBclassUseWOP) {
	// insertion point for fields commit
	aclassbclassuseDB.Name_Data.String = aclassbclassuse.Name
	aclassbclassuseDB.Name_Data.Valid = true

}

// CopyBasicFieldsToAclassBclassUse
func (aclassbclassuseDB *AclassBclassUseDB) CopyBasicFieldsToAclassBclassUse(aclassbclassuse *models.AclassBclassUse) {
	// insertion point for checkout of basic fields (back repo to stage)
	aclassbclassuse.Name = aclassbclassuseDB.Name_Data.String
}

// CopyBasicFieldsToAclassBclassUseWOP
func (aclassbclassuseDB *AclassBclassUseDB) CopyBasicFieldsToAclassBclassUseWOP(aclassbclassuse *AclassBclassUseWOP) {
	aclassbclassuse.ID = int(aclassbclassuseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	aclassbclassuse.Name = aclassbclassuseDB.Name_Data.String
}

// Backup generates a json file from a slice of all AclassBclassUseDB instances in the backrepo
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AclassBclassUseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AclassBclassUseDB, 0)
	for _, aclassbclassuseDB := range *backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB {
		forBackup = append(forBackup, aclassbclassuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json AclassBclassUse ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json AclassBclassUse file", err.Error())
	}
}

// Backup generates a json file from a slice of all AclassBclassUseDB instances in the backrepo
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AclassBclassUseDB, 0)
	for _, aclassbclassuseDB := range *backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB {
		forBackup = append(forBackup, aclassbclassuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AclassBclassUse")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AclassBclassUse_Fields, -1)
	for _, aclassbclassuseDB := range forBackup {

		var aclassbclassuseWOP AclassBclassUseWOP
		aclassbclassuseDB.CopyBasicFieldsToAclassBclassUseWOP(&aclassbclassuseWOP)

		row := sh.AddRow()
		row.WriteStruct(&aclassbclassuseWOP, -1)
	}
}

// RestorePhaseOne read the file "AclassBclassUseDB.json" in dirPath that stores an array
// of AclassBclassUseDB and stores it in the database
// the map BackRepoAclassBclassUseid_atBckpTime_newID is updated accordingly
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAclassBclassUseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AclassBclassUseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json AclassBclassUse file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AclassBclassUseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AclassBclassUseDBID_AclassBclassUseDB
	for _, aclassbclassuseDB := range forRestore {

		aclassbclassuseDB_ID_atBackupTime := aclassbclassuseDB.ID
		aclassbclassuseDB.ID = 0
		query := backRepoAclassBclassUse.db.Create(aclassbclassuseDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB)[aclassbclassuseDB.ID] = aclassbclassuseDB
		BackRepoAclassBclassUseid_atBckpTime_newID[aclassbclassuseDB_ID_atBackupTime] = aclassbclassuseDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json AclassBclassUse file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AclassBclassUse>id_atBckpTime_newID
// to compute new index
func (backRepoAclassBclassUse *BackRepoAclassBclassUseStruct) RestorePhaseTwo() {

	for _, aclassbclassuseDB := range *backRepoAclassBclassUse.Map_AclassBclassUseDBID_AclassBclassUseDB {

		// next line of code is to avert unused variable compilation error
		_ = aclassbclassuseDB

		// insertion point for reindexing pointers encoding
		// reindexing Bclass2 field
		if aclassbclassuseDB.Bclass2ID.Int64 != 0 {
			aclassbclassuseDB.Bclass2ID.Int64 = int64(BackRepoBclassid_atBckpTime_newID[uint(aclassbclassuseDB.Bclass2ID.Int64)])
		}

		// This reindex aclassbclassuse.AnarrayofbUse
		if aclassbclassuseDB.Aclass_AnarrayofbUseDBID.Int64 != 0 {
			aclassbclassuseDB.Aclass_AnarrayofbUseDBID.Int64 =
				int64(BackRepoAclassid_atBckpTime_newID[uint(aclassbclassuseDB.Aclass_AnarrayofbUseDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoAclassBclassUse.db.Model(aclassbclassuseDB).Updates(*aclassbclassuseDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAclassBclassUseid_atBckpTime_newID map[uint]uint
