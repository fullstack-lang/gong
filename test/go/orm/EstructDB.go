// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Estruct_sql sql.NullBool
var dummy_Estruct_time time.Duration
var dummy_Estruct_sort sort.Float64Slice

// EstructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model estructAPI
type EstructAPI struct {
	gorm.Model

	models.Estruct

	// encoding of pointers
	EstructPointersEnconding
}

// EstructPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EstructPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// EstructDB describes a estruct in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model estructDB
type EstructDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field estructDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	EstructPointersEnconding
}

// EstructDBs arrays estructDBs
// swagger:response estructDBsResponse
type EstructDBs []EstructDB

// EstructDBResponse provides response
// swagger:response estructDBResponse
type EstructDBResponse struct {
	EstructDB
}

// EstructWOP is a Estruct without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EstructWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Estruct_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEstructStruct struct {
	// stores EstructDB according to their gorm ID
	Map_EstructDBID_EstructDB *map[uint]*EstructDB

	// stores EstructDB ID according to Estruct address
	Map_EstructPtr_EstructDBID *map[*models.Estruct]uint

	// stores Estruct according to their gorm ID
	Map_EstructDBID_EstructPtr *map[uint]*models.Estruct

	db *gorm.DB
}

func (backRepoEstruct *BackRepoEstructStruct) GetDB() *gorm.DB {
	return backRepoEstruct.db
}

// GetEstructDBFromEstructPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEstruct *BackRepoEstructStruct) GetEstructDBFromEstructPtr(estruct *models.Estruct) (estructDB *EstructDB) {
	id := (*backRepoEstruct.Map_EstructPtr_EstructDBID)[estruct]
	estructDB = (*backRepoEstruct.Map_EstructDBID_EstructDB)[id]
	return
}

// BackRepoEstruct.Init set up the BackRepo of the Estruct
func (backRepoEstruct *BackRepoEstructStruct) Init(db *gorm.DB) (Error error) {

	if backRepoEstruct.Map_EstructDBID_EstructPtr != nil {
		err := errors.New("In Init, backRepoEstruct.Map_EstructDBID_EstructPtr should be nil")
		return err
	}

	if backRepoEstruct.Map_EstructDBID_EstructDB != nil {
		err := errors.New("In Init, backRepoEstruct.Map_EstructDBID_EstructDB should be nil")
		return err
	}

	if backRepoEstruct.Map_EstructPtr_EstructDBID != nil {
		err := errors.New("In Init, backRepoEstruct.Map_EstructPtr_EstructDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Estruct, 0)
	backRepoEstruct.Map_EstructDBID_EstructPtr = &tmp

	tmpDB := make(map[uint]*EstructDB, 0)
	backRepoEstruct.Map_EstructDBID_EstructDB = &tmpDB

	tmpID := make(map[*models.Estruct]uint, 0)
	backRepoEstruct.Map_EstructPtr_EstructDBID = &tmpID

	backRepoEstruct.db = db
	return
}

// BackRepoEstruct.CommitPhaseOne commits all staged instances of Estruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEstruct *BackRepoEstructStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for estruct := range stage.Estructs {
		backRepoEstruct.CommitPhaseOneInstance(estruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, estruct := range *backRepoEstruct.Map_EstructDBID_EstructPtr {
		if _, ok := stage.Estructs[estruct]; !ok {
			backRepoEstruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEstruct.CommitDeleteInstance commits deletion of Estruct to the BackRepo
func (backRepoEstruct *BackRepoEstructStruct) CommitDeleteInstance(id uint) (Error error) {

	estruct := (*backRepoEstruct.Map_EstructDBID_EstructPtr)[id]

	// estruct is not staged anymore, remove estructDB
	estructDB := (*backRepoEstruct.Map_EstructDBID_EstructDB)[id]
	query := backRepoEstruct.db.Unscoped().Delete(&estructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoEstruct.Map_EstructPtr_EstructDBID), estruct)
	delete((*backRepoEstruct.Map_EstructDBID_EstructPtr), id)
	delete((*backRepoEstruct.Map_EstructDBID_EstructDB), id)

	return
}

// BackRepoEstruct.CommitPhaseOneInstance commits estruct staged instances of Estruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEstruct *BackRepoEstructStruct) CommitPhaseOneInstance(estruct *models.Estruct) (Error error) {

	// check if the estruct is not commited yet
	if _, ok := (*backRepoEstruct.Map_EstructPtr_EstructDBID)[estruct]; ok {
		return
	}

	// initiate estruct
	var estructDB EstructDB
	estructDB.CopyBasicFieldsFromEstruct(estruct)

	query := backRepoEstruct.db.Create(&estructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoEstruct.Map_EstructPtr_EstructDBID)[estruct] = estructDB.ID
	(*backRepoEstruct.Map_EstructDBID_EstructPtr)[estructDB.ID] = estruct
	(*backRepoEstruct.Map_EstructDBID_EstructDB)[estructDB.ID] = &estructDB

	return
}

// BackRepoEstruct.CommitPhaseTwo commits all staged instances of Estruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEstruct *BackRepoEstructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, estruct := range *backRepoEstruct.Map_EstructDBID_EstructPtr {
		backRepoEstruct.CommitPhaseTwoInstance(backRepo, idx, estruct)
	}

	return
}

// BackRepoEstruct.CommitPhaseTwoInstance commits {{structname }} of models.Estruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEstruct *BackRepoEstructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, estruct *models.Estruct) (Error error) {

	// fetch matching estructDB
	if estructDB, ok := (*backRepoEstruct.Map_EstructDBID_EstructDB)[idx]; ok {

		estructDB.CopyBasicFieldsFromEstruct(estruct)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEstruct.db.Save(&estructDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Estruct intance %s", estruct.Name))
		return err
	}

	return
}

// BackRepoEstruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoEstruct *BackRepoEstructStruct) CheckoutPhaseOne() (Error error) {

	estructDBArray := make([]EstructDB, 0)
	query := backRepoEstruct.db.Find(&estructDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	estructInstancesToBeRemovedFromTheStage := make(map[*models.Estruct]any)
	for key, value := range models.Stage.Estructs {
		estructInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, estructDB := range estructDBArray {
		backRepoEstruct.CheckoutPhaseOneInstance(&estructDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		estruct, ok := (*backRepoEstruct.Map_EstructDBID_EstructPtr)[estructDB.ID]
		if ok {
			delete(estructInstancesToBeRemovedFromTheStage, estruct)
		}
	}

	// remove from stage and back repo's 3 maps all estructs that are not in the checkout
	for estruct := range estructInstancesToBeRemovedFromTheStage {
		estruct.Unstage()

		// remove instance from the back repo 3 maps
		estructID := (*backRepoEstruct.Map_EstructPtr_EstructDBID)[estruct]
		delete((*backRepoEstruct.Map_EstructPtr_EstructDBID), estruct)
		delete((*backRepoEstruct.Map_EstructDBID_EstructDB), estructID)
		delete((*backRepoEstruct.Map_EstructDBID_EstructPtr), estructID)
	}

	return
}

// CheckoutPhaseOneInstance takes a estructDB that has been found in the DB, updates the backRepo and stages the
// models version of the estructDB
func (backRepoEstruct *BackRepoEstructStruct) CheckoutPhaseOneInstance(estructDB *EstructDB) (Error error) {

	estruct, ok := (*backRepoEstruct.Map_EstructDBID_EstructPtr)[estructDB.ID]
	if !ok {
		estruct = new(models.Estruct)

		(*backRepoEstruct.Map_EstructDBID_EstructPtr)[estructDB.ID] = estruct
		(*backRepoEstruct.Map_EstructPtr_EstructDBID)[estruct] = estructDB.ID

		// append model store with the new element
		estruct.Name = estructDB.Name_Data.String
		estruct.Stage()
	}
	estructDB.CopyBasicFieldsToEstruct(estruct)

	// preserve pointer to estructDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EstructDBID_EstructDB)[estructDB hold variable pointers
	estructDB_Data := *estructDB
	preservedPtrToEstruct := &estructDB_Data
	(*backRepoEstruct.Map_EstructDBID_EstructDB)[estructDB.ID] = preservedPtrToEstruct

	return
}

// BackRepoEstruct.CheckoutPhaseTwo Checkouts all staged instances of Estruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEstruct *BackRepoEstructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, estructDB := range *backRepoEstruct.Map_EstructDBID_EstructDB {
		backRepoEstruct.CheckoutPhaseTwoInstance(backRepo, estructDB)
	}
	return
}

// BackRepoEstruct.CheckoutPhaseTwoInstance Checkouts staged instances of Estruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEstruct *BackRepoEstructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, estructDB *EstructDB) (Error error) {

	estruct := (*backRepoEstruct.Map_EstructDBID_EstructPtr)[estructDB.ID]
	_ = estruct // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitEstruct allows commit of a single estruct (if already staged)
func (backRepo *BackRepoStruct) CommitEstruct(estruct *models.Estruct) {
	backRepo.BackRepoEstruct.CommitPhaseOneInstance(estruct)
	if id, ok := (*backRepo.BackRepoEstruct.Map_EstructPtr_EstructDBID)[estruct]; ok {
		backRepo.BackRepoEstruct.CommitPhaseTwoInstance(backRepo, id, estruct)
	}
}

// CommitEstruct allows checkout of a single estruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEstruct(estruct *models.Estruct) {
	// check if the estruct is staged
	if _, ok := (*backRepo.BackRepoEstruct.Map_EstructPtr_EstructDBID)[estruct]; ok {

		if id, ok := (*backRepo.BackRepoEstruct.Map_EstructPtr_EstructDBID)[estruct]; ok {
			var estructDB EstructDB
			estructDB.ID = id

			if err := backRepo.BackRepoEstruct.db.First(&estructDB, id).Error; err != nil {
				log.Panicln("CheckoutEstruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEstruct.CheckoutPhaseOneInstance(&estructDB)
			backRepo.BackRepoEstruct.CheckoutPhaseTwoInstance(backRepo, &estructDB)
		}
	}
}

// CopyBasicFieldsFromEstruct
func (estructDB *EstructDB) CopyBasicFieldsFromEstruct(estruct *models.Estruct) {
	// insertion point for fields commit

	estructDB.Name_Data.String = estruct.Name
	estructDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEstructWOP
func (estructDB *EstructDB) CopyBasicFieldsFromEstructWOP(estruct *EstructWOP) {
	// insertion point for fields commit

	estructDB.Name_Data.String = estruct.Name
	estructDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEstruct
func (estructDB *EstructDB) CopyBasicFieldsToEstruct(estruct *models.Estruct) {
	// insertion point for checkout of basic fields (back repo to stage)
	estruct.Name = estructDB.Name_Data.String
}

// CopyBasicFieldsToEstructWOP
func (estructDB *EstructDB) CopyBasicFieldsToEstructWOP(estruct *EstructWOP) {
	estruct.ID = int(estructDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	estruct.Name = estructDB.Name_Data.String
}

// Backup generates a json file from a slice of all EstructDB instances in the backrepo
func (backRepoEstruct *BackRepoEstructStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EstructDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EstructDB, 0)
	for _, estructDB := range *backRepoEstruct.Map_EstructDBID_EstructDB {
		forBackup = append(forBackup, estructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Estruct ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Estruct file", err.Error())
	}
}

// Backup generates a json file from a slice of all EstructDB instances in the backrepo
func (backRepoEstruct *BackRepoEstructStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EstructDB, 0)
	for _, estructDB := range *backRepoEstruct.Map_EstructDBID_EstructDB {
		forBackup = append(forBackup, estructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Estruct")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Estruct_Fields, -1)
	for _, estructDB := range forBackup {

		var estructWOP EstructWOP
		estructDB.CopyBasicFieldsToEstructWOP(&estructWOP)

		row := sh.AddRow()
		row.WriteStruct(&estructWOP, -1)
	}
}

// RestoreXL from the "Estruct" sheet all EstructDB instances
func (backRepoEstruct *BackRepoEstructStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEstructid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Estruct"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEstruct.rowVisitorEstruct)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoEstruct *BackRepoEstructStruct) rowVisitorEstruct(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var estructWOP EstructWOP
		row.ReadStruct(&estructWOP)

		// add the unmarshalled struct to the stage
		estructDB := new(EstructDB)
		estructDB.CopyBasicFieldsFromEstructWOP(&estructWOP)

		estructDB_ID_atBackupTime := estructDB.ID
		estructDB.ID = 0
		query := backRepoEstruct.db.Create(estructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoEstruct.Map_EstructDBID_EstructDB)[estructDB.ID] = estructDB
		BackRepoEstructid_atBckpTime_newID[estructDB_ID_atBackupTime] = estructDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EstructDB.json" in dirPath that stores an array
// of EstructDB and stores it in the database
// the map BackRepoEstructid_atBckpTime_newID is updated accordingly
func (backRepoEstruct *BackRepoEstructStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEstructid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EstructDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Estruct file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EstructDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EstructDBID_EstructDB
	for _, estructDB := range forRestore {

		estructDB_ID_atBackupTime := estructDB.ID
		estructDB.ID = 0
		query := backRepoEstruct.db.Create(estructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoEstruct.Map_EstructDBID_EstructDB)[estructDB.ID] = estructDB
		BackRepoEstructid_atBckpTime_newID[estructDB_ID_atBackupTime] = estructDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Estruct file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Estruct>id_atBckpTime_newID
// to compute new index
func (backRepoEstruct *BackRepoEstructStruct) RestorePhaseTwo() {

	for _, estructDB := range *backRepoEstruct.Map_EstructDBID_EstructDB {

		// next line of code is to avert unused variable compilation error
		_ = estructDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEstruct.db.Model(estructDB).Updates(*estructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEstructid_atBckpTime_newID map[uint]uint
