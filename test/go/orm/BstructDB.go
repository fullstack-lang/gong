// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bstruct_sql sql.NullBool
var dummy_Bstruct_time time.Duration
var dummy_Bstruct_sort sort.Float64Slice

// BstructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bstructAPI
type BstructAPI struct {
	gorm.Model

	models.Bstruct

	// encoding of pointers
	BstructPointersEnconding
}

// BstructPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BstructPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Astruct{}.Anarrayofb []*Bstruct
	Astruct_AnarrayofbDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Astruct_AnarrayofbDBID_Index sql.NullInt64

	// Implementation of a reverse ID for field Astruct{}.Anotherarrayofb []*Bstruct
	Astruct_AnotherarrayofbDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Astruct_AnotherarrayofbDBID_Index sql.NullInt64

	// Implementation of a reverse ID for field Dstruct{}.Anarrayofb []*Bstruct
	Dstruct_AnarrayofbDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Dstruct_AnarrayofbDBID_Index sql.NullInt64
}

// BstructDB describes a bstruct in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bstructDB
type BstructDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bstructDB.Name
	Name_Data sql.NullString

	// Declation for basic field bstructDB.Floatfield
	Floatfield_Data sql.NullFloat64

	// Declation for basic field bstructDB.Floatfield2
	Floatfield2_Data sql.NullFloat64

	// Declation for basic field bstructDB.Intfield
	Intfield_Data sql.NullInt64
	// encoding of pointers
	BstructPointersEnconding
}

// BstructDBs arrays bstructDBs
// swagger:response bstructDBsResponse
type BstructDBs []BstructDB

// BstructDBResponse provides response
// swagger:response bstructDBResponse
type BstructDBResponse struct {
	BstructDB
}

// BstructWOP is a Bstruct without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BstructWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Floatfield float64 `xlsx:"2"`

	Floatfield2 float64 `xlsx:"3"`

	Intfield int `xlsx:"4"`
	// insertion for WOP pointer fields
}

var Bstruct_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Floatfield",
	"Floatfield2",
	"Intfield",
}

type BackRepoBstructStruct struct {
	// stores BstructDB according to their gorm ID
	Map_BstructDBID_BstructDB map[uint]*BstructDB

	// stores BstructDB ID according to Bstruct address
	Map_BstructPtr_BstructDBID map[*models.Bstruct]uint

	// stores Bstruct according to their gorm ID
	Map_BstructDBID_BstructPtr map[uint]*models.Bstruct

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBstruct *BackRepoBstructStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBstruct.stage
	return
}

func (backRepoBstruct *BackRepoBstructStruct) GetDB() *gorm.DB {
	return backRepoBstruct.db
}

// GetBstructDBFromBstructPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBstruct *BackRepoBstructStruct) GetBstructDBFromBstructPtr(bstruct *models.Bstruct) (bstructDB *BstructDB) {
	id := backRepoBstruct.Map_BstructPtr_BstructDBID[bstruct]
	bstructDB = backRepoBstruct.Map_BstructDBID_BstructDB[id]
	return
}

// BackRepoBstruct.CommitPhaseOne commits all staged instances of Bstruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBstruct *BackRepoBstructStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bstruct := range stage.Bstructs {
		backRepoBstruct.CommitPhaseOneInstance(bstruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bstruct := range backRepoBstruct.Map_BstructDBID_BstructPtr {
		if _, ok := stage.Bstructs[bstruct]; !ok {
			backRepoBstruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBstruct.CommitDeleteInstance commits deletion of Bstruct to the BackRepo
func (backRepoBstruct *BackRepoBstructStruct) CommitDeleteInstance(id uint) (Error error) {

	bstruct := backRepoBstruct.Map_BstructDBID_BstructPtr[id]

	// bstruct is not staged anymore, remove bstructDB
	bstructDB := backRepoBstruct.Map_BstructDBID_BstructDB[id]
	query := backRepoBstruct.db.Unscoped().Delete(&bstructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoBstruct.Map_BstructPtr_BstructDBID, bstruct)
	delete(backRepoBstruct.Map_BstructDBID_BstructPtr, id)
	delete(backRepoBstruct.Map_BstructDBID_BstructDB, id)

	return
}

// BackRepoBstruct.CommitPhaseOneInstance commits bstruct staged instances of Bstruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBstruct *BackRepoBstructStruct) CommitPhaseOneInstance(bstruct *models.Bstruct) (Error error) {

	// check if the bstruct is not commited yet
	if _, ok := backRepoBstruct.Map_BstructPtr_BstructDBID[bstruct]; ok {
		return
	}

	// initiate bstruct
	var bstructDB BstructDB
	bstructDB.CopyBasicFieldsFromBstruct(bstruct)

	query := backRepoBstruct.db.Create(&bstructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoBstruct.Map_BstructPtr_BstructDBID[bstruct] = bstructDB.ID
	backRepoBstruct.Map_BstructDBID_BstructPtr[bstructDB.ID] = bstruct
	backRepoBstruct.Map_BstructDBID_BstructDB[bstructDB.ID] = &bstructDB

	return
}

// BackRepoBstruct.CommitPhaseTwo commits all staged instances of Bstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBstruct *BackRepoBstructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bstruct := range backRepoBstruct.Map_BstructDBID_BstructPtr {
		backRepoBstruct.CommitPhaseTwoInstance(backRepo, idx, bstruct)
	}

	return
}

// BackRepoBstruct.CommitPhaseTwoInstance commits {{structname }} of models.Bstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBstruct *BackRepoBstructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bstruct *models.Bstruct) (Error error) {

	// fetch matching bstructDB
	if bstructDB, ok := backRepoBstruct.Map_BstructDBID_BstructDB[idx]; ok {

		bstructDB.CopyBasicFieldsFromBstruct(bstruct)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBstruct.db.Save(&bstructDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bstruct intance %s", bstruct.Name))
		return err
	}

	return
}

// BackRepoBstruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBstruct *BackRepoBstructStruct) CheckoutPhaseOne() (Error error) {

	bstructDBArray := make([]BstructDB, 0)
	query := backRepoBstruct.db.Find(&bstructDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bstructInstancesToBeRemovedFromTheStage := make(map[*models.Bstruct]any)
	for key, value := range backRepoBstruct.stage.Bstructs {
		bstructInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bstructDB := range bstructDBArray {
		backRepoBstruct.CheckoutPhaseOneInstance(&bstructDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bstruct, ok := backRepoBstruct.Map_BstructDBID_BstructPtr[bstructDB.ID]
		if ok {
			delete(bstructInstancesToBeRemovedFromTheStage, bstruct)
		}
	}

	// remove from stage and back repo's 3 maps all bstructs that are not in the checkout
	for bstruct := range bstructInstancesToBeRemovedFromTheStage {
		bstruct.Unstage(backRepoBstruct.GetStage())

		// remove instance from the back repo 3 maps
		bstructID := backRepoBstruct.Map_BstructPtr_BstructDBID[bstruct]
		delete(backRepoBstruct.Map_BstructPtr_BstructDBID, bstruct)
		delete(backRepoBstruct.Map_BstructDBID_BstructDB, bstructID)
		delete(backRepoBstruct.Map_BstructDBID_BstructPtr, bstructID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bstructDB that has been found in the DB, updates the backRepo and stages the
// models version of the bstructDB
func (backRepoBstruct *BackRepoBstructStruct) CheckoutPhaseOneInstance(bstructDB *BstructDB) (Error error) {

	bstruct, ok := backRepoBstruct.Map_BstructDBID_BstructPtr[bstructDB.ID]
	if !ok {
		bstruct = new(models.Bstruct)

		backRepoBstruct.Map_BstructDBID_BstructPtr[bstructDB.ID] = bstruct
		backRepoBstruct.Map_BstructPtr_BstructDBID[bstruct] = bstructDB.ID

		// append model store with the new element
		bstruct.Name = bstructDB.Name_Data.String
		bstruct.Stage(backRepoBstruct.GetStage())
	}
	bstructDB.CopyBasicFieldsToBstruct(bstruct)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bstruct.Stage(backRepoBstruct.GetStage())

	// preserve pointer to bstructDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BstructDBID_BstructDB)[bstructDB hold variable pointers
	bstructDB_Data := *bstructDB
	preservedPtrToBstruct := &bstructDB_Data
	backRepoBstruct.Map_BstructDBID_BstructDB[bstructDB.ID] = preservedPtrToBstruct

	return
}

// BackRepoBstruct.CheckoutPhaseTwo Checkouts all staged instances of Bstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBstruct *BackRepoBstructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bstructDB := range backRepoBstruct.Map_BstructDBID_BstructDB {
		backRepoBstruct.CheckoutPhaseTwoInstance(backRepo, bstructDB)
	}
	return
}

// BackRepoBstruct.CheckoutPhaseTwoInstance Checkouts staged instances of Bstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBstruct *BackRepoBstructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bstructDB *BstructDB) (Error error) {

	bstruct := backRepoBstruct.Map_BstructDBID_BstructPtr[bstructDB.ID]
	_ = bstruct // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitBstruct allows commit of a single bstruct (if already staged)
func (backRepo *BackRepoStruct) CommitBstruct(bstruct *models.Bstruct) {
	backRepo.BackRepoBstruct.CommitPhaseOneInstance(bstruct)
	if id, ok := backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID[bstruct]; ok {
		backRepo.BackRepoBstruct.CommitPhaseTwoInstance(backRepo, id, bstruct)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBstruct allows checkout of a single bstruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBstruct(bstruct *models.Bstruct) {
	// check if the bstruct is staged
	if _, ok := backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID[bstruct]; ok {

		if id, ok := backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID[bstruct]; ok {
			var bstructDB BstructDB
			bstructDB.ID = id

			if err := backRepo.BackRepoBstruct.db.First(&bstructDB, id).Error; err != nil {
				log.Panicln("CheckoutBstruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBstruct.CheckoutPhaseOneInstance(&bstructDB)
			backRepo.BackRepoBstruct.CheckoutPhaseTwoInstance(backRepo, &bstructDB)
		}
	}
}

// CopyBasicFieldsFromBstruct
func (bstructDB *BstructDB) CopyBasicFieldsFromBstruct(bstruct *models.Bstruct) {
	// insertion point for fields commit

	bstructDB.Name_Data.String = bstruct.Name
	bstructDB.Name_Data.Valid = true

	bstructDB.Floatfield_Data.Float64 = bstruct.Floatfield
	bstructDB.Floatfield_Data.Valid = true

	bstructDB.Floatfield2_Data.Float64 = bstruct.Floatfield2
	bstructDB.Floatfield2_Data.Valid = true

	bstructDB.Intfield_Data.Int64 = int64(bstruct.Intfield)
	bstructDB.Intfield_Data.Valid = true
}

// CopyBasicFieldsFromBstructWOP
func (bstructDB *BstructDB) CopyBasicFieldsFromBstructWOP(bstruct *BstructWOP) {
	// insertion point for fields commit

	bstructDB.Name_Data.String = bstruct.Name
	bstructDB.Name_Data.Valid = true

	bstructDB.Floatfield_Data.Float64 = bstruct.Floatfield
	bstructDB.Floatfield_Data.Valid = true

	bstructDB.Floatfield2_Data.Float64 = bstruct.Floatfield2
	bstructDB.Floatfield2_Data.Valid = true

	bstructDB.Intfield_Data.Int64 = int64(bstruct.Intfield)
	bstructDB.Intfield_Data.Valid = true
}

// CopyBasicFieldsToBstruct
func (bstructDB *BstructDB) CopyBasicFieldsToBstruct(bstruct *models.Bstruct) {
	// insertion point for checkout of basic fields (back repo to stage)
	bstruct.Name = bstructDB.Name_Data.String
	bstruct.Floatfield = bstructDB.Floatfield_Data.Float64
	bstruct.Floatfield2 = bstructDB.Floatfield2_Data.Float64
	bstruct.Intfield = int(bstructDB.Intfield_Data.Int64)
}

// CopyBasicFieldsToBstructWOP
func (bstructDB *BstructDB) CopyBasicFieldsToBstructWOP(bstruct *BstructWOP) {
	bstruct.ID = int(bstructDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bstruct.Name = bstructDB.Name_Data.String
	bstruct.Floatfield = bstructDB.Floatfield_Data.Float64
	bstruct.Floatfield2 = bstructDB.Floatfield2_Data.Float64
	bstruct.Intfield = int(bstructDB.Intfield_Data.Int64)
}

// Backup generates a json file from a slice of all BstructDB instances in the backrepo
func (backRepoBstruct *BackRepoBstructStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BstructDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BstructDB, 0)
	for _, bstructDB := range backRepoBstruct.Map_BstructDBID_BstructDB {
		forBackup = append(forBackup, bstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Bstruct ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Bstruct file", err.Error())
	}
}

// Backup generates a json file from a slice of all BstructDB instances in the backrepo
func (backRepoBstruct *BackRepoBstructStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BstructDB, 0)
	for _, bstructDB := range backRepoBstruct.Map_BstructDBID_BstructDB {
		forBackup = append(forBackup, bstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Bstruct")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Bstruct_Fields, -1)
	for _, bstructDB := range forBackup {

		var bstructWOP BstructWOP
		bstructDB.CopyBasicFieldsToBstructWOP(&bstructWOP)

		row := sh.AddRow()
		row.WriteStruct(&bstructWOP, -1)
	}
}

// RestoreXL from the "Bstruct" sheet all BstructDB instances
func (backRepoBstruct *BackRepoBstructStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBstructid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Bstruct"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBstruct.rowVisitorBstruct)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoBstruct *BackRepoBstructStruct) rowVisitorBstruct(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bstructWOP BstructWOP
		row.ReadStruct(&bstructWOP)

		// add the unmarshalled struct to the stage
		bstructDB := new(BstructDB)
		bstructDB.CopyBasicFieldsFromBstructWOP(&bstructWOP)

		bstructDB_ID_atBackupTime := bstructDB.ID
		bstructDB.ID = 0
		query := backRepoBstruct.db.Create(bstructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoBstruct.Map_BstructDBID_BstructDB[bstructDB.ID] = bstructDB
		BackRepoBstructid_atBckpTime_newID[bstructDB_ID_atBackupTime] = bstructDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BstructDB.json" in dirPath that stores an array
// of BstructDB and stores it in the database
// the map BackRepoBstructid_atBckpTime_newID is updated accordingly
func (backRepoBstruct *BackRepoBstructStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBstructid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BstructDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Bstruct file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BstructDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BstructDBID_BstructDB
	for _, bstructDB := range forRestore {

		bstructDB_ID_atBackupTime := bstructDB.ID
		bstructDB.ID = 0
		query := backRepoBstruct.db.Create(bstructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoBstruct.Map_BstructDBID_BstructDB[bstructDB.ID] = bstructDB
		BackRepoBstructid_atBckpTime_newID[bstructDB_ID_atBackupTime] = bstructDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Bstruct file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Bstruct>id_atBckpTime_newID
// to compute new index
func (backRepoBstruct *BackRepoBstructStruct) RestorePhaseTwo() {

	for _, bstructDB := range backRepoBstruct.Map_BstructDBID_BstructDB {

		// next line of code is to avert unused variable compilation error
		_ = bstructDB

		// insertion point for reindexing pointers encoding
		// This reindex bstruct.Anarrayofb
		if bstructDB.Astruct_AnarrayofbDBID.Int64 != 0 {
			bstructDB.Astruct_AnarrayofbDBID.Int64 =
				int64(BackRepoAstructid_atBckpTime_newID[uint(bstructDB.Astruct_AnarrayofbDBID.Int64)])
		}

		// This reindex bstruct.Anotherarrayofb
		if bstructDB.Astruct_AnotherarrayofbDBID.Int64 != 0 {
			bstructDB.Astruct_AnotherarrayofbDBID.Int64 =
				int64(BackRepoAstructid_atBckpTime_newID[uint(bstructDB.Astruct_AnotherarrayofbDBID.Int64)])
		}

		// This reindex bstruct.Anarrayofb
		if bstructDB.Dstruct_AnarrayofbDBID.Int64 != 0 {
			bstructDB.Dstruct_AnarrayofbDBID.Int64 =
				int64(BackRepoDstructid_atBckpTime_newID[uint(bstructDB.Dstruct_AnarrayofbDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoBstruct.db.Model(bstructDB).Updates(*bstructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// BackRepoBstruct.ResetReversePointers commits all staged instances of Bstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBstruct *BackRepoBstructStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bstruct := range backRepoBstruct.Map_BstructDBID_BstructPtr {
		backRepoBstruct.ResetReversePointersInstance(backRepo, idx, bstruct)
	}

	return
}

func (backRepoBstruct *BackRepoBstructStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, astruct *models.Bstruct) (Error error) {

	// fetch matching bstructDB
	if bstructDB, ok := backRepoBstruct.Map_BstructDBID_BstructDB[idx]; ok {
		_ = bstructDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		if bstructDB.Astruct_AnarrayofbDBID.Int64 != 0 {
			bstructDB.Astruct_AnarrayofbDBID.Int64 = 0
			bstructDB.Astruct_AnarrayofbDBID.Valid = true

			// save the reset
			if q := backRepoBstruct.db.Save(bstructDB); q.Error != nil {
				return q.Error
			}
		}
		if bstructDB.Astruct_AnotherarrayofbDBID.Int64 != 0 {
			bstructDB.Astruct_AnotherarrayofbDBID.Int64 = 0
			bstructDB.Astruct_AnotherarrayofbDBID.Valid = true

			// save the reset
			if q := backRepoBstruct.db.Save(bstructDB); q.Error != nil {
				return q.Error
			}
		}
		if bstructDB.Dstruct_AnarrayofbDBID.Int64 != 0 {
			bstructDB.Dstruct_AnarrayofbDBID.Int64 = 0
			bstructDB.Dstruct_AnarrayofbDBID.Valid = true

			// save the reset
			if q := backRepoBstruct.db.Save(bstructDB); q.Error != nil {
				return q.Error
			}
		}
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBstructid_atBckpTime_newID map[uint]uint
