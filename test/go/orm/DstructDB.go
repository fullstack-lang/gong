// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/db"
	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Dstruct_sql sql.NullBool
var dummy_Dstruct_time time.Duration
var dummy_Dstruct_sort sort.Float64Slice

// DstructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model dstructAPI
type DstructAPI struct {
	gorm.Model

	models.Dstruct_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DstructPointersEncoding DstructPointersEncoding
}

// DstructPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DstructPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Anarrayofb is a slice of pointers to another Struct (optional or 0..1)
	Anarrayofb IntSlice `gorm:"type:TEXT"`

	// field Gstruct is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GstructID sql.NullInt64

	// field Gstructs is a slice of pointers to another Struct (optional or 0..1)
	Gstructs IntSlice `gorm:"type:TEXT"`
}

// DstructDB describes a dstruct in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model dstructDB
type DstructDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field dstructDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DstructPointersEncoding
}

// DstructDBs arrays dstructDBs
// swagger:response dstructDBsResponse
type DstructDBs []DstructDB

// DstructDBResponse provides response
// swagger:response dstructDBResponse
type DstructDBResponse struct {
	DstructDB
}

// DstructWOP is a Dstruct without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DstructWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Dstruct_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDstructStruct struct {
	// stores DstructDB according to their gorm ID
	Map_DstructDBID_DstructDB map[uint]*DstructDB

	// stores DstructDB ID according to Dstruct address
	Map_DstructPtr_DstructDBID map[*models.Dstruct]uint

	// stores Dstruct according to their gorm ID
	Map_DstructDBID_DstructPtr map[uint]*models.Dstruct

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoDstruct *BackRepoDstructStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDstruct.stage
	return
}

func (backRepoDstruct *BackRepoDstructStruct) GetDB() db.DBInterface {
	return backRepoDstruct.db
}

// GetDstructDBFromDstructPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDstruct *BackRepoDstructStruct) GetDstructDBFromDstructPtr(dstruct *models.Dstruct) (dstructDB *DstructDB) {
	id := backRepoDstruct.Map_DstructPtr_DstructDBID[dstruct]
	dstructDB = backRepoDstruct.Map_DstructDBID_DstructDB[id]
	return
}

// BackRepoDstruct.CommitPhaseOne commits all staged instances of Dstruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDstruct *BackRepoDstructStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for dstruct := range stage.Dstructs {
		backRepoDstruct.CommitPhaseOneInstance(dstruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, dstruct := range backRepoDstruct.Map_DstructDBID_DstructPtr {
		if _, ok := stage.Dstructs[dstruct]; !ok {
			backRepoDstruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDstruct.CommitDeleteInstance commits deletion of Dstruct to the BackRepo
func (backRepoDstruct *BackRepoDstructStruct) CommitDeleteInstance(id uint) (Error error) {

	dstruct := backRepoDstruct.Map_DstructDBID_DstructPtr[id]

	// dstruct is not staged anymore, remove dstructDB
	dstructDB := backRepoDstruct.Map_DstructDBID_DstructDB[id]
	db, _ := backRepoDstruct.db.Unscoped()
	_, err := db.Delete(&dstructDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoDstruct.Map_DstructPtr_DstructDBID, dstruct)
	delete(backRepoDstruct.Map_DstructDBID_DstructPtr, id)
	delete(backRepoDstruct.Map_DstructDBID_DstructDB, id)

	return
}

// BackRepoDstruct.CommitPhaseOneInstance commits dstruct staged instances of Dstruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDstruct *BackRepoDstructStruct) CommitPhaseOneInstance(dstruct *models.Dstruct) (Error error) {

	// check if the dstruct is not commited yet
	if _, ok := backRepoDstruct.Map_DstructPtr_DstructDBID[dstruct]; ok {
		return
	}

	// initiate dstruct
	var dstructDB DstructDB
	dstructDB.CopyBasicFieldsFromDstruct(dstruct)

	_, err := backRepoDstruct.db.Create(&dstructDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoDstruct.Map_DstructPtr_DstructDBID[dstruct] = dstructDB.ID
	backRepoDstruct.Map_DstructDBID_DstructPtr[dstructDB.ID] = dstruct
	backRepoDstruct.Map_DstructDBID_DstructDB[dstructDB.ID] = &dstructDB

	return
}

// BackRepoDstruct.CommitPhaseTwo commits all staged instances of Dstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDstruct *BackRepoDstructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, dstruct := range backRepoDstruct.Map_DstructDBID_DstructPtr {
		backRepoDstruct.CommitPhaseTwoInstance(backRepo, idx, dstruct)
	}

	return
}

// BackRepoDstruct.CommitPhaseTwoInstance commits {{structname }} of models.Dstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDstruct *BackRepoDstructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, dstruct *models.Dstruct) (Error error) {

	// fetch matching dstructDB
	if dstructDB, ok := backRepoDstruct.Map_DstructDBID_DstructDB[idx]; ok {

		dstructDB.CopyBasicFieldsFromDstruct(dstruct)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		dstructDB.DstructPointersEncoding.Anarrayofb = make([]int, 0)
		// 2. encode
		for _, bstructAssocEnd := range dstruct.Anarrayofb {
			bstructAssocEnd_DB :=
				backRepo.BackRepoBstruct.GetBstructDBFromBstructPtr(bstructAssocEnd)
			
			// the stage might be inconsistant, meaning that the bstructAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if bstructAssocEnd_DB == nil {
				continue
			}
			
			dstructDB.DstructPointersEncoding.Anarrayofb =
				append(dstructDB.DstructPointersEncoding.Anarrayofb, int(bstructAssocEnd_DB.ID))
		}

		// commit pointer value dstruct.Gstruct translates to updating the dstruct.GstructID
		dstructDB.GstructID.Valid = true // allow for a 0 value (nil association)
		if dstruct.Gstruct != nil {
			if GstructId, ok := backRepo.BackRepoGstruct.Map_GstructPtr_GstructDBID[dstruct.Gstruct]; ok {
				dstructDB.GstructID.Int64 = int64(GstructId)
				dstructDB.GstructID.Valid = true
			}
		} else {
			dstructDB.GstructID.Int64 = 0
			dstructDB.GstructID.Valid = true
		}

		// 1. reset
		dstructDB.DstructPointersEncoding.Gstructs = make([]int, 0)
		// 2. encode
		for _, gstructAssocEnd := range dstruct.Gstructs {
			gstructAssocEnd_DB :=
				backRepo.BackRepoGstruct.GetGstructDBFromGstructPtr(gstructAssocEnd)
			
			// the stage might be inconsistant, meaning that the gstructAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if gstructAssocEnd_DB == nil {
				continue
			}
			
			dstructDB.DstructPointersEncoding.Gstructs =
				append(dstructDB.DstructPointersEncoding.Gstructs, int(gstructAssocEnd_DB.ID))
		}

		_, err := backRepoDstruct.db.Save(&dstructDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Dstruct intance %s", dstruct.Name))
		return err
	}

	return
}

// BackRepoDstruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDstruct *BackRepoDstructStruct) CheckoutPhaseOne() (Error error) {

	dstructDBArray := make([]DstructDB, 0)
	_, err := backRepoDstruct.db.Find(&dstructDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	dstructInstancesToBeRemovedFromTheStage := make(map[*models.Dstruct]any)
	for key, value := range backRepoDstruct.stage.Dstructs {
		dstructInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, dstructDB := range dstructDBArray {
		backRepoDstruct.CheckoutPhaseOneInstance(&dstructDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		dstruct, ok := backRepoDstruct.Map_DstructDBID_DstructPtr[dstructDB.ID]
		if ok {
			delete(dstructInstancesToBeRemovedFromTheStage, dstruct)
		}
	}

	// remove from stage and back repo's 3 maps all dstructs that are not in the checkout
	for dstruct := range dstructInstancesToBeRemovedFromTheStage {
		dstruct.Unstage(backRepoDstruct.GetStage())

		// remove instance from the back repo 3 maps
		dstructID := backRepoDstruct.Map_DstructPtr_DstructDBID[dstruct]
		delete(backRepoDstruct.Map_DstructPtr_DstructDBID, dstruct)
		delete(backRepoDstruct.Map_DstructDBID_DstructDB, dstructID)
		delete(backRepoDstruct.Map_DstructDBID_DstructPtr, dstructID)
	}

	return
}

// CheckoutPhaseOneInstance takes a dstructDB that has been found in the DB, updates the backRepo and stages the
// models version of the dstructDB
func (backRepoDstruct *BackRepoDstructStruct) CheckoutPhaseOneInstance(dstructDB *DstructDB) (Error error) {

	dstruct, ok := backRepoDstruct.Map_DstructDBID_DstructPtr[dstructDB.ID]
	if !ok {
		dstruct = new(models.Dstruct)

		backRepoDstruct.Map_DstructDBID_DstructPtr[dstructDB.ID] = dstruct
		backRepoDstruct.Map_DstructPtr_DstructDBID[dstruct] = dstructDB.ID

		// append model store with the new element
		dstruct.Name = dstructDB.Name_Data.String
		dstruct.Stage(backRepoDstruct.GetStage())
	}
	dstructDB.CopyBasicFieldsToDstruct(dstruct)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	dstruct.Stage(backRepoDstruct.GetStage())

	// preserve pointer to dstructDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DstructDBID_DstructDB)[dstructDB hold variable pointers
	dstructDB_Data := *dstructDB
	preservedPtrToDstruct := &dstructDB_Data
	backRepoDstruct.Map_DstructDBID_DstructDB[dstructDB.ID] = preservedPtrToDstruct

	return
}

// BackRepoDstruct.CheckoutPhaseTwo Checkouts all staged instances of Dstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDstruct *BackRepoDstructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, dstructDB := range backRepoDstruct.Map_DstructDBID_DstructDB {
		backRepoDstruct.CheckoutPhaseTwoInstance(backRepo, dstructDB)
	}
	return
}

// BackRepoDstruct.CheckoutPhaseTwoInstance Checkouts staged instances of Dstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDstruct *BackRepoDstructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, dstructDB *DstructDB) (Error error) {

	dstruct := backRepoDstruct.Map_DstructDBID_DstructPtr[dstructDB.ID]

	dstructDB.DecodePointers(backRepo, dstruct)

	return
}

func (dstructDB *DstructDB) DecodePointers(backRepo *BackRepoStruct, dstruct *models.Dstruct) {

	// insertion point for checkout of pointer encoding
	// This loop redeem dstruct.Anarrayofb in the stage from the encode in the back repo
	// It parses all BstructDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	dstruct.Anarrayofb = dstruct.Anarrayofb[:0]
	for _, _Bstructid := range dstructDB.DstructPointersEncoding.Anarrayofb {
		dstruct.Anarrayofb = append(dstruct.Anarrayofb, backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr[uint(_Bstructid)])
	}

	// Gstruct field
	dstruct.Gstruct = nil
	if dstructDB.GstructID.Int64 != 0 {
		dstruct.Gstruct = backRepo.BackRepoGstruct.Map_GstructDBID_GstructPtr[uint(dstructDB.GstructID.Int64)]
	}
	// This loop redeem dstruct.Gstructs in the stage from the encode in the back repo
	// It parses all GstructDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	dstruct.Gstructs = dstruct.Gstructs[:0]
	for _, _Gstructid := range dstructDB.DstructPointersEncoding.Gstructs {
		dstruct.Gstructs = append(dstruct.Gstructs, backRepo.BackRepoGstruct.Map_GstructDBID_GstructPtr[uint(_Gstructid)])
	}

	return
}

// CommitDstruct allows commit of a single dstruct (if already staged)
func (backRepo *BackRepoStruct) CommitDstruct(dstruct *models.Dstruct) {
	backRepo.BackRepoDstruct.CommitPhaseOneInstance(dstruct)
	if id, ok := backRepo.BackRepoDstruct.Map_DstructPtr_DstructDBID[dstruct]; ok {
		backRepo.BackRepoDstruct.CommitPhaseTwoInstance(backRepo, id, dstruct)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDstruct allows checkout of a single dstruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDstruct(dstruct *models.Dstruct) {
	// check if the dstruct is staged
	if _, ok := backRepo.BackRepoDstruct.Map_DstructPtr_DstructDBID[dstruct]; ok {

		if id, ok := backRepo.BackRepoDstruct.Map_DstructPtr_DstructDBID[dstruct]; ok {
			var dstructDB DstructDB
			dstructDB.ID = id

			if _, err := backRepo.BackRepoDstruct.db.First(&dstructDB, id); err != nil {
				log.Fatalln("CheckoutDstruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDstruct.CheckoutPhaseOneInstance(&dstructDB)
			backRepo.BackRepoDstruct.CheckoutPhaseTwoInstance(backRepo, &dstructDB)
		}
	}
}

// CopyBasicFieldsFromDstruct
func (dstructDB *DstructDB) CopyBasicFieldsFromDstruct(dstruct *models.Dstruct) {
	// insertion point for fields commit

	dstructDB.Name_Data.String = dstruct.Name
	dstructDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDstruct_WOP
func (dstructDB *DstructDB) CopyBasicFieldsFromDstruct_WOP(dstruct *models.Dstruct_WOP) {
	// insertion point for fields commit

	dstructDB.Name_Data.String = dstruct.Name
	dstructDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDstructWOP
func (dstructDB *DstructDB) CopyBasicFieldsFromDstructWOP(dstruct *DstructWOP) {
	// insertion point for fields commit

	dstructDB.Name_Data.String = dstruct.Name
	dstructDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDstruct
func (dstructDB *DstructDB) CopyBasicFieldsToDstruct(dstruct *models.Dstruct) {
	// insertion point for checkout of basic fields (back repo to stage)
	dstruct.Name = dstructDB.Name_Data.String
}

// CopyBasicFieldsToDstruct_WOP
func (dstructDB *DstructDB) CopyBasicFieldsToDstruct_WOP(dstruct *models.Dstruct_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	dstruct.Name = dstructDB.Name_Data.String
}

// CopyBasicFieldsToDstructWOP
func (dstructDB *DstructDB) CopyBasicFieldsToDstructWOP(dstruct *DstructWOP) {
	dstruct.ID = int(dstructDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	dstruct.Name = dstructDB.Name_Data.String
}

// Backup generates a json file from a slice of all DstructDB instances in the backrepo
func (backRepoDstruct *BackRepoDstructStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DstructDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DstructDB, 0)
	for _, dstructDB := range backRepoDstruct.Map_DstructDBID_DstructDB {
		forBackup = append(forBackup, dstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Dstruct ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Dstruct file", err.Error())
	}
}

// Backup generates a json file from a slice of all DstructDB instances in the backrepo
func (backRepoDstruct *BackRepoDstructStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DstructDB, 0)
	for _, dstructDB := range backRepoDstruct.Map_DstructDBID_DstructDB {
		forBackup = append(forBackup, dstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Dstruct")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Dstruct_Fields, -1)
	for _, dstructDB := range forBackup {

		var dstructWOP DstructWOP
		dstructDB.CopyBasicFieldsToDstructWOP(&dstructWOP)

		row := sh.AddRow()
		row.WriteStruct(&dstructWOP, -1)
	}
}

// RestoreXL from the "Dstruct" sheet all DstructDB instances
func (backRepoDstruct *BackRepoDstructStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDstructid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Dstruct"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDstruct.rowVisitorDstruct)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDstruct *BackRepoDstructStruct) rowVisitorDstruct(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var dstructWOP DstructWOP
		row.ReadStruct(&dstructWOP)

		// add the unmarshalled struct to the stage
		dstructDB := new(DstructDB)
		dstructDB.CopyBasicFieldsFromDstructWOP(&dstructWOP)

		dstructDB_ID_atBackupTime := dstructDB.ID
		dstructDB.ID = 0
		_, err := backRepoDstruct.db.Create(dstructDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoDstruct.Map_DstructDBID_DstructDB[dstructDB.ID] = dstructDB
		BackRepoDstructid_atBckpTime_newID[dstructDB_ID_atBackupTime] = dstructDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DstructDB.json" in dirPath that stores an array
// of DstructDB and stores it in the database
// the map BackRepoDstructid_atBckpTime_newID is updated accordingly
func (backRepoDstruct *BackRepoDstructStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDstructid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DstructDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Dstruct file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DstructDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DstructDBID_DstructDB
	for _, dstructDB := range forRestore {

		dstructDB_ID_atBackupTime := dstructDB.ID
		dstructDB.ID = 0
		_, err := backRepoDstruct.db.Create(dstructDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoDstruct.Map_DstructDBID_DstructDB[dstructDB.ID] = dstructDB
		BackRepoDstructid_atBckpTime_newID[dstructDB_ID_atBackupTime] = dstructDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Dstruct file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Dstruct>id_atBckpTime_newID
// to compute new index
func (backRepoDstruct *BackRepoDstructStruct) RestorePhaseTwo() {

	for _, dstructDB := range backRepoDstruct.Map_DstructDBID_DstructDB {

		// next line of code is to avert unused variable compilation error
		_ = dstructDB

		// insertion point for reindexing pointers encoding
		// reindexing Gstruct field
		if dstructDB.GstructID.Int64 != 0 {
			dstructDB.GstructID.Int64 = int64(BackRepoGstructid_atBckpTime_newID[uint(dstructDB.GstructID.Int64)])
			dstructDB.GstructID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoDstruct.db.Model(dstructDB)
		_, err := db.Updates(*dstructDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoDstruct.ResetReversePointers commits all staged instances of Dstruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDstruct *BackRepoDstructStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, dstruct := range backRepoDstruct.Map_DstructDBID_DstructPtr {
		backRepoDstruct.ResetReversePointersInstance(backRepo, idx, dstruct)
	}

	return
}

func (backRepoDstruct *BackRepoDstructStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, dstruct *models.Dstruct) (Error error) {

	// fetch matching dstructDB
	if dstructDB, ok := backRepoDstruct.Map_DstructDBID_DstructDB[idx]; ok {
		_ = dstructDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDstructid_atBckpTime_newID map[uint]uint
