// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AstructBstruct2Use_sql sql.NullBool
var dummy_AstructBstruct2Use_time time.Duration
var dummy_AstructBstruct2Use_sort sort.Float64Slice

// AstructBstruct2UseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model astructbstruct2useAPI
type AstructBstruct2UseAPI struct {
	gorm.Model

	models.AstructBstruct2Use_WOP

	// encoding of pointers
	AstructBstruct2UsePointersEncoding AstructBstruct2UsePointersEncoding
}

// AstructBstruct2UsePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AstructBstruct2UsePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Bstrcut2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Bstrcut2ID sql.NullInt64
}

// AstructBstruct2UseDB describes a astructbstruct2use in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model astructbstruct2useDB
type AstructBstruct2UseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field astructbstruct2useDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	AstructBstruct2UsePointersEncoding AstructBstruct2UsePointersEncoding
}

// AstructBstruct2UseDBs arrays astructbstruct2useDBs
// swagger:response astructbstruct2useDBsResponse
type AstructBstruct2UseDBs []AstructBstruct2UseDB

// AstructBstruct2UseDBResponse provides response
// swagger:response astructbstruct2useDBResponse
type AstructBstruct2UseDBResponse struct {
	AstructBstruct2UseDB
}

// AstructBstruct2UseWOP is a AstructBstruct2Use without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AstructBstruct2UseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var AstructBstruct2Use_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAstructBstruct2UseStruct struct {
	// stores AstructBstruct2UseDB according to their gorm ID
	Map_AstructBstruct2UseDBID_AstructBstruct2UseDB map[uint]*AstructBstruct2UseDB

	// stores AstructBstruct2UseDB ID according to AstructBstruct2Use address
	Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID map[*models.AstructBstruct2Use]uint

	// stores AstructBstruct2Use according to their gorm ID
	Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr map[uint]*models.AstructBstruct2Use

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAstructBstruct2Use.stage
	return
}

func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) GetDB() *gorm.DB {
	return backRepoAstructBstruct2Use.db
}

// GetAstructBstruct2UseDBFromAstructBstruct2UsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) GetAstructBstruct2UseDBFromAstructBstruct2UsePtr(astructbstruct2use *models.AstructBstruct2Use) (astructbstruct2useDB *AstructBstruct2UseDB) {
	id := backRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID[astructbstruct2use]
	astructbstruct2useDB = backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB[id]
	return
}

// BackRepoAstructBstruct2Use.CommitPhaseOne commits all staged instances of AstructBstruct2Use to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for astructbstruct2use := range stage.AstructBstruct2Uses {
		backRepoAstructBstruct2Use.CommitPhaseOneInstance(astructbstruct2use)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, astructbstruct2use := range backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr {
		if _, ok := stage.AstructBstruct2Uses[astructbstruct2use]; !ok {
			backRepoAstructBstruct2Use.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAstructBstruct2Use.CommitDeleteInstance commits deletion of AstructBstruct2Use to the BackRepo
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CommitDeleteInstance(id uint) (Error error) {

	astructbstruct2use := backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr[id]

	// astructbstruct2use is not staged anymore, remove astructbstruct2useDB
	astructbstruct2useDB := backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB[id]
	query := backRepoAstructBstruct2Use.db.Unscoped().Delete(&astructbstruct2useDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID, astructbstruct2use)
	delete(backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr, id)
	delete(backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB, id)

	return
}

// BackRepoAstructBstruct2Use.CommitPhaseOneInstance commits astructbstruct2use staged instances of AstructBstruct2Use to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CommitPhaseOneInstance(astructbstruct2use *models.AstructBstruct2Use) (Error error) {

	// check if the astructbstruct2use is not commited yet
	if _, ok := backRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID[astructbstruct2use]; ok {
		return
	}

	// initiate astructbstruct2use
	var astructbstruct2useDB AstructBstruct2UseDB
	astructbstruct2useDB.CopyBasicFieldsFromAstructBstruct2Use(astructbstruct2use)

	query := backRepoAstructBstruct2Use.db.Create(&astructbstruct2useDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID[astructbstruct2use] = astructbstruct2useDB.ID
	backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr[astructbstruct2useDB.ID] = astructbstruct2use
	backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB[astructbstruct2useDB.ID] = &astructbstruct2useDB

	return
}

// BackRepoAstructBstruct2Use.CommitPhaseTwo commits all staged instances of AstructBstruct2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, astructbstruct2use := range backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr {
		backRepoAstructBstruct2Use.CommitPhaseTwoInstance(backRepo, idx, astructbstruct2use)
	}

	return
}

// BackRepoAstructBstruct2Use.CommitPhaseTwoInstance commits {{structname }} of models.AstructBstruct2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, astructbstruct2use *models.AstructBstruct2Use) (Error error) {

	// fetch matching astructbstruct2useDB
	if astructbstruct2useDB, ok := backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB[idx]; ok {

		astructbstruct2useDB.CopyBasicFieldsFromAstructBstruct2Use(astructbstruct2use)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value astructbstruct2use.Bstrcut2 translates to updating the astructbstruct2use.AstructBstruct2UsePointersEncoding.Bstrcut2ID
		astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Valid = true // allow for a 0 value (nil association)
		if astructbstruct2use.Bstrcut2 != nil {
			if Bstrcut2Id, ok := backRepo.BackRepoBstruct.Map_BstructPtr_BstructDBID[astructbstruct2use.Bstrcut2]; ok {
				astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Int64 = int64(Bstrcut2Id)
				astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Valid = true
			}
		} else {
			astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Int64 = 0
			astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Valid = true
		}

		query := backRepoAstructBstruct2Use.db.Save(&astructbstruct2useDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AstructBstruct2Use intance %s", astructbstruct2use.Name))
		return err
	}

	return
}

// BackRepoAstructBstruct2Use.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CheckoutPhaseOne() (Error error) {

	astructbstruct2useDBArray := make([]AstructBstruct2UseDB, 0)
	query := backRepoAstructBstruct2Use.db.Find(&astructbstruct2useDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	astructbstruct2useInstancesToBeRemovedFromTheStage := make(map[*models.AstructBstruct2Use]any)
	for key, value := range backRepoAstructBstruct2Use.stage.AstructBstruct2Uses {
		astructbstruct2useInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, astructbstruct2useDB := range astructbstruct2useDBArray {
		backRepoAstructBstruct2Use.CheckoutPhaseOneInstance(&astructbstruct2useDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		astructbstruct2use, ok := backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr[astructbstruct2useDB.ID]
		if ok {
			delete(astructbstruct2useInstancesToBeRemovedFromTheStage, astructbstruct2use)
		}
	}

	// remove from stage and back repo's 3 maps all astructbstruct2uses that are not in the checkout
	for astructbstruct2use := range astructbstruct2useInstancesToBeRemovedFromTheStage {
		astructbstruct2use.Unstage(backRepoAstructBstruct2Use.GetStage())

		// remove instance from the back repo 3 maps
		astructbstruct2useID := backRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID[astructbstruct2use]
		delete(backRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID, astructbstruct2use)
		delete(backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB, astructbstruct2useID)
		delete(backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr, astructbstruct2useID)
	}

	return
}

// CheckoutPhaseOneInstance takes a astructbstruct2useDB that has been found in the DB, updates the backRepo and stages the
// models version of the astructbstruct2useDB
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CheckoutPhaseOneInstance(astructbstruct2useDB *AstructBstruct2UseDB) (Error error) {

	astructbstruct2use, ok := backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr[astructbstruct2useDB.ID]
	if !ok {
		astructbstruct2use = new(models.AstructBstruct2Use)

		backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr[astructbstruct2useDB.ID] = astructbstruct2use
		backRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID[astructbstruct2use] = astructbstruct2useDB.ID

		// append model store with the new element
		astructbstruct2use.Name = astructbstruct2useDB.Name_Data.String
		astructbstruct2use.Stage(backRepoAstructBstruct2Use.GetStage())
	}
	astructbstruct2useDB.CopyBasicFieldsToAstructBstruct2Use(astructbstruct2use)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	astructbstruct2use.Stage(backRepoAstructBstruct2Use.GetStage())

	// preserve pointer to astructbstruct2useDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AstructBstruct2UseDBID_AstructBstruct2UseDB)[astructbstruct2useDB hold variable pointers
	astructbstruct2useDB_Data := *astructbstruct2useDB
	preservedPtrToAstructBstruct2Use := &astructbstruct2useDB_Data
	backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB[astructbstruct2useDB.ID] = preservedPtrToAstructBstruct2Use

	return
}

// BackRepoAstructBstruct2Use.CheckoutPhaseTwo Checkouts all staged instances of AstructBstruct2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, astructbstruct2useDB := range backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB {
		backRepoAstructBstruct2Use.CheckoutPhaseTwoInstance(backRepo, astructbstruct2useDB)
	}
	return
}

// BackRepoAstructBstruct2Use.CheckoutPhaseTwoInstance Checkouts staged instances of AstructBstruct2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, astructbstruct2useDB *AstructBstruct2UseDB) (Error error) {

	astructbstruct2use := backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr[astructbstruct2useDB.ID]

	astructbstruct2useDB.DecodePointers(backRepo, astructbstruct2use)

	return
}

func (astructbstruct2useDB *AstructBstruct2UseDB) DecodePointers(backRepo *BackRepoStruct, astructbstruct2use *models.AstructBstruct2Use) {

	// insertion point for checkout of pointer encoding
	// Bstrcut2 field
	astructbstruct2use.Bstrcut2 = nil
	if astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Int64 != 0 {
		astructbstruct2use.Bstrcut2 = backRepo.BackRepoBstruct.Map_BstructDBID_BstructPtr[uint(astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Int64)]
	}
	return
}

// CommitAstructBstruct2Use allows commit of a single astructbstruct2use (if already staged)
func (backRepo *BackRepoStruct) CommitAstructBstruct2Use(astructbstruct2use *models.AstructBstruct2Use) {
	backRepo.BackRepoAstructBstruct2Use.CommitPhaseOneInstance(astructbstruct2use)
	if id, ok := backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID[astructbstruct2use]; ok {
		backRepo.BackRepoAstructBstruct2Use.CommitPhaseTwoInstance(backRepo, id, astructbstruct2use)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAstructBstruct2Use allows checkout of a single astructbstruct2use (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAstructBstruct2Use(astructbstruct2use *models.AstructBstruct2Use) {
	// check if the astructbstruct2use is staged
	if _, ok := backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID[astructbstruct2use]; ok {

		if id, ok := backRepo.BackRepoAstructBstruct2Use.Map_AstructBstruct2UsePtr_AstructBstruct2UseDBID[astructbstruct2use]; ok {
			var astructbstruct2useDB AstructBstruct2UseDB
			astructbstruct2useDB.ID = id

			if err := backRepo.BackRepoAstructBstruct2Use.db.First(&astructbstruct2useDB, id).Error; err != nil {
				log.Fatalln("CheckoutAstructBstruct2Use : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAstructBstruct2Use.CheckoutPhaseOneInstance(&astructbstruct2useDB)
			backRepo.BackRepoAstructBstruct2Use.CheckoutPhaseTwoInstance(backRepo, &astructbstruct2useDB)
		}
	}
}

// CopyBasicFieldsFromAstructBstruct2Use
func (astructbstruct2useDB *AstructBstruct2UseDB) CopyBasicFieldsFromAstructBstruct2Use(astructbstruct2use *models.AstructBstruct2Use) {
	// insertion point for fields commit

	astructbstruct2useDB.Name_Data.String = astructbstruct2use.Name
	astructbstruct2useDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAstructBstruct2Use_WOP
func (astructbstruct2useDB *AstructBstruct2UseDB) CopyBasicFieldsFromAstructBstruct2Use_WOP(astructbstruct2use *models.AstructBstruct2Use_WOP) {
	// insertion point for fields commit

	astructbstruct2useDB.Name_Data.String = astructbstruct2use.Name
	astructbstruct2useDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAstructBstruct2UseWOP
func (astructbstruct2useDB *AstructBstruct2UseDB) CopyBasicFieldsFromAstructBstruct2UseWOP(astructbstruct2use *AstructBstruct2UseWOP) {
	// insertion point for fields commit

	astructbstruct2useDB.Name_Data.String = astructbstruct2use.Name
	astructbstruct2useDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAstructBstruct2Use
func (astructbstruct2useDB *AstructBstruct2UseDB) CopyBasicFieldsToAstructBstruct2Use(astructbstruct2use *models.AstructBstruct2Use) {
	// insertion point for checkout of basic fields (back repo to stage)
	astructbstruct2use.Name = astructbstruct2useDB.Name_Data.String
}

// CopyBasicFieldsToAstructBstruct2Use_WOP
func (astructbstruct2useDB *AstructBstruct2UseDB) CopyBasicFieldsToAstructBstruct2Use_WOP(astructbstruct2use *models.AstructBstruct2Use_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	astructbstruct2use.Name = astructbstruct2useDB.Name_Data.String
}

// CopyBasicFieldsToAstructBstruct2UseWOP
func (astructbstruct2useDB *AstructBstruct2UseDB) CopyBasicFieldsToAstructBstruct2UseWOP(astructbstruct2use *AstructBstruct2UseWOP) {
	astructbstruct2use.ID = int(astructbstruct2useDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	astructbstruct2use.Name = astructbstruct2useDB.Name_Data.String
}

// Backup generates a json file from a slice of all AstructBstruct2UseDB instances in the backrepo
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AstructBstruct2UseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AstructBstruct2UseDB, 0)
	for _, astructbstruct2useDB := range backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB {
		forBackup = append(forBackup, astructbstruct2useDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json AstructBstruct2Use ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json AstructBstruct2Use file", err.Error())
	}
}

// Backup generates a json file from a slice of all AstructBstruct2UseDB instances in the backrepo
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AstructBstruct2UseDB, 0)
	for _, astructbstruct2useDB := range backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB {
		forBackup = append(forBackup, astructbstruct2useDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AstructBstruct2Use")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AstructBstruct2Use_Fields, -1)
	for _, astructbstruct2useDB := range forBackup {

		var astructbstruct2useWOP AstructBstruct2UseWOP
		astructbstruct2useDB.CopyBasicFieldsToAstructBstruct2UseWOP(&astructbstruct2useWOP)

		row := sh.AddRow()
		row.WriteStruct(&astructbstruct2useWOP, -1)
	}
}

// RestoreXL from the "AstructBstruct2Use" sheet all AstructBstruct2UseDB instances
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAstructBstruct2Useid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AstructBstruct2Use"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAstructBstruct2Use.rowVisitorAstructBstruct2Use)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) rowVisitorAstructBstruct2Use(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var astructbstruct2useWOP AstructBstruct2UseWOP
		row.ReadStruct(&astructbstruct2useWOP)

		// add the unmarshalled struct to the stage
		astructbstruct2useDB := new(AstructBstruct2UseDB)
		astructbstruct2useDB.CopyBasicFieldsFromAstructBstruct2UseWOP(&astructbstruct2useWOP)

		astructbstruct2useDB_ID_atBackupTime := astructbstruct2useDB.ID
		astructbstruct2useDB.ID = 0
		query := backRepoAstructBstruct2Use.db.Create(astructbstruct2useDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB[astructbstruct2useDB.ID] = astructbstruct2useDB
		BackRepoAstructBstruct2Useid_atBckpTime_newID[astructbstruct2useDB_ID_atBackupTime] = astructbstruct2useDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AstructBstruct2UseDB.json" in dirPath that stores an array
// of AstructBstruct2UseDB and stores it in the database
// the map BackRepoAstructBstruct2Useid_atBckpTime_newID is updated accordingly
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAstructBstruct2Useid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AstructBstruct2UseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json AstructBstruct2Use file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AstructBstruct2UseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AstructBstruct2UseDBID_AstructBstruct2UseDB
	for _, astructbstruct2useDB := range forRestore {

		astructbstruct2useDB_ID_atBackupTime := astructbstruct2useDB.ID
		astructbstruct2useDB.ID = 0
		query := backRepoAstructBstruct2Use.db.Create(astructbstruct2useDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB[astructbstruct2useDB.ID] = astructbstruct2useDB
		BackRepoAstructBstruct2Useid_atBckpTime_newID[astructbstruct2useDB_ID_atBackupTime] = astructbstruct2useDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json AstructBstruct2Use file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AstructBstruct2Use>id_atBckpTime_newID
// to compute new index
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) RestorePhaseTwo() {

	for _, astructbstruct2useDB := range backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB {

		// next line of code is to avert unused variable compilation error
		_ = astructbstruct2useDB

		// insertion point for reindexing pointers encoding
		// reindexing Bstrcut2 field
		if astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Int64 != 0 {
			astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Int64 = int64(BackRepoBstructid_atBckpTime_newID[uint(astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Int64)])
			astructbstruct2useDB.AstructBstruct2UsePointersEncoding.Bstrcut2ID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoAstructBstruct2Use.db.Model(astructbstruct2useDB).Updates(*astructbstruct2useDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAstructBstruct2Use.ResetReversePointers commits all staged instances of AstructBstruct2Use to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, astructbstruct2use := range backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UsePtr {
		backRepoAstructBstruct2Use.ResetReversePointersInstance(backRepo, idx, astructbstruct2use)
	}

	return
}

func (backRepoAstructBstruct2Use *BackRepoAstructBstruct2UseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, astructbstruct2use *models.AstructBstruct2Use) (Error error) {

	// fetch matching astructbstruct2useDB
	if astructbstruct2useDB, ok := backRepoAstructBstruct2Use.Map_AstructBstruct2UseDBID_AstructBstruct2UseDB[idx]; ok {
		_ = astructbstruct2useDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAstructBstruct2Useid_atBckpTime_newID map[uint]uint
