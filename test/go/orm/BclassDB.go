// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/fullstack-lang/gong/test/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Bclass sql.NullBool
var __Bclass_time__dummyDeclaration time.Duration

// BclassAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bclassAPI
type BclassAPI struct {
	models.Bclass

	// insertion for fields declaration
	// Declation for basic field bclassDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field bclassDB.Floatfield {{BasicKind}} (to be completed)
	Floatfield_Data sql.NullFloat64

	// Declation for basic field bclassDB.Intfield {{BasicKind}} (to be completed)
	Intfield_Data sql.NullInt64

	// Implementation of a reverse ID for field Aclass{}.Anarrayofb []*Bclass
	Aclass_AnarrayofbDBID       sql.NullInt64
	Aclass_AnarrayofbDBID_Index sql.NullInt64

	// Implementation of a reverse ID for field Aclass{}.Anotherarrayofb []*Bclass
	Aclass_AnotherarrayofbDBID sql.NullInt64

	// end of insertion
}

// BclassDB describes a bclass in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model bclassDB
type BclassDB struct {
	gorm.Model

	BclassAPI
}

// BclassDBs arrays bclassDBs
// swagger:response bclassDBsResponse
type BclassDBs []BclassDB

// BclassDBResponse provides response
// swagger:response bclassDBResponse
type BclassDBResponse struct {
	BclassDB
}

type BackRepoBclassStruct struct {
	// stores BclassDB according to their gorm ID
	Map_BclassDBID_BclassDB *map[uint]*BclassDB

	// stores BclassDB ID according to Bclass address
	Map_BclassPtr_BclassDBID *map[*models.Bclass]uint

	// stores Bclass according to their gorm ID
	Map_BclassDBID_BclassPtr *map[uint]*models.Bclass

	db *gorm.DB
}

// BackRepoBclass.Init set up the BackRepo of the Bclass
func (backRepoBclass *BackRepoBclassStruct) Init(db *gorm.DB) (Error error) {

	if backRepoBclass.Map_BclassDBID_BclassPtr != nil {
		err := errors.New("In Init, backRepoBclass.Map_BclassDBID_BclassPtr should be nil")
		return err
	}

	if backRepoBclass.Map_BclassDBID_BclassDB != nil {
		err := errors.New("In Init, backRepoBclass.Map_BclassDBID_BclassDB should be nil")
		return err
	}

	if backRepoBclass.Map_BclassPtr_BclassDBID != nil {
		err := errors.New("In Init, backRepoBclass.Map_BclassPtr_BclassDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Bclass, 0)
	backRepoBclass.Map_BclassDBID_BclassPtr = &tmp

	tmpDB := make(map[uint]*BclassDB, 0)
	backRepoBclass.Map_BclassDBID_BclassDB = &tmpDB

	tmpID := make(map[*models.Bclass]uint, 0)
	backRepoBclass.Map_BclassPtr_BclassDBID = &tmpID

	backRepoBclass.db = db
	return
}

// BackRepoBclass.CommitPhaseOne commits all staged instances of Bclass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBclass *BackRepoBclassStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bclass := range stage.Bclasss {
		backRepoBclass.CommitPhaseOneInstance(bclass)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bclass := range *backRepoBclass.Map_BclassDBID_BclassPtr {
		if _, ok := stage.Bclasss[bclass]; !ok {
			backRepoBclass.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBclass.CommitDeleteInstance commits deletion of Bclass to the BackRepo
func (backRepoBclass *BackRepoBclassStruct) CommitDeleteInstance(id uint) (Error error) {

	bclass := (*backRepoBclass.Map_BclassDBID_BclassPtr)[id]

	// bclass is not staged anymore, remove bclassDB
	bclassDB := (*backRepoBclass.Map_BclassDBID_BclassDB)[id]
	query := backRepoBclass.db.Unscoped().Delete(&bclassDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoBclass.Map_BclassPtr_BclassDBID), bclass)
	delete((*backRepoBclass.Map_BclassDBID_BclassPtr), id)
	delete((*backRepoBclass.Map_BclassDBID_BclassDB), id)

	return
}

// BackRepoBclass.CommitPhaseOneInstance commits bclass staged instances of Bclass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBclass *BackRepoBclassStruct) CommitPhaseOneInstance(bclass *models.Bclass) (Error error) {

	// check if the bclass is not commited yet
	if _, ok := (*backRepoBclass.Map_BclassPtr_BclassDBID)[bclass]; ok {
		return
	}

	// initiate bclass
	var bclassDB BclassDB
	bclassDB.Bclass = *bclass

	query := backRepoBclass.db.Create(&bclassDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoBclass.Map_BclassPtr_BclassDBID)[bclass] = bclassDB.ID
	(*backRepoBclass.Map_BclassDBID_BclassPtr)[bclassDB.ID] = bclass
	(*backRepoBclass.Map_BclassDBID_BclassDB)[bclassDB.ID] = &bclassDB

	return
}

// BackRepoBclass.CommitPhaseTwo commits all staged instances of Bclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBclass *BackRepoBclassStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bclass := range *backRepoBclass.Map_BclassDBID_BclassPtr {
		backRepoBclass.CommitPhaseTwoInstance(backRepo, idx, bclass)
	}

	return
}

// BackRepoBclass.CommitPhaseTwoInstance commits {{structname }} of models.Bclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBclass *BackRepoBclassStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bclass *models.Bclass) (Error error) {

	// fetch matching bclassDB
	if bclassDB, ok := (*backRepoBclass.Map_BclassDBID_BclassDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				bclassDB.Name_Data.String = bclass.Name
				bclassDB.Name_Data.Valid = true

				bclassDB.Floatfield_Data.Float64 = bclass.Floatfield
				bclassDB.Floatfield_Data.Valid = true

				bclassDB.Intfield_Data.Int64 = int64(bclass.Intfield)
				bclassDB.Intfield_Data.Valid = true

			}
		}
		query := backRepoBclass.db.Save(&bclassDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bclass intance %s", bclass.Name))
		return err
	}

	return
}

// BackRepoBclass.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoBclass *BackRepoBclassStruct) CheckoutPhaseOne() (Error error) {

	bclassDBArray := make([]BclassDB, 0)
	query := backRepoBclass.db.Find(&bclassDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, bclassDB := range bclassDBArray {
		backRepoBclass.CheckoutPhaseOneInstance(&bclassDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a bclassDB that has been found in the DB, updates the backRepo and stages the
// models version of the bclassDB
func (backRepoBclass *BackRepoBclassStruct) CheckoutPhaseOneInstance(bclassDB *BclassDB) (Error error) {

	// if absent, create entries in the backRepoBclass maps.
	bclassWithNewFieldValues := bclassDB.Bclass
	if _, ok := (*backRepoBclass.Map_BclassDBID_BclassPtr)[bclassDB.ID]; !ok {

		(*backRepoBclass.Map_BclassDBID_BclassPtr)[bclassDB.ID] = &bclassWithNewFieldValues
		(*backRepoBclass.Map_BclassPtr_BclassDBID)[&bclassWithNewFieldValues] = bclassDB.ID

		// append model store with the new element
		bclassWithNewFieldValues.Stage()
	}
	bclassDBWithNewFieldValues := *bclassDB
	(*backRepoBclass.Map_BclassDBID_BclassDB)[bclassDB.ID] = &bclassDBWithNewFieldValues

	return
}

// BackRepoBclass.CheckoutPhaseTwo Checkouts all staged instances of Bclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBclass *BackRepoBclassStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bclassDB := range *backRepoBclass.Map_BclassDBID_BclassDB {
		backRepoBclass.CheckoutPhaseTwoInstance(backRepo, bclassDB)
	}
	return
}

// BackRepoBclass.CheckoutPhaseTwoInstance Checkouts staged instances of Bclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBclass *BackRepoBclassStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bclassDB *BclassDB) (Error error) {

	bclass := (*backRepoBclass.Map_BclassDBID_BclassPtr)[bclassDB.ID]
	_ = bclass // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			bclass.Name = bclassDB.Name_Data.String

			bclass.Floatfield = bclassDB.Floatfield_Data.Float64

			bclass.Intfield = int(bclassDB.Intfield_Data.Int64)

		}
	}
	return
}

// CommitBclass allows commit of a single bclass (if already staged)
func (backRepo *BackRepoStruct) CommitBclass(bclass *models.Bclass) {
	backRepo.BackRepoBclass.CommitPhaseOneInstance(bclass)
	if id, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[bclass]; ok {
		backRepo.BackRepoBclass.CommitPhaseTwoInstance(backRepo, id, bclass)
	}
}

// CommitBclass allows checkout of a single bclass (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBclass(bclass *models.Bclass) {
	// check if the bclass is staged
	if _, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[bclass]; ok {

		if id, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[bclass]; ok {
			var bclassDB BclassDB
			bclassDB.ID = id

			if err := backRepo.BackRepoBclass.db.First(&bclassDB, id).Error; err != nil {
				log.Panicln("CheckoutBclass : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBclass.CheckoutPhaseOneInstance(&bclassDB)
			backRepo.BackRepoBclass.CheckoutPhaseTwoInstance(backRepo, &bclassDB)
		}
	}
}
