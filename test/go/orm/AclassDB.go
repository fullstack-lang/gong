// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gong/test/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Aclass sql.NullBool
var __Aclass_time__dummyDeclaration time.Duration
var dummy_Aclass_sort sort.Float64Slice

// AclassAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model aclassAPI
type AclassAPI struct {
	gorm.Model

	models.Aclass

	// encoding of pointers
	AclassPointersEnconding
}

// AclassPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AclassPointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// field Associationtob is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AssociationtobID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	AssociationtobName string

	// field Anotherassociationtob_2 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Anotherassociationtob_2ID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	Anotherassociationtob_2Name string

	// Implementation of a reverse ID for field Aclass{}.Anarrayofa []*Aclass
	Aclass_AnarrayofaDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Aclass_AnarrayofaDBID_Index sql.NullInt64
}

// AclassDB describes a aclass in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model aclassDB
type AclassDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field aclassDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field aclassDB.Date
	Date_Data sql.NullTime

	// Declation for basic field aclassDB.Booleanfield bool (to be completed)
	// provide the sql storage for the boolan
	Booleanfield_Data sql.NullBool

	// Declation for basic field aclassDB.Aenum {{BasicKind}} (to be completed)
	Aenum_Data sql.NullString

	// Declation for basic field aclassDB.Aenum_2 {{BasicKind}} (to be completed)
	Aenum_2_Data sql.NullString

	// Declation for basic field aclassDB.Benum {{BasicKind}} (to be completed)
	Benum_Data sql.NullString

	// Declation for basic field aclassDB.CName {{BasicKind}} (to be completed)
	CName_Data sql.NullString

	// Declation for basic field aclassDB.CFloatfield {{BasicKind}} (to be completed)
	CFloatfield_Data sql.NullFloat64

	// Declation for basic field aclassDB.Floatfield {{BasicKind}} (to be completed)
	Floatfield_Data sql.NullFloat64

	// Declation for basic field aclassDB.Intfield {{BasicKind}} (to be completed)
	Intfield_Data sql.NullInt64

	// Declation for basic field aclassDB.Anotherbooleanfield bool (to be completed)
	// provide the sql storage for the boolan
	Anotherbooleanfield_Data sql.NullBool

	// Declation for basic field aclassDB.Duration1 {{BasicKind}} (to be completed)
	Duration1_Data sql.NullInt64

	// encoding of pointers
	AclassPointersEnconding
}

// AclassDBs arrays aclassDBs
// swagger:response aclassDBsResponse
type AclassDBs []AclassDB

// AclassDBResponse provides response
// swagger:response aclassDBResponse
type AclassDBResponse struct {
	AclassDB
}

type BackRepoAclassStruct struct {
	// stores AclassDB according to their gorm ID
	Map_AclassDBID_AclassDB *map[uint]*AclassDB

	// stores AclassDB ID according to Aclass address
	Map_AclassPtr_AclassDBID *map[*models.Aclass]uint

	// stores Aclass according to their gorm ID
	Map_AclassDBID_AclassPtr *map[uint]*models.Aclass

	db *gorm.DB
}

// GetAclassDBFromAclassPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAclass *BackRepoAclassStruct) GetAclassDBFromAclassPtr(aclass *models.Aclass) (aclassDB *AclassDB) {
	id := (*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass]
	aclassDB = (*backRepoAclass.Map_AclassDBID_AclassDB)[id]
	return
}

// BackRepoAclass.Init set up the BackRepo of the Aclass
func (backRepoAclass *BackRepoAclassStruct) Init(db *gorm.DB) (Error error) {

	if backRepoAclass.Map_AclassDBID_AclassPtr != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassDBID_AclassPtr should be nil")
		return err
	}

	if backRepoAclass.Map_AclassDBID_AclassDB != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassDBID_AclassDB should be nil")
		return err
	}

	if backRepoAclass.Map_AclassPtr_AclassDBID != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassPtr_AclassDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Aclass, 0)
	backRepoAclass.Map_AclassDBID_AclassPtr = &tmp

	tmpDB := make(map[uint]*AclassDB, 0)
	backRepoAclass.Map_AclassDBID_AclassDB = &tmpDB

	tmpID := make(map[*models.Aclass]uint, 0)
	backRepoAclass.Map_AclassPtr_AclassDBID = &tmpID

	backRepoAclass.db = db
	return
}

// BackRepoAclass.CommitPhaseOne commits all staged instances of Aclass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for aclass := range stage.Aclasss {
		backRepoAclass.CommitPhaseOneInstance(aclass)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, aclass := range *backRepoAclass.Map_AclassDBID_AclassPtr {
		if _, ok := stage.Aclasss[aclass]; !ok {
			backRepoAclass.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAclass.CommitDeleteInstance commits deletion of Aclass to the BackRepo
func (backRepoAclass *BackRepoAclassStruct) CommitDeleteInstance(id uint) (Error error) {

	aclass := (*backRepoAclass.Map_AclassDBID_AclassPtr)[id]

	// aclass is not staged anymore, remove aclassDB
	aclassDB := (*backRepoAclass.Map_AclassDBID_AclassDB)[id]
	query := backRepoAclass.db.Unscoped().Delete(&aclassDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoAclass.Map_AclassPtr_AclassDBID), aclass)
	delete((*backRepoAclass.Map_AclassDBID_AclassPtr), id)
	delete((*backRepoAclass.Map_AclassDBID_AclassDB), id)

	return
}

// BackRepoAclass.CommitPhaseOneInstance commits aclass staged instances of Aclass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseOneInstance(aclass *models.Aclass) (Error error) {

	// check if the aclass is not commited yet
	if _, ok := (*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
		return
	}

	// initiate aclass
	var aclassDB AclassDB
	aclassDB.CopyBasicFieldsFromAclass(aclass)

	query := backRepoAclass.db.Create(&aclassDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass] = aclassDB.ID
	(*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID] = aclass
	(*backRepoAclass.Map_AclassDBID_AclassDB)[aclassDB.ID] = &aclassDB

	return
}

// BackRepoAclass.CommitPhaseTwo commits all staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, aclass := range *backRepoAclass.Map_AclassDBID_AclassPtr {
		backRepoAclass.CommitPhaseTwoInstance(backRepo, idx, aclass)
	}

	return
}

// BackRepoAclass.CommitPhaseTwoInstance commits {{structname }} of models.Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, aclass *models.Aclass) (Error error) {

	// fetch matching aclassDB
	if aclassDB, ok := (*backRepoAclass.Map_AclassDBID_AclassDB)[idx]; ok {

		aclassDB.CopyBasicFieldsFromAclass(aclass)

		// insertion point for fields commit
		// commit pointer value aclass.Associationtob translates to updating the aclass.AssociationtobID
		aclassDB.AssociationtobID.Valid = true // allow for a 0 value (nil association)
		if aclass.Associationtob != nil {
			if AssociationtobId, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[aclass.Associationtob]; ok {
				aclassDB.AssociationtobID.Int64 = int64(AssociationtobId)
			}
		}

		// commit pointer value aclass.Anotherassociationtob_2 translates to updating the aclass.Anotherassociationtob_2ID
		aclassDB.Anotherassociationtob_2ID.Valid = true // allow for a 0 value (nil association)
		if aclass.Anotherassociationtob_2 != nil {
			if Anotherassociationtob_2Id, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[aclass.Anotherassociationtob_2]; ok {
				aclassDB.Anotherassociationtob_2ID.Int64 = int64(Anotherassociationtob_2Id)
			}
		}

		// commit a slice of pointer translates to update reverse pointer to Bclass, i.e.
		index_Anarrayofb := 0
		for _, _bclass := range aclass.Anarrayofb {
			if _bclassDBID, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[_bclass]; ok {
				if _bclassDB, ok := (*backRepo.BackRepoBclass.Map_BclassDBID_BclassDB)[_bclassDBID]; ok {
					_bclassDB.Aclass_AnarrayofbDBID.Int64 = int64(aclassDB.ID)
					_bclassDB.Aclass_AnarrayofbDBID.Valid = true
					_bclassDB.Aclass_AnarrayofbDBID_Index.Int64 = int64(index_Anarrayofb)
					index_Anarrayofb = index_Anarrayofb + 1
					_bclassDB.Aclass_AnarrayofbDBID_Index.Valid = true
					if q := backRepoAclass.db.Save(&_bclassDB); q.Error != nil {
						return q.Error
					}
				}
			}
		}

		// commit a slice of pointer translates to update reverse pointer to Bclass, i.e.
		index_Anotherarrayofb := 0
		for _, _bclass := range aclass.Anotherarrayofb {
			if _bclassDBID, ok := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[_bclass]; ok {
				if _bclassDB, ok := (*backRepo.BackRepoBclass.Map_BclassDBID_BclassDB)[_bclassDBID]; ok {
					_bclassDB.Aclass_AnotherarrayofbDBID.Int64 = int64(aclassDB.ID)
					_bclassDB.Aclass_AnotherarrayofbDBID.Valid = true
					_bclassDB.Aclass_AnotherarrayofbDBID_Index.Int64 = int64(index_Anotherarrayofb)
					index_Anotherarrayofb = index_Anotherarrayofb + 1
					_bclassDB.Aclass_AnotherarrayofbDBID_Index.Valid = true
					if q := backRepoAclass.db.Save(&_bclassDB); q.Error != nil {
						return q.Error
					}
				}
			}
		}

		// commit a slice of pointer translates to update reverse pointer to Aclass, i.e.
		index_Anarrayofa := 0
		for _, _aclass := range aclass.Anarrayofa {
			if _aclassDBID, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[_aclass]; ok {
				if _aclassDB, ok := (*backRepo.BackRepoAclass.Map_AclassDBID_AclassDB)[_aclassDBID]; ok {
					_aclassDB.Aclass_AnarrayofaDBID.Int64 = int64(aclassDB.ID)
					_aclassDB.Aclass_AnarrayofaDBID.Valid = true
					_aclassDB.Aclass_AnarrayofaDBID_Index.Int64 = int64(index_Anarrayofa)
					index_Anarrayofa = index_Anarrayofa + 1
					_aclassDB.Aclass_AnarrayofaDBID_Index.Valid = true
					if q := backRepoAclass.db.Save(&_aclassDB); q.Error != nil {
						return q.Error
					}
				}
			}
		}

		query := backRepoAclass.db.Save(&aclassDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Aclass intance %s", aclass.Name))
		return err
	}

	return
}

// BackRepoAclass.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseOne() (Error error) {

	aclassDBArray := make([]AclassDB, 0)
	query := backRepoAclass.db.Find(&aclassDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, aclassDB := range aclassDBArray {
		backRepoAclass.CheckoutPhaseOneInstance(&aclassDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a aclassDB that has been found in the DB, updates the backRepo and stages the
// models version of the aclassDB
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseOneInstance(aclassDB *AclassDB) (Error error) {

	// if absent, create entries in the backRepoAclass maps.
	var aclassWithNewFieldValues models.Aclass
	aclassDB.CopyBasicFieldsToAclass(&aclassWithNewFieldValues)

	if _, ok := (*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID]; !ok {

		(*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID] = &aclassWithNewFieldValues
		(*backRepoAclass.Map_AclassPtr_AclassDBID)[&aclassWithNewFieldValues] = aclassDB.ID

		// append model store with the new element
		aclassWithNewFieldValues.Stage()
	}
	aclassDBWithNewFieldValues := *aclassDB
	(*backRepoAclass.Map_AclassDBID_AclassDB)[aclassDB.ID] = &aclassDBWithNewFieldValues

	return
}

// BackRepoAclass.CheckoutPhaseTwo Checkouts all staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, aclassDB := range *backRepoAclass.Map_AclassDBID_AclassDB {
		backRepoAclass.CheckoutPhaseTwoInstance(backRepo, aclassDB)
	}
	return
}

// BackRepoAclass.CheckoutPhaseTwoInstance Checkouts staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, aclassDB *AclassDB) (Error error) {

	aclass := (*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID]
	_ = aclass // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Associationtob field
	if aclassDB.AssociationtobID.Int64 != 0 {
		aclass.Associationtob = (*backRepo.BackRepoBclass.Map_BclassDBID_BclassPtr)[uint(aclassDB.AssociationtobID.Int64)]
	}
	// Anotherassociationtob_2 field
	if aclassDB.Anotherassociationtob_2ID.Int64 != 0 {
		aclass.Anotherassociationtob_2 = (*backRepo.BackRepoBclass.Map_BclassDBID_BclassPtr)[uint(aclassDB.Anotherassociationtob_2ID.Int64)]
	}
	// parse all BclassDB and redeem the array of poiners to Aclass
	// first reset the slice
	aclass.Anarrayofb = aclass.Anarrayofb[:0]
	for _, BclassDB := range *backRepo.BackRepoBclass.Map_BclassDBID_BclassDB {
		if BclassDB.Aclass_AnarrayofbDBID.Int64 == int64(aclassDB.ID) {
			Bclass := (*backRepo.BackRepoBclass.Map_BclassDBID_BclassPtr)[BclassDB.ID]
			aclass.Anarrayofb = append(aclass.Anarrayofb, Bclass)
		}
	}

	// sort the array according to the order
	sort.Slice(aclass.Anarrayofb, func(i, j int) bool {
		bclassDB_i_ID := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[aclass.Anarrayofb[i]]
		bclassDB_j_ID := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[aclass.Anarrayofb[j]]

		bclassDB_i := (*backRepo.BackRepoBclass.Map_BclassDBID_BclassDB)[bclassDB_i_ID]
		bclassDB_j := (*backRepo.BackRepoBclass.Map_BclassDBID_BclassDB)[bclassDB_j_ID]

		return bclassDB_i.Aclass_AnarrayofbDBID_Index.Int64 < bclassDB_j.Aclass_AnarrayofbDBID_Index.Int64
	})

	// parse all BclassDB and redeem the array of poiners to Aclass
	// first reset the slice
	aclass.Anotherarrayofb = aclass.Anotherarrayofb[:0]
	for _, BclassDB := range *backRepo.BackRepoBclass.Map_BclassDBID_BclassDB {
		if BclassDB.Aclass_AnotherarrayofbDBID.Int64 == int64(aclassDB.ID) {
			Bclass := (*backRepo.BackRepoBclass.Map_BclassDBID_BclassPtr)[BclassDB.ID]
			aclass.Anotherarrayofb = append(aclass.Anotherarrayofb, Bclass)
		}
	}

	// sort the array according to the order
	sort.Slice(aclass.Anotherarrayofb, func(i, j int) bool {
		bclassDB_i_ID := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[aclass.Anotherarrayofb[i]]
		bclassDB_j_ID := (*backRepo.BackRepoBclass.Map_BclassPtr_BclassDBID)[aclass.Anotherarrayofb[j]]

		bclassDB_i := (*backRepo.BackRepoBclass.Map_BclassDBID_BclassDB)[bclassDB_i_ID]
		bclassDB_j := (*backRepo.BackRepoBclass.Map_BclassDBID_BclassDB)[bclassDB_j_ID]

		return bclassDB_i.Aclass_AnotherarrayofbDBID_Index.Int64 < bclassDB_j.Aclass_AnotherarrayofbDBID_Index.Int64
	})

	// parse all AclassDB and redeem the array of poiners to Aclass
	// first reset the slice
	aclass.Anarrayofa = aclass.Anarrayofa[:0]
	for _, AclassDB := range *backRepo.BackRepoAclass.Map_AclassDBID_AclassDB {
		if AclassDB.Aclass_AnarrayofaDBID.Int64 == int64(aclassDB.ID) {
			Aclass := (*backRepo.BackRepoAclass.Map_AclassDBID_AclassPtr)[AclassDB.ID]
			aclass.Anarrayofa = append(aclass.Anarrayofa, Aclass)
		}
	}

	// sort the array according to the order
	sort.Slice(aclass.Anarrayofa, func(i, j int) bool {
		aclassDB_i_ID := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass.Anarrayofa[i]]
		aclassDB_j_ID := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass.Anarrayofa[j]]

		aclassDB_i := (*backRepo.BackRepoAclass.Map_AclassDBID_AclassDB)[aclassDB_i_ID]
		aclassDB_j := (*backRepo.BackRepoAclass.Map_AclassDBID_AclassDB)[aclassDB_j_ID]

		return aclassDB_i.Aclass_AnarrayofaDBID_Index.Int64 < aclassDB_j.Aclass_AnarrayofaDBID_Index.Int64
	})

	return
}

// CommitAclass allows commit of a single aclass (if already staged)
func (backRepo *BackRepoStruct) CommitAclass(aclass *models.Aclass) {
	backRepo.BackRepoAclass.CommitPhaseOneInstance(aclass)
	if id, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
		backRepo.BackRepoAclass.CommitPhaseTwoInstance(backRepo, id, aclass)
	}
}

// CommitAclass allows checkout of a single aclass (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAclass(aclass *models.Aclass) {
	// check if the aclass is staged
	if _, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {

		if id, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
			var aclassDB AclassDB
			aclassDB.ID = id

			if err := backRepo.BackRepoAclass.db.First(&aclassDB, id).Error; err != nil {
				log.Panicln("CheckoutAclass : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAclass.CheckoutPhaseOneInstance(&aclassDB)
			backRepo.BackRepoAclass.CheckoutPhaseTwoInstance(backRepo, &aclassDB)
		}
	}
}

// CopyBasicFieldsToAclassDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (aclassDB *AclassDB) CopyBasicFieldsFromAclass(aclass *models.Aclass) {
	// insertion point for fields commit
	aclassDB.Name_Data.String = aclass.Name
	aclassDB.Name_Data.Valid = true

	aclassDB.Date_Data.Time = aclass.Date
	aclassDB.Date_Data.Valid = true

	aclassDB.Booleanfield_Data.Bool = aclass.Booleanfield
	aclassDB.Booleanfield_Data.Valid = true

	aclassDB.Aenum_Data.String = string(aclass.Aenum)
	aclassDB.Aenum_Data.Valid = true

	aclassDB.Aenum_2_Data.String = string(aclass.Aenum_2)
	aclassDB.Aenum_2_Data.Valid = true

	aclassDB.Benum_Data.String = string(aclass.Benum)
	aclassDB.Benum_Data.Valid = true

	aclassDB.CName_Data.String = aclass.CName
	aclassDB.CName_Data.Valid = true

	aclassDB.CFloatfield_Data.Float64 = aclass.CFloatfield
	aclassDB.CFloatfield_Data.Valid = true

	aclassDB.Floatfield_Data.Float64 = aclass.Floatfield
	aclassDB.Floatfield_Data.Valid = true

	aclassDB.Intfield_Data.Int64 = int64(aclass.Intfield)
	aclassDB.Intfield_Data.Valid = true

	aclassDB.Anotherbooleanfield_Data.Bool = aclass.Anotherbooleanfield
	aclassDB.Anotherbooleanfield_Data.Valid = true

	aclassDB.Duration1_Data.Int64 = int64(aclass.Duration1)
	aclassDB.Duration1_Data.Valid = true

}

// CopyBasicFieldsToAclassDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (aclassDB *AclassDB) CopyBasicFieldsToAclass(aclass *models.Aclass) {

	// insertion point for checkout of basic fields (back repo to stage)
	aclass.Name = aclassDB.Name_Data.String
	aclass.Date = aclassDB.Date_Data.Time
	aclass.Booleanfield = aclassDB.Booleanfield_Data.Bool
	aclass.Aenum = models.AEnumType(aclassDB.Aenum_Data.String)
	aclass.Aenum_2 = models.AEnumType(aclassDB.Aenum_2_Data.String)
	aclass.Benum = models.BEnumType(aclassDB.Benum_Data.String)
	aclass.CName = aclassDB.CName_Data.String
	aclass.CFloatfield = aclassDB.CFloatfield_Data.Float64
	aclass.Floatfield = aclassDB.Floatfield_Data.Float64
	aclass.Intfield = int(aclassDB.Intfield_Data.Int64)
	aclass.Anotherbooleanfield = aclassDB.Anotherbooleanfield_Data.Bool
	aclass.Duration1 = time.Duration(aclassDB.Duration1_Data.Int64)
}

// Backup generates a json file from a slice of all AclassDB instances in the backrepo
func (backRepoAclass *BackRepoAclassStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AclassDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	var forBackup []*AclassDB
	for _, aclassDB := range *backRepoAclass.Map_AclassDBID_AclassDB {
		forBackup = append(forBackup, aclassDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Aclass ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Aclass file", err.Error())
	}
}

func (backRepoAclass *BackRepoAclassStruct) Restore(dirPath string) {

	filename := filepath.Join(dirPath, "AclassDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Aclass file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AclassDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AclassDBID_AclassDB
	for _, aclassDB := range forRestore {

		aclassDB_ID := aclassDB.ID
		query := backRepoAclass.db.Create(aclassDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		if aclassDB_ID != aclassDB.ID {
			log.Panicf("ID of Aclass restore ID %d, name %s, has wrong ID %d in DB after create",
				aclassDB_ID, aclassDB.Name_Data.String, aclassDB.ID)
		}
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Aclass file", err.Error())
	}
}
