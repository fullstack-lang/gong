// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/test/go/models"
	"github.com/fullstack-lang/gong/test/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __AclassBclass2Use__dummysDeclaration__ models.AclassBclass2Use
var __AclassBclass2Use_time__dummyDeclaration time.Duration

// An AclassBclass2UseID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAclassBclass2Use updateAclassBclass2Use deleteAclassBclass2Use
type AclassBclass2UseID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AclassBclass2UseInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAclassBclass2Use updateAclassBclass2Use
type AclassBclass2UseInput struct {
	// The AclassBclass2Use to submit or modify
	// in: body
	AclassBclass2Use *orm.AclassBclass2UseAPI
}

// GetAclassBclass2Uses
//
// swagger:route GET /aclassbclass2uses aclassbclass2uses getAclassBclass2Uses
//
// Get all aclassbclass2uses
//
// Responses:
//    default: genericError
//        200: aclassbclass2useDBsResponse
func GetAclassBclass2Uses(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclass2Use.GetDB()
	
	// source slice
	var aclassbclass2useDBs []orm.AclassBclass2UseDB
	query := db.Find(&aclassbclass2useDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	aclassbclass2useAPIs := make([]orm.AclassBclass2UseAPI, 0)

	// for each aclassbclass2use, update fields from the database nullable fields
	for idx := range aclassbclass2useDBs {
		aclassbclass2useDB := &aclassbclass2useDBs[idx]
		_ = aclassbclass2useDB
		var aclassbclass2useAPI orm.AclassBclass2UseAPI

		// insertion point for updating fields
		aclassbclass2useAPI.ID = aclassbclass2useDB.ID
		aclassbclass2useDB.CopyBasicFieldsToAclassBclass2Use(&aclassbclass2useAPI.AclassBclass2Use)
		aclassbclass2useAPI.AclassBclass2UsePointersEnconding = aclassbclass2useDB.AclassBclass2UsePointersEnconding
		aclassbclass2useAPIs = append(aclassbclass2useAPIs, aclassbclass2useAPI)
	}

	c.JSON(http.StatusOK, aclassbclass2useAPIs)
}

// PostAclassBclass2Use
//
// swagger:route POST /aclassbclass2uses aclassbclass2uses postAclassBclass2Use
//
// Creates a aclassbclass2use
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: aclassbclass2useDBResponse
func PostAclassBclass2Use(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclass2Use.GetDB()

	// Validate input
	var input orm.AclassBclass2UseAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create aclassbclass2use
	aclassbclass2useDB := orm.AclassBclass2UseDB{}
	aclassbclass2useDB.AclassBclass2UsePointersEnconding = input.AclassBclass2UsePointersEnconding
	aclassbclass2useDB.CopyBasicFieldsFromAclassBclass2Use(&input.AclassBclass2Use)

	query := db.Create(&aclassbclass2useDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, aclassbclass2useDB)
}

// GetAclassBclass2Use
//
// swagger:route GET /aclassbclass2uses/{ID} aclassbclass2uses getAclassBclass2Use
//
// Gets the details for a aclassbclass2use.
//
// Responses:
//    default: genericError
//        200: aclassbclass2useDBResponse
func GetAclassBclass2Use(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclass2Use.GetDB()

	// Get aclassbclass2useDB in DB
	var aclassbclass2useDB orm.AclassBclass2UseDB
	if err := db.First(&aclassbclass2useDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var aclassbclass2useAPI orm.AclassBclass2UseAPI
	aclassbclass2useAPI.ID = aclassbclass2useDB.ID
	aclassbclass2useAPI.AclassBclass2UsePointersEnconding = aclassbclass2useDB.AclassBclass2UsePointersEnconding
	aclassbclass2useDB.CopyBasicFieldsToAclassBclass2Use(&aclassbclass2useAPI.AclassBclass2Use)

	c.JSON(http.StatusOK, aclassbclass2useAPI)
}

// UpdateAclassBclass2Use
//
// swagger:route PATCH /aclassbclass2uses/{ID} aclassbclass2uses updateAclassBclass2Use
//
// Update a aclassbclass2use
//
// Responses:
//    default: genericError
//        200: aclassbclass2useDBResponse
func UpdateAclassBclass2Use(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclass2Use.GetDB()

	// Get model if exist
	var aclassbclass2useDB orm.AclassBclass2UseDB

	// fetch the aclassbclass2use
	query := db.First(&aclassbclass2useDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.AclassBclass2UseAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	aclassbclass2useDB.CopyBasicFieldsFromAclassBclass2Use(&input.AclassBclass2Use)
	aclassbclass2useDB.AclassBclass2UsePointersEnconding = input.AclassBclass2UsePointersEnconding

	query = db.Model(&aclassbclass2useDB).Updates(aclassbclass2useDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the aclassbclass2useDB
	c.JSON(http.StatusOK, aclassbclass2useDB)
}

// DeleteAclassBclass2Use
//
// swagger:route DELETE /aclassbclass2uses/{ID} aclassbclass2uses deleteAclassBclass2Use
//
// Delete a aclassbclass2use
//
// Responses:
//    default: genericError
func DeleteAclassBclass2Use(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclass2Use.GetDB()

	// Get model if exist
	var aclassbclass2useDB orm.AclassBclass2UseDB
	if err := db.First(&aclassbclass2useDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&aclassbclass2useDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
