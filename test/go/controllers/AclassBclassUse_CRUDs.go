// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/test/go/models"
	"github.com/fullstack-lang/gong/test/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __AclassBclassUse__dummysDeclaration__ models.AclassBclassUse
var __AclassBclassUse_time__dummyDeclaration time.Duration

// An AclassBclassUseID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAclassBclassUse updateAclassBclassUse deleteAclassBclassUse
type AclassBclassUseID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AclassBclassUseInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAclassBclassUse updateAclassBclassUse
type AclassBclassUseInput struct {
	// The AclassBclassUse to submit or modify
	// in: body
	AclassBclassUse *orm.AclassBclassUseAPI
}

// GetAclassBclassUses
//
// swagger:route GET /aclassbclassuses aclassbclassuses getAclassBclassUses
//
// Get all aclassbclassuses
//
// Responses:
//    default: genericError
//        200: aclassbclassuseDBsResponse
func GetAclassBclassUses(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclassUse.GetDB()
	
	// source slice
	var aclassbclassuseDBs []orm.AclassBclassUseDB
	query := db.Find(&aclassbclassuseDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	aclassbclassuseAPIs := make([]orm.AclassBclassUseAPI, 0)

	// for each aclassbclassuse, update fields from the database nullable fields
	for idx := range aclassbclassuseDBs {
		aclassbclassuseDB := &aclassbclassuseDBs[idx]
		_ = aclassbclassuseDB
		var aclassbclassuseAPI orm.AclassBclassUseAPI

		// insertion point for updating fields
		aclassbclassuseAPI.ID = aclassbclassuseDB.ID
		aclassbclassuseDB.CopyBasicFieldsToAclassBclassUse(&aclassbclassuseAPI.AclassBclassUse)
		aclassbclassuseAPI.AclassBclassUsePointersEnconding = aclassbclassuseDB.AclassBclassUsePointersEnconding
		aclassbclassuseAPIs = append(aclassbclassuseAPIs, aclassbclassuseAPI)
	}

	c.JSON(http.StatusOK, aclassbclassuseAPIs)
}

// PostAclassBclassUse
//
// swagger:route POST /aclassbclassuses aclassbclassuses postAclassBclassUse
//
// Creates a aclassbclassuse
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: aclassbclassuseDBResponse
func PostAclassBclassUse(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclassUse.GetDB()

	// Validate input
	var input orm.AclassBclassUseAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create aclassbclassuse
	aclassbclassuseDB := orm.AclassBclassUseDB{}
	aclassbclassuseDB.AclassBclassUsePointersEnconding = input.AclassBclassUsePointersEnconding
	aclassbclassuseDB.CopyBasicFieldsFromAclassBclassUse(&input.AclassBclassUse)

	query := db.Create(&aclassbclassuseDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, aclassbclassuseDB)
}

// GetAclassBclassUse
//
// swagger:route GET /aclassbclassuses/{ID} aclassbclassuses getAclassBclassUse
//
// Gets the details for a aclassbclassuse.
//
// Responses:
//    default: genericError
//        200: aclassbclassuseDBResponse
func GetAclassBclassUse(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclassUse.GetDB()

	// Get aclassbclassuseDB in DB
	var aclassbclassuseDB orm.AclassBclassUseDB
	if err := db.First(&aclassbclassuseDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var aclassbclassuseAPI orm.AclassBclassUseAPI
	aclassbclassuseAPI.ID = aclassbclassuseDB.ID
	aclassbclassuseAPI.AclassBclassUsePointersEnconding = aclassbclassuseDB.AclassBclassUsePointersEnconding
	aclassbclassuseDB.CopyBasicFieldsToAclassBclassUse(&aclassbclassuseAPI.AclassBclassUse)

	c.JSON(http.StatusOK, aclassbclassuseAPI)
}

// UpdateAclassBclassUse
//
// swagger:route PATCH /aclassbclassuses/{ID} aclassbclassuses updateAclassBclassUse
//
// Update a aclassbclassuse
//
// Responses:
//    default: genericError
//        200: aclassbclassuseDBResponse
func UpdateAclassBclassUse(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclassUse.GetDB()

	// Get model if exist
	var aclassbclassuseDB orm.AclassBclassUseDB

	// fetch the aclassbclassuse
	query := db.First(&aclassbclassuseDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.AclassBclassUseAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	aclassbclassuseDB.CopyBasicFieldsFromAclassBclassUse(&input.AclassBclassUse)
	aclassbclassuseDB.AclassBclassUsePointersEnconding = input.AclassBclassUsePointersEnconding

	query = db.Model(&aclassbclassuseDB).Updates(aclassbclassuseDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the aclassbclassuseDB
	c.JSON(http.StatusOK, aclassbclassuseDB)
}

// DeleteAclassBclassUse
//
// swagger:route DELETE /aclassbclassuses/{ID} aclassbclassuses deleteAclassBclassUse
//
// Delete a aclassbclassuse
//
// Responses:
//    default: genericError
func DeleteAclassBclassUse(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclassBclassUse.GetDB()

	// Get model if exist
	var aclassbclassuseDB orm.AclassBclassUseDB
	if err := db.First(&aclassbclassuseDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&aclassbclassuseDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
