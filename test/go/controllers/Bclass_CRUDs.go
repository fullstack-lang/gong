// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/test/go/models"
	"github.com/fullstack-lang/gong/test/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Bclass__dummysDeclaration__ models.Bclass
var __Bclass_time__dummyDeclaration time.Duration

// An BclassID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getBclass updateBclass deleteBclass
type BclassID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// BclassInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postBclass updateBclass
type BclassInput struct {
	// The Bclass to submit or modify
	// in: body
	Bclass *orm.BclassAPI
}

// GetBclasss
//
// swagger:route GET /bclasss bclasss getBclasss
//
// Get all bclasss
//
// Responses:
//    default: genericError
//        200: bclassDBsResponse
func GetBclasss(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// source slice
	var bclassDBs []orm.BclassDB
	query := db.Find(&bclassDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	bclassAPIs := make([]orm.BclassAPI, 0)

	// for each bclass, update fields from the database nullable fields
	for idx := range bclassDBs {
		bclassDB := &bclassDBs[idx]
		_ = bclassDB
		var bclassAPI orm.BclassAPI

		// insertion point for updating fields
		bclassAPI.ID = bclassDB.ID
		bclassDB.CopyBasicFieldsToBclass(&bclassAPI.Bclass)
		bclassAPI.BclassPointersEnconding = bclassDB.BclassPointersEnconding
		bclassAPIs = append(bclassAPIs, bclassAPI)
	}

	c.JSON(http.StatusOK, bclassAPIs)
}

// PostBclass
//
// swagger:route POST /bclasss bclasss postBclass
//
// Creates a bclass
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: bclassDBResponse
func PostBclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.BclassAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create bclass
	bclassDB := orm.BclassDB{}
	bclassDB.BclassPointersEnconding = input.BclassPointersEnconding
	bclassDB.CopyBasicFieldsFromBclass(&input.Bclass)

	query := db.Create(&bclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, bclassDB)
}

// GetBclass
//
// swagger:route GET /bclasss/{ID} bclasss getBclass
//
// Gets the details for a bclass.
//
// Responses:
//    default: genericError
//        200: bclassDBResponse
func GetBclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get bclassDB in DB
	var bclassDB orm.BclassDB
	if err := db.First(&bclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var bclassAPI orm.BclassAPI
	bclassAPI.ID = bclassDB.ID
	bclassAPI.BclassPointersEnconding = bclassDB.BclassPointersEnconding
	bclassDB.CopyBasicFieldsToBclass(&bclassAPI.Bclass)

	c.JSON(http.StatusOK, bclassAPI)
}

// UpdateBclass
//
// swagger:route PATCH /bclasss/{ID} bclasss updateBclass
//
// Update a bclass
//
// Responses:
//    default: genericError
//        200: bclassDBResponse
func UpdateBclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var bclassDB orm.BclassDB

	// fetch the bclass
	query := db.First(&bclassDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.BclassAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	bclassDB.CopyBasicFieldsFromBclass(&input.Bclass)
	bclassDB.BclassPointersEnconding = input.BclassPointersEnconding

	query = db.Model(&bclassDB).Updates(bclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the bclassDB
	c.JSON(http.StatusOK, bclassDB)
}

// DeleteBclass
//
// swagger:route DELETE /bclasss/{ID} bclasss deleteBclass
//
// Delete a bclass
//
// Responses:
//    default: genericError
func DeleteBclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var bclassDB orm.BclassDB
	if err := db.First(&bclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&bclassDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
