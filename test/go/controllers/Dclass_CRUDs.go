// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/test/go/models"
	"github.com/fullstack-lang/gong/test/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Dclass__dummysDeclaration__ models.Dclass
var __Dclass_time__dummyDeclaration time.Duration

// An DclassID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getDclass updateDclass deleteDclass
type DclassID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// DclassInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postDclass updateDclass
type DclassInput struct {
	// The Dclass to submit or modify
	// in: body
	Dclass *orm.DclassAPI
}

// GetDclasss
//
// swagger:route GET /dclasss dclasss getDclasss
//
// Get all dclasss
//
// Responses:
//    default: genericError
//        200: dclassDBsResponse
func GetDclasss(c *gin.Context) {
	db := orm.BackRepo.BackRepoDclass.GetDB()
	
	// source slice
	var dclassDBs []orm.DclassDB
	query := db.Find(&dclassDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	dclassAPIs := make([]orm.DclassAPI, 0)

	// for each dclass, update fields from the database nullable fields
	for idx := range dclassDBs {
		dclassDB := &dclassDBs[idx]
		_ = dclassDB
		var dclassAPI orm.DclassAPI

		// insertion point for updating fields
		dclassAPI.ID = dclassDB.ID
		dclassDB.CopyBasicFieldsToDclass(&dclassAPI.Dclass)
		dclassAPI.DclassPointersEnconding = dclassDB.DclassPointersEnconding
		dclassAPIs = append(dclassAPIs, dclassAPI)
	}

	c.JSON(http.StatusOK, dclassAPIs)
}

// PostDclass
//
// swagger:route POST /dclasss dclasss postDclass
//
// Creates a dclass
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: dclassDBResponse
func PostDclass(c *gin.Context) {
	db := orm.BackRepo.BackRepoDclass.GetDB()

	// Validate input
	var input orm.DclassAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create dclass
	dclassDB := orm.DclassDB{}
	dclassDB.DclassPointersEnconding = input.DclassPointersEnconding
	dclassDB.CopyBasicFieldsFromDclass(&input.Dclass)

	query := db.Create(&dclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, dclassDB)
}

// GetDclass
//
// swagger:route GET /dclasss/{ID} dclasss getDclass
//
// Gets the details for a dclass.
//
// Responses:
//    default: genericError
//        200: dclassDBResponse
func GetDclass(c *gin.Context) {
	db := orm.BackRepo.BackRepoDclass.GetDB()

	// Get dclassDB in DB
	var dclassDB orm.DclassDB
	if err := db.First(&dclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var dclassAPI orm.DclassAPI
	dclassAPI.ID = dclassDB.ID
	dclassAPI.DclassPointersEnconding = dclassDB.DclassPointersEnconding
	dclassDB.CopyBasicFieldsToDclass(&dclassAPI.Dclass)

	c.JSON(http.StatusOK, dclassAPI)
}

// UpdateDclass
//
// swagger:route PATCH /dclasss/{ID} dclasss updateDclass
//
// Update a dclass
//
// Responses:
//    default: genericError
//        200: dclassDBResponse
func UpdateDclass(c *gin.Context) {
	db := orm.BackRepo.BackRepoDclass.GetDB()

	// Get model if exist
	var dclassDB orm.DclassDB

	// fetch the dclass
	query := db.First(&dclassDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.DclassAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	dclassDB.CopyBasicFieldsFromDclass(&input.Dclass)
	dclassDB.DclassPointersEnconding = input.DclassPointersEnconding

	query = db.Model(&dclassDB).Updates(dclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the dclassDB
	c.JSON(http.StatusOK, dclassDB)
}

// DeleteDclass
//
// swagger:route DELETE /dclasss/{ID} dclasss deleteDclass
//
// Delete a dclass
//
// Responses:
//    default: genericError
func DeleteDclass(c *gin.Context) {
	db := orm.BackRepo.BackRepoDclass.GetDB()

	// Get model if exist
	var dclassDB orm.DclassDB
	if err := db.First(&dclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&dclassDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
