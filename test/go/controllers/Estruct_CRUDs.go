// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/test/go/models"
	"github.com/fullstack-lang/gong/test/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Estruct__dummysDeclaration__ models.Estruct
var __Estruct_time__dummyDeclaration time.Duration

// An EstructID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getEstruct updateEstruct deleteEstruct
type EstructID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// EstructInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postEstruct updateEstruct
type EstructInput struct {
	// The Estruct to submit or modify
	// in: body
	Estruct *orm.EstructAPI
}

// GetEstructs
//
// swagger:route GET /estructs estructs getEstructs
//
// Get all estructs
//
// Responses:
//    default: genericError
//        200: estructDBsResponse
func GetEstructs(c *gin.Context) {
	db := orm.BackRepo.BackRepoEstruct.GetDB()

	// source slice
	var estructDBs []orm.EstructDB
	query := db.Find(&estructDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	estructAPIs := make([]orm.EstructAPI, 0)

	// for each estruct, update fields from the database nullable fields
	for idx := range estructDBs {
		estructDB := &estructDBs[idx]
		_ = estructDB
		var estructAPI orm.EstructAPI

		// insertion point for updating fields
		estructAPI.ID = estructDB.ID
		estructDB.CopyBasicFieldsToEstruct(&estructAPI.Estruct)
		estructAPI.EstructPointersEnconding = estructDB.EstructPointersEnconding
		estructAPIs = append(estructAPIs, estructAPI)
	}

	c.JSON(http.StatusOK, estructAPIs)
}

// PostEstruct
//
// swagger:route POST /estructs estructs postEstruct
//
// Creates a estruct
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: estructDBResponse
func PostEstruct(c *gin.Context) {
	db := orm.BackRepo.BackRepoEstruct.GetDB()

	// Validate input
	var input orm.EstructAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create estruct
	estructDB := orm.EstructDB{}
	estructDB.EstructPointersEnconding = input.EstructPointersEnconding
	estructDB.CopyBasicFieldsFromEstruct(&input.Estruct)

	query := db.Create(&estructDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, estructDB)
}

// GetEstruct
//
// swagger:route GET /estructs/{ID} estructs getEstruct
//
// Gets the details for a estruct.
//
// Responses:
//    default: genericError
//        200: estructDBResponse
func GetEstruct(c *gin.Context) {
	db := orm.BackRepo.BackRepoEstruct.GetDB()

	// Get estructDB in DB
	var estructDB orm.EstructDB
	if err := db.First(&estructDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var estructAPI orm.EstructAPI
	estructAPI.ID = estructDB.ID
	estructAPI.EstructPointersEnconding = estructDB.EstructPointersEnconding
	estructDB.CopyBasicFieldsToEstruct(&estructAPI.Estruct)

	c.JSON(http.StatusOK, estructAPI)
}

// UpdateEstruct
//
// swagger:route PATCH /estructs/{ID} estructs updateEstruct
//
// Update a estruct
//
// Responses:
//    default: genericError
//        200: estructDBResponse
func UpdateEstruct(c *gin.Context) {
	db := orm.BackRepo.BackRepoEstruct.GetDB()

	// Get model if exist
	var estructDB orm.EstructDB

	// fetch the estruct
	query := db.First(&estructDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.EstructAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	estructDB.CopyBasicFieldsFromEstruct(&input.Estruct)
	estructDB.EstructPointersEnconding = input.EstructPointersEnconding

	query = db.Model(&estructDB).Updates(estructDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the estructDB
	c.JSON(http.StatusOK, estructDB)
}

// DeleteEstruct
//
// swagger:route DELETE /estructs/{ID} estructs deleteEstruct
//
// Delete a estruct
//
// Responses:
//    default: genericError
func DeleteEstruct(c *gin.Context) {
	db := orm.BackRepo.BackRepoEstruct.GetDB()

	// Get model if exist
	var estructDB orm.EstructDB
	if err := db.First(&estructDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&estructDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
