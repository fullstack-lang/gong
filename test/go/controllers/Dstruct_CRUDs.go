// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/test/go/models"
	"github.com/fullstack-lang/gong/test/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Dstruct__dummysDeclaration__ models.Dstruct
var __Dstruct_time__dummyDeclaration time.Duration

// An DstructID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getDstruct updateDstruct deleteDstruct
type DstructID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// DstructInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postDstruct updateDstruct
type DstructInput struct {
	// The Dstruct to submit or modify
	// in: body
	Dstruct *orm.DstructAPI
}

// GetDstructs
//
// swagger:route GET /dstructs dstructs getDstructs
//
// # Get all dstructs
//
// Responses:
// default: genericError
//
//	200: dstructDBResponse
func GetDstructs(c *gin.Context) {
	db := orm.BackRepo.BackRepoDstruct.GetDB()

	// source slice
	var dstructDBs []orm.DstructDB
	query := db.Find(&dstructDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	dstructAPIs := make([]orm.DstructAPI, 0)

	// for each dstruct, update fields from the database nullable fields
	for idx := range dstructDBs {
		dstructDB := &dstructDBs[idx]
		_ = dstructDB
		var dstructAPI orm.DstructAPI

		// insertion point for updating fields
		dstructAPI.ID = dstructDB.ID
		dstructDB.CopyBasicFieldsToDstruct(&dstructAPI.Dstruct)
		dstructAPI.DstructPointersEnconding = dstructDB.DstructPointersEnconding
		dstructAPIs = append(dstructAPIs, dstructAPI)
	}

	c.JSON(http.StatusOK, dstructAPIs)
}

// PostDstruct
//
// swagger:route POST /dstructs dstructs postDstruct
//
// Creates a dstruct
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostDstruct(c *gin.Context) {
	db := orm.BackRepo.BackRepoDstruct.GetDB()

	// Validate input
	var input orm.DstructAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create dstruct
	dstructDB := orm.DstructDB{}
	dstructDB.DstructPointersEnconding = input.DstructPointersEnconding
	dstructDB.CopyBasicFieldsFromDstruct(&input.Dstruct)

	query := db.Create(&dstructDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoDstruct.CheckoutPhaseOneInstance(&dstructDB)
	dstruct := (*orm.BackRepo.BackRepoDstruct.Map_DstructDBID_DstructPtr)[dstructDB.ID]

	if dstruct != nil {
		models.AfterCreateFromFront(&models.Stage, dstruct)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, dstructDB)
}

// GetDstruct
//
// swagger:route GET /dstructs/{ID} dstructs getDstruct
//
// Gets the details for a dstruct.
//
// Responses:
// default: genericError
//
//	200: dstructDBResponse
func GetDstruct(c *gin.Context) {
	db := orm.BackRepo.BackRepoDstruct.GetDB()

	// Get dstructDB in DB
	var dstructDB orm.DstructDB
	if err := db.First(&dstructDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var dstructAPI orm.DstructAPI
	dstructAPI.ID = dstructDB.ID
	dstructAPI.DstructPointersEnconding = dstructDB.DstructPointersEnconding
	dstructDB.CopyBasicFieldsToDstruct(&dstructAPI.Dstruct)

	c.JSON(http.StatusOK, dstructAPI)
}

// UpdateDstruct
//
// swagger:route PATCH /dstructs/{ID} dstructs updateDstruct
//
// # Update a dstruct
//
// Responses:
// default: genericError
//
//	200: dstructDBResponse
func UpdateDstruct(c *gin.Context) {
	db := orm.BackRepo.BackRepoDstruct.GetDB()

	// Get model if exist
	var dstructDB orm.DstructDB

	// fetch the dstruct
	query := db.First(&dstructDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.DstructAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	dstructDB.CopyBasicFieldsFromDstruct(&input.Dstruct)
	dstructDB.DstructPointersEnconding = input.DstructPointersEnconding

	query = db.Model(&dstructDB).Updates(dstructDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	dstructNew := new(models.Dstruct)
	dstructDB.CopyBasicFieldsToDstruct(dstructNew)

	// get stage instance from DB instance, and call callback function
	dstructOld := (*orm.BackRepo.BackRepoDstruct.Map_DstructDBID_DstructPtr)[dstructDB.ID]
	if dstructOld != nil {
		models.AfterUpdateFromFront(&models.Stage, dstructOld, dstructNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the dstructDB
	c.JSON(http.StatusOK, dstructDB)
}

// DeleteDstruct
//
// swagger:route DELETE /dstructs/{ID} dstructs deleteDstruct
//
// # Delete a dstruct
//
// default: genericError
//
//	200: dstructDBResponse
func DeleteDstruct(c *gin.Context) {
	db := orm.BackRepo.BackRepoDstruct.GetDB()

	// Get model if exist
	var dstructDB orm.DstructDB
	if err := db.First(&dstructDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&dstructDB)

	// get an instance (not staged) from DB instance, and call callback function
	dstructDeleted := new(models.Dstruct)
	dstructDB.CopyBasicFieldsToDstruct(dstructDeleted)

	// get stage instance from DB instance, and call callback function
	dstructStaged := (*orm.BackRepo.BackRepoDstruct.Map_DstructDBID_DstructPtr)[dstructDB.ID]
	if dstructStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, dstructStaged, dstructDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
