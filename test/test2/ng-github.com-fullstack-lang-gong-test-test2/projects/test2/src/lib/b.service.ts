// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { BAPI } from './b-api'
import { B, CopyBToBAPI } from './b'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class BService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  BServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private bsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.bsUrl = origin + '/api/github.com/fullstack-lang/gong/test/test2/go/v1/bs';
  }

  /** GET bs from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<BAPI[]> {
    return this.getBs(Name, frontRepo)
  }
  getBs(Name: string, frontRepo: FrontRepo): Observable<BAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<BAPI[]>(this.bsUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<BAPI[]>('getBs', []))
      );
  }

  /** GET b by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<BAPI> {
    return this.getB(id, Name, frontRepo)
  }
  getB(id: number, Name: string, frontRepo: FrontRepo): Observable<BAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.bsUrl}/${id}`;
    return this.http.get<BAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched b id=${id}`)),
      catchError(this.handleError<BAPI>(`getB id=${id}`))
    );
  }

  // postFront copy b to a version with encoded pointers and post to the back
  postFront(b: B, Name: string): Observable<BAPI> {
    let bAPI = new BAPI
    CopyBToBAPI(b, bAPI)
    const id = typeof bAPI === 'number' ? bAPI : bAPI.ID
    const url = `${this.bsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<BAPI>(url, bAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<BAPI>('postB'))
    );
  }

  /** POST: add a new b to the server */
  post(bdb: BAPI, Name: string, frontRepo: FrontRepo): Observable<BAPI> {
    return this.postB(bdb, Name, frontRepo)
  }
  postB(bdb: BAPI, Name: string, frontRepo: FrontRepo): Observable<BAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<BAPI>(this.bsUrl, bdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted bdb id=${bdb.ID}`)
      }),
      catchError(this.handleError<BAPI>('postB'))
    );
  }

  /** DELETE: delete the bdb from the server */
  delete(bdb: BAPI | number, Name: string): Observable<BAPI> {
    return this.deleteB(bdb, Name)
  }
  deleteB(bdb: BAPI | number, Name: string): Observable<BAPI> {
    const id = typeof bdb === 'number' ? bdb : bdb.ID;
    const url = `${this.bsUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<BAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted bdb id=${id}`)),
      catchError(this.handleError<BAPI>('deleteB'))
    );
  }

  // updateFront copy b to a version with encoded pointers and update to the back
  updateFront(b: B, Name: string): Observable<BAPI> {
    let bAPI = new BAPI
    CopyBToBAPI(b, bAPI)
    const id = typeof bAPI === 'number' ? bAPI : bAPI.ID
    const url = `${this.bsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<BAPI>(url, bAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<BAPI>('updateB'))
    );
  }

  /** PUT: update the bdb on the server */
  update(bdb: BAPI, Name: string, frontRepo: FrontRepo): Observable<BAPI> {
    return this.updateB(bdb, Name, frontRepo)
  }
  updateB(bdb: BAPI, Name: string, frontRepo: FrontRepo): Observable<BAPI> {
    const id = typeof bdb === 'number' ? bdb : bdb.ID;
    const url = `${this.bsUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<BAPI>(url, bdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated bdb id=${bdb.ID}`)
      }),
      catchError(this.handleError<BAPI>('updateB'))
    );
  }

  // updateFrontWithMouseEvent
  updateFrontWithMouseEvent(b: B, Name: string, gong__mouseEvent: MouseEvent): Observable<BAPI> {
    let bAPI = new BAPI
    CopyBToBAPI(b, bAPI)
    const id = typeof bAPI === 'number' ? bAPI : bAPI.ID
    const url = `${this.bsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    params = params.append("shiftKey", gong__mouseEvent.shiftKey)
    params = params.append("altKey", gong__mouseEvent.altKey)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<BAPI>(url, bAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<BAPI>('updateB'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in BService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging
      console.error("BService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
