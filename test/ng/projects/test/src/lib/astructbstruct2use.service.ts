// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { AstructBstruct2UseDB } from './astructbstruct2use-db';

@Injectable({
  providedIn: 'root'
})
export class AstructBstruct2UseService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  AstructBstruct2UseServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private astructbstruct2usesUrl: string

  constructor(
    private http: HttpClient,
    private location: Location,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
	let origin = this.document.location.origin
    
	// if debugging with ng, replace 4200 with 8080
	origin = origin.replace("4200", "8080")

    // compute path to the service
    this.astructbstruct2usesUrl = origin + '/api/github.com/fullstack-lang/gong/test/go/v1/astructbstruct2uses';
   }

  /** GET astructbstruct2uses from the server */
  getAstructBstruct2Uses(): Observable<AstructBstruct2UseDB[]> {
    return this.http.get<AstructBstruct2UseDB[]>(this.astructbstruct2usesUrl)
      .pipe(
        tap(_ => this.log('fetched astructbstruct2uses')),
        catchError(this.handleError<AstructBstruct2UseDB[]>('getAstructBstruct2Uses', []))
      );
  }

  /** GET astructbstruct2use by id. Will 404 if id not found */
  getAstructBstruct2Use(id: number): Observable<AstructBstruct2UseDB> {
    const url = `${this.astructbstruct2usesUrl}/${id}`;
    return this.http.get<AstructBstruct2UseDB>(url).pipe(
      tap(_ => this.log(`fetched astructbstruct2use id=${id}`)),
      catchError(this.handleError<AstructBstruct2UseDB>(`getAstructBstruct2Use id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new astructbstruct2use to the server */
  postAstructBstruct2Use(astructbstruct2usedb: AstructBstruct2UseDB): Observable<AstructBstruct2UseDB> {

		// insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    astructbstruct2usedb.Bstrcut2 = {}
    let _Astruct_Anarrayofb2Use_reverse = astructbstruct2usedb.Astruct_Anarrayofb2Use_reverse
    astructbstruct2usedb.Astruct_Anarrayofb2Use_reverse = {}

		return this.http.post<AstructBstruct2UseDB>(this.astructbstruct2usesUrl, astructbstruct2usedb, this.httpOptions).pipe(
			tap(_ => {
				// insertion point for restoration of reverse pointers
        astructbstruct2usedb.Astruct_Anarrayofb2Use_reverse = _Astruct_Anarrayofb2Use_reverse
				this.log(`posted astructbstruct2usedb id=${astructbstruct2usedb.ID}`)
			}),
			catchError(this.handleError<AstructBstruct2UseDB>('postAstructBstruct2Use'))
		);
  }

  /** DELETE: delete the astructbstruct2usedb from the server */
  deleteAstructBstruct2Use(astructbstruct2usedb: AstructBstruct2UseDB | number): Observable<AstructBstruct2UseDB> {
    const id = typeof astructbstruct2usedb === 'number' ? astructbstruct2usedb : astructbstruct2usedb.ID;
    const url = `${this.astructbstruct2usesUrl}/${id}`;

    return this.http.delete<AstructBstruct2UseDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted astructbstruct2usedb id=${id}`)),
      catchError(this.handleError<AstructBstruct2UseDB>('deleteAstructBstruct2Use'))
    );
  }

  /** PUT: update the astructbstruct2usedb on the server */
  updateAstructBstruct2Use(astructbstruct2usedb: AstructBstruct2UseDB): Observable<AstructBstruct2UseDB> {
    const id = typeof astructbstruct2usedb === 'number' ? astructbstruct2usedb : astructbstruct2usedb.ID;
    const url = `${this.astructbstruct2usesUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    astructbstruct2usedb.Bstrcut2 = {}
    let _Astruct_Anarrayofb2Use_reverse = astructbstruct2usedb.Astruct_Anarrayofb2Use_reverse
    astructbstruct2usedb.Astruct_Anarrayofb2Use_reverse = {}

    return this.http.put(url, astructbstruct2usedb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        astructbstruct2usedb.Astruct_Anarrayofb2Use_reverse = _Astruct_Anarrayofb2Use_reverse
        this.log(`updated astructbstruct2usedb id=${astructbstruct2usedb.ID}`)
      }),
      catchError(this.handleError<AstructBstruct2UseDB>('updateAstructBstruct2Use'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
