// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { DstructDB } from './dstruct-db';
import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { BstructDB } from './bstruct-db'

@Injectable({
  providedIn: 'root'
})
export class DstructService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  DstructServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private dstructsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.dstructsUrl = origin + '/api/github.com/fullstack-lang/gong/test/go/v1/dstructs';
  }

  /** GET dstructs from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<DstructDB[]> {
    return this.getDstructs(GONG__StackPath, frontRepo)
  }
  getDstructs(GONG__StackPath: string, frontRepo: FrontRepo): Observable<DstructDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<DstructDB[]>(this.dstructsUrl, { params: params })
      .pipe(
        tap(),
		// tap(_ => this.log('fetched dstructs')),
        catchError(this.handleError<DstructDB[]>('getDstructs', []))
      );
  }

  /** GET dstruct by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DstructDB> {
    return this.getDstruct(id, GONG__StackPath, frontRepo)
  }
  getDstruct(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DstructDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.dstructsUrl}/${id}`;
    return this.http.get<DstructDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched dstruct id=${id}`)),
      catchError(this.handleError<DstructDB>(`getDstruct id=${id}`))
    );
  }

  /** POST: add a new dstruct to the server */
  post(dstructdb: DstructDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DstructDB> {
    return this.postDstruct(dstructdb, GONG__StackPath, frontRepo)
  }
  postDstruct(dstructdb: DstructDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DstructDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    for (let _bstruct of dstructdb.Anarrayofb) {
      dstructdb.DstructPointersEncoding.Anarrayofb.push(_bstruct.ID)
    }
    dstructdb.Anarrayofb = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<DstructDB>(this.dstructsUrl, dstructdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        dstructdb.Anarrayofb = new Array<BstructDB>()
        for (let _id of dstructdb.DstructPointersEncoding.Anarrayofb) {
          let _bstruct = frontRepo.Bstructs.get(_id)
          if (_bstruct != undefined) {
            dstructdb.Anarrayofb.push(_bstruct!)
          }
        }
        // this.log(`posted dstructdb id=${dstructdb.ID}`)
      }),
      catchError(this.handleError<DstructDB>('postDstruct'))
    );
  }

  /** DELETE: delete the dstructdb from the server */
  delete(dstructdb: DstructDB | number, GONG__StackPath: string): Observable<DstructDB> {
    return this.deleteDstruct(dstructdb, GONG__StackPath)
  }
  deleteDstruct(dstructdb: DstructDB | number, GONG__StackPath: string): Observable<DstructDB> {
    const id = typeof dstructdb === 'number' ? dstructdb : dstructdb.ID;
    const url = `${this.dstructsUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<DstructDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted dstructdb id=${id}`)),
      catchError(this.handleError<DstructDB>('deleteDstruct'))
    );
  }

  /** PUT: update the dstructdb on the server */
  update(dstructdb: DstructDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DstructDB> {
    return this.updateDstruct(dstructdb, GONG__StackPath, frontRepo)
  }
  updateDstruct(dstructdb: DstructDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DstructDB> {
    const id = typeof dstructdb === 'number' ? dstructdb : dstructdb.ID;
    const url = `${this.dstructsUrl}/${id}`;

    // insertion point for reset of pointers (to avoid circular JSON)
	// and encoding of pointers
    for (let _bstruct of dstructdb.Anarrayofb) {
      dstructdb.DstructPointersEncoding.Anarrayofb.push(_bstruct.ID)
    }
    dstructdb.Anarrayofb = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<DstructDB>(url, dstructdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        dstructdb.Anarrayofb = new Array<BstructDB>()
        for (let _id of dstructdb.DstructPointersEncoding.Anarrayofb) {
          let _bstruct = frontRepo.Bstructs.get(_id)
          if (_bstruct != undefined) {
            dstructdb.Anarrayofb.push(_bstruct!)
          }
        }
        // this.log(`updated dstructdb id=${dstructdb.ID}`)
      }),
      catchError(this.handleError<DstructDB>('updateDstruct'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in DstructService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("DstructService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
