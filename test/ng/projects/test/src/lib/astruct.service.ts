// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { AstructDB } from './astruct-db';
import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { BstructDB } from './bstruct-db'
import { DstructDB } from './dstruct-db'
import { AstructBstructUseDB } from './astructbstructuse-db'
import { AstructBstruct2UseDB } from './astructbstruct2use-db'

@Injectable({
  providedIn: 'root'
})
export class AstructService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  AstructServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private astructsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.astructsUrl = origin + '/api/github.com/fullstack-lang/gong/test/go/v1/astructs';
  }

  /** GET astructs from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<AstructDB[]> {
    return this.getAstructs(GONG__StackPath, frontRepo)
  }
  getAstructs(GONG__StackPath: string, frontRepo: FrontRepo): Observable<AstructDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<AstructDB[]>(this.astructsUrl, { params: params })
      .pipe(
        tap(),
		// tap(_ => this.log('fetched astructs')),
        catchError(this.handleError<AstructDB[]>('getAstructs', []))
      );
  }

  /** GET astruct by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AstructDB> {
    return this.getAstruct(id, GONG__StackPath, frontRepo)
  }
  getAstruct(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AstructDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.astructsUrl}/${id}`;
    return this.http.get<AstructDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched astruct id=${id}`)),
      catchError(this.handleError<AstructDB>(`getAstruct id=${id}`))
    );
  }

  /** POST: add a new astruct to the server */
  post(astructdb: AstructDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AstructDB> {
    return this.postAstruct(astructdb, GONG__StackPath, frontRepo)
  }
  postAstruct(astructdb: AstructDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AstructDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    if (astructdb.Associationtob != undefined) {
      astructdb.AstructPointersEncoding.AssociationtobID.Int64 = astructdb.Associationtob.ID
      astructdb.AstructPointersEncoding.AssociationtobID.Valid = true
    }
    astructdb.Associationtob = undefined
    for (let _bstruct of astructdb.Anarrayofb) {
      astructdb.AstructPointersEncoding.Anarrayofb.push(_bstruct.ID)
    }
    astructdb.Anarrayofb = []
    if (astructdb.Anotherassociationtob_2 != undefined) {
      astructdb.AstructPointersEncoding.Anotherassociationtob_2ID.Int64 = astructdb.Anotherassociationtob_2.ID
      astructdb.AstructPointersEncoding.Anotherassociationtob_2ID.Valid = true
    }
    astructdb.Anotherassociationtob_2 = undefined
    if (astructdb.Bstruct != undefined) {
      astructdb.AstructPointersEncoding.BstructID.Int64 = astructdb.Bstruct.ID
      astructdb.AstructPointersEncoding.BstructID.Valid = true
    }
    astructdb.Bstruct = undefined
    if (astructdb.Bstruct2 != undefined) {
      astructdb.AstructPointersEncoding.Bstruct2ID.Int64 = astructdb.Bstruct2.ID
      astructdb.AstructPointersEncoding.Bstruct2ID.Valid = true
    }
    astructdb.Bstruct2 = undefined
    if (astructdb.Dstruct != undefined) {
      astructdb.AstructPointersEncoding.DstructID.Int64 = astructdb.Dstruct.ID
      astructdb.AstructPointersEncoding.DstructID.Valid = true
    }
    astructdb.Dstruct = undefined
    if (astructdb.Dstruct2 != undefined) {
      astructdb.AstructPointersEncoding.Dstruct2ID.Int64 = astructdb.Dstruct2.ID
      astructdb.AstructPointersEncoding.Dstruct2ID.Valid = true
    }
    astructdb.Dstruct2 = undefined
    if (astructdb.Dstruct3 != undefined) {
      astructdb.AstructPointersEncoding.Dstruct3ID.Int64 = astructdb.Dstruct3.ID
      astructdb.AstructPointersEncoding.Dstruct3ID.Valid = true
    }
    astructdb.Dstruct3 = undefined
    if (astructdb.Dstruct4 != undefined) {
      astructdb.AstructPointersEncoding.Dstruct4ID.Int64 = astructdb.Dstruct4.ID
      astructdb.AstructPointersEncoding.Dstruct4ID.Valid = true
    }
    astructdb.Dstruct4 = undefined
    for (let _astruct of astructdb.Anarrayofa) {
      astructdb.AstructPointersEncoding.Anarrayofa.push(_astruct.ID)
    }
    astructdb.Anarrayofa = []
    for (let _bstruct of astructdb.Anotherarrayofb) {
      astructdb.AstructPointersEncoding.Anotherarrayofb.push(_bstruct.ID)
    }
    astructdb.Anotherarrayofb = []
    for (let _astructbstructuse of astructdb.AnarrayofbUse) {
      astructdb.AstructPointersEncoding.AnarrayofbUse.push(_astructbstructuse.ID)
    }
    astructdb.AnarrayofbUse = []
    for (let _astructbstruct2use of astructdb.Anarrayofb2Use) {
      astructdb.AstructPointersEncoding.Anarrayofb2Use.push(_astructbstruct2use.ID)
    }
    astructdb.Anarrayofb2Use = []
    if (astructdb.AnAstruct != undefined) {
      astructdb.AstructPointersEncoding.AnAstructID.Int64 = astructdb.AnAstruct.ID
      astructdb.AstructPointersEncoding.AnAstructID.Valid = true
    }
    astructdb.AnAstruct = undefined

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<AstructDB>(this.astructsUrl, astructdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        astructdb.Associationtob = frontRepo.Bstructs.get(astructdb.AstructPointersEncoding.AssociationtobID.Int64)
        astructdb.Anarrayofb = new Array<BstructDB>()
        for (let _id of astructdb.AstructPointersEncoding.Anarrayofb) {
          let _bstruct = frontRepo.Bstructs.get(_id)
          if (_bstruct != undefined) {
            astructdb.Anarrayofb.push(_bstruct!)
          }
        }
        astructdb.Anotherassociationtob_2 = frontRepo.Bstructs.get(astructdb.AstructPointersEncoding.Anotherassociationtob_2ID.Int64)
        astructdb.Bstruct = frontRepo.Bstructs.get(astructdb.AstructPointersEncoding.BstructID.Int64)
        astructdb.Bstruct2 = frontRepo.Bstructs.get(astructdb.AstructPointersEncoding.Bstruct2ID.Int64)
        astructdb.Dstruct = frontRepo.Dstructs.get(astructdb.AstructPointersEncoding.DstructID.Int64)
        astructdb.Dstruct2 = frontRepo.Dstructs.get(astructdb.AstructPointersEncoding.Dstruct2ID.Int64)
        astructdb.Dstruct3 = frontRepo.Dstructs.get(astructdb.AstructPointersEncoding.Dstruct3ID.Int64)
        astructdb.Dstruct4 = frontRepo.Dstructs.get(astructdb.AstructPointersEncoding.Dstruct4ID.Int64)
        astructdb.Anarrayofa = new Array<AstructDB>()
        for (let _id of astructdb.AstructPointersEncoding.Anarrayofa) {
          let _astruct = frontRepo.Astructs.get(_id)
          if (_astruct != undefined) {
            astructdb.Anarrayofa.push(_astruct!)
          }
        }
        astructdb.Anotherarrayofb = new Array<BstructDB>()
        for (let _id of astructdb.AstructPointersEncoding.Anotherarrayofb) {
          let _bstruct = frontRepo.Bstructs.get(_id)
          if (_bstruct != undefined) {
            astructdb.Anotherarrayofb.push(_bstruct!)
          }
        }
        astructdb.AnarrayofbUse = new Array<AstructBstructUseDB>()
        for (let _id of astructdb.AstructPointersEncoding.AnarrayofbUse) {
          let _astructbstructuse = frontRepo.AstructBstructUses.get(_id)
          if (_astructbstructuse != undefined) {
            astructdb.AnarrayofbUse.push(_astructbstructuse!)
          }
        }
        astructdb.Anarrayofb2Use = new Array<AstructBstruct2UseDB>()
        for (let _id of astructdb.AstructPointersEncoding.Anarrayofb2Use) {
          let _astructbstruct2use = frontRepo.AstructBstruct2Uses.get(_id)
          if (_astructbstruct2use != undefined) {
            astructdb.Anarrayofb2Use.push(_astructbstruct2use!)
          }
        }
        astructdb.AnAstruct = frontRepo.Astructs.get(astructdb.AstructPointersEncoding.AnAstructID.Int64)
        // this.log(`posted astructdb id=${astructdb.ID}`)
      }),
      catchError(this.handleError<AstructDB>('postAstruct'))
    );
  }

  /** DELETE: delete the astructdb from the server */
  delete(astructdb: AstructDB | number, GONG__StackPath: string): Observable<AstructDB> {
    return this.deleteAstruct(astructdb, GONG__StackPath)
  }
  deleteAstruct(astructdb: AstructDB | number, GONG__StackPath: string): Observable<AstructDB> {
    const id = typeof astructdb === 'number' ? astructdb : astructdb.ID;
    const url = `${this.astructsUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<AstructDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted astructdb id=${id}`)),
      catchError(this.handleError<AstructDB>('deleteAstruct'))
    );
  }

  /** PUT: update the astructdb on the server */
  update(astructdb: AstructDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AstructDB> {
    return this.updateAstruct(astructdb, GONG__StackPath, frontRepo)
  }
  updateAstruct(astructdb: AstructDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AstructDB> {
    const id = typeof astructdb === 'number' ? astructdb : astructdb.ID;
    const url = `${this.astructsUrl}/${id}`;

    // insertion point for reset of pointers (to avoid circular JSON)
	// and encoding of pointers
    if (astructdb.Associationtob != undefined) {
      astructdb.AstructPointersEncoding.AssociationtobID.Int64 = astructdb.Associationtob.ID
      astructdb.AstructPointersEncoding.AssociationtobID.Valid = true
    }
    astructdb.Associationtob = undefined
    for (let _bstruct of astructdb.Anarrayofb) {
      astructdb.AstructPointersEncoding.Anarrayofb.push(_bstruct.ID)
    }
    astructdb.Anarrayofb = []
    if (astructdb.Anotherassociationtob_2 != undefined) {
      astructdb.AstructPointersEncoding.Anotherassociationtob_2ID.Int64 = astructdb.Anotherassociationtob_2.ID
      astructdb.AstructPointersEncoding.Anotherassociationtob_2ID.Valid = true
    }
    astructdb.Anotherassociationtob_2 = undefined
    if (astructdb.Bstruct != undefined) {
      astructdb.AstructPointersEncoding.BstructID.Int64 = astructdb.Bstruct.ID
      astructdb.AstructPointersEncoding.BstructID.Valid = true
    }
    astructdb.Bstruct = undefined
    if (astructdb.Bstruct2 != undefined) {
      astructdb.AstructPointersEncoding.Bstruct2ID.Int64 = astructdb.Bstruct2.ID
      astructdb.AstructPointersEncoding.Bstruct2ID.Valid = true
    }
    astructdb.Bstruct2 = undefined
    if (astructdb.Dstruct != undefined) {
      astructdb.AstructPointersEncoding.DstructID.Int64 = astructdb.Dstruct.ID
      astructdb.AstructPointersEncoding.DstructID.Valid = true
    }
    astructdb.Dstruct = undefined
    if (astructdb.Dstruct2 != undefined) {
      astructdb.AstructPointersEncoding.Dstruct2ID.Int64 = astructdb.Dstruct2.ID
      astructdb.AstructPointersEncoding.Dstruct2ID.Valid = true
    }
    astructdb.Dstruct2 = undefined
    if (astructdb.Dstruct3 != undefined) {
      astructdb.AstructPointersEncoding.Dstruct3ID.Int64 = astructdb.Dstruct3.ID
      astructdb.AstructPointersEncoding.Dstruct3ID.Valid = true
    }
    astructdb.Dstruct3 = undefined
    if (astructdb.Dstruct4 != undefined) {
      astructdb.AstructPointersEncoding.Dstruct4ID.Int64 = astructdb.Dstruct4.ID
      astructdb.AstructPointersEncoding.Dstruct4ID.Valid = true
    }
    astructdb.Dstruct4 = undefined
    for (let _astruct of astructdb.Anarrayofa) {
      astructdb.AstructPointersEncoding.Anarrayofa.push(_astruct.ID)
    }
    astructdb.Anarrayofa = []
    for (let _bstruct of astructdb.Anotherarrayofb) {
      astructdb.AstructPointersEncoding.Anotherarrayofb.push(_bstruct.ID)
    }
    astructdb.Anotherarrayofb = []
    for (let _astructbstructuse of astructdb.AnarrayofbUse) {
      astructdb.AstructPointersEncoding.AnarrayofbUse.push(_astructbstructuse.ID)
    }
    astructdb.AnarrayofbUse = []
    for (let _astructbstruct2use of astructdb.Anarrayofb2Use) {
      astructdb.AstructPointersEncoding.Anarrayofb2Use.push(_astructbstruct2use.ID)
    }
    astructdb.Anarrayofb2Use = []
    if (astructdb.AnAstruct != undefined) {
      astructdb.AstructPointersEncoding.AnAstructID.Int64 = astructdb.AnAstruct.ID
      astructdb.AstructPointersEncoding.AnAstructID.Valid = true
    }
    astructdb.AnAstruct = undefined

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<AstructDB>(url, astructdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        astructdb.Associationtob = frontRepo.Bstructs.get(astructdb.AstructPointersEncoding.AssociationtobID.Int64)
        astructdb.Anarrayofb = new Array<BstructDB>()
        for (let _id of astructdb.AstructPointersEncoding.Anarrayofb) {
          let _bstruct = frontRepo.Bstructs.get(_id)
          if (_bstruct != undefined) {
            astructdb.Anarrayofb.push(_bstruct!)
          }
        }
        astructdb.Anotherassociationtob_2 = frontRepo.Bstructs.get(astructdb.AstructPointersEncoding.Anotherassociationtob_2ID.Int64)
        astructdb.Bstruct = frontRepo.Bstructs.get(astructdb.AstructPointersEncoding.BstructID.Int64)
        astructdb.Bstruct2 = frontRepo.Bstructs.get(astructdb.AstructPointersEncoding.Bstruct2ID.Int64)
        astructdb.Dstruct = frontRepo.Dstructs.get(astructdb.AstructPointersEncoding.DstructID.Int64)
        astructdb.Dstruct2 = frontRepo.Dstructs.get(astructdb.AstructPointersEncoding.Dstruct2ID.Int64)
        astructdb.Dstruct3 = frontRepo.Dstructs.get(astructdb.AstructPointersEncoding.Dstruct3ID.Int64)
        astructdb.Dstruct4 = frontRepo.Dstructs.get(astructdb.AstructPointersEncoding.Dstruct4ID.Int64)
        astructdb.Anarrayofa = new Array<AstructDB>()
        for (let _id of astructdb.AstructPointersEncoding.Anarrayofa) {
          let _astruct = frontRepo.Astructs.get(_id)
          if (_astruct != undefined) {
            astructdb.Anarrayofa.push(_astruct!)
          }
        }
        astructdb.Anotherarrayofb = new Array<BstructDB>()
        for (let _id of astructdb.AstructPointersEncoding.Anotherarrayofb) {
          let _bstruct = frontRepo.Bstructs.get(_id)
          if (_bstruct != undefined) {
            astructdb.Anotherarrayofb.push(_bstruct!)
          }
        }
        astructdb.AnarrayofbUse = new Array<AstructBstructUseDB>()
        for (let _id of astructdb.AstructPointersEncoding.AnarrayofbUse) {
          let _astructbstructuse = frontRepo.AstructBstructUses.get(_id)
          if (_astructbstructuse != undefined) {
            astructdb.AnarrayofbUse.push(_astructbstructuse!)
          }
        }
        astructdb.Anarrayofb2Use = new Array<AstructBstruct2UseDB>()
        for (let _id of astructdb.AstructPointersEncoding.Anarrayofb2Use) {
          let _astructbstruct2use = frontRepo.AstructBstruct2Uses.get(_id)
          if (_astructbstruct2use != undefined) {
            astructdb.Anarrayofb2Use.push(_astructbstruct2use!)
          }
        }
        astructdb.AnAstruct = frontRepo.Astructs.get(astructdb.AstructPointersEncoding.AnAstructID.Int64)
        // this.log(`updated astructdb id=${astructdb.ID}`)
      }),
      catchError(this.handleError<AstructDB>('updateAstruct'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in AstructService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("AstructService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
