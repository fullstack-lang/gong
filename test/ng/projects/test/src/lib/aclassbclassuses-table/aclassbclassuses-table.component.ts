// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { AclassBclassUseDB } from '../aclassbclassuse-db'
import { AclassBclassUseService } from '../aclassbclassuse.service'

import { FrontRepoService, FrontRepo } from '../front-repo.service'

// TableComponent is initilizaed from different routes
// TableComponentMode detail different cases 
enum TableComponentMode {
  DISPLAY_MODE,
  ONE_MANY_ASSOCIATION_MODE,
  MANY_MANY_ASSOCIATION_MODE,
}

// generated table component
@Component({
  selector: 'app-aclassbclassusestable',
  templateUrl: './aclassbclassuses-table.component.html',
  styleUrls: ['./aclassbclassuses-table.component.css'],
})
export class AclassBclassUsesTableComponent implements OnInit {

  // mode at invocation
  mode: TableComponentMode

  // used if the component is called as a selection component of AclassBclassUse instances
  selection: SelectionModel<AclassBclassUseDB>;
  initialSelection = new Array<AclassBclassUseDB>();

  // the data source for the table
  aclassbclassuses: AclassBclassUseDB[];
  matTableDataSource: MatTableDataSource<AclassBclassUseDB>


  // front repo, that will be referenced by this.aclassbclassuses
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {

    // enable sorting on all fields (including pointers and reverse pointer)
    this.matTableDataSource.sortingDataAccessor = (aclassbclassuseDB: AclassBclassUseDB, property: string) => {
      switch (property) {
        // insertion point for specific sorting accessor
        case 'Name':
          return aclassbclassuseDB.Name;

        case 'Bclass':
          return (aclassbclassuseDB.Bclass ? aclassbclassuseDB.Bclass.Name : '');

        case 'AnarrayofbUse':
          return this.frontRepo.Aclasss.get(aclassbclassuseDB.Aclass_AnarrayofbUseDBID.Int64)?.Name;

        default:
          return AclassBclassUseDB[property];
      }
    };

    // enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
    this.matTableDataSource.filterPredicate = (aclassbclassuseDB: AclassBclassUseDB, filter: string) => {

      // filtering is based on finding a lower case filter into a concatenated string
      // the aclassbclassuseDB properties
      let mergedContent = ""

      // insertion point for merging of fields
      mergedContent += aclassbclassuseDB.Name.toLowerCase()
      if (aclassbclassuseDB.Bclass) {
        mergedContent += aclassbclassuseDB.Bclass.Name.toLowerCase()
      }
      if (aclassbclassuseDB.Aclass_AnarrayofbUseDBID.Int64 != 0) {
        mergedContent += this.frontRepo.Aclasss.get(aclassbclassuseDB.Aclass_AnarrayofbUseDBID.Int64)?.Name.toLowerCase()
      }


      let isSelected = mergedContent.includes(filter.toLowerCase())
      return isSelected
    };

    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private aclassbclassuseService: AclassBclassUseService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of aclassbclassuse instances
    public dialogRef: MatDialogRef<AclassBclassUsesTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {

    // compute mode
    if (dialogData == undefined) {
      this.mode = TableComponentMode.DISPLAY_MODE
    } else {
      this.mode = TableComponentMode.ONE_MANY_ASSOCIATION_MODE
    }

    // observable for changes in structs
    this.aclassbclassuseService.AclassBclassUseServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getAclassBclassUses()
        }
      }
    )
    if (this.mode == TableComponentMode.DISPLAY_MODE) {
		this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "Bclass",
        "AnarrayofbUse",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "Bclass",
        "AnarrayofbUse",
      ]
      this.selection = new SelectionModel<AclassBclassUseDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getAclassBclassUses()
    this.matTableDataSource = new MatTableDataSource(this.aclassbclassuses)
  }

  getAclassBclassUses(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.aclassbclassuses = this.frontRepo.AclassBclassUses_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {
			this.aclassbclassuses.forEach(
            aclassbclassuse => {
              let ID = this.dialogData.ID
              let revPointer = aclassbclassuse[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(aclassbclassuse)
              }
            }
          )
          this.selection = new SelectionModel<AclassBclassUseDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.aclassbclassuses
      }
    )
  }

  // newAclassBclassUse initiate a new aclassbclassuse
  // create a new AclassBclassUse objet
  newAclassBclassUse() {
  }

  deleteAclassBclassUse(aclassbclassuseID: number, aclassbclassuse: AclassBclassUseDB) {
    // list of aclassbclassuses is truncated of aclassbclassuse before the delete
    this.aclassbclassuses = this.aclassbclassuses.filter(h => h !== aclassbclassuse);

    this.aclassbclassuseService.deleteAclassBclassUse(aclassbclassuseID).subscribe(
      aclassbclassuse => {
        this.aclassbclassuseService.AclassBclassUseServiceChanged.next("delete")
      }
    );
  }

  editAclassBclassUse(aclassbclassuseID: number, aclassbclassuse: AclassBclassUseDB) {

  }

  // display aclassbclassuse in router
  displayAclassBclassUseInRouter(aclassbclassuseID: number) {
    this.router.navigate(["github_com_fullstack_lang_gong_test_go-" + "aclassbclassuse-display", aclassbclassuseID])
  }

  // set editor outlet
  setEditorRouterOutlet(aclassbclassuseID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gong_test_go_editor: ["github_com_fullstack_lang_gong_test_go-" + "aclassbclassuse-detail", aclassbclassuseID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(aclassbclassuseID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gong_test_go_presentation: ["github_com_fullstack_lang_gong_test_go-" + "aclassbclassuse-presentation", aclassbclassuseID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.aclassbclassuses.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.aclassbclassuses.forEach(row => this.selection.select(row));
  }

  save() {

    let toUpdate = new Set<AclassBclassUseDB>()

    // reset all initial selection of aclassbclassuse that belong to aclassbclassuse through Anarrayofb
    this.initialSelection.forEach(
      aclassbclassuse => {
        aclassbclassuse[this.dialogData.ReversePointer].Int64 = 0
        aclassbclassuse[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(aclassbclassuse)
      }
    )

    // from selection, set aclassbclassuse that belong to aclassbclassuse through Anarrayofb
    this.selection.selected.forEach(
      aclassbclassuse => {
        let ID = +this.dialogData.ID
        aclassbclassuse[this.dialogData.ReversePointer].Int64 = ID
        aclassbclassuse[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(aclassbclassuse)
      }
    )

    // update all aclassbclassuse (only update selection & initial selection)
    toUpdate.forEach(
      aclassbclassuse => {
        this.aclassbclassuseService.updateAclassBclassUse(aclassbclassuse)
          .subscribe(aclassbclassuse => {
            this.aclassbclassuseService.AclassBclassUseServiceChanged.next("update")
          });
      }
    )
    this.dialogRef.close('Pizza!');
  }
}
