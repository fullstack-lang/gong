// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongrouter/go/models"
	"github.com/fullstack-lang/gongrouter/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Outlet__dummysDeclaration__ models.Outlet
var __Outlet_time__dummyDeclaration time.Duration

// An OutletID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getOutlet updateOutlet deleteOutlet
type OutletID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// OutletInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postOutlet updateOutlet
type OutletInput struct {
	// The Outlet to submit or modify
	// in: body
	Outlet *orm.OutletAPI
}

// GetOutlets
//
// swagger:route GET /outlets outlets getOutlets
//
// # Get all outlets
//
// Responses:
// default: genericError
//
//	200: outletDBResponse
func (controller *Controller) GetOutlets(c *gin.Context) {

	// source slice
	var outletDBs []orm.OutletDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetOutlets", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoOutlet.GetDB()

	query := db.Find(&outletDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	outletAPIs := make([]orm.OutletAPI, 0)

	// for each outlet, update fields from the database nullable fields
	for idx := range outletDBs {
		outletDB := &outletDBs[idx]
		_ = outletDB
		var outletAPI orm.OutletAPI

		// insertion point for updating fields
		outletAPI.ID = outletDB.ID
		outletDB.CopyBasicFieldsToOutlet(&outletAPI.Outlet)
		outletAPI.OutletPointersEnconding = outletDB.OutletPointersEnconding
		outletAPIs = append(outletAPIs, outletAPI)
	}

	c.JSON(http.StatusOK, outletAPIs)
}

// PostOutlet
//
// swagger:route POST /outlets outlets postOutlet
//
// Creates a outlet
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostOutlets", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoOutlet.GetDB()

	// Validate input
	var input orm.OutletAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create outlet
	outletDB := orm.OutletDB{}
	outletDB.OutletPointersEnconding = input.OutletPointersEnconding
	outletDB.CopyBasicFieldsFromOutlet(&input.Outlet)

	query := db.Create(&outletDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoOutlet.CheckoutPhaseOneInstance(&outletDB)
	outlet := backRepo.BackRepoOutlet.Map_OutletDBID_OutletPtr[outletDB.ID]

	if outlet != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), outlet)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, outletDB)
}

// GetOutlet
//
// swagger:route GET /outlets/{ID} outlets getOutlet
//
// Gets the details for a outlet.
//
// Responses:
// default: genericError
//
//	200: outletDBResponse
func (controller *Controller) GetOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoOutlet.GetDB()

	// Get outletDB in DB
	var outletDB orm.OutletDB
	if err := db.First(&outletDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var outletAPI orm.OutletAPI
	outletAPI.ID = outletDB.ID
	outletAPI.OutletPointersEnconding = outletDB.OutletPointersEnconding
	outletDB.CopyBasicFieldsToOutlet(&outletAPI.Outlet)

	c.JSON(http.StatusOK, outletAPI)
}

// UpdateOutlet
//
// swagger:route PATCH /outlets/{ID} outlets updateOutlet
//
// # Update a outlet
//
// Responses:
// default: genericError
//
//	200: outletDBResponse
func (controller *Controller) UpdateOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoOutlet.GetDB()

	// Validate input
	var input orm.OutletAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var outletDB orm.OutletDB

	// fetch the outlet
	query := db.First(&outletDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	outletDB.CopyBasicFieldsFromOutlet(&input.Outlet)
	outletDB.OutletPointersEnconding = input.OutletPointersEnconding

	query = db.Model(&outletDB).Updates(outletDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	outletNew := new(models.Outlet)
	outletDB.CopyBasicFieldsToOutlet(outletNew)

	// get stage instance from DB instance, and call callback function
	outletOld := backRepo.BackRepoOutlet.Map_OutletDBID_OutletPtr[outletDB.ID]
	if outletOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), outletOld, outletNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the outletDB
	c.JSON(http.StatusOK, outletDB)
}

// DeleteOutlet
//
// swagger:route DELETE /outlets/{ID} outlets deleteOutlet
//
// # Delete a outlet
//
// default: genericError
//
//	200: outletDBResponse
func (controller *Controller) DeleteOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoOutlet.GetDB()

	// Get model if exist
	var outletDB orm.OutletDB
	if err := db.First(&outletDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&outletDB)

	// get an instance (not staged) from DB instance, and call callback function
	outletDeleted := new(models.Outlet)
	outletDB.CopyBasicFieldsToOutlet(outletDeleted)

	// get stage instance from DB instance, and call callback function
	outletStaged := backRepo.BackRepoOutlet.Map_OutletDBID_OutletPtr[outletDB.ID]
	if outletStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), outletStaged, outletDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
