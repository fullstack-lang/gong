// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongrouter/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Outlet_sql sql.NullBool
var dummy_Outlet_time time.Duration
var dummy_Outlet_sort sort.Float64Slice

// OutletAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model outletAPI
type OutletAPI struct {
	gorm.Model

	models.Outlet

	// encoding of pointers
	OutletPointersEnconding
}

// OutletPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type OutletPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// OutletDB describes a outlet in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model outletDB
type OutletDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field outletDB.Name
	Name_Data sql.NullString

	// Declation for basic field outletDB.Path
	Path_Data sql.NullString
	// encoding of pointers
	OutletPointersEnconding
}

// OutletDBs arrays outletDBs
// swagger:response outletDBsResponse
type OutletDBs []OutletDB

// OutletDBResponse provides response
// swagger:response outletDBResponse
type OutletDBResponse struct {
	OutletDB
}

// OutletWOP is a Outlet without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type OutletWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Path string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Outlet_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Path",
}

type BackRepoOutletStruct struct {
	// stores OutletDB according to their gorm ID
	Map_OutletDBID_OutletDB map[uint]*OutletDB

	// stores OutletDB ID according to Outlet address
	Map_OutletPtr_OutletDBID map[*models.Outlet]uint

	// stores Outlet according to their gorm ID
	Map_OutletDBID_OutletPtr map[uint]*models.Outlet

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOutlet *BackRepoOutletStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOutlet.stage
	return
}

func (backRepoOutlet *BackRepoOutletStruct) GetDB() *gorm.DB {
	return backRepoOutlet.db
}

// GetOutletDBFromOutletPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOutlet *BackRepoOutletStruct) GetOutletDBFromOutletPtr(outlet *models.Outlet) (outletDB *OutletDB) {
	id := backRepoOutlet.Map_OutletPtr_OutletDBID[outlet]
	outletDB = backRepoOutlet.Map_OutletDBID_OutletDB[id]
	return
}

// BackRepoOutlet.CommitPhaseOne commits all staged instances of Outlet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOutlet *BackRepoOutletStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for outlet := range stage.Outlets {
		backRepoOutlet.CommitPhaseOneInstance(outlet)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, outlet := range backRepoOutlet.Map_OutletDBID_OutletPtr {
		if _, ok := stage.Outlets[outlet]; !ok {
			backRepoOutlet.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOutlet.CommitDeleteInstance commits deletion of Outlet to the BackRepo
func (backRepoOutlet *BackRepoOutletStruct) CommitDeleteInstance(id uint) (Error error) {

	outlet := backRepoOutlet.Map_OutletDBID_OutletPtr[id]

	// outlet is not staged anymore, remove outletDB
	outletDB := backRepoOutlet.Map_OutletDBID_OutletDB[id]
	query := backRepoOutlet.db.Unscoped().Delete(&outletDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoOutlet.Map_OutletPtr_OutletDBID, outlet)
	delete(backRepoOutlet.Map_OutletDBID_OutletPtr, id)
	delete(backRepoOutlet.Map_OutletDBID_OutletDB, id)

	return
}

// BackRepoOutlet.CommitPhaseOneInstance commits outlet staged instances of Outlet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOutlet *BackRepoOutletStruct) CommitPhaseOneInstance(outlet *models.Outlet) (Error error) {

	// check if the outlet is not commited yet
	if _, ok := backRepoOutlet.Map_OutletPtr_OutletDBID[outlet]; ok {
		return
	}

	// initiate outlet
	var outletDB OutletDB
	outletDB.CopyBasicFieldsFromOutlet(outlet)

	query := backRepoOutlet.db.Create(&outletDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoOutlet.Map_OutletPtr_OutletDBID[outlet] = outletDB.ID
	backRepoOutlet.Map_OutletDBID_OutletPtr[outletDB.ID] = outlet
	backRepoOutlet.Map_OutletDBID_OutletDB[outletDB.ID] = &outletDB

	return
}

// BackRepoOutlet.CommitPhaseTwo commits all staged instances of Outlet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOutlet *BackRepoOutletStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, outlet := range backRepoOutlet.Map_OutletDBID_OutletPtr {
		backRepoOutlet.CommitPhaseTwoInstance(backRepo, idx, outlet)
	}

	return
}

// BackRepoOutlet.CommitPhaseTwoInstance commits {{structname }} of models.Outlet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOutlet *BackRepoOutletStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, outlet *models.Outlet) (Error error) {

	// fetch matching outletDB
	if outletDB, ok := backRepoOutlet.Map_OutletDBID_OutletDB[idx]; ok {

		outletDB.CopyBasicFieldsFromOutlet(outlet)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOutlet.db.Save(&outletDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Outlet intance %s", outlet.Name))
		return err
	}

	return
}

// BackRepoOutlet.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOutlet *BackRepoOutletStruct) CheckoutPhaseOne() (Error error) {

	outletDBArray := make([]OutletDB, 0)
	query := backRepoOutlet.db.Find(&outletDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	outletInstancesToBeRemovedFromTheStage := make(map[*models.Outlet]any)
	for key, value := range backRepoOutlet.stage.Outlets {
		outletInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, outletDB := range outletDBArray {
		backRepoOutlet.CheckoutPhaseOneInstance(&outletDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		outlet, ok := backRepoOutlet.Map_OutletDBID_OutletPtr[outletDB.ID]
		if ok {
			delete(outletInstancesToBeRemovedFromTheStage, outlet)
		}
	}

	// remove from stage and back repo's 3 maps all outlets that are not in the checkout
	for outlet := range outletInstancesToBeRemovedFromTheStage {
		outlet.Unstage(backRepoOutlet.GetStage())

		// remove instance from the back repo 3 maps
		outletID := backRepoOutlet.Map_OutletPtr_OutletDBID[outlet]
		delete(backRepoOutlet.Map_OutletPtr_OutletDBID, outlet)
		delete(backRepoOutlet.Map_OutletDBID_OutletDB, outletID)
		delete(backRepoOutlet.Map_OutletDBID_OutletPtr, outletID)
	}

	return
}

// CheckoutPhaseOneInstance takes a outletDB that has been found in the DB, updates the backRepo and stages the
// models version of the outletDB
func (backRepoOutlet *BackRepoOutletStruct) CheckoutPhaseOneInstance(outletDB *OutletDB) (Error error) {

	outlet, ok := backRepoOutlet.Map_OutletDBID_OutletPtr[outletDB.ID]
	if !ok {
		outlet = new(models.Outlet)

		backRepoOutlet.Map_OutletDBID_OutletPtr[outletDB.ID] = outlet
		backRepoOutlet.Map_OutletPtr_OutletDBID[outlet] = outletDB.ID

		// append model store with the new element
		outlet.Name = outletDB.Name_Data.String
		outlet.Stage(backRepoOutlet.GetStage())
	}
	outletDB.CopyBasicFieldsToOutlet(outlet)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	outlet.Stage(backRepoOutlet.GetStage())

	// preserve pointer to outletDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_OutletDBID_OutletDB)[outletDB hold variable pointers
	outletDB_Data := *outletDB
	preservedPtrToOutlet := &outletDB_Data
	backRepoOutlet.Map_OutletDBID_OutletDB[outletDB.ID] = preservedPtrToOutlet

	return
}

// BackRepoOutlet.CheckoutPhaseTwo Checkouts all staged instances of Outlet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOutlet *BackRepoOutletStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, outletDB := range backRepoOutlet.Map_OutletDBID_OutletDB {
		backRepoOutlet.CheckoutPhaseTwoInstance(backRepo, outletDB)
	}
	return
}

// BackRepoOutlet.CheckoutPhaseTwoInstance Checkouts staged instances of Outlet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOutlet *BackRepoOutletStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, outletDB *OutletDB) (Error error) {

	outlet := backRepoOutlet.Map_OutletDBID_OutletPtr[outletDB.ID]
	_ = outlet // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitOutlet allows commit of a single outlet (if already staged)
func (backRepo *BackRepoStruct) CommitOutlet(outlet *models.Outlet) {
	backRepo.BackRepoOutlet.CommitPhaseOneInstance(outlet)
	if id, ok := backRepo.BackRepoOutlet.Map_OutletPtr_OutletDBID[outlet]; ok {
		backRepo.BackRepoOutlet.CommitPhaseTwoInstance(backRepo, id, outlet)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOutlet allows checkout of a single outlet (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOutlet(outlet *models.Outlet) {
	// check if the outlet is staged
	if _, ok := backRepo.BackRepoOutlet.Map_OutletPtr_OutletDBID[outlet]; ok {

		if id, ok := backRepo.BackRepoOutlet.Map_OutletPtr_OutletDBID[outlet]; ok {
			var outletDB OutletDB
			outletDB.ID = id

			if err := backRepo.BackRepoOutlet.db.First(&outletDB, id).Error; err != nil {
				log.Panicln("CheckoutOutlet : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOutlet.CheckoutPhaseOneInstance(&outletDB)
			backRepo.BackRepoOutlet.CheckoutPhaseTwoInstance(backRepo, &outletDB)
		}
	}
}

// CopyBasicFieldsFromOutlet
func (outletDB *OutletDB) CopyBasicFieldsFromOutlet(outlet *models.Outlet) {
	// insertion point for fields commit

	outletDB.Name_Data.String = outlet.Name
	outletDB.Name_Data.Valid = true

	outletDB.Path_Data.String = outlet.Path
	outletDB.Path_Data.Valid = true
}

// CopyBasicFieldsFromOutletWOP
func (outletDB *OutletDB) CopyBasicFieldsFromOutletWOP(outlet *OutletWOP) {
	// insertion point for fields commit

	outletDB.Name_Data.String = outlet.Name
	outletDB.Name_Data.Valid = true

	outletDB.Path_Data.String = outlet.Path
	outletDB.Path_Data.Valid = true
}

// CopyBasicFieldsToOutlet
func (outletDB *OutletDB) CopyBasicFieldsToOutlet(outlet *models.Outlet) {
	// insertion point for checkout of basic fields (back repo to stage)
	outlet.Name = outletDB.Name_Data.String
	outlet.Path = outletDB.Path_Data.String
}

// CopyBasicFieldsToOutletWOP
func (outletDB *OutletDB) CopyBasicFieldsToOutletWOP(outlet *OutletWOP) {
	outlet.ID = int(outletDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	outlet.Name = outletDB.Name_Data.String
	outlet.Path = outletDB.Path_Data.String
}

// Backup generates a json file from a slice of all OutletDB instances in the backrepo
func (backRepoOutlet *BackRepoOutletStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "OutletDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OutletDB, 0)
	for _, outletDB := range backRepoOutlet.Map_OutletDBID_OutletDB {
		forBackup = append(forBackup, outletDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Outlet ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Outlet file", err.Error())
	}
}

// Backup generates a json file from a slice of all OutletDB instances in the backrepo
func (backRepoOutlet *BackRepoOutletStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OutletDB, 0)
	for _, outletDB := range backRepoOutlet.Map_OutletDBID_OutletDB {
		forBackup = append(forBackup, outletDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Outlet")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Outlet_Fields, -1)
	for _, outletDB := range forBackup {

		var outletWOP OutletWOP
		outletDB.CopyBasicFieldsToOutletWOP(&outletWOP)

		row := sh.AddRow()
		row.WriteStruct(&outletWOP, -1)
	}
}

// RestoreXL from the "Outlet" sheet all OutletDB instances
func (backRepoOutlet *BackRepoOutletStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOutletid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Outlet"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOutlet.rowVisitorOutlet)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoOutlet *BackRepoOutletStruct) rowVisitorOutlet(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var outletWOP OutletWOP
		row.ReadStruct(&outletWOP)

		// add the unmarshalled struct to the stage
		outletDB := new(OutletDB)
		outletDB.CopyBasicFieldsFromOutletWOP(&outletWOP)

		outletDB_ID_atBackupTime := outletDB.ID
		outletDB.ID = 0
		query := backRepoOutlet.db.Create(outletDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoOutlet.Map_OutletDBID_OutletDB[outletDB.ID] = outletDB
		BackRepoOutletid_atBckpTime_newID[outletDB_ID_atBackupTime] = outletDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "OutletDB.json" in dirPath that stores an array
// of OutletDB and stores it in the database
// the map BackRepoOutletid_atBckpTime_newID is updated accordingly
func (backRepoOutlet *BackRepoOutletStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOutletid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "OutletDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Outlet file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*OutletDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_OutletDBID_OutletDB
	for _, outletDB := range forRestore {

		outletDB_ID_atBackupTime := outletDB.ID
		outletDB.ID = 0
		query := backRepoOutlet.db.Create(outletDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoOutlet.Map_OutletDBID_OutletDB[outletDB.ID] = outletDB
		BackRepoOutletid_atBckpTime_newID[outletDB_ID_atBackupTime] = outletDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Outlet file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Outlet>id_atBckpTime_newID
// to compute new index
func (backRepoOutlet *BackRepoOutletStruct) RestorePhaseTwo() {

	for _, outletDB := range backRepoOutlet.Map_OutletDBID_OutletDB {

		// next line of code is to avert unused variable compilation error
		_ = outletDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOutlet.db.Model(outletDB).Updates(*outletDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOutletid_atBckpTime_newID map[uint]uint
