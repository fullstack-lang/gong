// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Position__dummysDeclaration__ models.Position
var __Position_time__dummyDeclaration time.Duration

// An PositionID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPosition updatePosition deletePosition
type PositionID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PositionInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPosition updatePosition
type PositionInput struct {
	// The Position to submit or modify
	// in: body
	Position *orm.PositionAPI
}

// GetPositions
//
// swagger:route GET /positions positions getPositions
//
// # Get all positions
//
// Responses:
// default: genericError
//
//	200: positionDBResponse
func GetPositions(c *gin.Context) {
	db := orm.BackRepo.BackRepoPosition.GetDB()

	// source slice
	var positionDBs []orm.PositionDB
	query := db.Find(&positionDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	positionAPIs := make([]orm.PositionAPI, 0)

	// for each position, update fields from the database nullable fields
	for idx := range positionDBs {
		positionDB := &positionDBs[idx]
		_ = positionDB
		var positionAPI orm.PositionAPI

		// insertion point for updating fields
		positionAPI.ID = positionDB.ID
		positionDB.CopyBasicFieldsToPosition(&positionAPI.Position)
		positionAPI.PositionPointersEnconding = positionDB.PositionPointersEnconding
		positionAPIs = append(positionAPIs, positionAPI)
	}

	c.JSON(http.StatusOK, positionAPIs)
}

// PostPosition
//
// swagger:route POST /positions positions postPosition
//
// Creates a position
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostPosition(c *gin.Context) {
	db := orm.BackRepo.BackRepoPosition.GetDB()

	// Validate input
	var input orm.PositionAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create position
	positionDB := orm.PositionDB{}
	positionDB.PositionPointersEnconding = input.PositionPointersEnconding
	positionDB.CopyBasicFieldsFromPosition(&input.Position)

	query := db.Create(&positionDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoPosition.CheckoutPhaseOneInstance(&positionDB)
	position := (*orm.BackRepo.BackRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID]

	if position != nil {
		models.AfterCreateFromFront(&models.Stage, position)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, positionDB)
}

// GetPosition
//
// swagger:route GET /positions/{ID} positions getPosition
//
// Gets the details for a position.
//
// Responses:
// default: genericError
//
//	200: positionDBResponse
func GetPosition(c *gin.Context) {
	db := orm.BackRepo.BackRepoPosition.GetDB()

	// Get positionDB in DB
	var positionDB orm.PositionDB
	if err := db.First(&positionDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var positionAPI orm.PositionAPI
	positionAPI.ID = positionDB.ID
	positionAPI.PositionPointersEnconding = positionDB.PositionPointersEnconding
	positionDB.CopyBasicFieldsToPosition(&positionAPI.Position)

	c.JSON(http.StatusOK, positionAPI)
}

// UpdatePosition
//
// swagger:route PATCH /positions/{ID} positions updatePosition
//
// # Update a position
//
// Responses:
// default: genericError
//
//	200: positionDBResponse
func UpdatePosition(c *gin.Context) {
	db := orm.BackRepo.BackRepoPosition.GetDB()

	// Get model if exist
	var positionDB orm.PositionDB

	// fetch the position
	query := db.First(&positionDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.PositionAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	positionDB.CopyBasicFieldsFromPosition(&input.Position)
	positionDB.PositionPointersEnconding = input.PositionPointersEnconding

	query = db.Model(&positionDB).Updates(positionDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	positionNew := new(models.Position)
	positionDB.CopyBasicFieldsToPosition(positionNew)

	// get stage instance from DB instance, and call callback function
	positionOld := (*orm.BackRepo.BackRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID]
	if positionOld != nil {
		models.AfterUpdateFromFront(&models.Stage, positionOld, positionNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the positionDB
	c.JSON(http.StatusOK, positionDB)
}

// DeletePosition
//
// swagger:route DELETE /positions/{ID} positions deletePosition
//
// # Delete a position
//
// default: genericError
//
//	200: positionDBResponse
func DeletePosition(c *gin.Context) {
	db := orm.BackRepo.BackRepoPosition.GetDB()

	// Get model if exist
	var positionDB orm.PositionDB
	if err := db.First(&positionDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&positionDB)

	// get an instance (not staged) from DB instance, and call callback function
	positionDeleted := new(models.Position)
	positionDB.CopyBasicFieldsToPosition(positionDeleted)

	// get stage instance from DB instance, and call callback function
	positionStaged := (*orm.BackRepo.BackRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID]
	if positionStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, positionStaged, positionDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
