// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Note__dummysDeclaration__ models.Note
var __Note_time__dummyDeclaration time.Duration

// An NoteID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getNote updateNote deleteNote
type NoteID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// NoteInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postNote updateNote
type NoteInput struct {
	// The Note to submit or modify
	// in: body
	Note *orm.NoteAPI
}

// GetNotes
//
// swagger:route GET /notes notes getNotes
//
// Get all notes
//
// Responses:
//    default: genericError
//        200: noteDBsResponse
func GetNotes(c *gin.Context) {
	db := orm.BackRepo.BackRepoNote.GetDB()

	// source slice
	var noteDBs []orm.NoteDB
	query := db.Find(&noteDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	noteAPIs := make([]orm.NoteAPI, 0)

	// for each note, update fields from the database nullable fields
	for idx := range noteDBs {
		noteDB := &noteDBs[idx]
		_ = noteDB
		var noteAPI orm.NoteAPI

		// insertion point for updating fields
		noteAPI.ID = noteDB.ID
		noteDB.CopyBasicFieldsToNote(&noteAPI.Note)
		noteAPI.NotePointersEnconding = noteDB.NotePointersEnconding
		noteAPIs = append(noteAPIs, noteAPI)
	}

	c.JSON(http.StatusOK, noteAPIs)
}

// PostNote
//
// swagger:route POST /notes notes postNote
//
// Creates a note
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: noteDBResponse
func PostNote(c *gin.Context) {
	db := orm.BackRepo.BackRepoNote.GetDB()

	// Validate input
	var input orm.NoteAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create note
	noteDB := orm.NoteDB{}
	noteDB.NotePointersEnconding = input.NotePointersEnconding
	noteDB.CopyBasicFieldsFromNote(&input.Note)

	query := db.Create(&noteDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, noteDB)
}

// GetNote
//
// swagger:route GET /notes/{ID} notes getNote
//
// Gets the details for a note.
//
// Responses:
//    default: genericError
//        200: noteDBResponse
func GetNote(c *gin.Context) {
	db := orm.BackRepo.BackRepoNote.GetDB()

	// Get noteDB in DB
	var noteDB orm.NoteDB
	if err := db.First(&noteDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var noteAPI orm.NoteAPI
	noteAPI.ID = noteDB.ID
	noteAPI.NotePointersEnconding = noteDB.NotePointersEnconding
	noteDB.CopyBasicFieldsToNote(&noteAPI.Note)

	c.JSON(http.StatusOK, noteAPI)
}

// UpdateNote
//
// swagger:route PATCH /notes/{ID} notes updateNote
//
// Update a note
//
// Responses:
//    default: genericError
//        200: noteDBResponse
func UpdateNote(c *gin.Context) {
	db := orm.BackRepo.BackRepoNote.GetDB()

	// Get model if exist
	var noteDB orm.NoteDB

	// fetch the note
	query := db.First(&noteDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.NoteAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	noteDB.CopyBasicFieldsFromNote(&input.Note)
	noteDB.NotePointersEnconding = input.NotePointersEnconding

	query = db.Model(&noteDB).Updates(noteDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the noteDB
	c.JSON(http.StatusOK, noteDB)
}

// DeleteNote
//
// swagger:route DELETE /notes/{ID} notes deleteNote
//
// Delete a note
//
// Responses:
//    default: genericError
func DeleteNote(c *gin.Context) {
	db := orm.BackRepo.BackRepoNote.GetDB()

	// Get model if exist
	var noteDB orm.NoteDB
	if err := db.First(&noteDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&noteDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
