// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongEnumShape__dummysDeclaration__ models.GongEnumShape
var __GongEnumShape_time__dummyDeclaration time.Duration

// An GongEnumShapeID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongEnumShape updateGongEnumShape deleteGongEnumShape
type GongEnumShapeID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongEnumShapeInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongEnumShape updateGongEnumShape
type GongEnumShapeInput struct {
	// The GongEnumShape to submit or modify
	// in: body
	GongEnumShape *orm.GongEnumShapeAPI
}

// GetGongEnumShapes
//
// swagger:route GET /gongenumshapes gongenumshapes getGongEnumShapes
//
// # Get all gongenumshapes
//
// Responses:
// default: genericError
//
//	200: gongenumshapeDBResponse
func GetGongEnumShapes(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumShape.GetDB()

	// source slice
	var gongenumshapeDBs []orm.GongEnumShapeDB
	query := db.Find(&gongenumshapeDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gongenumshapeAPIs := make([]orm.GongEnumShapeAPI, 0)

	// for each gongenumshape, update fields from the database nullable fields
	for idx := range gongenumshapeDBs {
		gongenumshapeDB := &gongenumshapeDBs[idx]
		_ = gongenumshapeDB
		var gongenumshapeAPI orm.GongEnumShapeAPI

		// insertion point for updating fields
		gongenumshapeAPI.ID = gongenumshapeDB.ID
		gongenumshapeDB.CopyBasicFieldsToGongEnumShape(&gongenumshapeAPI.GongEnumShape)
		gongenumshapeAPI.GongEnumShapePointersEnconding = gongenumshapeDB.GongEnumShapePointersEnconding
		gongenumshapeAPIs = append(gongenumshapeAPIs, gongenumshapeAPI)
	}

	c.JSON(http.StatusOK, gongenumshapeAPIs)
}

// PostGongEnumShape
//
// swagger:route POST /gongenumshapes gongenumshapes postGongEnumShape
//
// Creates a gongenumshape
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostGongEnumShape(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumShape.GetDB()

	// Validate input
	var input orm.GongEnumShapeAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongenumshape
	gongenumshapeDB := orm.GongEnumShapeDB{}
	gongenumshapeDB.GongEnumShapePointersEnconding = input.GongEnumShapePointersEnconding
	gongenumshapeDB.CopyBasicFieldsFromGongEnumShape(&input.GongEnumShape)

	query := db.Create(&gongenumshapeDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoGongEnumShape.CheckoutPhaseOneInstance(&gongenumshapeDB)
	gongenumshape := (*orm.BackRepo.BackRepoGongEnumShape.Map_GongEnumShapeDBID_GongEnumShapePtr)[gongenumshapeDB.ID]

	if gongenumshape != nil {
		models.AfterCreateFromFront(&models.Stage, gongenumshape)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gongenumshapeDB)
}

// GetGongEnumShape
//
// swagger:route GET /gongenumshapes/{ID} gongenumshapes getGongEnumShape
//
// Gets the details for a gongenumshape.
//
// Responses:
// default: genericError
//
//	200: gongenumshapeDBResponse
func GetGongEnumShape(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumShape.GetDB()

	// Get gongenumshapeDB in DB
	var gongenumshapeDB orm.GongEnumShapeDB
	if err := db.First(&gongenumshapeDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gongenumshapeAPI orm.GongEnumShapeAPI
	gongenumshapeAPI.ID = gongenumshapeDB.ID
	gongenumshapeAPI.GongEnumShapePointersEnconding = gongenumshapeDB.GongEnumShapePointersEnconding
	gongenumshapeDB.CopyBasicFieldsToGongEnumShape(&gongenumshapeAPI.GongEnumShape)

	c.JSON(http.StatusOK, gongenumshapeAPI)
}

// UpdateGongEnumShape
//
// swagger:route PATCH /gongenumshapes/{ID} gongenumshapes updateGongEnumShape
//
// # Update a gongenumshape
//
// Responses:
// default: genericError
//
//	200: gongenumshapeDBResponse
func UpdateGongEnumShape(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumShape.GetDB()

	// Get model if exist
	var gongenumshapeDB orm.GongEnumShapeDB

	// fetch the gongenumshape
	query := db.First(&gongenumshapeDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongEnumShapeAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gongenumshapeDB.CopyBasicFieldsFromGongEnumShape(&input.GongEnumShape)
	gongenumshapeDB.GongEnumShapePointersEnconding = input.GongEnumShapePointersEnconding

	query = db.Model(&gongenumshapeDB).Updates(gongenumshapeDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	gongenumshapeNew := new(models.GongEnumShape)
	gongenumshapeDB.CopyBasicFieldsToGongEnumShape(gongenumshapeNew)

	// get stage instance from DB instance, and call callback function
	gongenumshapeOld := (*orm.BackRepo.BackRepoGongEnumShape.Map_GongEnumShapeDBID_GongEnumShapePtr)[gongenumshapeDB.ID]
	if gongenumshapeOld != nil {
		models.AfterUpdateFromFront(&models.Stage, gongenumshapeOld, gongenumshapeNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gongenumshapeDB
	c.JSON(http.StatusOK, gongenumshapeDB)
}

// DeleteGongEnumShape
//
// swagger:route DELETE /gongenumshapes/{ID} gongenumshapes deleteGongEnumShape
//
// # Delete a gongenumshape
//
// default: genericError
//
//	200: gongenumshapeDBResponse
func DeleteGongEnumShape(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumShape.GetDB()

	// Get model if exist
	var gongenumshapeDB orm.GongEnumShapeDB
	if err := db.First(&gongenumshapeDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongenumshapeDB)

	// get an instance (not staged) from DB instance, and call callback function
	gongenumshapeDeleted := new(models.GongEnumShape)
	gongenumshapeDB.CopyBasicFieldsToGongEnumShape(gongenumshapeDeleted)

	// get stage instance from DB instance, and call callback function
	gongenumshapeStaged := (*orm.BackRepo.BackRepoGongEnumShape.Map_GongEnumShapeDBID_GongEnumShapePtr)[gongenumshapeDB.ID]
	if gongenumshapeStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, gongenumshapeStaged, gongenumshapeDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
