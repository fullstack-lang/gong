// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongdocStatus__dummysDeclaration__ models.GongdocStatus
var __GongdocStatus_time__dummyDeclaration time.Duration

// An GongdocStatusID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongdocStatus updateGongdocStatus deleteGongdocStatus
type GongdocStatusID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongdocStatusInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongdocStatus updateGongdocStatus
type GongdocStatusInput struct {
	// The GongdocStatus to submit or modify
	// in: body
	GongdocStatus *orm.GongdocStatusAPI
}

// GetGongdocStatuss
//
// swagger:route GET /gongdocstatuss gongdocstatuss getGongdocStatuss
//
// Get all gongdocstatuss
//
// Responses:
//    default: genericError
//        200: gongdocstatusDBsResponse
func GetGongdocStatuss(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocStatus.GetDB()

	// source slice
	var gongdocstatusDBs []orm.GongdocStatusDB
	query := db.Find(&gongdocstatusDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gongdocstatusAPIs := make([]orm.GongdocStatusAPI, 0)

	// for each gongdocstatus, update fields from the database nullable fields
	for idx := range gongdocstatusDBs {
		gongdocstatusDB := &gongdocstatusDBs[idx]
		_ = gongdocstatusDB
		var gongdocstatusAPI orm.GongdocStatusAPI

		// insertion point for updating fields
		gongdocstatusAPI.ID = gongdocstatusDB.ID
		gongdocstatusDB.CopyBasicFieldsToGongdocStatus(&gongdocstatusAPI.GongdocStatus)
		gongdocstatusAPI.GongdocStatusPointersEnconding = gongdocstatusDB.GongdocStatusPointersEnconding
		gongdocstatusAPIs = append(gongdocstatusAPIs, gongdocstatusAPI)
	}

	c.JSON(http.StatusOK, gongdocstatusAPIs)
}

// PostGongdocStatus
//
// swagger:route POST /gongdocstatuss gongdocstatuss postGongdocStatus
//
// Creates a gongdocstatus
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongdocstatusDBResponse
func PostGongdocStatus(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocStatus.GetDB()

	// Validate input
	var input orm.GongdocStatusAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongdocstatus
	gongdocstatusDB := orm.GongdocStatusDB{}
	gongdocstatusDB.GongdocStatusPointersEnconding = input.GongdocStatusPointersEnconding
	gongdocstatusDB.CopyBasicFieldsFromGongdocStatus(&input.GongdocStatus)

	query := db.Create(&gongdocstatusDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gongdocstatusDB)
}

// GetGongdocStatus
//
// swagger:route GET /gongdocstatuss/{ID} gongdocstatuss getGongdocStatus
//
// Gets the details for a gongdocstatus.
//
// Responses:
//    default: genericError
//        200: gongdocstatusDBResponse
func GetGongdocStatus(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocStatus.GetDB()

	// Get gongdocstatusDB in DB
	var gongdocstatusDB orm.GongdocStatusDB
	if err := db.First(&gongdocstatusDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gongdocstatusAPI orm.GongdocStatusAPI
	gongdocstatusAPI.ID = gongdocstatusDB.ID
	gongdocstatusAPI.GongdocStatusPointersEnconding = gongdocstatusDB.GongdocStatusPointersEnconding
	gongdocstatusDB.CopyBasicFieldsToGongdocStatus(&gongdocstatusAPI.GongdocStatus)

	c.JSON(http.StatusOK, gongdocstatusAPI)
}

// UpdateGongdocStatus
//
// swagger:route PATCH /gongdocstatuss/{ID} gongdocstatuss updateGongdocStatus
//
// Update a gongdocstatus
//
// Responses:
//    default: genericError
//        200: gongdocstatusDBResponse
func UpdateGongdocStatus(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocStatus.GetDB()

	// Get model if exist
	var gongdocstatusDB orm.GongdocStatusDB

	// fetch the gongdocstatus
	query := db.First(&gongdocstatusDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongdocStatusAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gongdocstatusDB.CopyBasicFieldsFromGongdocStatus(&input.GongdocStatus)
	gongdocstatusDB.GongdocStatusPointersEnconding = input.GongdocStatusPointersEnconding

	query = db.Model(&gongdocstatusDB).Updates(gongdocstatusDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gongdocstatusDB
	c.JSON(http.StatusOK, gongdocstatusDB)
}

// DeleteGongdocStatus
//
// swagger:route DELETE /gongdocstatuss/{ID} gongdocstatuss deleteGongdocStatus
//
// Delete a gongdocstatus
//
// Responses:
//    default: genericError
func DeleteGongdocStatus(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocStatus.GetDB()

	// Get model if exist
	var gongdocstatusDB orm.GongdocStatusDB
	if err := db.First(&gongdocstatusDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongdocstatusDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
