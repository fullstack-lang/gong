// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Classdiagram__dummysDeclaration__ models.Classdiagram
var __Classdiagram_time__dummyDeclaration time.Duration

// An ClassdiagramID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getClassdiagram updateClassdiagram deleteClassdiagram
type ClassdiagramID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ClassdiagramInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postClassdiagram updateClassdiagram
type ClassdiagramInput struct {
	// The Classdiagram to submit or modify
	// in: body
	Classdiagram *orm.ClassdiagramAPI
}

// GetClassdiagrams
//
// swagger:route GET /classdiagrams classdiagrams getClassdiagrams
//
// # Get all classdiagrams
//
// Responses:
// default: genericError
//
//	200: classdiagramDBResponse
func GetClassdiagrams(c *gin.Context) {
	db := orm.BackRepo.BackRepoClassdiagram.GetDB()

	// source slice
	var classdiagramDBs []orm.ClassdiagramDB
	query := db.Find(&classdiagramDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	classdiagramAPIs := make([]orm.ClassdiagramAPI, 0)

	// for each classdiagram, update fields from the database nullable fields
	for idx := range classdiagramDBs {
		classdiagramDB := &classdiagramDBs[idx]
		_ = classdiagramDB
		var classdiagramAPI orm.ClassdiagramAPI

		// insertion point for updating fields
		classdiagramAPI.ID = classdiagramDB.ID
		classdiagramDB.CopyBasicFieldsToClassdiagram(&classdiagramAPI.Classdiagram)
		classdiagramAPI.ClassdiagramPointersEnconding = classdiagramDB.ClassdiagramPointersEnconding
		classdiagramAPIs = append(classdiagramAPIs, classdiagramAPI)
	}

	c.JSON(http.StatusOK, classdiagramAPIs)
}

// PostClassdiagram
//
// swagger:route POST /classdiagrams classdiagrams postClassdiagram
//
// Creates a classdiagram
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostClassdiagram(c *gin.Context) {
	db := orm.BackRepo.BackRepoClassdiagram.GetDB()

	// Validate input
	var input orm.ClassdiagramAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create classdiagram
	classdiagramDB := orm.ClassdiagramDB{}
	classdiagramDB.ClassdiagramPointersEnconding = input.ClassdiagramPointersEnconding
	classdiagramDB.CopyBasicFieldsFromClassdiagram(&input.Classdiagram)

	query := db.Create(&classdiagramDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoClassdiagram.CheckoutPhaseOneInstance(&classdiagramDB)
	classdiagram := (*orm.BackRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB.ID]

	if classdiagram != nil {
		models.AfterCreateFromFront(&models.Stage, classdiagram)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, classdiagramDB)
}

// GetClassdiagram
//
// swagger:route GET /classdiagrams/{ID} classdiagrams getClassdiagram
//
// Gets the details for a classdiagram.
//
// Responses:
// default: genericError
//
//	200: classdiagramDBResponse
func GetClassdiagram(c *gin.Context) {
	db := orm.BackRepo.BackRepoClassdiagram.GetDB()

	// Get classdiagramDB in DB
	var classdiagramDB orm.ClassdiagramDB
	if err := db.First(&classdiagramDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var classdiagramAPI orm.ClassdiagramAPI
	classdiagramAPI.ID = classdiagramDB.ID
	classdiagramAPI.ClassdiagramPointersEnconding = classdiagramDB.ClassdiagramPointersEnconding
	classdiagramDB.CopyBasicFieldsToClassdiagram(&classdiagramAPI.Classdiagram)

	c.JSON(http.StatusOK, classdiagramAPI)
}

// UpdateClassdiagram
//
// swagger:route PATCH /classdiagrams/{ID} classdiagrams updateClassdiagram
//
// # Update a classdiagram
//
// Responses:
// default: genericError
//
//	200: classdiagramDBResponse
func UpdateClassdiagram(c *gin.Context) {
	db := orm.BackRepo.BackRepoClassdiagram.GetDB()

	// Get model if exist
	var classdiagramDB orm.ClassdiagramDB

	// fetch the classdiagram
	query := db.First(&classdiagramDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ClassdiagramAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	classdiagramDB.CopyBasicFieldsFromClassdiagram(&input.Classdiagram)
	classdiagramDB.ClassdiagramPointersEnconding = input.ClassdiagramPointersEnconding

	query = db.Model(&classdiagramDB).Updates(classdiagramDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	classdiagramNew := new(models.Classdiagram)
	classdiagramDB.CopyBasicFieldsToClassdiagram(classdiagramNew)

	// get stage instance from DB instance, and call callback function
	classdiagramOld := (*orm.BackRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB.ID]
	if classdiagramOld != nil {
		models.AfterUpdateFromFront(&models.Stage, classdiagramOld, classdiagramNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the classdiagramDB
	c.JSON(http.StatusOK, classdiagramDB)
}

// DeleteClassdiagram
//
// swagger:route DELETE /classdiagrams/{ID} classdiagrams deleteClassdiagram
//
// # Delete a classdiagram
//
// default: genericError
//
//	200: classdiagramDBResponse
func DeleteClassdiagram(c *gin.Context) {
	db := orm.BackRepo.BackRepoClassdiagram.GetDB()

	// Get model if exist
	var classdiagramDB orm.ClassdiagramDB
	if err := db.First(&classdiagramDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&classdiagramDB)

	// get an instance (not staged) from DB instance, and call callback function
	classdiagramDeleted := new(models.Classdiagram)
	classdiagramDB.CopyBasicFieldsToClassdiagram(classdiagramDeleted)

	// get stage instance from DB instance, and call callback function
	classdiagramStaged := (*orm.BackRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB.ID]
	if classdiagramStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, classdiagramStaged, classdiagramDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
