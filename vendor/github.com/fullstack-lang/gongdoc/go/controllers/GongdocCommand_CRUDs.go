// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongdocCommand__dummysDeclaration__ models.GongdocCommand
var __GongdocCommand_time__dummyDeclaration time.Duration

// An GongdocCommandID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongdocCommand updateGongdocCommand deleteGongdocCommand
type GongdocCommandID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongdocCommandInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongdocCommand updateGongdocCommand
type GongdocCommandInput struct {
	// The GongdocCommand to submit or modify
	// in: body
	GongdocCommand *orm.GongdocCommandAPI
}

// GetGongdocCommands
//
// swagger:route GET /gongdoccommands gongdoccommands getGongdocCommands
//
// Get all gongdoccommands
//
// Responses:
//    default: genericError
//        200: gongdoccommandDBsResponse
func GetGongdocCommands(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocCommand.GetDB()

	// source slice
	var gongdoccommandDBs []orm.GongdocCommandDB
	query := db.Find(&gongdoccommandDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gongdoccommandAPIs := make([]orm.GongdocCommandAPI, 0)

	// for each gongdoccommand, update fields from the database nullable fields
	for idx := range gongdoccommandDBs {
		gongdoccommandDB := &gongdoccommandDBs[idx]
		_ = gongdoccommandDB
		var gongdoccommandAPI orm.GongdocCommandAPI

		// insertion point for updating fields
		gongdoccommandAPI.ID = gongdoccommandDB.ID
		gongdoccommandDB.CopyBasicFieldsToGongdocCommand(&gongdoccommandAPI.GongdocCommand)
		gongdoccommandAPI.GongdocCommandPointersEnconding = gongdoccommandDB.GongdocCommandPointersEnconding
		gongdoccommandAPIs = append(gongdoccommandAPIs, gongdoccommandAPI)
	}

	c.JSON(http.StatusOK, gongdoccommandAPIs)
}

// PostGongdocCommand
//
// swagger:route POST /gongdoccommands gongdoccommands postGongdocCommand
//
// Creates a gongdoccommand
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongdoccommandDBResponse
func PostGongdocCommand(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocCommand.GetDB()

	// Validate input
	var input orm.GongdocCommandAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongdoccommand
	gongdoccommandDB := orm.GongdocCommandDB{}
	gongdoccommandDB.GongdocCommandPointersEnconding = input.GongdocCommandPointersEnconding
	gongdoccommandDB.CopyBasicFieldsFromGongdocCommand(&input.GongdocCommand)

	query := db.Create(&gongdoccommandDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gongdoccommandDB)
}

// GetGongdocCommand
//
// swagger:route GET /gongdoccommands/{ID} gongdoccommands getGongdocCommand
//
// Gets the details for a gongdoccommand.
//
// Responses:
//    default: genericError
//        200: gongdoccommandDBResponse
func GetGongdocCommand(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocCommand.GetDB()

	// Get gongdoccommandDB in DB
	var gongdoccommandDB orm.GongdocCommandDB
	if err := db.First(&gongdoccommandDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gongdoccommandAPI orm.GongdocCommandAPI
	gongdoccommandAPI.ID = gongdoccommandDB.ID
	gongdoccommandAPI.GongdocCommandPointersEnconding = gongdoccommandDB.GongdocCommandPointersEnconding
	gongdoccommandDB.CopyBasicFieldsToGongdocCommand(&gongdoccommandAPI.GongdocCommand)

	c.JSON(http.StatusOK, gongdoccommandAPI)
}

// UpdateGongdocCommand
//
// swagger:route PATCH /gongdoccommands/{ID} gongdoccommands updateGongdocCommand
//
// Update a gongdoccommand
//
// Responses:
//    default: genericError
//        200: gongdoccommandDBResponse
func UpdateGongdocCommand(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocCommand.GetDB()

	// Get model if exist
	var gongdoccommandDB orm.GongdocCommandDB

	// fetch the gongdoccommand
	query := db.First(&gongdoccommandDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongdocCommandAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gongdoccommandDB.CopyBasicFieldsFromGongdocCommand(&input.GongdocCommand)
	gongdoccommandDB.GongdocCommandPointersEnconding = input.GongdocCommandPointersEnconding

	query = db.Model(&gongdoccommandDB).Updates(gongdoccommandDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gongdoccommandDB
	c.JSON(http.StatusOK, gongdoccommandDB)
}

// DeleteGongdocCommand
//
// swagger:route DELETE /gongdoccommands/{ID} gongdoccommands deleteGongdocCommand
//
// Delete a gongdoccommand
//
// Responses:
//    default: genericError
func DeleteGongdocCommand(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongdocCommand.GetDB()

	// Get model if exist
	var gongdoccommandDB orm.GongdocCommandDB
	if err := db.First(&gongdoccommandDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongdoccommandDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
