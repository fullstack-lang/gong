// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __DiagramPackage__dummysDeclaration__ models.DiagramPackage
var __DiagramPackage_time__dummyDeclaration time.Duration

// An DiagramPackageID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getDiagramPackage updateDiagramPackage deleteDiagramPackage
type DiagramPackageID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// DiagramPackageInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postDiagramPackage updateDiagramPackage
type DiagramPackageInput struct {
	// The DiagramPackage to submit or modify
	// in: body
	DiagramPackage *orm.DiagramPackageAPI
}

// GetDiagramPackages
//
// swagger:route GET /diagrampackages diagrampackages getDiagramPackages
//
// # Get all diagrampackages
//
// Responses:
// default: genericError
//
//	200: diagrampackageDBResponse
func GetDiagramPackages(c *gin.Context) {
	db := orm.BackRepo.BackRepoDiagramPackage.GetDB()

	// source slice
	var diagrampackageDBs []orm.DiagramPackageDB
	query := db.Find(&diagrampackageDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	diagrampackageAPIs := make([]orm.DiagramPackageAPI, 0)

	// for each diagrampackage, update fields from the database nullable fields
	for idx := range diagrampackageDBs {
		diagrampackageDB := &diagrampackageDBs[idx]
		_ = diagrampackageDB
		var diagrampackageAPI orm.DiagramPackageAPI

		// insertion point for updating fields
		diagrampackageAPI.ID = diagrampackageDB.ID
		diagrampackageDB.CopyBasicFieldsToDiagramPackage(&diagrampackageAPI.DiagramPackage)
		diagrampackageAPI.DiagramPackagePointersEnconding = diagrampackageDB.DiagramPackagePointersEnconding
		diagrampackageAPIs = append(diagrampackageAPIs, diagrampackageAPI)
	}

	c.JSON(http.StatusOK, diagrampackageAPIs)
}

// PostDiagramPackage
//
// swagger:route POST /diagrampackages diagrampackages postDiagramPackage
//
// Creates a diagrampackage
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostDiagramPackage(c *gin.Context) {
	db := orm.BackRepo.BackRepoDiagramPackage.GetDB()

	// Validate input
	var input orm.DiagramPackageAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create diagrampackage
	diagrampackageDB := orm.DiagramPackageDB{}
	diagrampackageDB.DiagramPackagePointersEnconding = input.DiagramPackagePointersEnconding
	diagrampackageDB.CopyBasicFieldsFromDiagramPackage(&input.DiagramPackage)

	query := db.Create(&diagrampackageDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoDiagramPackage.CheckoutPhaseOneInstance(&diagrampackageDB)
	diagrampackage := (*orm.BackRepo.BackRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[diagrampackageDB.ID]

	if diagrampackage != nil {
		models.AfterCreateFromFront(&models.Stage, diagrampackage)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, diagrampackageDB)
}

// GetDiagramPackage
//
// swagger:route GET /diagrampackages/{ID} diagrampackages getDiagramPackage
//
// Gets the details for a diagrampackage.
//
// Responses:
// default: genericError
//
//	200: diagrampackageDBResponse
func GetDiagramPackage(c *gin.Context) {
	db := orm.BackRepo.BackRepoDiagramPackage.GetDB()

	// Get diagrampackageDB in DB
	var diagrampackageDB orm.DiagramPackageDB
	if err := db.First(&diagrampackageDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var diagrampackageAPI orm.DiagramPackageAPI
	diagrampackageAPI.ID = diagrampackageDB.ID
	diagrampackageAPI.DiagramPackagePointersEnconding = diagrampackageDB.DiagramPackagePointersEnconding
	diagrampackageDB.CopyBasicFieldsToDiagramPackage(&diagrampackageAPI.DiagramPackage)

	c.JSON(http.StatusOK, diagrampackageAPI)
}

// UpdateDiagramPackage
//
// swagger:route PATCH /diagrampackages/{ID} diagrampackages updateDiagramPackage
//
// # Update a diagrampackage
//
// Responses:
// default: genericError
//
//	200: diagrampackageDBResponse
func UpdateDiagramPackage(c *gin.Context) {
	db := orm.BackRepo.BackRepoDiagramPackage.GetDB()

	// Get model if exist
	var diagrampackageDB orm.DiagramPackageDB

	// fetch the diagrampackage
	query := db.First(&diagrampackageDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.DiagramPackageAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	diagrampackageDB.CopyBasicFieldsFromDiagramPackage(&input.DiagramPackage)
	diagrampackageDB.DiagramPackagePointersEnconding = input.DiagramPackagePointersEnconding

	query = db.Model(&diagrampackageDB).Updates(diagrampackageDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	diagrampackageNew := new(models.DiagramPackage)
	diagrampackageDB.CopyBasicFieldsToDiagramPackage(diagrampackageNew)

	// get stage instance from DB instance, and call callback function
	diagrampackageOld := (*orm.BackRepo.BackRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[diagrampackageDB.ID]
	if diagrampackageOld != nil {
		models.AfterUpdateFromFront(&models.Stage, diagrampackageOld, diagrampackageNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the diagrampackageDB
	c.JSON(http.StatusOK, diagrampackageDB)
}

// DeleteDiagramPackage
//
// swagger:route DELETE /diagrampackages/{ID} diagrampackages deleteDiagramPackage
//
// # Delete a diagrampackage
//
// default: genericError
//
//	200: diagrampackageDBResponse
func DeleteDiagramPackage(c *gin.Context) {
	db := orm.BackRepo.BackRepoDiagramPackage.GetDB()

	// Get model if exist
	var diagrampackageDB orm.DiagramPackageDB
	if err := db.First(&diagrampackageDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&diagrampackageDB)

	// get an instance (not staged) from DB instance, and call callback function
	diagrampackageDeleted := new(models.DiagramPackage)
	diagrampackageDB.CopyBasicFieldsToDiagramPackage(diagrampackageDeleted)

	// get stage instance from DB instance, and call callback function
	diagrampackageStaged := (*orm.BackRepo.BackRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[diagrampackageDB.ID]
	if diagrampackageStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, diagrampackageStaged, diagrampackageDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
