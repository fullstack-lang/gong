// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Umlsc__dummysDeclaration__ models.Umlsc
var __Umlsc_time__dummyDeclaration time.Duration

// An UmlscID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getUmlsc updateUmlsc deleteUmlsc
type UmlscID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// UmlscInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postUmlsc updateUmlsc
type UmlscInput struct {
	// The Umlsc to submit or modify
	// in: body
	Umlsc *orm.UmlscAPI
}

// GetUmlscs
//
// swagger:route GET /umlscs umlscs getUmlscs
//
// # Get all umlscs
//
// Responses:
// default: genericError
//
//	200: umlscDBResponse
func GetUmlscs(c *gin.Context) {
	db := orm.BackRepo.BackRepoUmlsc.GetDB()

	// source slice
	var umlscDBs []orm.UmlscDB
	query := db.Find(&umlscDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	umlscAPIs := make([]orm.UmlscAPI, 0)

	// for each umlsc, update fields from the database nullable fields
	for idx := range umlscDBs {
		umlscDB := &umlscDBs[idx]
		_ = umlscDB
		var umlscAPI orm.UmlscAPI

		// insertion point for updating fields
		umlscAPI.ID = umlscDB.ID
		umlscDB.CopyBasicFieldsToUmlsc(&umlscAPI.Umlsc)
		umlscAPI.UmlscPointersEnconding = umlscDB.UmlscPointersEnconding
		umlscAPIs = append(umlscAPIs, umlscAPI)
	}

	c.JSON(http.StatusOK, umlscAPIs)
}

// PostUmlsc
//
// swagger:route POST /umlscs umlscs postUmlsc
//
// Creates a umlsc
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostUmlsc(c *gin.Context) {
	db := orm.BackRepo.BackRepoUmlsc.GetDB()

	// Validate input
	var input orm.UmlscAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create umlsc
	umlscDB := orm.UmlscDB{}
	umlscDB.UmlscPointersEnconding = input.UmlscPointersEnconding
	umlscDB.CopyBasicFieldsFromUmlsc(&input.Umlsc)

	query := db.Create(&umlscDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoUmlsc.CheckoutPhaseOneInstance(&umlscDB)
	umlsc := (*orm.BackRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscPtr)[umlscDB.ID]

	if umlsc != nil {
		models.AfterCreateFromFront(&models.Stage, umlsc)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, umlscDB)
}

// GetUmlsc
//
// swagger:route GET /umlscs/{ID} umlscs getUmlsc
//
// Gets the details for a umlsc.
//
// Responses:
// default: genericError
//
//	200: umlscDBResponse
func GetUmlsc(c *gin.Context) {
	db := orm.BackRepo.BackRepoUmlsc.GetDB()

	// Get umlscDB in DB
	var umlscDB orm.UmlscDB
	if err := db.First(&umlscDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var umlscAPI orm.UmlscAPI
	umlscAPI.ID = umlscDB.ID
	umlscAPI.UmlscPointersEnconding = umlscDB.UmlscPointersEnconding
	umlscDB.CopyBasicFieldsToUmlsc(&umlscAPI.Umlsc)

	c.JSON(http.StatusOK, umlscAPI)
}

// UpdateUmlsc
//
// swagger:route PATCH /umlscs/{ID} umlscs updateUmlsc
//
// # Update a umlsc
//
// Responses:
// default: genericError
//
//	200: umlscDBResponse
func UpdateUmlsc(c *gin.Context) {
	db := orm.BackRepo.BackRepoUmlsc.GetDB()

	// Get model if exist
	var umlscDB orm.UmlscDB

	// fetch the umlsc
	query := db.First(&umlscDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.UmlscAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	umlscDB.CopyBasicFieldsFromUmlsc(&input.Umlsc)
	umlscDB.UmlscPointersEnconding = input.UmlscPointersEnconding

	query = db.Model(&umlscDB).Updates(umlscDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	umlscNew := new(models.Umlsc)
	umlscDB.CopyBasicFieldsToUmlsc(umlscNew)

	// get stage instance from DB instance, and call callback function
	umlscOld := (*orm.BackRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscPtr)[umlscDB.ID]
	if umlscOld != nil {
		models.AfterUpdateFromFront(&models.Stage, umlscOld, umlscNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the umlscDB
	c.JSON(http.StatusOK, umlscDB)
}

// DeleteUmlsc
//
// swagger:route DELETE /umlscs/{ID} umlscs deleteUmlsc
//
// # Delete a umlsc
//
// default: genericError
//
//	200: umlscDBResponse
func DeleteUmlsc(c *gin.Context) {
	db := orm.BackRepo.BackRepoUmlsc.GetDB()

	// Get model if exist
	var umlscDB orm.UmlscDB
	if err := db.First(&umlscDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&umlscDB)

	// get an instance (not staged) from DB instance, and call callback function
	umlscDeleted := new(models.Umlsc)
	umlscDB.CopyBasicFieldsToUmlsc(umlscDeleted)

	// get stage instance from DB instance, and call callback function
	umlscStaged := (*orm.BackRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscPtr)[umlscDB.ID]
	if umlscStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, umlscStaged, umlscDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
