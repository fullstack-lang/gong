// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __NoteLink__dummysDeclaration__ models.NoteLink
var __NoteLink_time__dummyDeclaration time.Duration

// An NoteLinkID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getNoteLink updateNoteLink deleteNoteLink
type NoteLinkID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// NoteLinkInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postNoteLink updateNoteLink
type NoteLinkInput struct {
	// The NoteLink to submit or modify
	// in: body
	NoteLink *orm.NoteLinkAPI
}

// GetNoteLinks
//
// swagger:route GET /notelinks notelinks getNoteLinks
//
// # Get all notelinks
//
// Responses:
// default: genericError
//
//	200: notelinkDBResponse
func GetNoteLinks(c *gin.Context) {
	db := orm.BackRepo.BackRepoNoteLink.GetDB()

	// source slice
	var notelinkDBs []orm.NoteLinkDB
	query := db.Find(&notelinkDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	notelinkAPIs := make([]orm.NoteLinkAPI, 0)

	// for each notelink, update fields from the database nullable fields
	for idx := range notelinkDBs {
		notelinkDB := &notelinkDBs[idx]
		_ = notelinkDB
		var notelinkAPI orm.NoteLinkAPI

		// insertion point for updating fields
		notelinkAPI.ID = notelinkDB.ID
		notelinkDB.CopyBasicFieldsToNoteLink(&notelinkAPI.NoteLink)
		notelinkAPI.NoteLinkPointersEnconding = notelinkDB.NoteLinkPointersEnconding
		notelinkAPIs = append(notelinkAPIs, notelinkAPI)
	}

	c.JSON(http.StatusOK, notelinkAPIs)
}

// PostNoteLink
//
// swagger:route POST /notelinks notelinks postNoteLink
//
// Creates a notelink
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostNoteLink(c *gin.Context) {
	db := orm.BackRepo.BackRepoNoteLink.GetDB()

	// Validate input
	var input orm.NoteLinkAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create notelink
	notelinkDB := orm.NoteLinkDB{}
	notelinkDB.NoteLinkPointersEnconding = input.NoteLinkPointersEnconding
	notelinkDB.CopyBasicFieldsFromNoteLink(&input.NoteLink)

	query := db.Create(&notelinkDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoNoteLink.CheckoutPhaseOneInstance(&notelinkDB)
	notelink := (*orm.BackRepo.BackRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[notelinkDB.ID]

	if notelink != nil {
		models.AfterCreateFromFront(&models.Stage, notelink)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, notelinkDB)
}

// GetNoteLink
//
// swagger:route GET /notelinks/{ID} notelinks getNoteLink
//
// Gets the details for a notelink.
//
// Responses:
// default: genericError
//
//	200: notelinkDBResponse
func GetNoteLink(c *gin.Context) {
	db := orm.BackRepo.BackRepoNoteLink.GetDB()

	// Get notelinkDB in DB
	var notelinkDB orm.NoteLinkDB
	if err := db.First(&notelinkDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var notelinkAPI orm.NoteLinkAPI
	notelinkAPI.ID = notelinkDB.ID
	notelinkAPI.NoteLinkPointersEnconding = notelinkDB.NoteLinkPointersEnconding
	notelinkDB.CopyBasicFieldsToNoteLink(&notelinkAPI.NoteLink)

	c.JSON(http.StatusOK, notelinkAPI)
}

// UpdateNoteLink
//
// swagger:route PATCH /notelinks/{ID} notelinks updateNoteLink
//
// # Update a notelink
//
// Responses:
// default: genericError
//
//	200: notelinkDBResponse
func UpdateNoteLink(c *gin.Context) {
	db := orm.BackRepo.BackRepoNoteLink.GetDB()

	// Get model if exist
	var notelinkDB orm.NoteLinkDB

	// fetch the notelink
	query := db.First(&notelinkDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.NoteLinkAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	notelinkDB.CopyBasicFieldsFromNoteLink(&input.NoteLink)
	notelinkDB.NoteLinkPointersEnconding = input.NoteLinkPointersEnconding

	query = db.Model(&notelinkDB).Updates(notelinkDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	notelinkNew := new(models.NoteLink)
	notelinkDB.CopyBasicFieldsToNoteLink(notelinkNew)

	// get stage instance from DB instance, and call callback function
	notelinkOld := (*orm.BackRepo.BackRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[notelinkDB.ID]
	if notelinkOld != nil {
		models.AfterUpdateFromFront(&models.Stage, notelinkOld, notelinkNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the notelinkDB
	c.JSON(http.StatusOK, notelinkDB)
}

// DeleteNoteLink
//
// swagger:route DELETE /notelinks/{ID} notelinks deleteNoteLink
//
// # Delete a notelink
//
// default: genericError
//
//	200: notelinkDBResponse
func DeleteNoteLink(c *gin.Context) {
	db := orm.BackRepo.BackRepoNoteLink.GetDB()

	// Get model if exist
	var notelinkDB orm.NoteLinkDB
	if err := db.First(&notelinkDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&notelinkDB)

	// get an instance (not staged) from DB instance, and call callback function
	notelinkDeleted := new(models.NoteLink)
	notelinkDB.CopyBasicFieldsToNoteLink(notelinkDeleted)

	// get stage instance from DB instance, and call callback function
	notelinkStaged := (*orm.BackRepo.BackRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[notelinkDB.ID]
	if notelinkStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, notelinkStaged, notelinkDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
