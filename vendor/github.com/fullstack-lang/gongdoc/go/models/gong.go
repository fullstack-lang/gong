// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Classdiagrams           map[*Classdiagram]any
	Classdiagrams_mapString map[string]*Classdiagram

	OnAfterClassdiagramCreateCallback OnAfterCreateInterface[Classdiagram]
	OnAfterClassdiagramUpdateCallback OnAfterUpdateInterface[Classdiagram]
	OnAfterClassdiagramDeleteCallback OnAfterDeleteInterface[Classdiagram]
	OnAfterClassdiagramReadCallback   OnAfterReadInterface[Classdiagram]

	Classshapes           map[*Classshape]any
	Classshapes_mapString map[string]*Classshape

	OnAfterClassshapeCreateCallback OnAfterCreateInterface[Classshape]
	OnAfterClassshapeUpdateCallback OnAfterUpdateInterface[Classshape]
	OnAfterClassshapeDeleteCallback OnAfterDeleteInterface[Classshape]
	OnAfterClassshapeReadCallback   OnAfterReadInterface[Classshape]

	DiagramPackages           map[*DiagramPackage]any
	DiagramPackages_mapString map[string]*DiagramPackage

	OnAfterDiagramPackageCreateCallback OnAfterCreateInterface[DiagramPackage]
	OnAfterDiagramPackageUpdateCallback OnAfterUpdateInterface[DiagramPackage]
	OnAfterDiagramPackageDeleteCallback OnAfterDeleteInterface[DiagramPackage]
	OnAfterDiagramPackageReadCallback   OnAfterReadInterface[DiagramPackage]

	Fields           map[*Field]any
	Fields_mapString map[string]*Field

	OnAfterFieldCreateCallback OnAfterCreateInterface[Field]
	OnAfterFieldUpdateCallback OnAfterUpdateInterface[Field]
	OnAfterFieldDeleteCallback OnAfterDeleteInterface[Field]
	OnAfterFieldReadCallback   OnAfterReadInterface[Field]

	Links           map[*Link]any
	Links_mapString map[string]*Link

	OnAfterLinkCreateCallback OnAfterCreateInterface[Link]
	OnAfterLinkUpdateCallback OnAfterUpdateInterface[Link]
	OnAfterLinkDeleteCallback OnAfterDeleteInterface[Link]
	OnAfterLinkReadCallback   OnAfterReadInterface[Link]

	Nodes           map[*Node]any
	Nodes_mapString map[string]*Node

	OnAfterNodeCreateCallback OnAfterCreateInterface[Node]
	OnAfterNodeUpdateCallback OnAfterUpdateInterface[Node]
	OnAfterNodeDeleteCallback OnAfterDeleteInterface[Node]
	OnAfterNodeReadCallback   OnAfterReadInterface[Node]

	NoteShapes           map[*NoteShape]any
	NoteShapes_mapString map[string]*NoteShape

	OnAfterNoteShapeCreateCallback OnAfterCreateInterface[NoteShape]
	OnAfterNoteShapeUpdateCallback OnAfterUpdateInterface[NoteShape]
	OnAfterNoteShapeDeleteCallback OnAfterDeleteInterface[NoteShape]
	OnAfterNoteShapeReadCallback   OnAfterReadInterface[NoteShape]

	Positions           map[*Position]any
	Positions_mapString map[string]*Position

	OnAfterPositionCreateCallback OnAfterCreateInterface[Position]
	OnAfterPositionUpdateCallback OnAfterUpdateInterface[Position]
	OnAfterPositionDeleteCallback OnAfterDeleteInterface[Position]
	OnAfterPositionReadCallback   OnAfterReadInterface[Position]

	References           map[*Reference]any
	References_mapString map[string]*Reference

	OnAfterReferenceCreateCallback OnAfterCreateInterface[Reference]
	OnAfterReferenceUpdateCallback OnAfterUpdateInterface[Reference]
	OnAfterReferenceDeleteCallback OnAfterDeleteInterface[Reference]
	OnAfterReferenceReadCallback   OnAfterReadInterface[Reference]

	Trees           map[*Tree]any
	Trees_mapString map[string]*Tree

	OnAfterTreeCreateCallback OnAfterCreateInterface[Tree]
	OnAfterTreeUpdateCallback OnAfterUpdateInterface[Tree]
	OnAfterTreeDeleteCallback OnAfterDeleteInterface[Tree]
	OnAfterTreeReadCallback   OnAfterReadInterface[Tree]

	UmlStates           map[*UmlState]any
	UmlStates_mapString map[string]*UmlState

	OnAfterUmlStateCreateCallback OnAfterCreateInterface[UmlState]
	OnAfterUmlStateUpdateCallback OnAfterUpdateInterface[UmlState]
	OnAfterUmlStateDeleteCallback OnAfterDeleteInterface[UmlState]
	OnAfterUmlStateReadCallback   OnAfterReadInterface[UmlState]

	Umlscs           map[*Umlsc]any
	Umlscs_mapString map[string]*Umlsc

	OnAfterUmlscCreateCallback OnAfterCreateInterface[Umlsc]
	OnAfterUmlscUpdateCallback OnAfterUpdateInterface[Umlsc]
	OnAfterUmlscDeleteCallback OnAfterDeleteInterface[Umlsc]
	OnAfterUmlscReadCallback   OnAfterReadInterface[Umlsc]

	Vertices           map[*Vertice]any
	Vertices_mapString map[string]*Vertice

	OnAfterVerticeCreateCallback OnAfterCreateInterface[Vertice]
	OnAfterVerticeUpdateCallback OnAfterUpdateInterface[Vertice]
	OnAfterVerticeDeleteCallback OnAfterDeleteInterface[Vertice]
	OnAfterVerticeReadCallback   OnAfterReadInterface[Vertice]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitClassdiagram(classdiagram *Classdiagram)
	CheckoutClassdiagram(classdiagram *Classdiagram)
	CommitClassshape(classshape *Classshape)
	CheckoutClassshape(classshape *Classshape)
	CommitDiagramPackage(diagrampackage *DiagramPackage)
	CheckoutDiagramPackage(diagrampackage *DiagramPackage)
	CommitField(field *Field)
	CheckoutField(field *Field)
	CommitLink(link *Link)
	CheckoutLink(link *Link)
	CommitNode(node *Node)
	CheckoutNode(node *Node)
	CommitNoteShape(noteshape *NoteShape)
	CheckoutNoteShape(noteshape *NoteShape)
	CommitPosition(position *Position)
	CheckoutPosition(position *Position)
	CommitReference(reference *Reference)
	CheckoutReference(reference *Reference)
	CommitTree(tree *Tree)
	CheckoutTree(tree *Tree)
	CommitUmlState(umlstate *UmlState)
	CheckoutUmlState(umlstate *UmlState)
	CommitUmlsc(umlsc *Umlsc)
	CheckoutUmlsc(umlsc *Umlsc)
	CommitVertice(vertice *Vertice)
	CheckoutVertice(vertice *Vertice)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Classdiagrams:           make(map[*Classdiagram]any),
	Classdiagrams_mapString: make(map[string]*Classdiagram),

	Classshapes:           make(map[*Classshape]any),
	Classshapes_mapString: make(map[string]*Classshape),

	DiagramPackages:           make(map[*DiagramPackage]any),
	DiagramPackages_mapString: make(map[string]*DiagramPackage),

	Fields:           make(map[*Field]any),
	Fields_mapString: make(map[string]*Field),

	Links:           make(map[*Link]any),
	Links_mapString: make(map[string]*Link),

	Nodes:           make(map[*Node]any),
	Nodes_mapString: make(map[string]*Node),

	NoteShapes:           make(map[*NoteShape]any),
	NoteShapes_mapString: make(map[string]*NoteShape),

	Positions:           make(map[*Position]any),
	Positions_mapString: make(map[string]*Position),

	References:           make(map[*Reference]any),
	References_mapString: make(map[string]*Reference),

	Trees:           make(map[*Tree]any),
	Trees_mapString: make(map[string]*Tree),

	UmlStates:           make(map[*UmlState]any),
	UmlStates_mapString: make(map[string]*UmlState),

	Umlscs:           make(map[*Umlsc]any),
	Umlscs_mapString: make(map[string]*Umlsc),

	Vertices:           make(map[*Vertice]any),
	Vertices_mapString: make(map[string]*Vertice),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Classdiagram"] = len(stage.Classdiagrams)
	stage.Map_GongStructName_InstancesNb["Classshape"] = len(stage.Classshapes)
	stage.Map_GongStructName_InstancesNb["DiagramPackage"] = len(stage.DiagramPackages)
	stage.Map_GongStructName_InstancesNb["Field"] = len(stage.Fields)
	stage.Map_GongStructName_InstancesNb["Link"] = len(stage.Links)
	stage.Map_GongStructName_InstancesNb["Node"] = len(stage.Nodes)
	stage.Map_GongStructName_InstancesNb["NoteShape"] = len(stage.NoteShapes)
	stage.Map_GongStructName_InstancesNb["Position"] = len(stage.Positions)
	stage.Map_GongStructName_InstancesNb["Reference"] = len(stage.References)
	stage.Map_GongStructName_InstancesNb["Tree"] = len(stage.Trees)
	stage.Map_GongStructName_InstancesNb["UmlState"] = len(stage.UmlStates)
	stage.Map_GongStructName_InstancesNb["Umlsc"] = len(stage.Umlscs)
	stage.Map_GongStructName_InstancesNb["Vertice"] = len(stage.Vertices)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Classdiagram"] = len(stage.Classdiagrams)
	stage.Map_GongStructName_InstancesNb["Classshape"] = len(stage.Classshapes)
	stage.Map_GongStructName_InstancesNb["DiagramPackage"] = len(stage.DiagramPackages)
	stage.Map_GongStructName_InstancesNb["Field"] = len(stage.Fields)
	stage.Map_GongStructName_InstancesNb["Link"] = len(stage.Links)
	stage.Map_GongStructName_InstancesNb["Node"] = len(stage.Nodes)
	stage.Map_GongStructName_InstancesNb["NoteShape"] = len(stage.NoteShapes)
	stage.Map_GongStructName_InstancesNb["Position"] = len(stage.Positions)
	stage.Map_GongStructName_InstancesNb["Reference"] = len(stage.References)
	stage.Map_GongStructName_InstancesNb["Tree"] = len(stage.Trees)
	stage.Map_GongStructName_InstancesNb["UmlState"] = len(stage.UmlStates)
	stage.Map_GongStructName_InstancesNb["Umlsc"] = len(stage.Umlscs)
	stage.Map_GongStructName_InstancesNb["Vertice"] = len(stage.Vertices)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts classdiagram to the model stage
func (classdiagram *Classdiagram) Stage() *Classdiagram {
	Stage.Classdiagrams[classdiagram] = __member
	Stage.Classdiagrams_mapString[classdiagram.Name] = classdiagram

	return classdiagram
}

// Unstage removes classdiagram off the model stage
func (classdiagram *Classdiagram) Unstage() *Classdiagram {
	delete(Stage.Classdiagrams, classdiagram)
	delete(Stage.Classdiagrams_mapString, classdiagram.Name)
	return classdiagram
}

// commit classdiagram to the back repo (if it is already staged)
func (classdiagram *Classdiagram) Commit() *Classdiagram {
	if _, ok := Stage.Classdiagrams[classdiagram]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitClassdiagram(classdiagram)
		}
	}
	return classdiagram
}

// Checkout classdiagram to the back repo (if it is already staged)
func (classdiagram *Classdiagram) Checkout() *Classdiagram {
	if _, ok := Stage.Classdiagrams[classdiagram]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutClassdiagram(classdiagram)
		}
	}
	return classdiagram
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of classdiagram to the model stage
func (classdiagram *Classdiagram) StageCopy() *Classdiagram {
	_classdiagram := new(Classdiagram)
	*_classdiagram = *classdiagram
	_classdiagram.Stage()
	return _classdiagram
}

// StageAndCommit appends classdiagram to the model stage and commit to the orm repo
func (classdiagram *Classdiagram) StageAndCommit() *Classdiagram {
	classdiagram.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMClassdiagram(classdiagram)
	}
	return classdiagram
}

// DeleteStageAndCommit appends classdiagram to the model stage and commit to the orm repo
func (classdiagram *Classdiagram) DeleteStageAndCommit() *Classdiagram {
	classdiagram.Unstage()
	DeleteORMClassdiagram(classdiagram)
	return classdiagram
}

// StageCopyAndCommit appends a copy of classdiagram to the model stage and commit to the orm repo
func (classdiagram *Classdiagram) StageCopyAndCommit() *Classdiagram {
	_classdiagram := new(Classdiagram)
	*_classdiagram = *classdiagram
	_classdiagram.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMClassdiagram(classdiagram)
	}
	return _classdiagram
}

// CreateORMClassdiagram enables dynamic staging of a Classdiagram instance
func CreateORMClassdiagram(classdiagram *Classdiagram) {
	classdiagram.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMClassdiagram(classdiagram)
	}
}

// DeleteORMClassdiagram enables dynamic staging of a Classdiagram instance
func DeleteORMClassdiagram(classdiagram *Classdiagram) {
	classdiagram.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMClassdiagram(classdiagram)
	}
}

// for satisfaction of GongStruct interface
func (classdiagram *Classdiagram) GetName() (res string) {
	return classdiagram.Name
}

// Stage puts classshape to the model stage
func (classshape *Classshape) Stage() *Classshape {
	Stage.Classshapes[classshape] = __member
	Stage.Classshapes_mapString[classshape.Name] = classshape

	return classshape
}

// Unstage removes classshape off the model stage
func (classshape *Classshape) Unstage() *Classshape {
	delete(Stage.Classshapes, classshape)
	delete(Stage.Classshapes_mapString, classshape.Name)
	return classshape
}

// commit classshape to the back repo (if it is already staged)
func (classshape *Classshape) Commit() *Classshape {
	if _, ok := Stage.Classshapes[classshape]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitClassshape(classshape)
		}
	}
	return classshape
}

// Checkout classshape to the back repo (if it is already staged)
func (classshape *Classshape) Checkout() *Classshape {
	if _, ok := Stage.Classshapes[classshape]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutClassshape(classshape)
		}
	}
	return classshape
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of classshape to the model stage
func (classshape *Classshape) StageCopy() *Classshape {
	_classshape := new(Classshape)
	*_classshape = *classshape
	_classshape.Stage()
	return _classshape
}

// StageAndCommit appends classshape to the model stage and commit to the orm repo
func (classshape *Classshape) StageAndCommit() *Classshape {
	classshape.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMClassshape(classshape)
	}
	return classshape
}

// DeleteStageAndCommit appends classshape to the model stage and commit to the orm repo
func (classshape *Classshape) DeleteStageAndCommit() *Classshape {
	classshape.Unstage()
	DeleteORMClassshape(classshape)
	return classshape
}

// StageCopyAndCommit appends a copy of classshape to the model stage and commit to the orm repo
func (classshape *Classshape) StageCopyAndCommit() *Classshape {
	_classshape := new(Classshape)
	*_classshape = *classshape
	_classshape.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMClassshape(classshape)
	}
	return _classshape
}

// CreateORMClassshape enables dynamic staging of a Classshape instance
func CreateORMClassshape(classshape *Classshape) {
	classshape.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMClassshape(classshape)
	}
}

// DeleteORMClassshape enables dynamic staging of a Classshape instance
func DeleteORMClassshape(classshape *Classshape) {
	classshape.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMClassshape(classshape)
	}
}

// for satisfaction of GongStruct interface
func (classshape *Classshape) GetName() (res string) {
	return classshape.Name
}

// Stage puts diagrampackage to the model stage
func (diagrampackage *DiagramPackage) Stage() *DiagramPackage {
	Stage.DiagramPackages[diagrampackage] = __member
	Stage.DiagramPackages_mapString[diagrampackage.Name] = diagrampackage

	return diagrampackage
}

// Unstage removes diagrampackage off the model stage
func (diagrampackage *DiagramPackage) Unstage() *DiagramPackage {
	delete(Stage.DiagramPackages, diagrampackage)
	delete(Stage.DiagramPackages_mapString, diagrampackage.Name)
	return diagrampackage
}

// commit diagrampackage to the back repo (if it is already staged)
func (diagrampackage *DiagramPackage) Commit() *DiagramPackage {
	if _, ok := Stage.DiagramPackages[diagrampackage]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDiagramPackage(diagrampackage)
		}
	}
	return diagrampackage
}

// Checkout diagrampackage to the back repo (if it is already staged)
func (diagrampackage *DiagramPackage) Checkout() *DiagramPackage {
	if _, ok := Stage.DiagramPackages[diagrampackage]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDiagramPackage(diagrampackage)
		}
	}
	return diagrampackage
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of diagrampackage to the model stage
func (diagrampackage *DiagramPackage) StageCopy() *DiagramPackage {
	_diagrampackage := new(DiagramPackage)
	*_diagrampackage = *diagrampackage
	_diagrampackage.Stage()
	return _diagrampackage
}

// StageAndCommit appends diagrampackage to the model stage and commit to the orm repo
func (diagrampackage *DiagramPackage) StageAndCommit() *DiagramPackage {
	diagrampackage.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDiagramPackage(diagrampackage)
	}
	return diagrampackage
}

// DeleteStageAndCommit appends diagrampackage to the model stage and commit to the orm repo
func (diagrampackage *DiagramPackage) DeleteStageAndCommit() *DiagramPackage {
	diagrampackage.Unstage()
	DeleteORMDiagramPackage(diagrampackage)
	return diagrampackage
}

// StageCopyAndCommit appends a copy of diagrampackage to the model stage and commit to the orm repo
func (diagrampackage *DiagramPackage) StageCopyAndCommit() *DiagramPackage {
	_diagrampackage := new(DiagramPackage)
	*_diagrampackage = *diagrampackage
	_diagrampackage.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDiagramPackage(diagrampackage)
	}
	return _diagrampackage
}

// CreateORMDiagramPackage enables dynamic staging of a DiagramPackage instance
func CreateORMDiagramPackage(diagrampackage *DiagramPackage) {
	diagrampackage.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDiagramPackage(diagrampackage)
	}
}

// DeleteORMDiagramPackage enables dynamic staging of a DiagramPackage instance
func DeleteORMDiagramPackage(diagrampackage *DiagramPackage) {
	diagrampackage.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDiagramPackage(diagrampackage)
	}
}

// for satisfaction of GongStruct interface
func (diagrampackage *DiagramPackage) GetName() (res string) {
	return diagrampackage.Name
}

// Stage puts field to the model stage
func (field *Field) Stage() *Field {
	Stage.Fields[field] = __member
	Stage.Fields_mapString[field.Name] = field

	return field
}

// Unstage removes field off the model stage
func (field *Field) Unstage() *Field {
	delete(Stage.Fields, field)
	delete(Stage.Fields_mapString, field.Name)
	return field
}

// commit field to the back repo (if it is already staged)
func (field *Field) Commit() *Field {
	if _, ok := Stage.Fields[field]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitField(field)
		}
	}
	return field
}

// Checkout field to the back repo (if it is already staged)
func (field *Field) Checkout() *Field {
	if _, ok := Stage.Fields[field]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutField(field)
		}
	}
	return field
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of field to the model stage
func (field *Field) StageCopy() *Field {
	_field := new(Field)
	*_field = *field
	_field.Stage()
	return _field
}

// StageAndCommit appends field to the model stage and commit to the orm repo
func (field *Field) StageAndCommit() *Field {
	field.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMField(field)
	}
	return field
}

// DeleteStageAndCommit appends field to the model stage and commit to the orm repo
func (field *Field) DeleteStageAndCommit() *Field {
	field.Unstage()
	DeleteORMField(field)
	return field
}

// StageCopyAndCommit appends a copy of field to the model stage and commit to the orm repo
func (field *Field) StageCopyAndCommit() *Field {
	_field := new(Field)
	*_field = *field
	_field.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMField(field)
	}
	return _field
}

// CreateORMField enables dynamic staging of a Field instance
func CreateORMField(field *Field) {
	field.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMField(field)
	}
}

// DeleteORMField enables dynamic staging of a Field instance
func DeleteORMField(field *Field) {
	field.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMField(field)
	}
}

// for satisfaction of GongStruct interface
func (field *Field) GetName() (res string) {
	return field.Name
}

// Stage puts link to the model stage
func (link *Link) Stage() *Link {
	Stage.Links[link] = __member
	Stage.Links_mapString[link.Name] = link

	return link
}

// Unstage removes link off the model stage
func (link *Link) Unstage() *Link {
	delete(Stage.Links, link)
	delete(Stage.Links_mapString, link.Name)
	return link
}

// commit link to the back repo (if it is already staged)
func (link *Link) Commit() *Link {
	if _, ok := Stage.Links[link]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLink(link)
		}
	}
	return link
}

// Checkout link to the back repo (if it is already staged)
func (link *Link) Checkout() *Link {
	if _, ok := Stage.Links[link]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLink(link)
		}
	}
	return link
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of link to the model stage
func (link *Link) StageCopy() *Link {
	_link := new(Link)
	*_link = *link
	_link.Stage()
	return _link
}

// StageAndCommit appends link to the model stage and commit to the orm repo
func (link *Link) StageAndCommit() *Link {
	link.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLink(link)
	}
	return link
}

// DeleteStageAndCommit appends link to the model stage and commit to the orm repo
func (link *Link) DeleteStageAndCommit() *Link {
	link.Unstage()
	DeleteORMLink(link)
	return link
}

// StageCopyAndCommit appends a copy of link to the model stage and commit to the orm repo
func (link *Link) StageCopyAndCommit() *Link {
	_link := new(Link)
	*_link = *link
	_link.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLink(link)
	}
	return _link
}

// CreateORMLink enables dynamic staging of a Link instance
func CreateORMLink(link *Link) {
	link.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLink(link)
	}
}

// DeleteORMLink enables dynamic staging of a Link instance
func DeleteORMLink(link *Link) {
	link.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLink(link)
	}
}

// for satisfaction of GongStruct interface
func (link *Link) GetName() (res string) {
	return link.Name
}

// Stage puts node to the model stage
func (node *Node) Stage() *Node {
	Stage.Nodes[node] = __member
	Stage.Nodes_mapString[node.Name] = node

	return node
}

// Unstage removes node off the model stage
func (node *Node) Unstage() *Node {
	delete(Stage.Nodes, node)
	delete(Stage.Nodes_mapString, node.Name)
	return node
}

// commit node to the back repo (if it is already staged)
func (node *Node) Commit() *Node {
	if _, ok := Stage.Nodes[node]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitNode(node)
		}
	}
	return node
}

// Checkout node to the back repo (if it is already staged)
func (node *Node) Checkout() *Node {
	if _, ok := Stage.Nodes[node]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutNode(node)
		}
	}
	return node
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of node to the model stage
func (node *Node) StageCopy() *Node {
	_node := new(Node)
	*_node = *node
	_node.Stage()
	return _node
}

// StageAndCommit appends node to the model stage and commit to the orm repo
func (node *Node) StageAndCommit() *Node {
	node.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMNode(node)
	}
	return node
}

// DeleteStageAndCommit appends node to the model stage and commit to the orm repo
func (node *Node) DeleteStageAndCommit() *Node {
	node.Unstage()
	DeleteORMNode(node)
	return node
}

// StageCopyAndCommit appends a copy of node to the model stage and commit to the orm repo
func (node *Node) StageCopyAndCommit() *Node {
	_node := new(Node)
	*_node = *node
	_node.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMNode(node)
	}
	return _node
}

// CreateORMNode enables dynamic staging of a Node instance
func CreateORMNode(node *Node) {
	node.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMNode(node)
	}
}

// DeleteORMNode enables dynamic staging of a Node instance
func DeleteORMNode(node *Node) {
	node.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMNode(node)
	}
}

// for satisfaction of GongStruct interface
func (node *Node) GetName() (res string) {
	return node.Name
}

// Stage puts noteshape to the model stage
func (noteshape *NoteShape) Stage() *NoteShape {
	Stage.NoteShapes[noteshape] = __member
	Stage.NoteShapes_mapString[noteshape.Name] = noteshape

	return noteshape
}

// Unstage removes noteshape off the model stage
func (noteshape *NoteShape) Unstage() *NoteShape {
	delete(Stage.NoteShapes, noteshape)
	delete(Stage.NoteShapes_mapString, noteshape.Name)
	return noteshape
}

// commit noteshape to the back repo (if it is already staged)
func (noteshape *NoteShape) Commit() *NoteShape {
	if _, ok := Stage.NoteShapes[noteshape]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitNoteShape(noteshape)
		}
	}
	return noteshape
}

// Checkout noteshape to the back repo (if it is already staged)
func (noteshape *NoteShape) Checkout() *NoteShape {
	if _, ok := Stage.NoteShapes[noteshape]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutNoteShape(noteshape)
		}
	}
	return noteshape
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of noteshape to the model stage
func (noteshape *NoteShape) StageCopy() *NoteShape {
	_noteshape := new(NoteShape)
	*_noteshape = *noteshape
	_noteshape.Stage()
	return _noteshape
}

// StageAndCommit appends noteshape to the model stage and commit to the orm repo
func (noteshape *NoteShape) StageAndCommit() *NoteShape {
	noteshape.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMNoteShape(noteshape)
	}
	return noteshape
}

// DeleteStageAndCommit appends noteshape to the model stage and commit to the orm repo
func (noteshape *NoteShape) DeleteStageAndCommit() *NoteShape {
	noteshape.Unstage()
	DeleteORMNoteShape(noteshape)
	return noteshape
}

// StageCopyAndCommit appends a copy of noteshape to the model stage and commit to the orm repo
func (noteshape *NoteShape) StageCopyAndCommit() *NoteShape {
	_noteshape := new(NoteShape)
	*_noteshape = *noteshape
	_noteshape.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMNoteShape(noteshape)
	}
	return _noteshape
}

// CreateORMNoteShape enables dynamic staging of a NoteShape instance
func CreateORMNoteShape(noteshape *NoteShape) {
	noteshape.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMNoteShape(noteshape)
	}
}

// DeleteORMNoteShape enables dynamic staging of a NoteShape instance
func DeleteORMNoteShape(noteshape *NoteShape) {
	noteshape.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMNoteShape(noteshape)
	}
}

// for satisfaction of GongStruct interface
func (noteshape *NoteShape) GetName() (res string) {
	return noteshape.Name
}

// Stage puts position to the model stage
func (position *Position) Stage() *Position {
	Stage.Positions[position] = __member
	Stage.Positions_mapString[position.Name] = position

	return position
}

// Unstage removes position off the model stage
func (position *Position) Unstage() *Position {
	delete(Stage.Positions, position)
	delete(Stage.Positions_mapString, position.Name)
	return position
}

// commit position to the back repo (if it is already staged)
func (position *Position) Commit() *Position {
	if _, ok := Stage.Positions[position]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitPosition(position)
		}
	}
	return position
}

// Checkout position to the back repo (if it is already staged)
func (position *Position) Checkout() *Position {
	if _, ok := Stage.Positions[position]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutPosition(position)
		}
	}
	return position
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of position to the model stage
func (position *Position) StageCopy() *Position {
	_position := new(Position)
	*_position = *position
	_position.Stage()
	return _position
}

// StageAndCommit appends position to the model stage and commit to the orm repo
func (position *Position) StageAndCommit() *Position {
	position.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPosition(position)
	}
	return position
}

// DeleteStageAndCommit appends position to the model stage and commit to the orm repo
func (position *Position) DeleteStageAndCommit() *Position {
	position.Unstage()
	DeleteORMPosition(position)
	return position
}

// StageCopyAndCommit appends a copy of position to the model stage and commit to the orm repo
func (position *Position) StageCopyAndCommit() *Position {
	_position := new(Position)
	*_position = *position
	_position.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPosition(position)
	}
	return _position
}

// CreateORMPosition enables dynamic staging of a Position instance
func CreateORMPosition(position *Position) {
	position.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPosition(position)
	}
}

// DeleteORMPosition enables dynamic staging of a Position instance
func DeleteORMPosition(position *Position) {
	position.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMPosition(position)
	}
}

// for satisfaction of GongStruct interface
func (position *Position) GetName() (res string) {
	return position.Name
}

// Stage puts reference to the model stage
func (reference *Reference) Stage() *Reference {
	Stage.References[reference] = __member
	Stage.References_mapString[reference.Name] = reference

	return reference
}

// Unstage removes reference off the model stage
func (reference *Reference) Unstage() *Reference {
	delete(Stage.References, reference)
	delete(Stage.References_mapString, reference.Name)
	return reference
}

// commit reference to the back repo (if it is already staged)
func (reference *Reference) Commit() *Reference {
	if _, ok := Stage.References[reference]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitReference(reference)
		}
	}
	return reference
}

// Checkout reference to the back repo (if it is already staged)
func (reference *Reference) Checkout() *Reference {
	if _, ok := Stage.References[reference]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutReference(reference)
		}
	}
	return reference
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of reference to the model stage
func (reference *Reference) StageCopy() *Reference {
	_reference := new(Reference)
	*_reference = *reference
	_reference.Stage()
	return _reference
}

// StageAndCommit appends reference to the model stage and commit to the orm repo
func (reference *Reference) StageAndCommit() *Reference {
	reference.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMReference(reference)
	}
	return reference
}

// DeleteStageAndCommit appends reference to the model stage and commit to the orm repo
func (reference *Reference) DeleteStageAndCommit() *Reference {
	reference.Unstage()
	DeleteORMReference(reference)
	return reference
}

// StageCopyAndCommit appends a copy of reference to the model stage and commit to the orm repo
func (reference *Reference) StageCopyAndCommit() *Reference {
	_reference := new(Reference)
	*_reference = *reference
	_reference.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMReference(reference)
	}
	return _reference
}

// CreateORMReference enables dynamic staging of a Reference instance
func CreateORMReference(reference *Reference) {
	reference.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMReference(reference)
	}
}

// DeleteORMReference enables dynamic staging of a Reference instance
func DeleteORMReference(reference *Reference) {
	reference.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMReference(reference)
	}
}

// for satisfaction of GongStruct interface
func (reference *Reference) GetName() (res string) {
	return reference.Name
}

// Stage puts tree to the model stage
func (tree *Tree) Stage() *Tree {
	Stage.Trees[tree] = __member
	Stage.Trees_mapString[tree.Name] = tree

	return tree
}

// Unstage removes tree off the model stage
func (tree *Tree) Unstage() *Tree {
	delete(Stage.Trees, tree)
	delete(Stage.Trees_mapString, tree.Name)
	return tree
}

// commit tree to the back repo (if it is already staged)
func (tree *Tree) Commit() *Tree {
	if _, ok := Stage.Trees[tree]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitTree(tree)
		}
	}
	return tree
}

// Checkout tree to the back repo (if it is already staged)
func (tree *Tree) Checkout() *Tree {
	if _, ok := Stage.Trees[tree]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutTree(tree)
		}
	}
	return tree
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of tree to the model stage
func (tree *Tree) StageCopy() *Tree {
	_tree := new(Tree)
	*_tree = *tree
	_tree.Stage()
	return _tree
}

// StageAndCommit appends tree to the model stage and commit to the orm repo
func (tree *Tree) StageAndCommit() *Tree {
	tree.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTree(tree)
	}
	return tree
}

// DeleteStageAndCommit appends tree to the model stage and commit to the orm repo
func (tree *Tree) DeleteStageAndCommit() *Tree {
	tree.Unstage()
	DeleteORMTree(tree)
	return tree
}

// StageCopyAndCommit appends a copy of tree to the model stage and commit to the orm repo
func (tree *Tree) StageCopyAndCommit() *Tree {
	_tree := new(Tree)
	*_tree = *tree
	_tree.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTree(tree)
	}
	return _tree
}

// CreateORMTree enables dynamic staging of a Tree instance
func CreateORMTree(tree *Tree) {
	tree.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTree(tree)
	}
}

// DeleteORMTree enables dynamic staging of a Tree instance
func DeleteORMTree(tree *Tree) {
	tree.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMTree(tree)
	}
}

// for satisfaction of GongStruct interface
func (tree *Tree) GetName() (res string) {
	return tree.Name
}

// Stage puts umlstate to the model stage
func (umlstate *UmlState) Stage() *UmlState {
	Stage.UmlStates[umlstate] = __member
	Stage.UmlStates_mapString[umlstate.Name] = umlstate

	return umlstate
}

// Unstage removes umlstate off the model stage
func (umlstate *UmlState) Unstage() *UmlState {
	delete(Stage.UmlStates, umlstate)
	delete(Stage.UmlStates_mapString, umlstate.Name)
	return umlstate
}

// commit umlstate to the back repo (if it is already staged)
func (umlstate *UmlState) Commit() *UmlState {
	if _, ok := Stage.UmlStates[umlstate]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitUmlState(umlstate)
		}
	}
	return umlstate
}

// Checkout umlstate to the back repo (if it is already staged)
func (umlstate *UmlState) Checkout() *UmlState {
	if _, ok := Stage.UmlStates[umlstate]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutUmlState(umlstate)
		}
	}
	return umlstate
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of umlstate to the model stage
func (umlstate *UmlState) StageCopy() *UmlState {
	_umlstate := new(UmlState)
	*_umlstate = *umlstate
	_umlstate.Stage()
	return _umlstate
}

// StageAndCommit appends umlstate to the model stage and commit to the orm repo
func (umlstate *UmlState) StageAndCommit() *UmlState {
	umlstate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUmlState(umlstate)
	}
	return umlstate
}

// DeleteStageAndCommit appends umlstate to the model stage and commit to the orm repo
func (umlstate *UmlState) DeleteStageAndCommit() *UmlState {
	umlstate.Unstage()
	DeleteORMUmlState(umlstate)
	return umlstate
}

// StageCopyAndCommit appends a copy of umlstate to the model stage and commit to the orm repo
func (umlstate *UmlState) StageCopyAndCommit() *UmlState {
	_umlstate := new(UmlState)
	*_umlstate = *umlstate
	_umlstate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUmlState(umlstate)
	}
	return _umlstate
}

// CreateORMUmlState enables dynamic staging of a UmlState instance
func CreateORMUmlState(umlstate *UmlState) {
	umlstate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUmlState(umlstate)
	}
}

// DeleteORMUmlState enables dynamic staging of a UmlState instance
func DeleteORMUmlState(umlstate *UmlState) {
	umlstate.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMUmlState(umlstate)
	}
}

// for satisfaction of GongStruct interface
func (umlstate *UmlState) GetName() (res string) {
	return umlstate.Name
}

// Stage puts umlsc to the model stage
func (umlsc *Umlsc) Stage() *Umlsc {
	Stage.Umlscs[umlsc] = __member
	Stage.Umlscs_mapString[umlsc.Name] = umlsc

	return umlsc
}

// Unstage removes umlsc off the model stage
func (umlsc *Umlsc) Unstage() *Umlsc {
	delete(Stage.Umlscs, umlsc)
	delete(Stage.Umlscs_mapString, umlsc.Name)
	return umlsc
}

// commit umlsc to the back repo (if it is already staged)
func (umlsc *Umlsc) Commit() *Umlsc {
	if _, ok := Stage.Umlscs[umlsc]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitUmlsc(umlsc)
		}
	}
	return umlsc
}

// Checkout umlsc to the back repo (if it is already staged)
func (umlsc *Umlsc) Checkout() *Umlsc {
	if _, ok := Stage.Umlscs[umlsc]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutUmlsc(umlsc)
		}
	}
	return umlsc
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of umlsc to the model stage
func (umlsc *Umlsc) StageCopy() *Umlsc {
	_umlsc := new(Umlsc)
	*_umlsc = *umlsc
	_umlsc.Stage()
	return _umlsc
}

// StageAndCommit appends umlsc to the model stage and commit to the orm repo
func (umlsc *Umlsc) StageAndCommit() *Umlsc {
	umlsc.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUmlsc(umlsc)
	}
	return umlsc
}

// DeleteStageAndCommit appends umlsc to the model stage and commit to the orm repo
func (umlsc *Umlsc) DeleteStageAndCommit() *Umlsc {
	umlsc.Unstage()
	DeleteORMUmlsc(umlsc)
	return umlsc
}

// StageCopyAndCommit appends a copy of umlsc to the model stage and commit to the orm repo
func (umlsc *Umlsc) StageCopyAndCommit() *Umlsc {
	_umlsc := new(Umlsc)
	*_umlsc = *umlsc
	_umlsc.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUmlsc(umlsc)
	}
	return _umlsc
}

// CreateORMUmlsc enables dynamic staging of a Umlsc instance
func CreateORMUmlsc(umlsc *Umlsc) {
	umlsc.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUmlsc(umlsc)
	}
}

// DeleteORMUmlsc enables dynamic staging of a Umlsc instance
func DeleteORMUmlsc(umlsc *Umlsc) {
	umlsc.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMUmlsc(umlsc)
	}
}

// for satisfaction of GongStruct interface
func (umlsc *Umlsc) GetName() (res string) {
	return umlsc.Name
}

// Stage puts vertice to the model stage
func (vertice *Vertice) Stage() *Vertice {
	Stage.Vertices[vertice] = __member
	Stage.Vertices_mapString[vertice.Name] = vertice

	return vertice
}

// Unstage removes vertice off the model stage
func (vertice *Vertice) Unstage() *Vertice {
	delete(Stage.Vertices, vertice)
	delete(Stage.Vertices_mapString, vertice.Name)
	return vertice
}

// commit vertice to the back repo (if it is already staged)
func (vertice *Vertice) Commit() *Vertice {
	if _, ok := Stage.Vertices[vertice]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitVertice(vertice)
		}
	}
	return vertice
}

// Checkout vertice to the back repo (if it is already staged)
func (vertice *Vertice) Checkout() *Vertice {
	if _, ok := Stage.Vertices[vertice]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutVertice(vertice)
		}
	}
	return vertice
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of vertice to the model stage
func (vertice *Vertice) StageCopy() *Vertice {
	_vertice := new(Vertice)
	*_vertice = *vertice
	_vertice.Stage()
	return _vertice
}

// StageAndCommit appends vertice to the model stage and commit to the orm repo
func (vertice *Vertice) StageAndCommit() *Vertice {
	vertice.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVertice(vertice)
	}
	return vertice
}

// DeleteStageAndCommit appends vertice to the model stage and commit to the orm repo
func (vertice *Vertice) DeleteStageAndCommit() *Vertice {
	vertice.Unstage()
	DeleteORMVertice(vertice)
	return vertice
}

// StageCopyAndCommit appends a copy of vertice to the model stage and commit to the orm repo
func (vertice *Vertice) StageCopyAndCommit() *Vertice {
	_vertice := new(Vertice)
	*_vertice = *vertice
	_vertice.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVertice(vertice)
	}
	return _vertice
}

// CreateORMVertice enables dynamic staging of a Vertice instance
func CreateORMVertice(vertice *Vertice) {
	vertice.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVertice(vertice)
	}
}

// DeleteORMVertice enables dynamic staging of a Vertice instance
func DeleteORMVertice(vertice *Vertice) {
	vertice.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMVertice(vertice)
	}
}

// for satisfaction of GongStruct interface
func (vertice *Vertice) GetName() (res string) {
	return vertice.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMClassdiagram(Classdiagram *Classdiagram)
	CreateORMClassshape(Classshape *Classshape)
	CreateORMDiagramPackage(DiagramPackage *DiagramPackage)
	CreateORMField(Field *Field)
	CreateORMLink(Link *Link)
	CreateORMNode(Node *Node)
	CreateORMNoteShape(NoteShape *NoteShape)
	CreateORMPosition(Position *Position)
	CreateORMReference(Reference *Reference)
	CreateORMTree(Tree *Tree)
	CreateORMUmlState(UmlState *UmlState)
	CreateORMUmlsc(Umlsc *Umlsc)
	CreateORMVertice(Vertice *Vertice)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMClassdiagram(Classdiagram *Classdiagram)
	DeleteORMClassshape(Classshape *Classshape)
	DeleteORMDiagramPackage(DiagramPackage *DiagramPackage)
	DeleteORMField(Field *Field)
	DeleteORMLink(Link *Link)
	DeleteORMNode(Node *Node)
	DeleteORMNoteShape(NoteShape *NoteShape)
	DeleteORMPosition(Position *Position)
	DeleteORMReference(Reference *Reference)
	DeleteORMTree(Tree *Tree)
	DeleteORMUmlState(UmlState *UmlState)
	DeleteORMUmlsc(Umlsc *Umlsc)
	DeleteORMVertice(Vertice *Vertice)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Classdiagrams = make(map[*Classdiagram]any)
	stage.Classdiagrams_mapString = make(map[string]*Classdiagram)

	stage.Classshapes = make(map[*Classshape]any)
	stage.Classshapes_mapString = make(map[string]*Classshape)

	stage.DiagramPackages = make(map[*DiagramPackage]any)
	stage.DiagramPackages_mapString = make(map[string]*DiagramPackage)

	stage.Fields = make(map[*Field]any)
	stage.Fields_mapString = make(map[string]*Field)

	stage.Links = make(map[*Link]any)
	stage.Links_mapString = make(map[string]*Link)

	stage.Nodes = make(map[*Node]any)
	stage.Nodes_mapString = make(map[string]*Node)

	stage.NoteShapes = make(map[*NoteShape]any)
	stage.NoteShapes_mapString = make(map[string]*NoteShape)

	stage.Positions = make(map[*Position]any)
	stage.Positions_mapString = make(map[string]*Position)

	stage.References = make(map[*Reference]any)
	stage.References_mapString = make(map[string]*Reference)

	stage.Trees = make(map[*Tree]any)
	stage.Trees_mapString = make(map[string]*Tree)

	stage.UmlStates = make(map[*UmlState]any)
	stage.UmlStates_mapString = make(map[string]*UmlState)

	stage.Umlscs = make(map[*Umlsc]any)
	stage.Umlscs_mapString = make(map[string]*Umlsc)

	stage.Vertices = make(map[*Vertice]any)
	stage.Vertices_mapString = make(map[string]*Vertice)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Classdiagrams = nil
	stage.Classdiagrams_mapString = nil

	stage.Classshapes = nil
	stage.Classshapes_mapString = nil

	stage.DiagramPackages = nil
	stage.DiagramPackages_mapString = nil

	stage.Fields = nil
	stage.Fields_mapString = nil

	stage.Links = nil
	stage.Links_mapString = nil

	stage.Nodes = nil
	stage.Nodes_mapString = nil

	stage.NoteShapes = nil
	stage.NoteShapes_mapString = nil

	stage.Positions = nil
	stage.Positions_mapString = nil

	stage.References = nil
	stage.References_mapString = nil

	stage.Trees = nil
	stage.Trees_mapString = nil

	stage.UmlStates = nil
	stage.UmlStates_mapString = nil

	stage.Umlscs = nil
	stage.Umlscs_mapString = nil

	stage.Vertices = nil
	stage.Vertices_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

// generated in order to avoid error in the package import
// if there are no elements in the stage to marshall
var ___dummy__Stage models.StageStruct

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: ` + "`" + `{{GeneratedFieldNameValue}}` + "`" + `}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const StringEnumInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Classdiagram_Identifiers := make(map[*Classdiagram]string)
	_ = map_Classdiagram_Identifiers

	classdiagramOrdered := []*Classdiagram{}
	for classdiagram := range stage.Classdiagrams {
		classdiagramOrdered = append(classdiagramOrdered, classdiagram)
	}
	sort.Slice(classdiagramOrdered[:], func(i, j int) bool {
		return classdiagramOrdered[i].Name < classdiagramOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Classdiagram"
	for idx, classdiagram := range classdiagramOrdered {

		id = generatesIdentifier("Classdiagram", idx, classdiagram.Name)
		map_Classdiagram_Identifiers[classdiagram] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Classdiagram")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", classdiagram.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Classdiagram values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(classdiagram.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsInDrawMode")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", classdiagram.IsInDrawMode))
		initializerStatements += setValueField

	}

	map_Classshape_Identifiers := make(map[*Classshape]string)
	_ = map_Classshape_Identifiers

	classshapeOrdered := []*Classshape{}
	for classshape := range stage.Classshapes {
		classshapeOrdered = append(classshapeOrdered, classshape)
	}
	sort.Slice(classshapeOrdered[:], func(i, j int) bool {
		return classshapeOrdered[i].Name < classshapeOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Classshape"
	for idx, classshape := range classshapeOrdered {

		id = generatesIdentifier("Classshape", idx, classshape.Name)
		map_Classshape_Identifiers[classshape] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Classshape")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", classshape.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Classshape values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(classshape.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ReferenceName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(classshape.ReferenceName))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ShowNbInstances")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", classshape.ShowNbInstances))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbInstances")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", classshape.NbInstances))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Width")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", classshape.Width))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Heigth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", classshape.Heigth))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsSelected")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", classshape.IsSelected))
		initializerStatements += setValueField

	}

	map_DiagramPackage_Identifiers := make(map[*DiagramPackage]string)
	_ = map_DiagramPackage_Identifiers

	diagrampackageOrdered := []*DiagramPackage{}
	for diagrampackage := range stage.DiagramPackages {
		diagrampackageOrdered = append(diagrampackageOrdered, diagrampackage)
	}
	sort.Slice(diagrampackageOrdered[:], func(i, j int) bool {
		return diagrampackageOrdered[i].Name < diagrampackageOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of DiagramPackage"
	for idx, diagrampackage := range diagrampackageOrdered {

		id = generatesIdentifier("DiagramPackage", idx, diagrampackage.Name)
		map_DiagramPackage_Identifiers[diagrampackage] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "DiagramPackage")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", diagrampackage.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// DiagramPackage values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(diagrampackage.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Path")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(diagrampackage.Path))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "GongModelPath")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(diagrampackage.GongModelPath))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsEditable")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", diagrampackage.IsEditable))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsReloaded")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", diagrampackage.IsReloaded))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "AbsolutePathToDiagramPackage")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(diagrampackage.AbsolutePathToDiagramPackage))
		initializerStatements += setValueField

	}

	map_Field_Identifiers := make(map[*Field]string)
	_ = map_Field_Identifiers

	fieldOrdered := []*Field{}
	for field := range stage.Fields {
		fieldOrdered = append(fieldOrdered, field)
	}
	sort.Slice(fieldOrdered[:], func(i, j int) bool {
		return fieldOrdered[i].Name < fieldOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Field"
	for idx, field := range fieldOrdered {

		id = generatesIdentifier("Field", idx, field.Name)
		map_Field_Identifiers[field] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Field")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", field.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Field values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(field.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Fieldname")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(field.Fieldname))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FieldTypeAsString")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(field.FieldTypeAsString))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Structname")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(field.Structname))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Fieldtypename")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(field.Fieldtypename))
		initializerStatements += setValueField

	}

	map_Link_Identifiers := make(map[*Link]string)
	_ = map_Link_Identifiers

	linkOrdered := []*Link{}
	for link := range stage.Links {
		linkOrdered = append(linkOrdered, link)
	}
	sort.Slice(linkOrdered[:], func(i, j int) bool {
		return linkOrdered[i].Name < linkOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Link"
	for idx, link := range linkOrdered {

		id = generatesIdentifier("Link", idx, link.Name)
		map_Link_Identifiers[link] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Link")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", link.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Link values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(link.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Fieldname")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(link.Fieldname))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Structname")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(link.Structname))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Fieldtypename")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(link.Fieldtypename))
		initializerStatements += setValueField

		if link.TargetMultiplicity != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TargetMultiplicity")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+link.TargetMultiplicity.ToCodeString())
			initializerStatements += setValueField
		}

		if link.SourceMultiplicity != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "SourceMultiplicity")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+link.SourceMultiplicity.ToCodeString())
			initializerStatements += setValueField
		}

	}

	map_Node_Identifiers := make(map[*Node]string)
	_ = map_Node_Identifiers

	nodeOrdered := []*Node{}
	for node := range stage.Nodes {
		nodeOrdered = append(nodeOrdered, node)
	}
	sort.Slice(nodeOrdered[:], func(i, j int) bool {
		return nodeOrdered[i].Name < nodeOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Node"
	for idx, node := range nodeOrdered {

		id = generatesIdentifier("Node", idx, node.Name)
		map_Node_Identifiers[node] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Node")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", node.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Node values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(node.Name))
		initializerStatements += setValueField

		if node.Type != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Type")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+node.Type.ToCodeString())
			initializerStatements += setValueField
		}

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsExpanded")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.IsExpanded))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "HasCheckboxButton")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.HasCheckboxButton))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsChecked")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.IsChecked))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsCheckboxDisabled")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.IsCheckboxDisabled))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "HasAddChildButton")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.HasAddChildButton))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "HasEditButton")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.HasEditButton))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsInEditMode")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.IsInEditMode))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "HasDrawButton")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.HasDrawButton))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "HasDrawOffButton")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.HasDrawOffButton))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsInDrawMode")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.IsInDrawMode))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsSaved")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.IsSaved))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "HasDeleteButton")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", node.HasDeleteButton))
		initializerStatements += setValueField

	}

	map_NoteShape_Identifiers := make(map[*NoteShape]string)
	_ = map_NoteShape_Identifiers

	noteshapeOrdered := []*NoteShape{}
	for noteshape := range stage.NoteShapes {
		noteshapeOrdered = append(noteshapeOrdered, noteshape)
	}
	sort.Slice(noteshapeOrdered[:], func(i, j int) bool {
		return noteshapeOrdered[i].Name < noteshapeOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of NoteShape"
	for idx, noteshape := range noteshapeOrdered {

		id = generatesIdentifier("NoteShape", idx, noteshape.Name)
		map_NoteShape_Identifiers[noteshape] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "NoteShape")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", noteshape.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// NoteShape values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(noteshape.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Body")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(noteshape.Body))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", noteshape.X))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", noteshape.Y))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Width")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", noteshape.Width))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Heigth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", noteshape.Heigth))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Matched")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", noteshape.Matched))
		initializerStatements += setValueField

	}

	map_Position_Identifiers := make(map[*Position]string)
	_ = map_Position_Identifiers

	positionOrdered := []*Position{}
	for position := range stage.Positions {
		positionOrdered = append(positionOrdered, position)
	}
	sort.Slice(positionOrdered[:], func(i, j int) bool {
		return positionOrdered[i].Name < positionOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Position"
	for idx, position := range positionOrdered {

		id = generatesIdentifier("Position", idx, position.Name)
		map_Position_Identifiers[position] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Position")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", position.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Position values setup"
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", position.X))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", position.Y))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(position.Name))
		initializerStatements += setValueField

	}

	map_Reference_Identifiers := make(map[*Reference]string)
	_ = map_Reference_Identifiers

	referenceOrdered := []*Reference{}
	for reference := range stage.References {
		referenceOrdered = append(referenceOrdered, reference)
	}
	sort.Slice(referenceOrdered[:], func(i, j int) bool {
		return referenceOrdered[i].Name < referenceOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Reference"
	for idx, reference := range referenceOrdered {

		id = generatesIdentifier("Reference", idx, reference.Name)
		map_Reference_Identifiers[reference] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Reference")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", reference.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Reference values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(reference.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbInstances")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", reference.NbInstances))
		initializerStatements += setValueField

		if reference.Type != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Type")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+reference.Type.ToCodeString())
			initializerStatements += setValueField
		}

	}

	map_Tree_Identifiers := make(map[*Tree]string)
	_ = map_Tree_Identifiers

	treeOrdered := []*Tree{}
	for tree := range stage.Trees {
		treeOrdered = append(treeOrdered, tree)
	}
	sort.Slice(treeOrdered[:], func(i, j int) bool {
		return treeOrdered[i].Name < treeOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Tree"
	for idx, tree := range treeOrdered {

		id = generatesIdentifier("Tree", idx, tree.Name)
		map_Tree_Identifiers[tree] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Tree")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", tree.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Tree values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(tree.Name))
		initializerStatements += setValueField

		if tree.Type != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Type")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+tree.Type.ToCodeString())
			initializerStatements += setValueField
		}

	}

	map_UmlState_Identifiers := make(map[*UmlState]string)
	_ = map_UmlState_Identifiers

	umlstateOrdered := []*UmlState{}
	for umlstate := range stage.UmlStates {
		umlstateOrdered = append(umlstateOrdered, umlstate)
	}
	sort.Slice(umlstateOrdered[:], func(i, j int) bool {
		return umlstateOrdered[i].Name < umlstateOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of UmlState"
	for idx, umlstate := range umlstateOrdered {

		id = generatesIdentifier("UmlState", idx, umlstate.Name)
		map_UmlState_Identifiers[umlstate] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "UmlState")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", umlstate.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// UmlState values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(umlstate.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", umlstate.X))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", umlstate.Y))
		initializerStatements += setValueField

	}

	map_Umlsc_Identifiers := make(map[*Umlsc]string)
	_ = map_Umlsc_Identifiers

	umlscOrdered := []*Umlsc{}
	for umlsc := range stage.Umlscs {
		umlscOrdered = append(umlscOrdered, umlsc)
	}
	sort.Slice(umlscOrdered[:], func(i, j int) bool {
		return umlscOrdered[i].Name < umlscOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Umlsc"
	for idx, umlsc := range umlscOrdered {

		id = generatesIdentifier("Umlsc", idx, umlsc.Name)
		map_Umlsc_Identifiers[umlsc] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Umlsc")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", umlsc.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Umlsc values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(umlsc.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Activestate")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(umlsc.Activestate))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsInDrawMode")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", umlsc.IsInDrawMode))
		initializerStatements += setValueField

	}

	map_Vertice_Identifiers := make(map[*Vertice]string)
	_ = map_Vertice_Identifiers

	verticeOrdered := []*Vertice{}
	for vertice := range stage.Vertices {
		verticeOrdered = append(verticeOrdered, vertice)
	}
	sort.Slice(verticeOrdered[:], func(i, j int) bool {
		return verticeOrdered[i].Name < verticeOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Vertice"
	for idx, vertice := range verticeOrdered {

		id = generatesIdentifier("Vertice", idx, vertice.Name)
		map_Vertice_Identifiers[vertice] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Vertice")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", vertice.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Vertice values setup"
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", vertice.X))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", vertice.Y))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(vertice.Name))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, classdiagram := range classdiagramOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Classdiagram", idx, classdiagram.Name)
		map_Classdiagram_Identifiers[classdiagram] = id

		// Initialisation of values
		for _, _classshape := range classdiagram.Classshapes {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Classshapes")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Classshape_Identifiers[_classshape])
			pointersInitializesStatements += setPointerField
		}

		for _, _noteshape := range classdiagram.Notes {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Notes")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_NoteShape_Identifiers[_noteshape])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, classshape := range classshapeOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Classshape", idx, classshape.Name)
		map_Classshape_Identifiers[classshape] = id

		// Initialisation of values
		if classshape.Position != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Position")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Position_Identifiers[classshape.Position])
			pointersInitializesStatements += setPointerField
		}

		if classshape.Reference != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Reference")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Reference_Identifiers[classshape.Reference])
			pointersInitializesStatements += setPointerField
		}

		for _, _field := range classshape.Fields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Fields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Field_Identifiers[_field])
			pointersInitializesStatements += setPointerField
		}

		for _, _link := range classshape.Links {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Links")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Link_Identifiers[_link])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, diagrampackage := range diagrampackageOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("DiagramPackage", idx, diagrampackage.Name)
		map_DiagramPackage_Identifiers[diagrampackage] = id

		// Initialisation of values
		for _, _classdiagram := range diagrampackage.Classdiagrams {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Classdiagrams")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Classdiagram_Identifiers[_classdiagram])
			pointersInitializesStatements += setPointerField
		}

		for _, _umlsc := range diagrampackage.Umlscs {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Umlscs")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Umlsc_Identifiers[_umlsc])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, field := range fieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Field", idx, field.Name)
		map_Field_Identifiers[field] = id

		// Initialisation of values
	}

	for idx, link := range linkOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Link", idx, link.Name)
		map_Link_Identifiers[link] = id

		// Initialisation of values
		if link.Middlevertice != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Middlevertice")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Vertice_Identifiers[link.Middlevertice])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, node := range nodeOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Node", idx, node.Name)
		map_Node_Identifiers[node] = id

		// Initialisation of values
		if node.Classdiagram != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Classdiagram")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Classdiagram_Identifiers[node.Classdiagram])
			pointersInitializesStatements += setPointerField
		}

		if node.Umlsc != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Umlsc")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Umlsc_Identifiers[node.Umlsc])
			pointersInitializesStatements += setPointerField
		}

		for _, _node := range node.Children {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Children")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Node_Identifiers[_node])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, noteshape := range noteshapeOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("NoteShape", idx, noteshape.Name)
		map_NoteShape_Identifiers[noteshape] = id

		// Initialisation of values
	}

	for idx, position := range positionOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Position", idx, position.Name)
		map_Position_Identifiers[position] = id

		// Initialisation of values
	}

	for idx, reference := range referenceOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Reference", idx, reference.Name)
		map_Reference_Identifiers[reference] = id

		// Initialisation of values
	}

	for idx, tree := range treeOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Tree", idx, tree.Name)
		map_Tree_Identifiers[tree] = id

		// Initialisation of values
		for _, _node := range tree.RootNodes {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "RootNodes")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Node_Identifiers[_node])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, umlstate := range umlstateOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("UmlState", idx, umlstate.Name)
		map_UmlState_Identifiers[umlstate] = id

		// Initialisation of values
	}

	for idx, umlsc := range umlscOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Umlsc", idx, umlsc.Name)
		map_Umlsc_Identifiers[umlsc] = id

		// Initialisation of values
		for _, _umlstate := range umlsc.States {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "States")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_UmlState_Identifiers[_umlstate])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, vertice := range verticeOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Vertice", idx, vertice.Name)
		map_Vertice_Identifiers[vertice] = id

		// Initialisation of values
	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of functions that provide maps for reverse associations

// generate function for reverse association maps of Classdiagram
func (stageStruct *StageStruct) CreateReverseMap_Classdiagram_Classshapes() (res map[*Classshape]*Classdiagram) {
	res = make(map[*Classshape]*Classdiagram)

	for classdiagram := range stageStruct.Classdiagrams {
		for _, classshape_ := range classdiagram.Classshapes {
			res[classshape_] = classdiagram
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Classdiagram_Notes() (res map[*NoteShape]*Classdiagram) {
	res = make(map[*NoteShape]*Classdiagram)

	for classdiagram := range stageStruct.Classdiagrams {
		for _, noteshape_ := range classdiagram.Notes {
			res[noteshape_] = classdiagram
		}
	}

	return
}


// generate function for reverse association maps of Classshape
func (stageStruct *StageStruct) CreateReverseMap_Classshape_Position() (res map[*Position][]*Classshape) {
	res = make(map[*Position][]*Classshape)

	for classshape := range stageStruct.Classshapes {
		if classshape.Position != nil {
			position_ := classshape.Position
			var classshapes []*Classshape
			_, ok := res[position_]
			if ok {
				classshapes = res[position_]
			} else {
				classshapes = make([]*Classshape, 0)
			}
			classshapes = append(classshapes, classshape)
			res[position_] = classshapes
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Classshape_Reference() (res map[*Reference][]*Classshape) {
	res = make(map[*Reference][]*Classshape)

	for classshape := range stageStruct.Classshapes {
		if classshape.Reference != nil {
			reference_ := classshape.Reference
			var classshapes []*Classshape
			_, ok := res[reference_]
			if ok {
				classshapes = res[reference_]
			} else {
				classshapes = make([]*Classshape, 0)
			}
			classshapes = append(classshapes, classshape)
			res[reference_] = classshapes
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Classshape_Fields() (res map[*Field]*Classshape) {
	res = make(map[*Field]*Classshape)

	for classshape := range stageStruct.Classshapes {
		for _, field_ := range classshape.Fields {
			res[field_] = classshape
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Classshape_Links() (res map[*Link]*Classshape) {
	res = make(map[*Link]*Classshape)

	for classshape := range stageStruct.Classshapes {
		for _, link_ := range classshape.Links {
			res[link_] = classshape
		}
	}

	return
}


// generate function for reverse association maps of DiagramPackage
func (stageStruct *StageStruct) CreateReverseMap_DiagramPackage_Classdiagrams() (res map[*Classdiagram]*DiagramPackage) {
	res = make(map[*Classdiagram]*DiagramPackage)

	for diagrampackage := range stageStruct.DiagramPackages {
		for _, classdiagram_ := range diagrampackage.Classdiagrams {
			res[classdiagram_] = diagrampackage
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_DiagramPackage_Umlscs() (res map[*Umlsc]*DiagramPackage) {
	res = make(map[*Umlsc]*DiagramPackage)

	for diagrampackage := range stageStruct.DiagramPackages {
		for _, umlsc_ := range diagrampackage.Umlscs {
			res[umlsc_] = diagrampackage
		}
	}

	return
}


// generate function for reverse association maps of Field

// generate function for reverse association maps of Link
func (stageStruct *StageStruct) CreateReverseMap_Link_Middlevertice() (res map[*Vertice][]*Link) {
	res = make(map[*Vertice][]*Link)

	for link := range stageStruct.Links {
		if link.Middlevertice != nil {
			vertice_ := link.Middlevertice
			var links []*Link
			_, ok := res[vertice_]
			if ok {
				links = res[vertice_]
			} else {
				links = make([]*Link, 0)
			}
			links = append(links, link)
			res[vertice_] = links
		}
	}

	return
}

// generate function for reverse association maps of Node
func (stageStruct *StageStruct) CreateReverseMap_Node_Classdiagram() (res map[*Classdiagram][]*Node) {
	res = make(map[*Classdiagram][]*Node)

	for node := range stageStruct.Nodes {
		if node.Classdiagram != nil {
			classdiagram_ := node.Classdiagram
			var nodes []*Node
			_, ok := res[classdiagram_]
			if ok {
				nodes = res[classdiagram_]
			} else {
				nodes = make([]*Node, 0)
			}
			nodes = append(nodes, node)
			res[classdiagram_] = nodes
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Node_Umlsc() (res map[*Umlsc][]*Node) {
	res = make(map[*Umlsc][]*Node)

	for node := range stageStruct.Nodes {
		if node.Umlsc != nil {
			umlsc_ := node.Umlsc
			var nodes []*Node
			_, ok := res[umlsc_]
			if ok {
				nodes = res[umlsc_]
			} else {
				nodes = make([]*Node, 0)
			}
			nodes = append(nodes, node)
			res[umlsc_] = nodes
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Node_Children() (res map[*Node]*Node) {
	res = make(map[*Node]*Node)

	for node := range stageStruct.Nodes {
		for _, node_ := range node.Children {
			res[node_] = node
		}
	}

	return
}


// generate function for reverse association maps of NoteShape

// generate function for reverse association maps of Position

// generate function for reverse association maps of Reference

// generate function for reverse association maps of Tree
func (stageStruct *StageStruct) CreateReverseMap_Tree_RootNodes() (res map[*Node]*Tree) {
	res = make(map[*Node]*Tree)

	for tree := range stageStruct.Trees {
		for _, node_ := range tree.RootNodes {
			res[node_] = tree
		}
	}

	return
}


// generate function for reverse association maps of UmlState

// generate function for reverse association maps of Umlsc
func (stageStruct *StageStruct) CreateReverseMap_Umlsc_States() (res map[*UmlState]*Umlsc) {
	res = make(map[*UmlState]*Umlsc)

	for umlsc := range stageStruct.Umlscs {
		for _, umlstate_ := range umlsc.States {
			res[umlstate_] = umlsc
		}
	}

	return
}


// generate function for reverse association maps of Vertice

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Classdiagram | Classshape | DiagramPackage | Field | Link | Node | NoteShape | Position | Reference | Tree | UmlState | Umlsc | Vertice
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*Classdiagram | *Classshape | *DiagramPackage | *Field | *Link | *Node | *NoteShape | *Position | *Reference | *Tree | *UmlState | *Umlsc | *Vertice
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Classdiagram]any |
		map[*Classshape]any |
		map[*DiagramPackage]any |
		map[*Field]any |
		map[*Link]any |
		map[*Node]any |
		map[*NoteShape]any |
		map[*Position]any |
		map[*Reference]any |
		map[*Tree]any |
		map[*UmlState]any |
		map[*Umlsc]any |
		map[*Vertice]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Classdiagram |
		map[string]*Classshape |
		map[string]*DiagramPackage |
		map[string]*Field |
		map[string]*Link |
		map[string]*Node |
		map[string]*NoteShape |
		map[string]*Position |
		map[string]*Reference |
		map[string]*Tree |
		map[string]*UmlState |
		map[string]*Umlsc |
		map[string]*Vertice |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Classdiagram]any:
		return any(&Stage.Classdiagrams).(*Type)
	case map[*Classshape]any:
		return any(&Stage.Classshapes).(*Type)
	case map[*DiagramPackage]any:
		return any(&Stage.DiagramPackages).(*Type)
	case map[*Field]any:
		return any(&Stage.Fields).(*Type)
	case map[*Link]any:
		return any(&Stage.Links).(*Type)
	case map[*Node]any:
		return any(&Stage.Nodes).(*Type)
	case map[*NoteShape]any:
		return any(&Stage.NoteShapes).(*Type)
	case map[*Position]any:
		return any(&Stage.Positions).(*Type)
	case map[*Reference]any:
		return any(&Stage.References).(*Type)
	case map[*Tree]any:
		return any(&Stage.Trees).(*Type)
	case map[*UmlState]any:
		return any(&Stage.UmlStates).(*Type)
	case map[*Umlsc]any:
		return any(&Stage.Umlscs).(*Type)
	case map[*Vertice]any:
		return any(&Stage.Vertices).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Classdiagram:
		return any(&Stage.Classdiagrams_mapString).(*Type)
	case map[string]*Classshape:
		return any(&Stage.Classshapes_mapString).(*Type)
	case map[string]*DiagramPackage:
		return any(&Stage.DiagramPackages_mapString).(*Type)
	case map[string]*Field:
		return any(&Stage.Fields_mapString).(*Type)
	case map[string]*Link:
		return any(&Stage.Links_mapString).(*Type)
	case map[string]*Node:
		return any(&Stage.Nodes_mapString).(*Type)
	case map[string]*NoteShape:
		return any(&Stage.NoteShapes_mapString).(*Type)
	case map[string]*Position:
		return any(&Stage.Positions_mapString).(*Type)
	case map[string]*Reference:
		return any(&Stage.References_mapString).(*Type)
	case map[string]*Tree:
		return any(&Stage.Trees_mapString).(*Type)
	case map[string]*UmlState:
		return any(&Stage.UmlStates_mapString).(*Type)
	case map[string]*Umlsc:
		return any(&Stage.Umlscs_mapString).(*Type)
	case map[string]*Vertice:
		return any(&Stage.Vertices_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct]() *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Classdiagram:
		return any(&Stage.Classdiagrams).(*map[*Type]any)
	case Classshape:
		return any(&Stage.Classshapes).(*map[*Type]any)
	case DiagramPackage:
		return any(&Stage.DiagramPackages).(*map[*Type]any)
	case Field:
		return any(&Stage.Fields).(*map[*Type]any)
	case Link:
		return any(&Stage.Links).(*map[*Type]any)
	case Node:
		return any(&Stage.Nodes).(*map[*Type]any)
	case NoteShape:
		return any(&Stage.NoteShapes).(*map[*Type]any)
	case Position:
		return any(&Stage.Positions).(*map[*Type]any)
	case Reference:
		return any(&Stage.References).(*map[*Type]any)
	case Tree:
		return any(&Stage.Trees).(*map[*Type]any)
	case UmlState:
		return any(&Stage.UmlStates).(*map[*Type]any)
	case Umlsc:
		return any(&Stage.Umlscs).(*map[*Type]any)
	case Vertice:
		return any(&Stage.Vertices).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct]() *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Classdiagram:
		return any(&Stage.Classdiagrams_mapString).(*map[string]*Type)
	case Classshape:
		return any(&Stage.Classshapes_mapString).(*map[string]*Type)
	case DiagramPackage:
		return any(&Stage.DiagramPackages_mapString).(*map[string]*Type)
	case Field:
		return any(&Stage.Fields_mapString).(*map[string]*Type)
	case Link:
		return any(&Stage.Links_mapString).(*map[string]*Type)
	case Node:
		return any(&Stage.Nodes_mapString).(*map[string]*Type)
	case NoteShape:
		return any(&Stage.NoteShapes_mapString).(*map[string]*Type)
	case Position:
		return any(&Stage.Positions_mapString).(*map[string]*Type)
	case Reference:
		return any(&Stage.References_mapString).(*map[string]*Type)
	case Tree:
		return any(&Stage.Trees_mapString).(*map[string]*Type)
	case UmlState:
		return any(&Stage.UmlStates_mapString).(*map[string]*Type)
	case Umlsc:
		return any(&Stage.Umlscs_mapString).(*map[string]*Type)
	case Vertice:
		return any(&Stage.Vertices_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Classdiagram:
		return any(&Classdiagram{
			// Initialisation of associations
			// field is initialized with an instance of Classshape with the name of the field
			Classshapes: []*Classshape{{Name: "Classshapes"}},
			// field is initialized with an instance of NoteShape with the name of the field
			Notes: []*NoteShape{{Name: "Notes"}},
		}).(*Type)
	case Classshape:
		return any(&Classshape{
			// Initialisation of associations
			// field is initialized with an instance of Position with the name of the field
			Position: &Position{Name: "Position"},
			// field is initialized with an instance of Reference with the name of the field
			Reference: &Reference{Name: "Reference"},
			// field is initialized with an instance of Field with the name of the field
			Fields: []*Field{{Name: "Fields"}},
			// field is initialized with an instance of Link with the name of the field
			Links: []*Link{{Name: "Links"}},
		}).(*Type)
	case DiagramPackage:
		return any(&DiagramPackage{
			// Initialisation of associations
			// field is initialized with an instance of Classdiagram with the name of the field
			Classdiagrams: []*Classdiagram{{Name: "Classdiagrams"}},
			// field is initialized with an instance of Umlsc with the name of the field
			Umlscs: []*Umlsc{{Name: "Umlscs"}},
		}).(*Type)
	case Field:
		return any(&Field{
			// Initialisation of associations
		}).(*Type)
	case Link:
		return any(&Link{
			// Initialisation of associations
			// field is initialized with an instance of Vertice with the name of the field
			Middlevertice: &Vertice{Name: "Middlevertice"},
		}).(*Type)
	case Node:
		return any(&Node{
			// Initialisation of associations
			// field is initialized with an instance of Classdiagram with the name of the field
			Classdiagram: &Classdiagram{Name: "Classdiagram"},
			// field is initialized with an instance of Umlsc with the name of the field
			Umlsc: &Umlsc{Name: "Umlsc"},
			// field is initialized with an instance of Node with the name of the field
			Children: []*Node{{Name: "Children"}},
		}).(*Type)
	case NoteShape:
		return any(&NoteShape{
			// Initialisation of associations
		}).(*Type)
	case Position:
		return any(&Position{
			// Initialisation of associations
		}).(*Type)
	case Reference:
		return any(&Reference{
			// Initialisation of associations
		}).(*Type)
	case Tree:
		return any(&Tree{
			// Initialisation of associations
			// field is initialized with an instance of Node with the name of the field
			RootNodes: []*Node{{Name: "RootNodes"}},
		}).(*Type)
	case UmlState:
		return any(&UmlState{
			// Initialisation of associations
		}).(*Type)
	case Umlsc:
		return any(&Umlsc{
			// Initialisation of associations
			// field is initialized with an instance of UmlState with the name of the field
			States: []*UmlState{{Name: "States"}},
		}).(*Type)
	case Vertice:
		return any(&Vertice{
			// Initialisation of associations
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Classdiagram
	case Classdiagram:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Classshape
	case Classshape:
		switch fieldname {
		// insertion point for per direct association field
		case "Position":
			res := make(map[*Position][]*Classshape)
			for classshape := range Stage.Classshapes {
				if classshape.Position != nil {
					position_ := classshape.Position
					var classshapes []*Classshape
					_, ok := res[position_]
					if ok {
						classshapes = res[position_]
					} else {
						classshapes = make([]*Classshape, 0)
					}
					classshapes = append(classshapes, classshape)
					res[position_] = classshapes
				}
			}
			return any(res).(map[*End][]*Start)
		case "Reference":
			res := make(map[*Reference][]*Classshape)
			for classshape := range Stage.Classshapes {
				if classshape.Reference != nil {
					reference_ := classshape.Reference
					var classshapes []*Classshape
					_, ok := res[reference_]
					if ok {
						classshapes = res[reference_]
					} else {
						classshapes = make([]*Classshape, 0)
					}
					classshapes = append(classshapes, classshape)
					res[reference_] = classshapes
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of DiagramPackage
	case DiagramPackage:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Field
	case Field:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Link
	case Link:
		switch fieldname {
		// insertion point for per direct association field
		case "Middlevertice":
			res := make(map[*Vertice][]*Link)
			for link := range Stage.Links {
				if link.Middlevertice != nil {
					vertice_ := link.Middlevertice
					var links []*Link
					_, ok := res[vertice_]
					if ok {
						links = res[vertice_]
					} else {
						links = make([]*Link, 0)
					}
					links = append(links, link)
					res[vertice_] = links
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Node
	case Node:
		switch fieldname {
		// insertion point for per direct association field
		case "Classdiagram":
			res := make(map[*Classdiagram][]*Node)
			for node := range Stage.Nodes {
				if node.Classdiagram != nil {
					classdiagram_ := node.Classdiagram
					var nodes []*Node
					_, ok := res[classdiagram_]
					if ok {
						nodes = res[classdiagram_]
					} else {
						nodes = make([]*Node, 0)
					}
					nodes = append(nodes, node)
					res[classdiagram_] = nodes
				}
			}
			return any(res).(map[*End][]*Start)
		case "Umlsc":
			res := make(map[*Umlsc][]*Node)
			for node := range Stage.Nodes {
				if node.Umlsc != nil {
					umlsc_ := node.Umlsc
					var nodes []*Node
					_, ok := res[umlsc_]
					if ok {
						nodes = res[umlsc_]
					} else {
						nodes = make([]*Node, 0)
					}
					nodes = append(nodes, node)
					res[umlsc_] = nodes
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of NoteShape
	case NoteShape:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Position
	case Position:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Reference
	case Reference:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Tree
	case Tree:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of UmlState
	case UmlState:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Umlsc
	case Umlsc:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Vertice
	case Vertice:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Classdiagram
	case Classdiagram:
		switch fieldname {
		// insertion point for per direct association field
		case "Classshapes":
			res := make(map[*Classshape]*Classdiagram)
			for classdiagram := range Stage.Classdiagrams {
				for _, classshape_ := range classdiagram.Classshapes {
					res[classshape_] = classdiagram
				}
			}
			return any(res).(map[*End]*Start)
		case "Notes":
			res := make(map[*NoteShape]*Classdiagram)
			for classdiagram := range Stage.Classdiagrams {
				for _, noteshape_ := range classdiagram.Notes {
					res[noteshape_] = classdiagram
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Classshape
	case Classshape:
		switch fieldname {
		// insertion point for per direct association field
		case "Fields":
			res := make(map[*Field]*Classshape)
			for classshape := range Stage.Classshapes {
				for _, field_ := range classshape.Fields {
					res[field_] = classshape
				}
			}
			return any(res).(map[*End]*Start)
		case "Links":
			res := make(map[*Link]*Classshape)
			for classshape := range Stage.Classshapes {
				for _, link_ := range classshape.Links {
					res[link_] = classshape
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of DiagramPackage
	case DiagramPackage:
		switch fieldname {
		// insertion point for per direct association field
		case "Classdiagrams":
			res := make(map[*Classdiagram]*DiagramPackage)
			for diagrampackage := range Stage.DiagramPackages {
				for _, classdiagram_ := range diagrampackage.Classdiagrams {
					res[classdiagram_] = diagrampackage
				}
			}
			return any(res).(map[*End]*Start)
		case "Umlscs":
			res := make(map[*Umlsc]*DiagramPackage)
			for diagrampackage := range Stage.DiagramPackages {
				for _, umlsc_ := range diagrampackage.Umlscs {
					res[umlsc_] = diagrampackage
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Field
	case Field:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Link
	case Link:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Node
	case Node:
		switch fieldname {
		// insertion point for per direct association field
		case "Children":
			res := make(map[*Node]*Node)
			for node := range Stage.Nodes {
				for _, node_ := range node.Children {
					res[node_] = node
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of NoteShape
	case NoteShape:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Position
	case Position:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Reference
	case Reference:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Tree
	case Tree:
		switch fieldname {
		// insertion point for per direct association field
		case "RootNodes":
			res := make(map[*Node]*Tree)
			for tree := range Stage.Trees {
				for _, node_ := range tree.RootNodes {
					res[node_] = tree
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of UmlState
	case UmlState:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Umlsc
	case Umlsc:
		switch fieldname {
		// insertion point for per direct association field
		case "States":
			res := make(map[*UmlState]*Umlsc)
			for umlsc := range Stage.Umlscs {
				for _, umlstate_ := range umlsc.States {
					res[umlstate_] = umlsc
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Vertice
	case Vertice:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Classdiagram:
		res = "Classdiagram"
	case Classshape:
		res = "Classshape"
	case DiagramPackage:
		res = "DiagramPackage"
	case Field:
		res = "Field"
	case Link:
		res = "Link"
	case Node:
		res = "Node"
	case NoteShape:
		res = "NoteShape"
	case Position:
		res = "Position"
	case Reference:
		res = "Reference"
	case Tree:
		res = "Tree"
	case UmlState:
		res = "UmlState"
	case Umlsc:
		res = "Umlsc"
	case Vertice:
		res = "Vertice"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Classdiagram:
		res = []string{"Name", "Classshapes", "Notes", "IsInDrawMode"}
	case Classshape:
		res = []string{"Name", "Position", "ReferenceName", "Reference", "ShowNbInstances", "NbInstances", "Fields", "Links", "Width", "Heigth", "IsSelected"}
	case DiagramPackage:
		res = []string{"Name", "Path", "GongModelPath", "Classdiagrams", "Umlscs", "IsEditable", "IsReloaded", "AbsolutePathToDiagramPackage"}
	case Field:
		res = []string{"Name", "Fieldname", "FieldTypeAsString", "Structname", "Fieldtypename"}
	case Link:
		res = []string{"Name", "Fieldname", "Structname", "Fieldtypename", "TargetMultiplicity", "SourceMultiplicity", "Middlevertice"}
	case Node:
		res = []string{"Name", "Type", "Classdiagram", "Umlsc", "IsExpanded", "HasCheckboxButton", "IsChecked", "IsCheckboxDisabled", "HasAddChildButton", "HasEditButton", "IsInEditMode", "HasDrawButton", "HasDrawOffButton", "IsInDrawMode", "IsSaved", "HasDeleteButton", "Children"}
	case NoteShape:
		res = []string{"Name", "Body", "X", "Y", "Width", "Heigth", "Matched"}
	case Position:
		res = []string{"X", "Y", "Name"}
	case Reference:
		res = []string{"Name", "NbInstances", "Type"}
	case Tree:
		res = []string{"Name", "Type", "RootNodes"}
	case UmlState:
		res = []string{"Name", "X", "Y"}
	case Umlsc:
		res = []string{"Name", "States", "Activestate", "IsInDrawMode"}
	case Vertice:
		res = []string{"X", "Y", "Name"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Classdiagram:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Classdiagram).Name
		case "Classshapes":
			for idx, __instance__ := range any(instance).(Classdiagram).Classshapes {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Notes":
			for idx, __instance__ := range any(instance).(Classdiagram).Notes {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "IsInDrawMode":
			res = fmt.Sprintf("%t", any(instance).(Classdiagram).IsInDrawMode)
		}
	case Classshape:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Classshape).Name
		case "Position":
			if any(instance).(Classshape).Position != nil {
				res = any(instance).(Classshape).Position.Name
			}
		case "ReferenceName":
			res = any(instance).(Classshape).ReferenceName
		case "Reference":
			if any(instance).(Classshape).Reference != nil {
				res = any(instance).(Classshape).Reference.Name
			}
		case "ShowNbInstances":
			res = fmt.Sprintf("%t", any(instance).(Classshape).ShowNbInstances)
		case "NbInstances":
			res = fmt.Sprintf("%d", any(instance).(Classshape).NbInstances)
		case "Fields":
			for idx, __instance__ := range any(instance).(Classshape).Fields {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Links":
			for idx, __instance__ := range any(instance).(Classshape).Links {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Width":
			res = fmt.Sprintf("%f", any(instance).(Classshape).Width)
		case "Heigth":
			res = fmt.Sprintf("%f", any(instance).(Classshape).Heigth)
		case "IsSelected":
			res = fmt.Sprintf("%t", any(instance).(Classshape).IsSelected)
		}
	case DiagramPackage:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(DiagramPackage).Name
		case "Path":
			res = any(instance).(DiagramPackage).Path
		case "GongModelPath":
			res = any(instance).(DiagramPackage).GongModelPath
		case "Classdiagrams":
			for idx, __instance__ := range any(instance).(DiagramPackage).Classdiagrams {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Umlscs":
			for idx, __instance__ := range any(instance).(DiagramPackage).Umlscs {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "IsEditable":
			res = fmt.Sprintf("%t", any(instance).(DiagramPackage).IsEditable)
		case "IsReloaded":
			res = fmt.Sprintf("%t", any(instance).(DiagramPackage).IsReloaded)
		case "AbsolutePathToDiagramPackage":
			res = any(instance).(DiagramPackage).AbsolutePathToDiagramPackage
		}
	case Field:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Field).Name
		case "Fieldname":
			res = any(instance).(Field).Fieldname
		case "FieldTypeAsString":
			res = any(instance).(Field).FieldTypeAsString
		case "Structname":
			res = any(instance).(Field).Structname
		case "Fieldtypename":
			res = any(instance).(Field).Fieldtypename
		}
	case Link:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Link).Name
		case "Fieldname":
			res = any(instance).(Link).Fieldname
		case "Structname":
			res = any(instance).(Link).Structname
		case "Fieldtypename":
			res = any(instance).(Link).Fieldtypename
		case "TargetMultiplicity":
			enum := any(instance).(Link).TargetMultiplicity
			res = enum.ToCodeString()
		case "SourceMultiplicity":
			enum := any(instance).(Link).SourceMultiplicity
			res = enum.ToCodeString()
		case "Middlevertice":
			if any(instance).(Link).Middlevertice != nil {
				res = any(instance).(Link).Middlevertice.Name
			}
		}
	case Node:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Node).Name
		case "Type":
			enum := any(instance).(Node).Type
			res = enum.ToCodeString()
		case "Classdiagram":
			if any(instance).(Node).Classdiagram != nil {
				res = any(instance).(Node).Classdiagram.Name
			}
		case "Umlsc":
			if any(instance).(Node).Umlsc != nil {
				res = any(instance).(Node).Umlsc.Name
			}
		case "IsExpanded":
			res = fmt.Sprintf("%t", any(instance).(Node).IsExpanded)
		case "HasCheckboxButton":
			res = fmt.Sprintf("%t", any(instance).(Node).HasCheckboxButton)
		case "IsChecked":
			res = fmt.Sprintf("%t", any(instance).(Node).IsChecked)
		case "IsCheckboxDisabled":
			res = fmt.Sprintf("%t", any(instance).(Node).IsCheckboxDisabled)
		case "HasAddChildButton":
			res = fmt.Sprintf("%t", any(instance).(Node).HasAddChildButton)
		case "HasEditButton":
			res = fmt.Sprintf("%t", any(instance).(Node).HasEditButton)
		case "IsInEditMode":
			res = fmt.Sprintf("%t", any(instance).(Node).IsInEditMode)
		case "HasDrawButton":
			res = fmt.Sprintf("%t", any(instance).(Node).HasDrawButton)
		case "HasDrawOffButton":
			res = fmt.Sprintf("%t", any(instance).(Node).HasDrawOffButton)
		case "IsInDrawMode":
			res = fmt.Sprintf("%t", any(instance).(Node).IsInDrawMode)
		case "IsSaved":
			res = fmt.Sprintf("%t", any(instance).(Node).IsSaved)
		case "HasDeleteButton":
			res = fmt.Sprintf("%t", any(instance).(Node).HasDeleteButton)
		case "Children":
			for idx, __instance__ := range any(instance).(Node).Children {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case NoteShape:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(NoteShape).Name
		case "Body":
			res = any(instance).(NoteShape).Body
		case "X":
			res = fmt.Sprintf("%f", any(instance).(NoteShape).X)
		case "Y":
			res = fmt.Sprintf("%f", any(instance).(NoteShape).Y)
		case "Width":
			res = fmt.Sprintf("%f", any(instance).(NoteShape).Width)
		case "Heigth":
			res = fmt.Sprintf("%f", any(instance).(NoteShape).Heigth)
		case "Matched":
			res = fmt.Sprintf("%t", any(instance).(NoteShape).Matched)
		}
	case Position:
		switch fieldName {
		// string value of fields
		case "X":
			res = fmt.Sprintf("%f", any(instance).(Position).X)
		case "Y":
			res = fmt.Sprintf("%f", any(instance).(Position).Y)
		case "Name":
			res = any(instance).(Position).Name
		}
	case Reference:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Reference).Name
		case "NbInstances":
			res = fmt.Sprintf("%d", any(instance).(Reference).NbInstances)
		case "Type":
			enum := any(instance).(Reference).Type
			res = enum.ToCodeString()
		}
	case Tree:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Tree).Name
		case "Type":
			enum := any(instance).(Tree).Type
			res = enum.ToCodeString()
		case "RootNodes":
			for idx, __instance__ := range any(instance).(Tree).RootNodes {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case UmlState:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(UmlState).Name
		case "X":
			res = fmt.Sprintf("%f", any(instance).(UmlState).X)
		case "Y":
			res = fmt.Sprintf("%f", any(instance).(UmlState).Y)
		}
	case Umlsc:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Umlsc).Name
		case "States":
			for idx, __instance__ := range any(instance).(Umlsc).States {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Activestate":
			res = any(instance).(Umlsc).Activestate
		case "IsInDrawMode":
			res = fmt.Sprintf("%t", any(instance).(Umlsc).IsInDrawMode)
		}
	case Vertice:
		switch fieldName {
		// string value of fields
		case "X":
			res = fmt.Sprintf("%f", any(instance).(Vertice).X)
		case "Y":
			res = fmt.Sprintf("%f", any(instance).(Vertice).Y)
		case "Name":
			res = any(instance).(Vertice).Name
		}
	}
	return
}

// insertion point of enum utility functions
// Utility function for GongdocNodeType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (gongdocnodetype GongdocNodeType) ToString() (res string) {

	// migration of former implementation of enum
	switch gongdocnodetype {
	// insertion code per enum code
	case ROOT_OF_DIAGRAMS:
		res = "ROOT_OF_DIAGRAMS"
	case ROOT_OF_CLASS_DIAGRAMS:
		res = "ROOT_OF_CLASS_DIAGRAMS"
	case ROOT_OF_STATE_DIAGRAMS:
		res = "ROOT_OF_STATE_DIAGRAMS"
	case CLASS_DIAGRAM:
		res = "CLASS_DIAGRAM"
	case STATE_DIAGRAM:
		res = "STATE_DIAGRAM"
	case ROOT_OF_GONG_STRUCTS:
		res = "ROOT_OF_GONG_STRUCTS"
	case GONG_STRUCT:
		res = "GONG_STRUCT"
	case GONG_STRUCT_FIELD:
		res = "GONG_STRUCT_FIELD"
	case ROOT_OF_GONG_ENUMS:
		res = "ROOT_OF_GONG_ENUMS"
	case GONG_ENUM:
		res = "GONG_ENUM"
	case GONG_ENUM_VALUE:
		res = "GONG_ENUM_VALUE"
	case ROOT_OF_GONG_NOTES:
		res = "ROOT_OF_GONG_NOTES"
	case GONG_NOTE:
		res = "GONG_NOTE"
	}
	return
}

func (gongdocnodetype *GongdocNodeType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "ROOT_OF_DIAGRAMS":
		*gongdocnodetype = ROOT_OF_DIAGRAMS
	case "ROOT_OF_CLASS_DIAGRAMS":
		*gongdocnodetype = ROOT_OF_CLASS_DIAGRAMS
	case "ROOT_OF_STATE_DIAGRAMS":
		*gongdocnodetype = ROOT_OF_STATE_DIAGRAMS
	case "CLASS_DIAGRAM":
		*gongdocnodetype = CLASS_DIAGRAM
	case "STATE_DIAGRAM":
		*gongdocnodetype = STATE_DIAGRAM
	case "ROOT_OF_GONG_STRUCTS":
		*gongdocnodetype = ROOT_OF_GONG_STRUCTS
	case "GONG_STRUCT":
		*gongdocnodetype = GONG_STRUCT
	case "GONG_STRUCT_FIELD":
		*gongdocnodetype = GONG_STRUCT_FIELD
	case "ROOT_OF_GONG_ENUMS":
		*gongdocnodetype = ROOT_OF_GONG_ENUMS
	case "GONG_ENUM":
		*gongdocnodetype = GONG_ENUM
	case "GONG_ENUM_VALUE":
		*gongdocnodetype = GONG_ENUM_VALUE
	case "ROOT_OF_GONG_NOTES":
		*gongdocnodetype = ROOT_OF_GONG_NOTES
	case "GONG_NOTE":
		*gongdocnodetype = GONG_NOTE
	default:
		return errUnkownEnum
	}
	return
}

func (gongdocnodetype *GongdocNodeType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "ROOT_OF_DIAGRAMS":
		*gongdocnodetype = ROOT_OF_DIAGRAMS
	case "ROOT_OF_CLASS_DIAGRAMS":
		*gongdocnodetype = ROOT_OF_CLASS_DIAGRAMS
	case "ROOT_OF_STATE_DIAGRAMS":
		*gongdocnodetype = ROOT_OF_STATE_DIAGRAMS
	case "CLASS_DIAGRAM":
		*gongdocnodetype = CLASS_DIAGRAM
	case "STATE_DIAGRAM":
		*gongdocnodetype = STATE_DIAGRAM
	case "ROOT_OF_GONG_STRUCTS":
		*gongdocnodetype = ROOT_OF_GONG_STRUCTS
	case "GONG_STRUCT":
		*gongdocnodetype = GONG_STRUCT
	case "GONG_STRUCT_FIELD":
		*gongdocnodetype = GONG_STRUCT_FIELD
	case "ROOT_OF_GONG_ENUMS":
		*gongdocnodetype = ROOT_OF_GONG_ENUMS
	case "GONG_ENUM":
		*gongdocnodetype = GONG_ENUM
	case "GONG_ENUM_VALUE":
		*gongdocnodetype = GONG_ENUM_VALUE
	case "ROOT_OF_GONG_NOTES":
		*gongdocnodetype = ROOT_OF_GONG_NOTES
	case "GONG_NOTE":
		*gongdocnodetype = GONG_NOTE
	default:
		return errUnkownEnum
	}
	return
}

func (gongdocnodetype *GongdocNodeType) ToCodeString() (res string) {

	switch *gongdocnodetype {
	// insertion code per enum code
	case ROOT_OF_DIAGRAMS:
		res = "ROOT_OF_DIAGRAMS"
	case ROOT_OF_CLASS_DIAGRAMS:
		res = "ROOT_OF_CLASS_DIAGRAMS"
	case ROOT_OF_STATE_DIAGRAMS:
		res = "ROOT_OF_STATE_DIAGRAMS"
	case CLASS_DIAGRAM:
		res = "CLASS_DIAGRAM"
	case STATE_DIAGRAM:
		res = "STATE_DIAGRAM"
	case ROOT_OF_GONG_STRUCTS:
		res = "ROOT_OF_GONG_STRUCTS"
	case GONG_STRUCT:
		res = "GONG_STRUCT"
	case GONG_STRUCT_FIELD:
		res = "GONG_STRUCT_FIELD"
	case ROOT_OF_GONG_ENUMS:
		res = "ROOT_OF_GONG_ENUMS"
	case GONG_ENUM:
		res = "GONG_ENUM"
	case GONG_ENUM_VALUE:
		res = "GONG_ENUM_VALUE"
	case ROOT_OF_GONG_NOTES:
		res = "ROOT_OF_GONG_NOTES"
	case GONG_NOTE:
		res = "GONG_NOTE"
	}
	return
}

// Utility function for MultiplicityType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (multiplicitytype MultiplicityType) ToString() (res string) {

	// migration of former implementation of enum
	switch multiplicitytype {
	// insertion code per enum code
	case ZERO_ONE:
		res = "0..1"
	case ONE:
		res = "1"
	case MANY:
		res = "*"
	}
	return
}

func (multiplicitytype *MultiplicityType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "0..1":
		*multiplicitytype = ZERO_ONE
	case "1":
		*multiplicitytype = ONE
	case "*":
		*multiplicitytype = MANY
	default:
		return errUnkownEnum
	}
	return
}

func (multiplicitytype *MultiplicityType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "ZERO_ONE":
		*multiplicitytype = ZERO_ONE
	case "ONE":
		*multiplicitytype = ONE
	case "MANY":
		*multiplicitytype = MANY
	default:
		return errUnkownEnum
	}
	return
}

func (multiplicitytype *MultiplicityType) ToCodeString() (res string) {

	switch *multiplicitytype {
	// insertion code per enum code
	case ZERO_ONE:
		res = "ZERO_ONE"
	case ONE:
		res = "ONE"
	case MANY:
		res = "MANY"
	}
	return
}

// Utility function for ReferenceType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (referencetype ReferenceType) ToString() (res string) {

	// migration of former implementation of enum
	switch referencetype {
	// insertion code per enum code
	case REFERENCE_GONG_STRUCT:
		res = "REFERENCE_GONG_STRUCT"
	case REFERENCE_GONG_ENUM:
		res = "REFERENCE_GONG_ENUM"
	}
	return
}

func (referencetype *ReferenceType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "REFERENCE_GONG_STRUCT":
		*referencetype = REFERENCE_GONG_STRUCT
	case "REFERENCE_GONG_ENUM":
		*referencetype = REFERENCE_GONG_ENUM
	default:
		return errUnkownEnum
	}
	return
}

func (referencetype *ReferenceType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "REFERENCE_GONG_STRUCT":
		*referencetype = REFERENCE_GONG_STRUCT
	case "REFERENCE_GONG_ENUM":
		*referencetype = REFERENCE_GONG_ENUM
	default:
		return errUnkownEnum
	}
	return
}

func (referencetype *ReferenceType) ToCodeString() (res string) {

	switch *referencetype {
	// insertion code per enum code
	case REFERENCE_GONG_STRUCT:
		res = "REFERENCE_GONG_STRUCT"
	case REFERENCE_GONG_ENUM:
		res = "REFERENCE_GONG_ENUM"
	}
	return
}

// Utility function for TreeType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (treetype TreeType) ToString() (res string) {

	// migration of former implementation of enum
	switch treetype {
	// insertion code per enum code
	case TREE_OF_DIAGRAMS:
		res = "TREE_OF_DIAGRAMS"
	case TREE_OF_IDENTIFIERS:
		res = "TREE_OF_IDENTIFIERS"
	}
	return
}

func (treetype *TreeType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "TREE_OF_DIAGRAMS":
		*treetype = TREE_OF_DIAGRAMS
	case "TREE_OF_IDENTIFIERS":
		*treetype = TREE_OF_IDENTIFIERS
	default:
		return errUnkownEnum
	}
	return
}

func (treetype *TreeType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "TREE_OF_DIAGRAMS":
		*treetype = TREE_OF_DIAGRAMS
	case "TREE_OF_IDENTIFIERS":
		*treetype = TREE_OF_IDENTIFIERS
	default:
		return errUnkownEnum
	}
	return
}

func (treetype *TreeType) ToCodeString() (res string) {

	switch *treetype {
	// insertion code per enum code
	case TREE_OF_DIAGRAMS:
		res = "TREE_OF_DIAGRAMS"
	case TREE_OF_IDENTIFIERS:
		res = "TREE_OF_IDENTIFIERS"
	}
	return
}

// Last line of the template
