// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_NoteLink_sql sql.NullBool
var dummy_NoteLink_time time.Duration
var dummy_NoteLink_sort sort.Float64Slice

// NoteLinkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model notelinkAPI
type NoteLinkAPI struct {
	gorm.Model

	models.NoteLink

	// encoding of pointers
	NoteLinkPointersEnconding
}

// NoteLinkPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type NoteLinkPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Classshape is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ClassshapeID sql.NullInt64

	// field Link is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	LinkID sql.NullInt64

	// field Middlevertice is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MiddleverticeID sql.NullInt64

	// Implementation of a reverse ID for field NoteShape{}.NoteLinks []*NoteLink
	NoteShape_NoteLinksDBID sql.NullInt64

	// implementation of the index of the withing the slice
	NoteShape_NoteLinksDBID_Index sql.NullInt64
}

// NoteLinkDB describes a notelink in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model notelinkDB
type NoteLinkDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field notelinkDB.Name
	Name_Data sql.NullString

	// Declation for basic field notelinkDB.Type
	Type_Data sql.NullString
	// encoding of pointers
	NoteLinkPointersEnconding
}

// NoteLinkDBs arrays notelinkDBs
// swagger:response notelinkDBsResponse
type NoteLinkDBs []NoteLinkDB

// NoteLinkDBResponse provides response
// swagger:response notelinkDBResponse
type NoteLinkDBResponse struct {
	NoteLinkDB
}

// NoteLinkWOP is a NoteLink without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type NoteLinkWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Type models.ReferenceType `xlsx:"2"`
	// insertion for WOP pointer fields
}

var NoteLink_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Type",
}

type BackRepoNoteLinkStruct struct {
	// stores NoteLinkDB according to their gorm ID
	Map_NoteLinkDBID_NoteLinkDB *map[uint]*NoteLinkDB

	// stores NoteLinkDB ID according to NoteLink address
	Map_NoteLinkPtr_NoteLinkDBID *map[*models.NoteLink]uint

	// stores NoteLink according to their gorm ID
	Map_NoteLinkDBID_NoteLinkPtr *map[uint]*models.NoteLink

	db *gorm.DB
}

func (backRepoNoteLink *BackRepoNoteLinkStruct) GetDB() *gorm.DB {
	return backRepoNoteLink.db
}

// GetNoteLinkDBFromNoteLinkPtr is a handy function to access the back repo instance from the stage instance
func (backRepoNoteLink *BackRepoNoteLinkStruct) GetNoteLinkDBFromNoteLinkPtr(notelink *models.NoteLink) (notelinkDB *NoteLinkDB) {
	id := (*backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID)[notelink]
	notelinkDB = (*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB)[id]
	return
}

// BackRepoNoteLink.Init set up the BackRepo of the NoteLink
func (backRepoNoteLink *BackRepoNoteLinkStruct) Init(db *gorm.DB) (Error error) {

	if backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr != nil {
		err := errors.New("In Init, backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr should be nil")
		return err
	}

	if backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB != nil {
		err := errors.New("In Init, backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB should be nil")
		return err
	}

	if backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID != nil {
		err := errors.New("In Init, backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.NoteLink, 0)
	backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr = &tmp

	tmpDB := make(map[uint]*NoteLinkDB, 0)
	backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB = &tmpDB

	tmpID := make(map[*models.NoteLink]uint, 0)
	backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID = &tmpID

	backRepoNoteLink.db = db
	return
}

// BackRepoNoteLink.CommitPhaseOne commits all staged instances of NoteLink to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNoteLink *BackRepoNoteLinkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for notelink := range stage.NoteLinks {
		backRepoNoteLink.CommitPhaseOneInstance(notelink)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, notelink := range *backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr {
		if _, ok := stage.NoteLinks[notelink]; !ok {
			backRepoNoteLink.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNoteLink.CommitDeleteInstance commits deletion of NoteLink to the BackRepo
func (backRepoNoteLink *BackRepoNoteLinkStruct) CommitDeleteInstance(id uint) (Error error) {

	notelink := (*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[id]

	// notelink is not staged anymore, remove notelinkDB
	notelinkDB := (*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB)[id]
	query := backRepoNoteLink.db.Unscoped().Delete(&notelinkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID), notelink)
	delete((*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr), id)
	delete((*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB), id)

	return
}

// BackRepoNoteLink.CommitPhaseOneInstance commits notelink staged instances of NoteLink to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNoteLink *BackRepoNoteLinkStruct) CommitPhaseOneInstance(notelink *models.NoteLink) (Error error) {

	// check if the notelink is not commited yet
	if _, ok := (*backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID)[notelink]; ok {
		return
	}

	// initiate notelink
	var notelinkDB NoteLinkDB
	notelinkDB.CopyBasicFieldsFromNoteLink(notelink)

	query := backRepoNoteLink.db.Create(&notelinkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID)[notelink] = notelinkDB.ID
	(*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[notelinkDB.ID] = notelink
	(*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB)[notelinkDB.ID] = &notelinkDB

	return
}

// BackRepoNoteLink.CommitPhaseTwo commits all staged instances of NoteLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNoteLink *BackRepoNoteLinkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, notelink := range *backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr {
		backRepoNoteLink.CommitPhaseTwoInstance(backRepo, idx, notelink)
	}

	return
}

// BackRepoNoteLink.CommitPhaseTwoInstance commits {{structname }} of models.NoteLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNoteLink *BackRepoNoteLinkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, notelink *models.NoteLink) (Error error) {

	// fetch matching notelinkDB
	if notelinkDB, ok := (*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB)[idx]; ok {

		notelinkDB.CopyBasicFieldsFromNoteLink(notelink)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value notelink.Classshape translates to updating the notelink.ClassshapeID
		notelinkDB.ClassshapeID.Valid = true // allow for a 0 value (nil association)
		if notelink.Classshape != nil {
			if ClassshapeId, ok := (*backRepo.BackRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[notelink.Classshape]; ok {
				notelinkDB.ClassshapeID.Int64 = int64(ClassshapeId)
				notelinkDB.ClassshapeID.Valid = true
			}
		}

		// commit pointer value notelink.Link translates to updating the notelink.LinkID
		notelinkDB.LinkID.Valid = true // allow for a 0 value (nil association)
		if notelink.Link != nil {
			if LinkId, ok := (*backRepo.BackRepoLink.Map_LinkPtr_LinkDBID)[notelink.Link]; ok {
				notelinkDB.LinkID.Int64 = int64(LinkId)
				notelinkDB.LinkID.Valid = true
			}
		}

		// commit pointer value notelink.Middlevertice translates to updating the notelink.MiddleverticeID
		notelinkDB.MiddleverticeID.Valid = true // allow for a 0 value (nil association)
		if notelink.Middlevertice != nil {
			if MiddleverticeId, ok := (*backRepo.BackRepoVertice.Map_VerticePtr_VerticeDBID)[notelink.Middlevertice]; ok {
				notelinkDB.MiddleverticeID.Int64 = int64(MiddleverticeId)
				notelinkDB.MiddleverticeID.Valid = true
			}
		}

		query := backRepoNoteLink.db.Save(&notelinkDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown NoteLink intance %s", notelink.Name))
		return err
	}

	return
}

// BackRepoNoteLink.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoNoteLink *BackRepoNoteLinkStruct) CheckoutPhaseOne() (Error error) {

	notelinkDBArray := make([]NoteLinkDB, 0)
	query := backRepoNoteLink.db.Find(&notelinkDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	notelinkInstancesToBeRemovedFromTheStage := make(map[*models.NoteLink]any)
	for key, value := range models.Stage.NoteLinks {
		notelinkInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, notelinkDB := range notelinkDBArray {
		backRepoNoteLink.CheckoutPhaseOneInstance(&notelinkDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		notelink, ok := (*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[notelinkDB.ID]
		if ok {
			delete(notelinkInstancesToBeRemovedFromTheStage, notelink)
		}
	}

	// remove from stage and back repo's 3 maps all notelinks that are not in the checkout
	for notelink := range notelinkInstancesToBeRemovedFromTheStage {
		notelink.Unstage()

		// remove instance from the back repo 3 maps
		notelinkID := (*backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID)[notelink]
		delete((*backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID), notelink)
		delete((*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB), notelinkID)
		delete((*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr), notelinkID)
	}

	return
}

// CheckoutPhaseOneInstance takes a notelinkDB that has been found in the DB, updates the backRepo and stages the
// models version of the notelinkDB
func (backRepoNoteLink *BackRepoNoteLinkStruct) CheckoutPhaseOneInstance(notelinkDB *NoteLinkDB) (Error error) {

	notelink, ok := (*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[notelinkDB.ID]
	if !ok {
		notelink = new(models.NoteLink)

		(*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[notelinkDB.ID] = notelink
		(*backRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID)[notelink] = notelinkDB.ID

		// append model store with the new element
		notelink.Name = notelinkDB.Name_Data.String
		notelink.Stage()
	}
	notelinkDB.CopyBasicFieldsToNoteLink(notelink)

	// preserve pointer to notelinkDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_NoteLinkDBID_NoteLinkDB)[notelinkDB hold variable pointers
	notelinkDB_Data := *notelinkDB
	preservedPtrToNoteLink := &notelinkDB_Data
	(*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB)[notelinkDB.ID] = preservedPtrToNoteLink

	return
}

// BackRepoNoteLink.CheckoutPhaseTwo Checkouts all staged instances of NoteLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNoteLink *BackRepoNoteLinkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, notelinkDB := range *backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB {
		backRepoNoteLink.CheckoutPhaseTwoInstance(backRepo, notelinkDB)
	}
	return
}

// BackRepoNoteLink.CheckoutPhaseTwoInstance Checkouts staged instances of NoteLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNoteLink *BackRepoNoteLinkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, notelinkDB *NoteLinkDB) (Error error) {

	notelink := (*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkPtr)[notelinkDB.ID]
	_ = notelink // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Classshape field
	if notelinkDB.ClassshapeID.Int64 != 0 {
		notelink.Classshape = (*backRepo.BackRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[uint(notelinkDB.ClassshapeID.Int64)]
	}
	// Link field
	if notelinkDB.LinkID.Int64 != 0 {
		notelink.Link = (*backRepo.BackRepoLink.Map_LinkDBID_LinkPtr)[uint(notelinkDB.LinkID.Int64)]
	}
	// Middlevertice field
	if notelinkDB.MiddleverticeID.Int64 != 0 {
		notelink.Middlevertice = (*backRepo.BackRepoVertice.Map_VerticeDBID_VerticePtr)[uint(notelinkDB.MiddleverticeID.Int64)]
	}
	return
}

// CommitNoteLink allows commit of a single notelink (if already staged)
func (backRepo *BackRepoStruct) CommitNoteLink(notelink *models.NoteLink) {
	backRepo.BackRepoNoteLink.CommitPhaseOneInstance(notelink)
	if id, ok := (*backRepo.BackRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID)[notelink]; ok {
		backRepo.BackRepoNoteLink.CommitPhaseTwoInstance(backRepo, id, notelink)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNoteLink allows checkout of a single notelink (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNoteLink(notelink *models.NoteLink) {
	// check if the notelink is staged
	if _, ok := (*backRepo.BackRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID)[notelink]; ok {

		if id, ok := (*backRepo.BackRepoNoteLink.Map_NoteLinkPtr_NoteLinkDBID)[notelink]; ok {
			var notelinkDB NoteLinkDB
			notelinkDB.ID = id

			if err := backRepo.BackRepoNoteLink.db.First(&notelinkDB, id).Error; err != nil {
				log.Panicln("CheckoutNoteLink : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNoteLink.CheckoutPhaseOneInstance(&notelinkDB)
			backRepo.BackRepoNoteLink.CheckoutPhaseTwoInstance(backRepo, &notelinkDB)
		}
	}
}

// CopyBasicFieldsFromNoteLink
func (notelinkDB *NoteLinkDB) CopyBasicFieldsFromNoteLink(notelink *models.NoteLink) {
	// insertion point for fields commit

	notelinkDB.Name_Data.String = notelink.Name
	notelinkDB.Name_Data.Valid = true

	notelinkDB.Type_Data.String = notelink.Type.ToString()
	notelinkDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromNoteLinkWOP
func (notelinkDB *NoteLinkDB) CopyBasicFieldsFromNoteLinkWOP(notelink *NoteLinkWOP) {
	// insertion point for fields commit

	notelinkDB.Name_Data.String = notelink.Name
	notelinkDB.Name_Data.Valid = true

	notelinkDB.Type_Data.String = notelink.Type.ToString()
	notelinkDB.Type_Data.Valid = true
}

// CopyBasicFieldsToNoteLink
func (notelinkDB *NoteLinkDB) CopyBasicFieldsToNoteLink(notelink *models.NoteLink) {
	// insertion point for checkout of basic fields (back repo to stage)
	notelink.Name = notelinkDB.Name_Data.String
	notelink.Type.FromString(notelinkDB.Type_Data.String)
}

// CopyBasicFieldsToNoteLinkWOP
func (notelinkDB *NoteLinkDB) CopyBasicFieldsToNoteLinkWOP(notelink *NoteLinkWOP) {
	notelink.ID = int(notelinkDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	notelink.Name = notelinkDB.Name_Data.String
	notelink.Type.FromString(notelinkDB.Type_Data.String)
}

// Backup generates a json file from a slice of all NoteLinkDB instances in the backrepo
func (backRepoNoteLink *BackRepoNoteLinkStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "NoteLinkDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NoteLinkDB, 0)
	for _, notelinkDB := range *backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB {
		forBackup = append(forBackup, notelinkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json NoteLink ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json NoteLink file", err.Error())
	}
}

// Backup generates a json file from a slice of all NoteLinkDB instances in the backrepo
func (backRepoNoteLink *BackRepoNoteLinkStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NoteLinkDB, 0)
	for _, notelinkDB := range *backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB {
		forBackup = append(forBackup, notelinkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("NoteLink")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&NoteLink_Fields, -1)
	for _, notelinkDB := range forBackup {

		var notelinkWOP NoteLinkWOP
		notelinkDB.CopyBasicFieldsToNoteLinkWOP(&notelinkWOP)

		row := sh.AddRow()
		row.WriteStruct(&notelinkWOP, -1)
	}
}

// RestoreXL from the "NoteLink" sheet all NoteLinkDB instances
func (backRepoNoteLink *BackRepoNoteLinkStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNoteLinkid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["NoteLink"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNoteLink.rowVisitorNoteLink)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoNoteLink *BackRepoNoteLinkStruct) rowVisitorNoteLink(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var notelinkWOP NoteLinkWOP
		row.ReadStruct(&notelinkWOP)

		// add the unmarshalled struct to the stage
		notelinkDB := new(NoteLinkDB)
		notelinkDB.CopyBasicFieldsFromNoteLinkWOP(&notelinkWOP)

		notelinkDB_ID_atBackupTime := notelinkDB.ID
		notelinkDB.ID = 0
		query := backRepoNoteLink.db.Create(notelinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB)[notelinkDB.ID] = notelinkDB
		BackRepoNoteLinkid_atBckpTime_newID[notelinkDB_ID_atBackupTime] = notelinkDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "NoteLinkDB.json" in dirPath that stores an array
// of NoteLinkDB and stores it in the database
// the map BackRepoNoteLinkid_atBckpTime_newID is updated accordingly
func (backRepoNoteLink *BackRepoNoteLinkStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNoteLinkid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "NoteLinkDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json NoteLink file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*NoteLinkDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_NoteLinkDBID_NoteLinkDB
	for _, notelinkDB := range forRestore {

		notelinkDB_ID_atBackupTime := notelinkDB.ID
		notelinkDB.ID = 0
		query := backRepoNoteLink.db.Create(notelinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB)[notelinkDB.ID] = notelinkDB
		BackRepoNoteLinkid_atBckpTime_newID[notelinkDB_ID_atBackupTime] = notelinkDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json NoteLink file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<NoteLink>id_atBckpTime_newID
// to compute new index
func (backRepoNoteLink *BackRepoNoteLinkStruct) RestorePhaseTwo() {

	for _, notelinkDB := range *backRepoNoteLink.Map_NoteLinkDBID_NoteLinkDB {

		// next line of code is to avert unused variable compilation error
		_ = notelinkDB

		// insertion point for reindexing pointers encoding
		// reindexing Classshape field
		if notelinkDB.ClassshapeID.Int64 != 0 {
			notelinkDB.ClassshapeID.Int64 = int64(BackRepoClassshapeid_atBckpTime_newID[uint(notelinkDB.ClassshapeID.Int64)])
			notelinkDB.ClassshapeID.Valid = true
		}

		// reindexing Link field
		if notelinkDB.LinkID.Int64 != 0 {
			notelinkDB.LinkID.Int64 = int64(BackRepoLinkid_atBckpTime_newID[uint(notelinkDB.LinkID.Int64)])
			notelinkDB.LinkID.Valid = true
		}

		// reindexing Middlevertice field
		if notelinkDB.MiddleverticeID.Int64 != 0 {
			notelinkDB.MiddleverticeID.Int64 = int64(BackRepoVerticeid_atBckpTime_newID[uint(notelinkDB.MiddleverticeID.Int64)])
			notelinkDB.MiddleverticeID.Valid = true
		}

		// This reindex notelink.NoteLinks
		if notelinkDB.NoteShape_NoteLinksDBID.Int64 != 0 {
			notelinkDB.NoteShape_NoteLinksDBID.Int64 =
				int64(BackRepoNoteShapeid_atBckpTime_newID[uint(notelinkDB.NoteShape_NoteLinksDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoNoteLink.db.Model(notelinkDB).Updates(*notelinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNoteLinkid_atBckpTime_newID map[uint]uint
