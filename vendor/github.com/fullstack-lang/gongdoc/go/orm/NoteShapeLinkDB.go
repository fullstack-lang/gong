// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_NoteShapeLink_sql sql.NullBool
var dummy_NoteShapeLink_time time.Duration
var dummy_NoteShapeLink_sort sort.Float64Slice

// NoteShapeLinkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model noteshapelinkAPI
type NoteShapeLinkAPI struct {
	gorm.Model

	models.NoteShapeLink

	// encoding of pointers
	NoteShapeLinkPointersEnconding
}

// NoteShapeLinkPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type NoteShapeLinkPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field NoteShape{}.NoteShapeLinks []*NoteShapeLink
	NoteShape_NoteShapeLinksDBID sql.NullInt64

	// implementation of the index of the withing the slice
	NoteShape_NoteShapeLinksDBID_Index sql.NullInt64
}

// NoteShapeLinkDB describes a noteshapelink in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model noteshapelinkDB
type NoteShapeLinkDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field noteshapelinkDB.Name
	Name_Data sql.NullString

	// Declation for basic field noteshapelinkDB.Identifier
	Identifier_Data sql.NullString

	// Declation for basic field noteshapelinkDB.Type
	Type_Data sql.NullString
	// encoding of pointers
	NoteShapeLinkPointersEnconding
}

// NoteShapeLinkDBs arrays noteshapelinkDBs
// swagger:response noteshapelinkDBsResponse
type NoteShapeLinkDBs []NoteShapeLinkDB

// NoteShapeLinkDBResponse provides response
// swagger:response noteshapelinkDBResponse
type NoteShapeLinkDBResponse struct {
	NoteShapeLinkDB
}

// NoteShapeLinkWOP is a NoteShapeLink without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type NoteShapeLinkWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Identifier string `xlsx:"2"`

	Type models.NoteShapeLinkType `xlsx:"3"`
	// insertion for WOP pointer fields
}

var NoteShapeLink_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Identifier",
	"Type",
}

type BackRepoNoteShapeLinkStruct struct {
	// stores NoteShapeLinkDB according to their gorm ID
	Map_NoteShapeLinkDBID_NoteShapeLinkDB map[uint]*NoteShapeLinkDB

	// stores NoteShapeLinkDB ID according to NoteShapeLink address
	Map_NoteShapeLinkPtr_NoteShapeLinkDBID map[*models.NoteShapeLink]uint

	// stores NoteShapeLink according to their gorm ID
	Map_NoteShapeLinkDBID_NoteShapeLinkPtr map[uint]*models.NoteShapeLink

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNoteShapeLink.stage
	return
}

func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) GetDB() *gorm.DB {
	return backRepoNoteShapeLink.db
}

// GetNoteShapeLinkDBFromNoteShapeLinkPtr is a handy function to access the back repo instance from the stage instance
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) GetNoteShapeLinkDBFromNoteShapeLinkPtr(noteshapelink *models.NoteShapeLink) (noteshapelinkDB *NoteShapeLinkDB) {
	id := backRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID[noteshapelink]
	noteshapelinkDB = backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB[id]
	return
}

// BackRepoNoteShapeLink.CommitPhaseOne commits all staged instances of NoteShapeLink to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for noteshapelink := range stage.NoteShapeLinks {
		backRepoNoteShapeLink.CommitPhaseOneInstance(noteshapelink)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, noteshapelink := range backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr {
		if _, ok := stage.NoteShapeLinks[noteshapelink]; !ok {
			backRepoNoteShapeLink.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNoteShapeLink.CommitDeleteInstance commits deletion of NoteShapeLink to the BackRepo
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CommitDeleteInstance(id uint) (Error error) {

	noteshapelink := backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr[id]

	// noteshapelink is not staged anymore, remove noteshapelinkDB
	noteshapelinkDB := backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB[id]
	query := backRepoNoteShapeLink.db.Unscoped().Delete(&noteshapelinkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID, noteshapelink)
	delete(backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr, id)
	delete(backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB, id)

	return
}

// BackRepoNoteShapeLink.CommitPhaseOneInstance commits noteshapelink staged instances of NoteShapeLink to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CommitPhaseOneInstance(noteshapelink *models.NoteShapeLink) (Error error) {

	// check if the noteshapelink is not commited yet
	if _, ok := backRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID[noteshapelink]; ok {
		return
	}

	// initiate noteshapelink
	var noteshapelinkDB NoteShapeLinkDB
	noteshapelinkDB.CopyBasicFieldsFromNoteShapeLink(noteshapelink)

	query := backRepoNoteShapeLink.db.Create(&noteshapelinkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID[noteshapelink] = noteshapelinkDB.ID
	backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr[noteshapelinkDB.ID] = noteshapelink
	backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB[noteshapelinkDB.ID] = &noteshapelinkDB

	return
}

// BackRepoNoteShapeLink.CommitPhaseTwo commits all staged instances of NoteShapeLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, noteshapelink := range backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr {
		backRepoNoteShapeLink.CommitPhaseTwoInstance(backRepo, idx, noteshapelink)
	}

	return
}

// BackRepoNoteShapeLink.CommitPhaseTwoInstance commits {{structname }} of models.NoteShapeLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, noteshapelink *models.NoteShapeLink) (Error error) {

	// fetch matching noteshapelinkDB
	if noteshapelinkDB, ok := backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB[idx]; ok {

		noteshapelinkDB.CopyBasicFieldsFromNoteShapeLink(noteshapelink)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoNoteShapeLink.db.Save(&noteshapelinkDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown NoteShapeLink intance %s", noteshapelink.Name))
		return err
	}

	return
}

// BackRepoNoteShapeLink.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CheckoutPhaseOne() (Error error) {

	noteshapelinkDBArray := make([]NoteShapeLinkDB, 0)
	query := backRepoNoteShapeLink.db.Find(&noteshapelinkDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	noteshapelinkInstancesToBeRemovedFromTheStage := make(map[*models.NoteShapeLink]any)
	for key, value := range backRepoNoteShapeLink.stage.NoteShapeLinks {
		noteshapelinkInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, noteshapelinkDB := range noteshapelinkDBArray {
		backRepoNoteShapeLink.CheckoutPhaseOneInstance(&noteshapelinkDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		noteshapelink, ok := backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr[noteshapelinkDB.ID]
		if ok {
			delete(noteshapelinkInstancesToBeRemovedFromTheStage, noteshapelink)
		}
	}

	// remove from stage and back repo's 3 maps all noteshapelinks that are not in the checkout
	for noteshapelink := range noteshapelinkInstancesToBeRemovedFromTheStage {
		noteshapelink.Unstage(backRepoNoteShapeLink.GetStage())

		// remove instance from the back repo 3 maps
		noteshapelinkID := backRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID[noteshapelink]
		delete(backRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID, noteshapelink)
		delete(backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB, noteshapelinkID)
		delete(backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr, noteshapelinkID)
	}

	return
}

// CheckoutPhaseOneInstance takes a noteshapelinkDB that has been found in the DB, updates the backRepo and stages the
// models version of the noteshapelinkDB
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CheckoutPhaseOneInstance(noteshapelinkDB *NoteShapeLinkDB) (Error error) {

	noteshapelink, ok := backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr[noteshapelinkDB.ID]
	if !ok {
		noteshapelink = new(models.NoteShapeLink)

		backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr[noteshapelinkDB.ID] = noteshapelink
		backRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID[noteshapelink] = noteshapelinkDB.ID

		// append model store with the new element
		noteshapelink.Name = noteshapelinkDB.Name_Data.String
		noteshapelink.Stage(backRepoNoteShapeLink.GetStage())
	}
	noteshapelinkDB.CopyBasicFieldsToNoteShapeLink(noteshapelink)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	noteshapelink.Stage(backRepoNoteShapeLink.GetStage())

	// preserve pointer to noteshapelinkDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_NoteShapeLinkDBID_NoteShapeLinkDB)[noteshapelinkDB hold variable pointers
	noteshapelinkDB_Data := *noteshapelinkDB
	preservedPtrToNoteShapeLink := &noteshapelinkDB_Data
	backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB[noteshapelinkDB.ID] = preservedPtrToNoteShapeLink

	return
}

// BackRepoNoteShapeLink.CheckoutPhaseTwo Checkouts all staged instances of NoteShapeLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, noteshapelinkDB := range backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB {
		backRepoNoteShapeLink.CheckoutPhaseTwoInstance(backRepo, noteshapelinkDB)
	}
	return
}

// BackRepoNoteShapeLink.CheckoutPhaseTwoInstance Checkouts staged instances of NoteShapeLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, noteshapelinkDB *NoteShapeLinkDB) (Error error) {

	noteshapelink := backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkPtr[noteshapelinkDB.ID]
	_ = noteshapelink // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitNoteShapeLink allows commit of a single noteshapelink (if already staged)
func (backRepo *BackRepoStruct) CommitNoteShapeLink(noteshapelink *models.NoteShapeLink) {
	backRepo.BackRepoNoteShapeLink.CommitPhaseOneInstance(noteshapelink)
	if id, ok := backRepo.BackRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID[noteshapelink]; ok {
		backRepo.BackRepoNoteShapeLink.CommitPhaseTwoInstance(backRepo, id, noteshapelink)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNoteShapeLink allows checkout of a single noteshapelink (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNoteShapeLink(noteshapelink *models.NoteShapeLink) {
	// check if the noteshapelink is staged
	if _, ok := backRepo.BackRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID[noteshapelink]; ok {

		if id, ok := backRepo.BackRepoNoteShapeLink.Map_NoteShapeLinkPtr_NoteShapeLinkDBID[noteshapelink]; ok {
			var noteshapelinkDB NoteShapeLinkDB
			noteshapelinkDB.ID = id

			if err := backRepo.BackRepoNoteShapeLink.db.First(&noteshapelinkDB, id).Error; err != nil {
				log.Panicln("CheckoutNoteShapeLink : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNoteShapeLink.CheckoutPhaseOneInstance(&noteshapelinkDB)
			backRepo.BackRepoNoteShapeLink.CheckoutPhaseTwoInstance(backRepo, &noteshapelinkDB)
		}
	}
}

// CopyBasicFieldsFromNoteShapeLink
func (noteshapelinkDB *NoteShapeLinkDB) CopyBasicFieldsFromNoteShapeLink(noteshapelink *models.NoteShapeLink) {
	// insertion point for fields commit

	noteshapelinkDB.Name_Data.String = noteshapelink.Name
	noteshapelinkDB.Name_Data.Valid = true

	noteshapelinkDB.Identifier_Data.String = noteshapelink.Identifier
	noteshapelinkDB.Identifier_Data.Valid = true

	noteshapelinkDB.Type_Data.String = noteshapelink.Type.ToString()
	noteshapelinkDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromNoteShapeLinkWOP
func (noteshapelinkDB *NoteShapeLinkDB) CopyBasicFieldsFromNoteShapeLinkWOP(noteshapelink *NoteShapeLinkWOP) {
	// insertion point for fields commit

	noteshapelinkDB.Name_Data.String = noteshapelink.Name
	noteshapelinkDB.Name_Data.Valid = true

	noteshapelinkDB.Identifier_Data.String = noteshapelink.Identifier
	noteshapelinkDB.Identifier_Data.Valid = true

	noteshapelinkDB.Type_Data.String = noteshapelink.Type.ToString()
	noteshapelinkDB.Type_Data.Valid = true
}

// CopyBasicFieldsToNoteShapeLink
func (noteshapelinkDB *NoteShapeLinkDB) CopyBasicFieldsToNoteShapeLink(noteshapelink *models.NoteShapeLink) {
	// insertion point for checkout of basic fields (back repo to stage)
	noteshapelink.Name = noteshapelinkDB.Name_Data.String
	noteshapelink.Identifier = noteshapelinkDB.Identifier_Data.String
	noteshapelink.Type.FromString(noteshapelinkDB.Type_Data.String)
}

// CopyBasicFieldsToNoteShapeLinkWOP
func (noteshapelinkDB *NoteShapeLinkDB) CopyBasicFieldsToNoteShapeLinkWOP(noteshapelink *NoteShapeLinkWOP) {
	noteshapelink.ID = int(noteshapelinkDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	noteshapelink.Name = noteshapelinkDB.Name_Data.String
	noteshapelink.Identifier = noteshapelinkDB.Identifier_Data.String
	noteshapelink.Type.FromString(noteshapelinkDB.Type_Data.String)
}

// Backup generates a json file from a slice of all NoteShapeLinkDB instances in the backrepo
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "NoteShapeLinkDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NoteShapeLinkDB, 0)
	for _, noteshapelinkDB := range backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB {
		forBackup = append(forBackup, noteshapelinkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json NoteShapeLink ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json NoteShapeLink file", err.Error())
	}
}

// Backup generates a json file from a slice of all NoteShapeLinkDB instances in the backrepo
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NoteShapeLinkDB, 0)
	for _, noteshapelinkDB := range backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB {
		forBackup = append(forBackup, noteshapelinkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("NoteShapeLink")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&NoteShapeLink_Fields, -1)
	for _, noteshapelinkDB := range forBackup {

		var noteshapelinkWOP NoteShapeLinkWOP
		noteshapelinkDB.CopyBasicFieldsToNoteShapeLinkWOP(&noteshapelinkWOP)

		row := sh.AddRow()
		row.WriteStruct(&noteshapelinkWOP, -1)
	}
}

// RestoreXL from the "NoteShapeLink" sheet all NoteShapeLinkDB instances
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNoteShapeLinkid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["NoteShapeLink"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNoteShapeLink.rowVisitorNoteShapeLink)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) rowVisitorNoteShapeLink(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var noteshapelinkWOP NoteShapeLinkWOP
		row.ReadStruct(&noteshapelinkWOP)

		// add the unmarshalled struct to the stage
		noteshapelinkDB := new(NoteShapeLinkDB)
		noteshapelinkDB.CopyBasicFieldsFromNoteShapeLinkWOP(&noteshapelinkWOP)

		noteshapelinkDB_ID_atBackupTime := noteshapelinkDB.ID
		noteshapelinkDB.ID = 0
		query := backRepoNoteShapeLink.db.Create(noteshapelinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB[noteshapelinkDB.ID] = noteshapelinkDB
		BackRepoNoteShapeLinkid_atBckpTime_newID[noteshapelinkDB_ID_atBackupTime] = noteshapelinkDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "NoteShapeLinkDB.json" in dirPath that stores an array
// of NoteShapeLinkDB and stores it in the database
// the map BackRepoNoteShapeLinkid_atBckpTime_newID is updated accordingly
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNoteShapeLinkid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "NoteShapeLinkDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json NoteShapeLink file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*NoteShapeLinkDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_NoteShapeLinkDBID_NoteShapeLinkDB
	for _, noteshapelinkDB := range forRestore {

		noteshapelinkDB_ID_atBackupTime := noteshapelinkDB.ID
		noteshapelinkDB.ID = 0
		query := backRepoNoteShapeLink.db.Create(noteshapelinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB[noteshapelinkDB.ID] = noteshapelinkDB
		BackRepoNoteShapeLinkid_atBckpTime_newID[noteshapelinkDB_ID_atBackupTime] = noteshapelinkDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json NoteShapeLink file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<NoteShapeLink>id_atBckpTime_newID
// to compute new index
func (backRepoNoteShapeLink *BackRepoNoteShapeLinkStruct) RestorePhaseTwo() {

	for _, noteshapelinkDB := range backRepoNoteShapeLink.Map_NoteShapeLinkDBID_NoteShapeLinkDB {

		// next line of code is to avert unused variable compilation error
		_ = noteshapelinkDB

		// insertion point for reindexing pointers encoding
		// This reindex noteshapelink.NoteShapeLinks
		if noteshapelinkDB.NoteShape_NoteShapeLinksDBID.Int64 != 0 {
			noteshapelinkDB.NoteShape_NoteShapeLinksDBID.Int64 =
				int64(BackRepoNoteShapeid_atBckpTime_newID[uint(noteshapelinkDB.NoteShape_NoteShapeLinksDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoNoteShapeLink.db.Model(noteshapelinkDB).Updates(*noteshapelinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNoteShapeLinkid_atBckpTime_newID map[uint]uint
