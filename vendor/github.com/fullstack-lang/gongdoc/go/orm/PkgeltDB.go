// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Pkgelt_sql sql.NullBool
var dummy_Pkgelt_time time.Duration
var dummy_Pkgelt_sort sort.Float64Slice

// PkgeltAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pkgeltAPI
type PkgeltAPI struct {
	gorm.Model

	models.Pkgelt

	// encoding of pointers
	PkgeltPointersEnconding
}

// PkgeltPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PkgeltPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// PkgeltDB describes a pkgelt in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model pkgeltDB
type PkgeltDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field pkgeltDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field pkgeltDB.Path {{BasicKind}} (to be completed)
	Path_Data sql.NullString

	// Declation for basic field pkgeltDB.GongModelPath {{BasicKind}} (to be completed)
	GongModelPath_Data sql.NullString
	// encoding of pointers
	PkgeltPointersEnconding
}

// PkgeltDBs arrays pkgeltDBs
// swagger:response pkgeltDBsResponse
type PkgeltDBs []PkgeltDB

// PkgeltDBResponse provides response
// swagger:response pkgeltDBResponse
type PkgeltDBResponse struct {
	PkgeltDB
}

// PkgeltWOP is a Pkgelt without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PkgeltWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Path string `xlsx:"2"`

	GongModelPath string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Pkgelt_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Path",
	"GongModelPath",
}

type BackRepoPkgeltStruct struct {
	// stores PkgeltDB according to their gorm ID
	Map_PkgeltDBID_PkgeltDB *map[uint]*PkgeltDB

	// stores PkgeltDB ID according to Pkgelt address
	Map_PkgeltPtr_PkgeltDBID *map[*models.Pkgelt]uint

	// stores Pkgelt according to their gorm ID
	Map_PkgeltDBID_PkgeltPtr *map[uint]*models.Pkgelt

	db *gorm.DB
}

func (backRepoPkgelt *BackRepoPkgeltStruct) GetDB() *gorm.DB {
	return backRepoPkgelt.db
}

// GetPkgeltDBFromPkgeltPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPkgelt *BackRepoPkgeltStruct) GetPkgeltDBFromPkgeltPtr(pkgelt *models.Pkgelt) (pkgeltDB *PkgeltDB) {
	id := (*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]
	pkgeltDB = (*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[id]
	return
}

// BackRepoPkgelt.Init set up the BackRepo of the Pkgelt
func (backRepoPkgelt *BackRepoPkgeltStruct) Init(db *gorm.DB) (Error error) {

	if backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr != nil {
		err := errors.New("In Init, backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr should be nil")
		return err
	}

	if backRepoPkgelt.Map_PkgeltDBID_PkgeltDB != nil {
		err := errors.New("In Init, backRepoPkgelt.Map_PkgeltDBID_PkgeltDB should be nil")
		return err
	}

	if backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID != nil {
		err := errors.New("In Init, backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Pkgelt, 0)
	backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr = &tmp

	tmpDB := make(map[uint]*PkgeltDB, 0)
	backRepoPkgelt.Map_PkgeltDBID_PkgeltDB = &tmpDB

	tmpID := make(map[*models.Pkgelt]uint, 0)
	backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID = &tmpID

	backRepoPkgelt.db = db
	return
}

// BackRepoPkgelt.CommitPhaseOne commits all staged instances of Pkgelt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pkgelt := range stage.Pkgelts {
		backRepoPkgelt.CommitPhaseOneInstance(pkgelt)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pkgelt := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr {
		if _, ok := stage.Pkgelts[pkgelt]; !ok {
			backRepoPkgelt.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPkgelt.CommitDeleteInstance commits deletion of Pkgelt to the BackRepo
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitDeleteInstance(id uint) (Error error) {

	pkgelt := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[id]

	// pkgelt is not staged anymore, remove pkgeltDB
	pkgeltDB := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[id]
	query := backRepoPkgelt.db.Unscoped().Delete(&pkgeltDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID), pkgelt)
	delete((*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr), id)
	delete((*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB), id)

	return
}

// BackRepoPkgelt.CommitPhaseOneInstance commits pkgelt staged instances of Pkgelt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitPhaseOneInstance(pkgelt *models.Pkgelt) (Error error) {

	// check if the pkgelt is not commited yet
	if _, ok := (*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]; ok {
		return
	}

	// initiate pkgelt
	var pkgeltDB PkgeltDB
	pkgeltDB.CopyBasicFieldsFromPkgelt(pkgelt)

	query := backRepoPkgelt.db.Create(&pkgeltDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt] = pkgeltDB.ID
	(*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID] = pkgelt
	(*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = &pkgeltDB

	return
}

// BackRepoPkgelt.CommitPhaseTwo commits all staged instances of Pkgelt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pkgelt := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr {
		backRepoPkgelt.CommitPhaseTwoInstance(backRepo, idx, pkgelt)
	}

	return
}

// BackRepoPkgelt.CommitPhaseTwoInstance commits {{structname }} of models.Pkgelt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pkgelt *models.Pkgelt) (Error error) {

	// fetch matching pkgeltDB
	if pkgeltDB, ok := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[idx]; ok {

		pkgeltDB.CopyBasicFieldsFromPkgelt(pkgelt)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers pkgelt.Classdiagrams into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, classdiagramAssocEnd := range pkgelt.Classdiagrams {

			// get the back repo instance at the association end
			classdiagramAssocEnd_DB :=
				backRepo.BackRepoClassdiagram.GetClassdiagramDBFromClassdiagramPtr(classdiagramAssocEnd)

			// encode reverse pointer in the association end back repo instance
			classdiagramAssocEnd_DB.Pkgelt_ClassdiagramsDBID.Int64 = int64(pkgeltDB.ID)
			classdiagramAssocEnd_DB.Pkgelt_ClassdiagramsDBID.Valid = true
			classdiagramAssocEnd_DB.Pkgelt_ClassdiagramsDBID_Index.Int64 = int64(idx)
			classdiagramAssocEnd_DB.Pkgelt_ClassdiagramsDBID_Index.Valid = true
			if q := backRepoPkgelt.db.Save(classdiagramAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers pkgelt.Umlscs into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, umlscAssocEnd := range pkgelt.Umlscs {

			// get the back repo instance at the association end
			umlscAssocEnd_DB :=
				backRepo.BackRepoUmlsc.GetUmlscDBFromUmlscPtr(umlscAssocEnd)

			// encode reverse pointer in the association end back repo instance
			umlscAssocEnd_DB.Pkgelt_UmlscsDBID.Int64 = int64(pkgeltDB.ID)
			umlscAssocEnd_DB.Pkgelt_UmlscsDBID.Valid = true
			umlscAssocEnd_DB.Pkgelt_UmlscsDBID_Index.Int64 = int64(idx)
			umlscAssocEnd_DB.Pkgelt_UmlscsDBID_Index.Valid = true
			if q := backRepoPkgelt.db.Save(umlscAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoPkgelt.db.Save(&pkgeltDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Pkgelt intance %s", pkgelt.Name))
		return err
	}

	return
}

// BackRepoPkgelt.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoPkgelt *BackRepoPkgeltStruct) CheckoutPhaseOne() (Error error) {

	pkgeltDBArray := make([]PkgeltDB, 0)
	query := backRepoPkgelt.db.Find(&pkgeltDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	pkgeltInstancesToBeRemovedFromTheStage := make(map[*models.Pkgelt]struct{})
	for key, value := range models.Stage.Pkgelts {
		pkgeltInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, pkgeltDB := range pkgeltDBArray {
		backRepoPkgelt.CheckoutPhaseOneInstance(&pkgeltDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		pkgelt, ok := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]
		if ok {
			delete(pkgeltInstancesToBeRemovedFromTheStage, pkgelt)
		}
	}

	// remove from stage and back repo's 3 maps all pkgelts that are not in the checkout
	for pkgelt := range pkgeltInstancesToBeRemovedFromTheStage {
		pkgelt.Unstage()

		// remove instance from the back repo 3 maps
		pkgeltID := (*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]
		delete((*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID), pkgelt)
		delete((*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB), pkgeltID)
		delete((*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr), pkgeltID)
	}

	return
}

// CheckoutPhaseOneInstance takes a pkgeltDB that has been found in the DB, updates the backRepo and stages the
// models version of the pkgeltDB
func (backRepoPkgelt *BackRepoPkgeltStruct) CheckoutPhaseOneInstance(pkgeltDB *PkgeltDB) (Error error) {

	pkgelt, ok := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]
	if !ok {
		pkgelt = new(models.Pkgelt)

		(*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID] = pkgelt
		(*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt] = pkgeltDB.ID

		// append model store with the new element
		pkgelt.Name = pkgeltDB.Name_Data.String
		pkgelt.Stage()
	}
	pkgeltDB.CopyBasicFieldsToPkgelt(pkgelt)

	// preserve pointer to pkgeltDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PkgeltDBID_PkgeltDB)[pkgeltDB hold variable pointers
	pkgeltDB_Data := *pkgeltDB
	preservedPtrToPkgelt := &pkgeltDB_Data
	(*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = preservedPtrToPkgelt

	return
}

// BackRepoPkgelt.CheckoutPhaseTwo Checkouts all staged instances of Pkgelt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPkgelt *BackRepoPkgeltStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pkgeltDB := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltDB {
		backRepoPkgelt.CheckoutPhaseTwoInstance(backRepo, pkgeltDB)
	}
	return
}

// BackRepoPkgelt.CheckoutPhaseTwoInstance Checkouts staged instances of Pkgelt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPkgelt *BackRepoPkgeltStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pkgeltDB *PkgeltDB) (Error error) {

	pkgelt := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]
	_ = pkgelt // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem pkgelt.Classdiagrams in the stage from the encode in the back repo
	// It parses all ClassdiagramDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	pkgelt.Classdiagrams = pkgelt.Classdiagrams[:0]
	// 2. loop all instances in the type in the association end
	for _, classdiagramDB_AssocEnd := range *backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if classdiagramDB_AssocEnd.Pkgelt_ClassdiagramsDBID.Int64 == int64(pkgeltDB.ID) {
			// 4. fetch the associated instance in the stage
			classdiagram_AssocEnd := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB_AssocEnd.ID]
			// 5. append it the association slice
			pkgelt.Classdiagrams = append(pkgelt.Classdiagrams, classdiagram_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(pkgelt.Classdiagrams, func(i, j int) bool {
		classdiagramDB_i_ID := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[pkgelt.Classdiagrams[i]]
		classdiagramDB_j_ID := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[pkgelt.Classdiagrams[j]]

		classdiagramDB_i := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[classdiagramDB_i_ID]
		classdiagramDB_j := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[classdiagramDB_j_ID]

		return classdiagramDB_i.Pkgelt_ClassdiagramsDBID_Index.Int64 < classdiagramDB_j.Pkgelt_ClassdiagramsDBID_Index.Int64
	})

	// This loop redeem pkgelt.Umlscs in the stage from the encode in the back repo
	// It parses all UmlscDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	pkgelt.Umlscs = pkgelt.Umlscs[:0]
	// 2. loop all instances in the type in the association end
	for _, umlscDB_AssocEnd := range *backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if umlscDB_AssocEnd.Pkgelt_UmlscsDBID.Int64 == int64(pkgeltDB.ID) {
			// 4. fetch the associated instance in the stage
			umlsc_AssocEnd := (*backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscPtr)[umlscDB_AssocEnd.ID]
			// 5. append it the association slice
			pkgelt.Umlscs = append(pkgelt.Umlscs, umlsc_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(pkgelt.Umlscs, func(i, j int) bool {
		umlscDB_i_ID := (*backRepo.BackRepoUmlsc.Map_UmlscPtr_UmlscDBID)[pkgelt.Umlscs[i]]
		umlscDB_j_ID := (*backRepo.BackRepoUmlsc.Map_UmlscPtr_UmlscDBID)[pkgelt.Umlscs[j]]

		umlscDB_i := (*backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscDB)[umlscDB_i_ID]
		umlscDB_j := (*backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscDB)[umlscDB_j_ID]

		return umlscDB_i.Pkgelt_UmlscsDBID_Index.Int64 < umlscDB_j.Pkgelt_UmlscsDBID_Index.Int64
	})

	return
}

// CommitPkgelt allows commit of a single pkgelt (if already staged)
func (backRepo *BackRepoStruct) CommitPkgelt(pkgelt *models.Pkgelt) {
	backRepo.BackRepoPkgelt.CommitPhaseOneInstance(pkgelt)
	if id, ok := (*backRepo.BackRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]; ok {
		backRepo.BackRepoPkgelt.CommitPhaseTwoInstance(backRepo, id, pkgelt)
	}
}

// CommitPkgelt allows checkout of a single pkgelt (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPkgelt(pkgelt *models.Pkgelt) {
	// check if the pkgelt is staged
	if _, ok := (*backRepo.BackRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]; ok {

		if id, ok := (*backRepo.BackRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]; ok {
			var pkgeltDB PkgeltDB
			pkgeltDB.ID = id

			if err := backRepo.BackRepoPkgelt.db.First(&pkgeltDB, id).Error; err != nil {
				log.Panicln("CheckoutPkgelt : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPkgelt.CheckoutPhaseOneInstance(&pkgeltDB)
			backRepo.BackRepoPkgelt.CheckoutPhaseTwoInstance(backRepo, &pkgeltDB)
		}
	}
}

// CopyBasicFieldsFromPkgelt
func (pkgeltDB *PkgeltDB) CopyBasicFieldsFromPkgelt(pkgelt *models.Pkgelt) {
	// insertion point for fields commit

	pkgeltDB.Name_Data.String = pkgelt.Name
	pkgeltDB.Name_Data.Valid = true

	pkgeltDB.Path_Data.String = pkgelt.Path
	pkgeltDB.Path_Data.Valid = true

	pkgeltDB.GongModelPath_Data.String = pkgelt.GongModelPath
	pkgeltDB.GongModelPath_Data.Valid = true
}

// CopyBasicFieldsFromPkgeltWOP
func (pkgeltDB *PkgeltDB) CopyBasicFieldsFromPkgeltWOP(pkgelt *PkgeltWOP) {
	// insertion point for fields commit

	pkgeltDB.Name_Data.String = pkgelt.Name
	pkgeltDB.Name_Data.Valid = true

	pkgeltDB.Path_Data.String = pkgelt.Path
	pkgeltDB.Path_Data.Valid = true

	pkgeltDB.GongModelPath_Data.String = pkgelt.GongModelPath
	pkgeltDB.GongModelPath_Data.Valid = true
}

// CopyBasicFieldsToPkgelt
func (pkgeltDB *PkgeltDB) CopyBasicFieldsToPkgelt(pkgelt *models.Pkgelt) {
	// insertion point for checkout of basic fields (back repo to stage)
	pkgelt.Name = pkgeltDB.Name_Data.String
	pkgelt.Path = pkgeltDB.Path_Data.String
	pkgelt.GongModelPath = pkgeltDB.GongModelPath_Data.String
}

// CopyBasicFieldsToPkgeltWOP
func (pkgeltDB *PkgeltDB) CopyBasicFieldsToPkgeltWOP(pkgelt *PkgeltWOP) {
	pkgelt.ID = int(pkgeltDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	pkgelt.Name = pkgeltDB.Name_Data.String
	pkgelt.Path = pkgeltDB.Path_Data.String
	pkgelt.GongModelPath = pkgeltDB.GongModelPath_Data.String
}

// Backup generates a json file from a slice of all PkgeltDB instances in the backrepo
func (backRepoPkgelt *BackRepoPkgeltStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PkgeltDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PkgeltDB, 0)
	for _, pkgeltDB := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltDB {
		forBackup = append(forBackup, pkgeltDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Pkgelt ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Pkgelt file", err.Error())
	}
}

// Backup generates a json file from a slice of all PkgeltDB instances in the backrepo
func (backRepoPkgelt *BackRepoPkgeltStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PkgeltDB, 0)
	for _, pkgeltDB := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltDB {
		forBackup = append(forBackup, pkgeltDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Pkgelt")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Pkgelt_Fields, -1)
	for _, pkgeltDB := range forBackup {

		var pkgeltWOP PkgeltWOP
		pkgeltDB.CopyBasicFieldsToPkgeltWOP(&pkgeltWOP)

		row := sh.AddRow()
		row.WriteStruct(&pkgeltWOP, -1)
	}
}

// RestoreXL from the "Pkgelt" sheet all PkgeltDB instances
func (backRepoPkgelt *BackRepoPkgeltStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPkgeltid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Pkgelt"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPkgelt.rowVisitorPkgelt)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoPkgelt *BackRepoPkgeltStruct) rowVisitorPkgelt(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var pkgeltWOP PkgeltWOP
		row.ReadStruct(&pkgeltWOP)

		// add the unmarshalled struct to the stage
		pkgeltDB := new(PkgeltDB)
		pkgeltDB.CopyBasicFieldsFromPkgeltWOP(&pkgeltWOP)

		pkgeltDB_ID_atBackupTime := pkgeltDB.ID
		pkgeltDB.ID = 0
		query := backRepoPkgelt.db.Create(pkgeltDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = pkgeltDB
		BackRepoPkgeltid_atBckpTime_newID[pkgeltDB_ID_atBackupTime] = pkgeltDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PkgeltDB.json" in dirPath that stores an array
// of PkgeltDB and stores it in the database
// the map BackRepoPkgeltid_atBckpTime_newID is updated accordingly
func (backRepoPkgelt *BackRepoPkgeltStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPkgeltid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PkgeltDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Pkgelt file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PkgeltDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PkgeltDBID_PkgeltDB
	for _, pkgeltDB := range forRestore {

		pkgeltDB_ID_atBackupTime := pkgeltDB.ID
		pkgeltDB.ID = 0
		query := backRepoPkgelt.db.Create(pkgeltDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = pkgeltDB
		BackRepoPkgeltid_atBckpTime_newID[pkgeltDB_ID_atBackupTime] = pkgeltDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Pkgelt file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Pkgelt>id_atBckpTime_newID
// to compute new index
func (backRepoPkgelt *BackRepoPkgeltStruct) RestorePhaseTwo() {

	for _, pkgeltDB := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltDB {

		// next line of code is to avert unused variable compilation error
		_ = pkgeltDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPkgelt.db.Model(pkgeltDB).Updates(*pkgeltDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPkgeltid_atBckpTime_newID map[uint]uint
