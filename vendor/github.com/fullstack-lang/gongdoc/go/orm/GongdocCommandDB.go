// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GongdocCommand_sql sql.NullBool
var dummy_GongdocCommand_time time.Duration
var dummy_GongdocCommand_sort sort.Float64Slice

// GongdocCommandAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongdoccommandAPI
type GongdocCommandAPI struct {
	gorm.Model

	models.GongdocCommand

	// encoding of pointers
	GongdocCommandPointersEnconding
}

// GongdocCommandPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GongdocCommandPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// GongdocCommandDB describes a gongdoccommand in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model gongdoccommandDB
type GongdocCommandDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field gongdoccommandDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field gongdoccommandDB.Command {{BasicKind}} (to be completed)
	Command_Data sql.NullString

	// Declation for basic field gongdoccommandDB.DiagramName {{BasicKind}} (to be completed)
	DiagramName_Data sql.NullString

	// Declation for basic field gongdoccommandDB.Date {{BasicKind}} (to be completed)
	Date_Data sql.NullString

	// Declation for basic field gongdoccommandDB.GongdocNodeType {{BasicKind}} (to be completed)
	GongdocNodeType_Data sql.NullString

	// Declation for basic field gongdoccommandDB.StructName {{BasicKind}} (to be completed)
	StructName_Data sql.NullString

	// Declation for basic field gongdoccommandDB.FieldName {{BasicKind}} (to be completed)
	FieldName_Data sql.NullString

	// Declation for basic field gongdoccommandDB.FieldTypeName {{BasicKind}} (to be completed)
	FieldTypeName_Data sql.NullString

	// Declation for basic field gongdoccommandDB.PositionX {{BasicKind}} (to be completed)
	PositionX_Data sql.NullInt64

	// Declation for basic field gongdoccommandDB.PositionY {{BasicKind}} (to be completed)
	PositionY_Data sql.NullInt64
	// encoding of pointers
	GongdocCommandPointersEnconding
}

// GongdocCommandDBs arrays gongdoccommandDBs
// swagger:response gongdoccommandDBsResponse
type GongdocCommandDBs []GongdocCommandDB

// GongdocCommandDBResponse provides response
// swagger:response gongdoccommandDBResponse
type GongdocCommandDBResponse struct {
	GongdocCommandDB
}

// GongdocCommandWOP is a GongdocCommand without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GongdocCommandWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Command models.GongdocCommandType `xlsx:"2"`

	DiagramName string `xlsx:"3"`

	Date string `xlsx:"4"`

	GongdocNodeType models.GongdocNodeType `xlsx:"5"`

	StructName string `xlsx:"6"`

	FieldName string `xlsx:"7"`

	FieldTypeName string `xlsx:"8"`

	PositionX int `xlsx:"9"`

	PositionY int `xlsx:"10"`
	// insertion for WOP pointer fields
}

var GongdocCommand_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Command",
	"DiagramName",
	"Date",
	"GongdocNodeType",
	"StructName",
	"FieldName",
	"FieldTypeName",
	"PositionX",
	"PositionY",
}

type BackRepoGongdocCommandStruct struct {
	// stores GongdocCommandDB according to their gorm ID
	Map_GongdocCommandDBID_GongdocCommandDB *map[uint]*GongdocCommandDB

	// stores GongdocCommandDB ID according to GongdocCommand address
	Map_GongdocCommandPtr_GongdocCommandDBID *map[*models.GongdocCommand]uint

	// stores GongdocCommand according to their gorm ID
	Map_GongdocCommandDBID_GongdocCommandPtr *map[uint]*models.GongdocCommand

	db *gorm.DB
}

func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) GetDB() *gorm.DB {
	return backRepoGongdocCommand.db
}

// GetGongdocCommandDBFromGongdocCommandPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) GetGongdocCommandDBFromGongdocCommandPtr(gongdoccommand *models.GongdocCommand) (gongdoccommandDB *GongdocCommandDB) {
	id := (*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]
	gongdoccommandDB = (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[id]
	return
}

// BackRepoGongdocCommand.Init set up the BackRepo of the GongdocCommand
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr != nil {
		err := errors.New("In Init, backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr should be nil")
		return err
	}

	if backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB != nil {
		err := errors.New("In Init, backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB should be nil")
		return err
	}

	if backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID != nil {
		err := errors.New("In Init, backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongdocCommand, 0)
	backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr = &tmp

	tmpDB := make(map[uint]*GongdocCommandDB, 0)
	backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB = &tmpDB

	tmpID := make(map[*models.GongdocCommand]uint, 0)
	backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID = &tmpID

	backRepoGongdocCommand.db = db
	return
}

// BackRepoGongdocCommand.CommitPhaseOne commits all staged instances of GongdocCommand to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongdoccommand := range stage.GongdocCommands {
		backRepoGongdocCommand.CommitPhaseOneInstance(gongdoccommand)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongdoccommand := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr {
		if _, ok := stage.GongdocCommands[gongdoccommand]; !ok {
			backRepoGongdocCommand.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongdocCommand.CommitDeleteInstance commits deletion of GongdocCommand to the BackRepo
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitDeleteInstance(id uint) (Error error) {

	gongdoccommand := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[id]

	// gongdoccommand is not staged anymore, remove gongdoccommandDB
	gongdoccommandDB := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[id]
	query := backRepoGongdocCommand.db.Unscoped().Delete(&gongdoccommandDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID), gongdoccommand)
	delete((*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr), id)
	delete((*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB), id)

	return
}

// BackRepoGongdocCommand.CommitPhaseOneInstance commits gongdoccommand staged instances of GongdocCommand to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitPhaseOneInstance(gongdoccommand *models.GongdocCommand) (Error error) {

	// check if the gongdoccommand is not commited yet
	if _, ok := (*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]; ok {
		return
	}

	// initiate gongdoccommand
	var gongdoccommandDB GongdocCommandDB
	gongdoccommandDB.CopyBasicFieldsFromGongdocCommand(gongdoccommand)

	query := backRepoGongdocCommand.db.Create(&gongdoccommandDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand] = gongdoccommandDB.ID
	(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID] = gongdoccommand
	(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[gongdoccommandDB.ID] = &gongdoccommandDB

	return
}

// BackRepoGongdocCommand.CommitPhaseTwo commits all staged instances of GongdocCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongdoccommand := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr {
		backRepoGongdocCommand.CommitPhaseTwoInstance(backRepo, idx, gongdoccommand)
	}

	return
}

// BackRepoGongdocCommand.CommitPhaseTwoInstance commits {{structname }} of models.GongdocCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongdoccommand *models.GongdocCommand) (Error error) {

	// fetch matching gongdoccommandDB
	if gongdoccommandDB, ok := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[idx]; ok {

		gongdoccommandDB.CopyBasicFieldsFromGongdocCommand(gongdoccommand)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGongdocCommand.db.Save(&gongdoccommandDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongdocCommand intance %s", gongdoccommand.Name))
		return err
	}

	return
}

// BackRepoGongdocCommand.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CheckoutPhaseOne() (Error error) {

	gongdoccommandDBArray := make([]GongdocCommandDB, 0)
	query := backRepoGongdocCommand.db.Find(&gongdoccommandDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	gongdoccommandInstancesToBeRemovedFromTheStage := make(map[*models.GongdocCommand]struct{})
	for key, value := range models.Stage.GongdocCommands {
		gongdoccommandInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, gongdoccommandDB := range gongdoccommandDBArray {
		backRepoGongdocCommand.CheckoutPhaseOneInstance(&gongdoccommandDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		gongdoccommand, ok := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID]
		if ok {
			delete(gongdoccommandInstancesToBeRemovedFromTheStage, gongdoccommand)
		}
	}

	// remove from stage and back repo's 3 maps all gongdoccommands that are not in the checkout
	for gongdoccommand := range gongdoccommandInstancesToBeRemovedFromTheStage {
		gongdoccommand.Unstage()

		// remove instance from the back repo 3 maps
		gongdoccommandID := (*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]
		delete((*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID), gongdoccommand)
		delete((*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB), gongdoccommandID)
		delete((*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr), gongdoccommandID)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongdoccommandDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongdoccommandDB
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CheckoutPhaseOneInstance(gongdoccommandDB *GongdocCommandDB) (Error error) {

	gongdoccommand, ok := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID]
	if !ok {
		gongdoccommand = new(models.GongdocCommand)

		(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID] = gongdoccommand
		(*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand] = gongdoccommandDB.ID

		// append model store with the new element
		gongdoccommand.Name = gongdoccommandDB.Name_Data.String
		gongdoccommand.Stage()
	}
	gongdoccommandDB.CopyBasicFieldsToGongdocCommand(gongdoccommand)

	// preserve pointer to gongdoccommandDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GongdocCommandDBID_GongdocCommandDB)[gongdoccommandDB hold variable pointers
	gongdoccommandDB_Data := *gongdoccommandDB
	preservedPtrToGongdocCommand := &gongdoccommandDB_Data
	(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[gongdoccommandDB.ID] = preservedPtrToGongdocCommand

	return
}

// BackRepoGongdocCommand.CheckoutPhaseTwo Checkouts all staged instances of GongdocCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongdoccommandDB := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB {
		backRepoGongdocCommand.CheckoutPhaseTwoInstance(backRepo, gongdoccommandDB)
	}
	return
}

// BackRepoGongdocCommand.CheckoutPhaseTwoInstance Checkouts staged instances of GongdocCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongdoccommandDB *GongdocCommandDB) (Error error) {

	gongdoccommand := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID]
	_ = gongdoccommand // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitGongdocCommand allows commit of a single gongdoccommand (if already staged)
func (backRepo *BackRepoStruct) CommitGongdocCommand(gongdoccommand *models.GongdocCommand) {
	backRepo.BackRepoGongdocCommand.CommitPhaseOneInstance(gongdoccommand)
	if id, ok := (*backRepo.BackRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]; ok {
		backRepo.BackRepoGongdocCommand.CommitPhaseTwoInstance(backRepo, id, gongdoccommand)
	}
}

// CommitGongdocCommand allows checkout of a single gongdoccommand (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongdocCommand(gongdoccommand *models.GongdocCommand) {
	// check if the gongdoccommand is staged
	if _, ok := (*backRepo.BackRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]; ok {

		if id, ok := (*backRepo.BackRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]; ok {
			var gongdoccommandDB GongdocCommandDB
			gongdoccommandDB.ID = id

			if err := backRepo.BackRepoGongdocCommand.db.First(&gongdoccommandDB, id).Error; err != nil {
				log.Panicln("CheckoutGongdocCommand : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongdocCommand.CheckoutPhaseOneInstance(&gongdoccommandDB)
			backRepo.BackRepoGongdocCommand.CheckoutPhaseTwoInstance(backRepo, &gongdoccommandDB)
		}
	}
}

// CopyBasicFieldsFromGongdocCommand
func (gongdoccommandDB *GongdocCommandDB) CopyBasicFieldsFromGongdocCommand(gongdoccommand *models.GongdocCommand) {
	// insertion point for fields commit

	gongdoccommandDB.Name_Data.String = gongdoccommand.Name
	gongdoccommandDB.Name_Data.Valid = true

	gongdoccommandDB.Command_Data.String = gongdoccommand.Command.ToString()
	gongdoccommandDB.Command_Data.Valid = true

	gongdoccommandDB.DiagramName_Data.String = gongdoccommand.DiagramName
	gongdoccommandDB.DiagramName_Data.Valid = true

	gongdoccommandDB.Date_Data.String = gongdoccommand.Date
	gongdoccommandDB.Date_Data.Valid = true

	gongdoccommandDB.GongdocNodeType_Data.String = gongdoccommand.GongdocNodeType.ToString()
	gongdoccommandDB.GongdocNodeType_Data.Valid = true

	gongdoccommandDB.StructName_Data.String = gongdoccommand.StructName
	gongdoccommandDB.StructName_Data.Valid = true

	gongdoccommandDB.FieldName_Data.String = gongdoccommand.FieldName
	gongdoccommandDB.FieldName_Data.Valid = true

	gongdoccommandDB.FieldTypeName_Data.String = gongdoccommand.FieldTypeName
	gongdoccommandDB.FieldTypeName_Data.Valid = true

	gongdoccommandDB.PositionX_Data.Int64 = int64(gongdoccommand.PositionX)
	gongdoccommandDB.PositionX_Data.Valid = true

	gongdoccommandDB.PositionY_Data.Int64 = int64(gongdoccommand.PositionY)
	gongdoccommandDB.PositionY_Data.Valid = true
}

// CopyBasicFieldsFromGongdocCommandWOP
func (gongdoccommandDB *GongdocCommandDB) CopyBasicFieldsFromGongdocCommandWOP(gongdoccommand *GongdocCommandWOP) {
	// insertion point for fields commit

	gongdoccommandDB.Name_Data.String = gongdoccommand.Name
	gongdoccommandDB.Name_Data.Valid = true

	gongdoccommandDB.Command_Data.String = gongdoccommand.Command.ToString()
	gongdoccommandDB.Command_Data.Valid = true

	gongdoccommandDB.DiagramName_Data.String = gongdoccommand.DiagramName
	gongdoccommandDB.DiagramName_Data.Valid = true

	gongdoccommandDB.Date_Data.String = gongdoccommand.Date
	gongdoccommandDB.Date_Data.Valid = true

	gongdoccommandDB.GongdocNodeType_Data.String = gongdoccommand.GongdocNodeType.ToString()
	gongdoccommandDB.GongdocNodeType_Data.Valid = true

	gongdoccommandDB.StructName_Data.String = gongdoccommand.StructName
	gongdoccommandDB.StructName_Data.Valid = true

	gongdoccommandDB.FieldName_Data.String = gongdoccommand.FieldName
	gongdoccommandDB.FieldName_Data.Valid = true

	gongdoccommandDB.FieldTypeName_Data.String = gongdoccommand.FieldTypeName
	gongdoccommandDB.FieldTypeName_Data.Valid = true

	gongdoccommandDB.PositionX_Data.Int64 = int64(gongdoccommand.PositionX)
	gongdoccommandDB.PositionX_Data.Valid = true

	gongdoccommandDB.PositionY_Data.Int64 = int64(gongdoccommand.PositionY)
	gongdoccommandDB.PositionY_Data.Valid = true
}

// CopyBasicFieldsToGongdocCommand
func (gongdoccommandDB *GongdocCommandDB) CopyBasicFieldsToGongdocCommand(gongdoccommand *models.GongdocCommand) {
	// insertion point for checkout of basic fields (back repo to stage)
	gongdoccommand.Name = gongdoccommandDB.Name_Data.String
	gongdoccommand.Command.FromString(gongdoccommandDB.Command_Data.String)
	gongdoccommand.DiagramName = gongdoccommandDB.DiagramName_Data.String
	gongdoccommand.Date = gongdoccommandDB.Date_Data.String
	gongdoccommand.GongdocNodeType.FromString(gongdoccommandDB.GongdocNodeType_Data.String)
	gongdoccommand.StructName = gongdoccommandDB.StructName_Data.String
	gongdoccommand.FieldName = gongdoccommandDB.FieldName_Data.String
	gongdoccommand.FieldTypeName = gongdoccommandDB.FieldTypeName_Data.String
	gongdoccommand.PositionX = int(gongdoccommandDB.PositionX_Data.Int64)
	gongdoccommand.PositionY = int(gongdoccommandDB.PositionY_Data.Int64)
}

// CopyBasicFieldsToGongdocCommandWOP
func (gongdoccommandDB *GongdocCommandDB) CopyBasicFieldsToGongdocCommandWOP(gongdoccommand *GongdocCommandWOP) {
	gongdoccommand.ID = int(gongdoccommandDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	gongdoccommand.Name = gongdoccommandDB.Name_Data.String
	gongdoccommand.Command.FromString(gongdoccommandDB.Command_Data.String)
	gongdoccommand.DiagramName = gongdoccommandDB.DiagramName_Data.String
	gongdoccommand.Date = gongdoccommandDB.Date_Data.String
	gongdoccommand.GongdocNodeType.FromString(gongdoccommandDB.GongdocNodeType_Data.String)
	gongdoccommand.StructName = gongdoccommandDB.StructName_Data.String
	gongdoccommand.FieldName = gongdoccommandDB.FieldName_Data.String
	gongdoccommand.FieldTypeName = gongdoccommandDB.FieldTypeName_Data.String
	gongdoccommand.PositionX = int(gongdoccommandDB.PositionX_Data.Int64)
	gongdoccommand.PositionY = int(gongdoccommandDB.PositionY_Data.Int64)
}

// Backup generates a json file from a slice of all GongdocCommandDB instances in the backrepo
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GongdocCommandDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongdocCommandDB, 0)
	for _, gongdoccommandDB := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB {
		forBackup = append(forBackup, gongdoccommandDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json GongdocCommand ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json GongdocCommand file", err.Error())
	}
}

// Backup generates a json file from a slice of all GongdocCommandDB instances in the backrepo
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongdocCommandDB, 0)
	for _, gongdoccommandDB := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB {
		forBackup = append(forBackup, gongdoccommandDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GongdocCommand")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GongdocCommand_Fields, -1)
	for _, gongdoccommandDB := range forBackup {

		var gongdoccommandWOP GongdocCommandWOP
		gongdoccommandDB.CopyBasicFieldsToGongdocCommandWOP(&gongdoccommandWOP)

		row := sh.AddRow()
		row.WriteStruct(&gongdoccommandWOP, -1)
	}
}

// RestoreXL from the "GongdocCommand" sheet all GongdocCommandDB instances
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGongdocCommandid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GongdocCommand"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGongdocCommand.rowVisitorGongdocCommand)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) rowVisitorGongdocCommand(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var gongdoccommandWOP GongdocCommandWOP
		row.ReadStruct(&gongdoccommandWOP)

		// add the unmarshalled struct to the stage
		gongdoccommandDB := new(GongdocCommandDB)
		gongdoccommandDB.CopyBasicFieldsFromGongdocCommandWOP(&gongdoccommandWOP)

		gongdoccommandDB_ID_atBackupTime := gongdoccommandDB.ID
		gongdoccommandDB.ID = 0
		query := backRepoGongdocCommand.db.Create(gongdoccommandDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[gongdoccommandDB.ID] = gongdoccommandDB
		BackRepoGongdocCommandid_atBckpTime_newID[gongdoccommandDB_ID_atBackupTime] = gongdoccommandDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GongdocCommandDB.json" in dirPath that stores an array
// of GongdocCommandDB and stores it in the database
// the map BackRepoGongdocCommandid_atBckpTime_newID is updated accordingly
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGongdocCommandid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GongdocCommandDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json GongdocCommand file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GongdocCommandDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GongdocCommandDBID_GongdocCommandDB
	for _, gongdoccommandDB := range forRestore {

		gongdoccommandDB_ID_atBackupTime := gongdoccommandDB.ID
		gongdoccommandDB.ID = 0
		query := backRepoGongdocCommand.db.Create(gongdoccommandDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[gongdoccommandDB.ID] = gongdoccommandDB
		BackRepoGongdocCommandid_atBckpTime_newID[gongdoccommandDB_ID_atBackupTime] = gongdoccommandDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json GongdocCommand file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GongdocCommand>id_atBckpTime_newID
// to compute new index
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) RestorePhaseTwo() {

	for _, gongdoccommandDB := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB {

		// next line of code is to avert unused variable compilation error
		_ = gongdoccommandDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGongdocCommand.db.Model(gongdoccommandDB).Updates(*gongdoccommandDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGongdocCommandid_atBckpTime_newID map[uint]uint
