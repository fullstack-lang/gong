// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Classshape_sql sql.NullBool
var dummy_Classshape_time time.Duration
var dummy_Classshape_sort sort.Float64Slice

// ClassshapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model classshapeAPI
type ClassshapeAPI struct {
	gorm.Model

	models.Classshape

	// encoding of pointers
	ClassshapePointersEnconding
}

// ClassshapePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ClassshapePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Position is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PositionID sql.NullInt64

	// field GongStruct is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GongStructID sql.NullInt64

	// Implementation of a reverse ID for field Classdiagram{}.Classshapes []*Classshape
	Classdiagram_ClassshapesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Classdiagram_ClassshapesDBID_Index sql.NullInt64
}

// ClassshapeDB describes a classshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model classshapeDB
type ClassshapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field classshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field classshapeDB.Structname
	Structname_Data sql.NullString

	// Declation for basic field classshapeDB.ShowNbInstances
	// provide the sql storage for the boolan
	ShowNbInstances_Data sql.NullBool

	// Declation for basic field classshapeDB.NbInstances
	NbInstances_Data sql.NullInt64

	// Declation for basic field classshapeDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field classshapeDB.Heigth
	Heigth_Data sql.NullFloat64

	// Declation for basic field classshapeDB.ClassshapeTargetType
	ClassshapeTargetType_Data sql.NullString
	// encoding of pointers
	ClassshapePointersEnconding
}

// ClassshapeDBs arrays classshapeDBs
// swagger:response classshapeDBsResponse
type ClassshapeDBs []ClassshapeDB

// ClassshapeDBResponse provides response
// swagger:response classshapeDBResponse
type ClassshapeDBResponse struct {
	ClassshapeDB
}

// ClassshapeWOP is a Classshape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ClassshapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Structname string `xlsx:"2"`

	ShowNbInstances bool `xlsx:"3"`

	NbInstances int `xlsx:"4"`

	Width float64 `xlsx:"5"`

	Heigth float64 `xlsx:"6"`

	ClassshapeTargetType models.ClassshapeTargetType `xlsx:"7"`
	// insertion for WOP pointer fields
}

var Classshape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Structname",
	"ShowNbInstances",
	"NbInstances",
	"Width",
	"Heigth",
	"ClassshapeTargetType",
}

type BackRepoClassshapeStruct struct {
	// stores ClassshapeDB according to their gorm ID
	Map_ClassshapeDBID_ClassshapeDB *map[uint]*ClassshapeDB

	// stores ClassshapeDB ID according to Classshape address
	Map_ClassshapePtr_ClassshapeDBID *map[*models.Classshape]uint

	// stores Classshape according to their gorm ID
	Map_ClassshapeDBID_ClassshapePtr *map[uint]*models.Classshape

	db *gorm.DB
}

func (backRepoClassshape *BackRepoClassshapeStruct) GetDB() *gorm.DB {
	return backRepoClassshape.db
}

// GetClassshapeDBFromClassshapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoClassshape *BackRepoClassshapeStruct) GetClassshapeDBFromClassshapePtr(classshape *models.Classshape) (classshapeDB *ClassshapeDB) {
	id := (*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]
	classshapeDB = (*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[id]
	return
}

// BackRepoClassshape.Init set up the BackRepo of the Classshape
func (backRepoClassshape *BackRepoClassshapeStruct) Init(db *gorm.DB) (Error error) {

	if backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr != nil {
		err := errors.New("In Init, backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr should be nil")
		return err
	}

	if backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB != nil {
		err := errors.New("In Init, backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB should be nil")
		return err
	}

	if backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID != nil {
		err := errors.New("In Init, backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Classshape, 0)
	backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr = &tmp

	tmpDB := make(map[uint]*ClassshapeDB, 0)
	backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB = &tmpDB

	tmpID := make(map[*models.Classshape]uint, 0)
	backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID = &tmpID

	backRepoClassshape.db = db
	return
}

// BackRepoClassshape.CommitPhaseOne commits all staged instances of Classshape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoClassshape *BackRepoClassshapeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for classshape := range stage.Classshapes {
		backRepoClassshape.CommitPhaseOneInstance(classshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, classshape := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr {
		if _, ok := stage.Classshapes[classshape]; !ok {
			backRepoClassshape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoClassshape.CommitDeleteInstance commits deletion of Classshape to the BackRepo
func (backRepoClassshape *BackRepoClassshapeStruct) CommitDeleteInstance(id uint) (Error error) {

	classshape := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[id]

	// classshape is not staged anymore, remove classshapeDB
	classshapeDB := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[id]
	query := backRepoClassshape.db.Unscoped().Delete(&classshapeDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID), classshape)
	delete((*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr), id)
	delete((*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB), id)

	return
}

// BackRepoClassshape.CommitPhaseOneInstance commits classshape staged instances of Classshape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoClassshape *BackRepoClassshapeStruct) CommitPhaseOneInstance(classshape *models.Classshape) (Error error) {

	// check if the classshape is not commited yet
	if _, ok := (*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {
		return
	}

	// initiate classshape
	var classshapeDB ClassshapeDB
	classshapeDB.CopyBasicFieldsFromClassshape(classshape)

	query := backRepoClassshape.db.Create(&classshapeDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape] = classshapeDB.ID
	(*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID] = classshape
	(*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[classshapeDB.ID] = &classshapeDB

	return
}

// BackRepoClassshape.CommitPhaseTwo commits all staged instances of Classshape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassshape *BackRepoClassshapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, classshape := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr {
		backRepoClassshape.CommitPhaseTwoInstance(backRepo, idx, classshape)
	}

	return
}

// BackRepoClassshape.CommitPhaseTwoInstance commits {{structname }} of models.Classshape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassshape *BackRepoClassshapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, classshape *models.Classshape) (Error error) {

	// fetch matching classshapeDB
	if classshapeDB, ok := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[idx]; ok {

		classshapeDB.CopyBasicFieldsFromClassshape(classshape)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value classshape.Position translates to updating the classshape.PositionID
		classshapeDB.PositionID.Valid = true // allow for a 0 value (nil association)
		if classshape.Position != nil {
			if PositionId, ok := (*backRepo.BackRepoPosition.Map_PositionPtr_PositionDBID)[classshape.Position]; ok {
				classshapeDB.PositionID.Int64 = int64(PositionId)
				classshapeDB.PositionID.Valid = true
			}
		}

		// commit pointer value classshape.GongStruct translates to updating the classshape.GongStructID
		classshapeDB.GongStructID.Valid = true // allow for a 0 value (nil association)
		if classshape.GongStruct != nil {
			if GongStructId, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[classshape.GongStruct]; ok {
				classshapeDB.GongStructID.Int64 = int64(GongStructId)
				classshapeDB.GongStructID.Valid = true
			}
		}

		// This loop encodes the slice of pointers classshape.Fields into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, fieldAssocEnd := range classshape.Fields {

			// get the back repo instance at the association end
			fieldAssocEnd_DB :=
				backRepo.BackRepoField.GetFieldDBFromFieldPtr(fieldAssocEnd)

			// encode reverse pointer in the association end back repo instance
			fieldAssocEnd_DB.Classshape_FieldsDBID.Int64 = int64(classshapeDB.ID)
			fieldAssocEnd_DB.Classshape_FieldsDBID.Valid = true
			fieldAssocEnd_DB.Classshape_FieldsDBID_Index.Int64 = int64(idx)
			fieldAssocEnd_DB.Classshape_FieldsDBID_Index.Valid = true
			if q := backRepoClassshape.db.Save(fieldAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers classshape.Links into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, linkAssocEnd := range classshape.Links {

			// get the back repo instance at the association end
			linkAssocEnd_DB :=
				backRepo.BackRepoLink.GetLinkDBFromLinkPtr(linkAssocEnd)

			// encode reverse pointer in the association end back repo instance
			linkAssocEnd_DB.Classshape_LinksDBID.Int64 = int64(classshapeDB.ID)
			linkAssocEnd_DB.Classshape_LinksDBID.Valid = true
			linkAssocEnd_DB.Classshape_LinksDBID_Index.Int64 = int64(idx)
			linkAssocEnd_DB.Classshape_LinksDBID_Index.Valid = true
			if q := backRepoClassshape.db.Save(linkAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoClassshape.db.Save(&classshapeDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Classshape intance %s", classshape.Name))
		return err
	}

	return
}

// BackRepoClassshape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoClassshape *BackRepoClassshapeStruct) CheckoutPhaseOne() (Error error) {

	classshapeDBArray := make([]ClassshapeDB, 0)
	query := backRepoClassshape.db.Find(&classshapeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	classshapeInstancesToBeRemovedFromTheStage := make(map[*models.Classshape]any)
	for key, value := range models.Stage.Classshapes {
		classshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, classshapeDB := range classshapeDBArray {
		backRepoClassshape.CheckoutPhaseOneInstance(&classshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		classshape, ok := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID]
		if ok {
			delete(classshapeInstancesToBeRemovedFromTheStage, classshape)
		}
	}

	// remove from stage and back repo's 3 maps all classshapes that are not in the checkout
	for classshape := range classshapeInstancesToBeRemovedFromTheStage {
		classshape.Unstage()

		// remove instance from the back repo 3 maps
		classshapeID := (*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]
		delete((*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID), classshape)
		delete((*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB), classshapeID)
		delete((*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr), classshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a classshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the classshapeDB
func (backRepoClassshape *BackRepoClassshapeStruct) CheckoutPhaseOneInstance(classshapeDB *ClassshapeDB) (Error error) {

	classshape, ok := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID]
	if !ok {
		classshape = new(models.Classshape)

		(*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID] = classshape
		(*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape] = classshapeDB.ID

		// append model store with the new element
		classshape.Name = classshapeDB.Name_Data.String
		classshape.Stage()
	}
	classshapeDB.CopyBasicFieldsToClassshape(classshape)

	// preserve pointer to classshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ClassshapeDBID_ClassshapeDB)[classshapeDB hold variable pointers
	classshapeDB_Data := *classshapeDB
	preservedPtrToClassshape := &classshapeDB_Data
	(*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[classshapeDB.ID] = preservedPtrToClassshape

	return
}

// BackRepoClassshape.CheckoutPhaseTwo Checkouts all staged instances of Classshape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassshape *BackRepoClassshapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, classshapeDB := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB {
		backRepoClassshape.CheckoutPhaseTwoInstance(backRepo, classshapeDB)
	}
	return
}

// BackRepoClassshape.CheckoutPhaseTwoInstance Checkouts staged instances of Classshape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassshape *BackRepoClassshapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, classshapeDB *ClassshapeDB) (Error error) {

	classshape := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID]
	_ = classshape // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Position field
	if classshapeDB.PositionID.Int64 != 0 {
		classshape.Position = (*backRepo.BackRepoPosition.Map_PositionDBID_PositionPtr)[uint(classshapeDB.PositionID.Int64)]
	}
	// GongStruct field
	if classshapeDB.GongStructID.Int64 != 0 {
		classshape.GongStruct = (*backRepo.BackRepoGongStruct.Map_GongStructDBID_GongStructPtr)[uint(classshapeDB.GongStructID.Int64)]
	}
	// This loop redeem classshape.Fields in the stage from the encode in the back repo
	// It parses all FieldDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	classshape.Fields = classshape.Fields[:0]
	// 2. loop all instances in the type in the association end
	for _, fieldDB_AssocEnd := range *backRepo.BackRepoField.Map_FieldDBID_FieldDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if fieldDB_AssocEnd.Classshape_FieldsDBID.Int64 == int64(classshapeDB.ID) {
			// 4. fetch the associated instance in the stage
			field_AssocEnd := (*backRepo.BackRepoField.Map_FieldDBID_FieldPtr)[fieldDB_AssocEnd.ID]
			// 5. append it the association slice
			classshape.Fields = append(classshape.Fields, field_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(classshape.Fields, func(i, j int) bool {
		fieldDB_i_ID := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[classshape.Fields[i]]
		fieldDB_j_ID := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[classshape.Fields[j]]

		fieldDB_i := (*backRepo.BackRepoField.Map_FieldDBID_FieldDB)[fieldDB_i_ID]
		fieldDB_j := (*backRepo.BackRepoField.Map_FieldDBID_FieldDB)[fieldDB_j_ID]

		return fieldDB_i.Classshape_FieldsDBID_Index.Int64 < fieldDB_j.Classshape_FieldsDBID_Index.Int64
	})

	// This loop redeem classshape.Links in the stage from the encode in the back repo
	// It parses all LinkDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	classshape.Links = classshape.Links[:0]
	// 2. loop all instances in the type in the association end
	for _, linkDB_AssocEnd := range *backRepo.BackRepoLink.Map_LinkDBID_LinkDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if linkDB_AssocEnd.Classshape_LinksDBID.Int64 == int64(classshapeDB.ID) {
			// 4. fetch the associated instance in the stage
			link_AssocEnd := (*backRepo.BackRepoLink.Map_LinkDBID_LinkPtr)[linkDB_AssocEnd.ID]
			// 5. append it the association slice
			classshape.Links = append(classshape.Links, link_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(classshape.Links, func(i, j int) bool {
		linkDB_i_ID := (*backRepo.BackRepoLink.Map_LinkPtr_LinkDBID)[classshape.Links[i]]
		linkDB_j_ID := (*backRepo.BackRepoLink.Map_LinkPtr_LinkDBID)[classshape.Links[j]]

		linkDB_i := (*backRepo.BackRepoLink.Map_LinkDBID_LinkDB)[linkDB_i_ID]
		linkDB_j := (*backRepo.BackRepoLink.Map_LinkDBID_LinkDB)[linkDB_j_ID]

		return linkDB_i.Classshape_LinksDBID_Index.Int64 < linkDB_j.Classshape_LinksDBID_Index.Int64
	})

	return
}

// CommitClassshape allows commit of a single classshape (if already staged)
func (backRepo *BackRepoStruct) CommitClassshape(classshape *models.Classshape) {
	backRepo.BackRepoClassshape.CommitPhaseOneInstance(classshape)
	if id, ok := (*backRepo.BackRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {
		backRepo.BackRepoClassshape.CommitPhaseTwoInstance(backRepo, id, classshape)
	}
}

// CommitClassshape allows checkout of a single classshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutClassshape(classshape *models.Classshape) {
	// check if the classshape is staged
	if _, ok := (*backRepo.BackRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {

		if id, ok := (*backRepo.BackRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {
			var classshapeDB ClassshapeDB
			classshapeDB.ID = id

			if err := backRepo.BackRepoClassshape.db.First(&classshapeDB, id).Error; err != nil {
				log.Panicln("CheckoutClassshape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoClassshape.CheckoutPhaseOneInstance(&classshapeDB)
			backRepo.BackRepoClassshape.CheckoutPhaseTwoInstance(backRepo, &classshapeDB)
		}
	}
}

// CopyBasicFieldsFromClassshape
func (classshapeDB *ClassshapeDB) CopyBasicFieldsFromClassshape(classshape *models.Classshape) {
	// insertion point for fields commit

	classshapeDB.Name_Data.String = classshape.Name
	classshapeDB.Name_Data.Valid = true

	classshapeDB.Structname_Data.String = classshape.Structname
	classshapeDB.Structname_Data.Valid = true

	classshapeDB.ShowNbInstances_Data.Bool = classshape.ShowNbInstances
	classshapeDB.ShowNbInstances_Data.Valid = true

	classshapeDB.NbInstances_Data.Int64 = int64(classshape.NbInstances)
	classshapeDB.NbInstances_Data.Valid = true

	classshapeDB.Width_Data.Float64 = classshape.Width
	classshapeDB.Width_Data.Valid = true

	classshapeDB.Heigth_Data.Float64 = classshape.Heigth
	classshapeDB.Heigth_Data.Valid = true

	classshapeDB.ClassshapeTargetType_Data.String = classshape.ClassshapeTargetType.ToString()
	classshapeDB.ClassshapeTargetType_Data.Valid = true
}

// CopyBasicFieldsFromClassshapeWOP
func (classshapeDB *ClassshapeDB) CopyBasicFieldsFromClassshapeWOP(classshape *ClassshapeWOP) {
	// insertion point for fields commit

	classshapeDB.Name_Data.String = classshape.Name
	classshapeDB.Name_Data.Valid = true

	classshapeDB.Structname_Data.String = classshape.Structname
	classshapeDB.Structname_Data.Valid = true

	classshapeDB.ShowNbInstances_Data.Bool = classshape.ShowNbInstances
	classshapeDB.ShowNbInstances_Data.Valid = true

	classshapeDB.NbInstances_Data.Int64 = int64(classshape.NbInstances)
	classshapeDB.NbInstances_Data.Valid = true

	classshapeDB.Width_Data.Float64 = classshape.Width
	classshapeDB.Width_Data.Valid = true

	classshapeDB.Heigth_Data.Float64 = classshape.Heigth
	classshapeDB.Heigth_Data.Valid = true

	classshapeDB.ClassshapeTargetType_Data.String = classshape.ClassshapeTargetType.ToString()
	classshapeDB.ClassshapeTargetType_Data.Valid = true
}

// CopyBasicFieldsToClassshape
func (classshapeDB *ClassshapeDB) CopyBasicFieldsToClassshape(classshape *models.Classshape) {
	// insertion point for checkout of basic fields (back repo to stage)
	classshape.Name = classshapeDB.Name_Data.String
	classshape.Structname = classshapeDB.Structname_Data.String
	classshape.ShowNbInstances = classshapeDB.ShowNbInstances_Data.Bool
	classshape.NbInstances = int(classshapeDB.NbInstances_Data.Int64)
	classshape.Width = classshapeDB.Width_Data.Float64
	classshape.Heigth = classshapeDB.Heigth_Data.Float64
	classshape.ClassshapeTargetType.FromString(classshapeDB.ClassshapeTargetType_Data.String)
}

// CopyBasicFieldsToClassshapeWOP
func (classshapeDB *ClassshapeDB) CopyBasicFieldsToClassshapeWOP(classshape *ClassshapeWOP) {
	classshape.ID = int(classshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	classshape.Name = classshapeDB.Name_Data.String
	classshape.Structname = classshapeDB.Structname_Data.String
	classshape.ShowNbInstances = classshapeDB.ShowNbInstances_Data.Bool
	classshape.NbInstances = int(classshapeDB.NbInstances_Data.Int64)
	classshape.Width = classshapeDB.Width_Data.Float64
	classshape.Heigth = classshapeDB.Heigth_Data.Float64
	classshape.ClassshapeTargetType.FromString(classshapeDB.ClassshapeTargetType_Data.String)
}

// Backup generates a json file from a slice of all ClassshapeDB instances in the backrepo
func (backRepoClassshape *BackRepoClassshapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ClassshapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ClassshapeDB, 0)
	for _, classshapeDB := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB {
		forBackup = append(forBackup, classshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Classshape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Classshape file", err.Error())
	}
}

// Backup generates a json file from a slice of all ClassshapeDB instances in the backrepo
func (backRepoClassshape *BackRepoClassshapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ClassshapeDB, 0)
	for _, classshapeDB := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB {
		forBackup = append(forBackup, classshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Classshape")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Classshape_Fields, -1)
	for _, classshapeDB := range forBackup {

		var classshapeWOP ClassshapeWOP
		classshapeDB.CopyBasicFieldsToClassshapeWOP(&classshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&classshapeWOP, -1)
	}
}

// RestoreXL from the "Classshape" sheet all ClassshapeDB instances
func (backRepoClassshape *BackRepoClassshapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoClassshapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Classshape"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoClassshape.rowVisitorClassshape)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoClassshape *BackRepoClassshapeStruct) rowVisitorClassshape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var classshapeWOP ClassshapeWOP
		row.ReadStruct(&classshapeWOP)

		// add the unmarshalled struct to the stage
		classshapeDB := new(ClassshapeDB)
		classshapeDB.CopyBasicFieldsFromClassshapeWOP(&classshapeWOP)

		classshapeDB_ID_atBackupTime := classshapeDB.ID
		classshapeDB.ID = 0
		query := backRepoClassshape.db.Create(classshapeDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[classshapeDB.ID] = classshapeDB
		BackRepoClassshapeid_atBckpTime_newID[classshapeDB_ID_atBackupTime] = classshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ClassshapeDB.json" in dirPath that stores an array
// of ClassshapeDB and stores it in the database
// the map BackRepoClassshapeid_atBckpTime_newID is updated accordingly
func (backRepoClassshape *BackRepoClassshapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoClassshapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ClassshapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Classshape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ClassshapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ClassshapeDBID_ClassshapeDB
	for _, classshapeDB := range forRestore {

		classshapeDB_ID_atBackupTime := classshapeDB.ID
		classshapeDB.ID = 0
		query := backRepoClassshape.db.Create(classshapeDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[classshapeDB.ID] = classshapeDB
		BackRepoClassshapeid_atBckpTime_newID[classshapeDB_ID_atBackupTime] = classshapeDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Classshape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Classshape>id_atBckpTime_newID
// to compute new index
func (backRepoClassshape *BackRepoClassshapeStruct) RestorePhaseTwo() {

	for _, classshapeDB := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB {

		// next line of code is to avert unused variable compilation error
		_ = classshapeDB

		// insertion point for reindexing pointers encoding
		// reindexing Position field
		if classshapeDB.PositionID.Int64 != 0 {
			classshapeDB.PositionID.Int64 = int64(BackRepoPositionid_atBckpTime_newID[uint(classshapeDB.PositionID.Int64)])
			classshapeDB.PositionID.Valid = true
		}

		// reindexing GongStruct field
		if classshapeDB.GongStructID.Int64 != 0 {
			classshapeDB.GongStructID.Int64 = int64(BackRepoGongStructid_atBckpTime_newID[uint(classshapeDB.GongStructID.Int64)])
			classshapeDB.GongStructID.Valid = true
		}

		// This reindex classshape.Classshapes
		if classshapeDB.Classdiagram_ClassshapesDBID.Int64 != 0 {
			classshapeDB.Classdiagram_ClassshapesDBID.Int64 =
				int64(BackRepoClassdiagramid_atBckpTime_newID[uint(classshapeDB.Classdiagram_ClassshapesDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoClassshape.db.Model(classshapeDB).Updates(*classshapeDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoClassshapeid_atBckpTime_newID map[uint]uint
