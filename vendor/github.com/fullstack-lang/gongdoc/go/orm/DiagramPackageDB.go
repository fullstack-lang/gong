// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DiagramPackage_sql sql.NullBool
var dummy_DiagramPackage_time time.Duration
var dummy_DiagramPackage_sort sort.Float64Slice

// DiagramPackageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model diagrampackageAPI
type DiagramPackageAPI struct {
	gorm.Model

	models.DiagramPackage

	// encoding of pointers
	DiagramPackagePointersEnconding
}

// DiagramPackagePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DiagramPackagePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field SelectedClassdiagram is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SelectedClassdiagramID sql.NullInt64
}

// DiagramPackageDB describes a diagrampackage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model diagrampackageDB
type DiagramPackageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field diagrampackageDB.Name
	Name_Data sql.NullString

	// Declation for basic field diagrampackageDB.Path
	Path_Data sql.NullString

	// Declation for basic field diagrampackageDB.GongModelPath
	GongModelPath_Data sql.NullString

	// Declation for basic field diagrampackageDB.IsEditable
	// provide the sql storage for the boolan
	IsEditable_Data sql.NullBool

	// Declation for basic field diagrampackageDB.IsReloaded
	// provide the sql storage for the boolan
	IsReloaded_Data sql.NullBool

	// Declation for basic field diagrampackageDB.AbsolutePathToDiagramPackage
	AbsolutePathToDiagramPackage_Data sql.NullString
	// encoding of pointers
	DiagramPackagePointersEnconding
}

// DiagramPackageDBs arrays diagrampackageDBs
// swagger:response diagrampackageDBsResponse
type DiagramPackageDBs []DiagramPackageDB

// DiagramPackageDBResponse provides response
// swagger:response diagrampackageDBResponse
type DiagramPackageDBResponse struct {
	DiagramPackageDB
}

// DiagramPackageWOP is a DiagramPackage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DiagramPackageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Path string `xlsx:"2"`

	GongModelPath string `xlsx:"3"`

	IsEditable bool `xlsx:"4"`

	IsReloaded bool `xlsx:"5"`

	AbsolutePathToDiagramPackage string `xlsx:"6"`
	// insertion for WOP pointer fields
}

var DiagramPackage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Path",
	"GongModelPath",
	"IsEditable",
	"IsReloaded",
	"AbsolutePathToDiagramPackage",
}

type BackRepoDiagramPackageStruct struct {
	// stores DiagramPackageDB according to their gorm ID
	Map_DiagramPackageDBID_DiagramPackageDB *map[uint]*DiagramPackageDB

	// stores DiagramPackageDB ID according to DiagramPackage address
	Map_DiagramPackagePtr_DiagramPackageDBID *map[*models.DiagramPackage]uint

	// stores DiagramPackage according to their gorm ID
	Map_DiagramPackageDBID_DiagramPackagePtr *map[uint]*models.DiagramPackage

	db *gorm.DB
}

func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) GetDB() *gorm.DB {
	return backRepoDiagramPackage.db
}

// GetDiagramPackageDBFromDiagramPackagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) GetDiagramPackageDBFromDiagramPackagePtr(diagrampackage *models.DiagramPackage) (diagrampackageDB *DiagramPackageDB) {
	id := (*backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID)[diagrampackage]
	diagrampackageDB = (*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB)[id]
	return
}

// BackRepoDiagramPackage.Init set up the BackRepo of the DiagramPackage
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) Init(db *gorm.DB) (Error error) {

	if backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr != nil {
		err := errors.New("In Init, backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr should be nil")
		return err
	}

	if backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB != nil {
		err := errors.New("In Init, backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB should be nil")
		return err
	}

	if backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID != nil {
		err := errors.New("In Init, backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.DiagramPackage, 0)
	backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr = &tmp

	tmpDB := make(map[uint]*DiagramPackageDB, 0)
	backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB = &tmpDB

	tmpID := make(map[*models.DiagramPackage]uint, 0)
	backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID = &tmpID

	backRepoDiagramPackage.db = db
	return
}

// BackRepoDiagramPackage.CommitPhaseOne commits all staged instances of DiagramPackage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for diagrampackage := range stage.DiagramPackages {
		backRepoDiagramPackage.CommitPhaseOneInstance(diagrampackage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, diagrampackage := range *backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr {
		if _, ok := stage.DiagramPackages[diagrampackage]; !ok {
			backRepoDiagramPackage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDiagramPackage.CommitDeleteInstance commits deletion of DiagramPackage to the BackRepo
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CommitDeleteInstance(id uint) (Error error) {

	diagrampackage := (*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[id]

	// diagrampackage is not staged anymore, remove diagrampackageDB
	diagrampackageDB := (*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB)[id]
	query := backRepoDiagramPackage.db.Unscoped().Delete(&diagrampackageDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID), diagrampackage)
	delete((*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr), id)
	delete((*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB), id)

	return
}

// BackRepoDiagramPackage.CommitPhaseOneInstance commits diagrampackage staged instances of DiagramPackage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CommitPhaseOneInstance(diagrampackage *models.DiagramPackage) (Error error) {

	// check if the diagrampackage is not commited yet
	if _, ok := (*backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID)[diagrampackage]; ok {
		return
	}

	// initiate diagrampackage
	var diagrampackageDB DiagramPackageDB
	diagrampackageDB.CopyBasicFieldsFromDiagramPackage(diagrampackage)

	query := backRepoDiagramPackage.db.Create(&diagrampackageDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID)[diagrampackage] = diagrampackageDB.ID
	(*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[diagrampackageDB.ID] = diagrampackage
	(*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB)[diagrampackageDB.ID] = &diagrampackageDB

	return
}

// BackRepoDiagramPackage.CommitPhaseTwo commits all staged instances of DiagramPackage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, diagrampackage := range *backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr {
		backRepoDiagramPackage.CommitPhaseTwoInstance(backRepo, idx, diagrampackage)
	}

	return
}

// BackRepoDiagramPackage.CommitPhaseTwoInstance commits {{structname }} of models.DiagramPackage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, diagrampackage *models.DiagramPackage) (Error error) {

	// fetch matching diagrampackageDB
	if diagrampackageDB, ok := (*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB)[idx]; ok {

		diagrampackageDB.CopyBasicFieldsFromDiagramPackage(diagrampackage)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers diagrampackage.Classdiagrams into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, classdiagramAssocEnd := range diagrampackage.Classdiagrams {

			// get the back repo instance at the association end
			classdiagramAssocEnd_DB :=
				backRepo.BackRepoClassdiagram.GetClassdiagramDBFromClassdiagramPtr(classdiagramAssocEnd)

			// encode reverse pointer in the association end back repo instance
			classdiagramAssocEnd_DB.DiagramPackage_ClassdiagramsDBID.Int64 = int64(diagrampackageDB.ID)
			classdiagramAssocEnd_DB.DiagramPackage_ClassdiagramsDBID.Valid = true
			classdiagramAssocEnd_DB.DiagramPackage_ClassdiagramsDBID_Index.Int64 = int64(idx)
			classdiagramAssocEnd_DB.DiagramPackage_ClassdiagramsDBID_Index.Valid = true
			if q := backRepoDiagramPackage.db.Save(classdiagramAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// commit pointer value diagrampackage.SelectedClassdiagram translates to updating the diagrampackage.SelectedClassdiagramID
		diagrampackageDB.SelectedClassdiagramID.Valid = true // allow for a 0 value (nil association)
		if diagrampackage.SelectedClassdiagram != nil {
			if SelectedClassdiagramId, ok := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[diagrampackage.SelectedClassdiagram]; ok {
				diagrampackageDB.SelectedClassdiagramID.Int64 = int64(SelectedClassdiagramId)
				diagrampackageDB.SelectedClassdiagramID.Valid = true
			}
		}

		// This loop encodes the slice of pointers diagrampackage.Umlscs into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, umlscAssocEnd := range diagrampackage.Umlscs {

			// get the back repo instance at the association end
			umlscAssocEnd_DB :=
				backRepo.BackRepoUmlsc.GetUmlscDBFromUmlscPtr(umlscAssocEnd)

			// encode reverse pointer in the association end back repo instance
			umlscAssocEnd_DB.DiagramPackage_UmlscsDBID.Int64 = int64(diagrampackageDB.ID)
			umlscAssocEnd_DB.DiagramPackage_UmlscsDBID.Valid = true
			umlscAssocEnd_DB.DiagramPackage_UmlscsDBID_Index.Int64 = int64(idx)
			umlscAssocEnd_DB.DiagramPackage_UmlscsDBID_Index.Valid = true
			if q := backRepoDiagramPackage.db.Save(umlscAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoDiagramPackage.db.Save(&diagrampackageDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DiagramPackage intance %s", diagrampackage.Name))
		return err
	}

	return
}

// BackRepoDiagramPackage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CheckoutPhaseOne() (Error error) {

	diagrampackageDBArray := make([]DiagramPackageDB, 0)
	query := backRepoDiagramPackage.db.Find(&diagrampackageDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	diagrampackageInstancesToBeRemovedFromTheStage := make(map[*models.DiagramPackage]any)
	for key, value := range models.Stage.DiagramPackages {
		diagrampackageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, diagrampackageDB := range diagrampackageDBArray {
		backRepoDiagramPackage.CheckoutPhaseOneInstance(&diagrampackageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		diagrampackage, ok := (*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[diagrampackageDB.ID]
		if ok {
			delete(diagrampackageInstancesToBeRemovedFromTheStage, diagrampackage)
		}
	}

	// remove from stage and back repo's 3 maps all diagrampackages that are not in the checkout
	for diagrampackage := range diagrampackageInstancesToBeRemovedFromTheStage {
		diagrampackage.Unstage()

		// remove instance from the back repo 3 maps
		diagrampackageID := (*backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID)[diagrampackage]
		delete((*backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID), diagrampackage)
		delete((*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB), diagrampackageID)
		delete((*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr), diagrampackageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a diagrampackageDB that has been found in the DB, updates the backRepo and stages the
// models version of the diagrampackageDB
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CheckoutPhaseOneInstance(diagrampackageDB *DiagramPackageDB) (Error error) {

	diagrampackage, ok := (*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[diagrampackageDB.ID]
	if !ok {
		diagrampackage = new(models.DiagramPackage)

		(*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[diagrampackageDB.ID] = diagrampackage
		(*backRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID)[diagrampackage] = diagrampackageDB.ID

		// append model store with the new element
		diagrampackage.Name = diagrampackageDB.Name_Data.String
		diagrampackage.Stage()
	}
	diagrampackageDB.CopyBasicFieldsToDiagramPackage(diagrampackage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	diagrampackage.Stage()

	// preserve pointer to diagrampackageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DiagramPackageDBID_DiagramPackageDB)[diagrampackageDB hold variable pointers
	diagrampackageDB_Data := *diagrampackageDB
	preservedPtrToDiagramPackage := &diagrampackageDB_Data
	(*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB)[diagrampackageDB.ID] = preservedPtrToDiagramPackage

	return
}

// BackRepoDiagramPackage.CheckoutPhaseTwo Checkouts all staged instances of DiagramPackage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, diagrampackageDB := range *backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB {
		backRepoDiagramPackage.CheckoutPhaseTwoInstance(backRepo, diagrampackageDB)
	}
	return
}

// BackRepoDiagramPackage.CheckoutPhaseTwoInstance Checkouts staged instances of DiagramPackage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, diagrampackageDB *DiagramPackageDB) (Error error) {

	diagrampackage := (*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackagePtr)[diagrampackageDB.ID]
	_ = diagrampackage // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem diagrampackage.Classdiagrams in the stage from the encode in the back repo
	// It parses all ClassdiagramDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	diagrampackage.Classdiagrams = diagrampackage.Classdiagrams[:0]
	// 2. loop all instances in the type in the association end
	for _, classdiagramDB_AssocEnd := range *backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if classdiagramDB_AssocEnd.DiagramPackage_ClassdiagramsDBID.Int64 == int64(diagrampackageDB.ID) {
			// 4. fetch the associated instance in the stage
			classdiagram_AssocEnd := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB_AssocEnd.ID]
			// 5. append it the association slice
			diagrampackage.Classdiagrams = append(diagrampackage.Classdiagrams, classdiagram_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(diagrampackage.Classdiagrams, func(i, j int) bool {
		classdiagramDB_i_ID := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[diagrampackage.Classdiagrams[i]]
		classdiagramDB_j_ID := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[diagrampackage.Classdiagrams[j]]

		classdiagramDB_i := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[classdiagramDB_i_ID]
		classdiagramDB_j := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[classdiagramDB_j_ID]

		return classdiagramDB_i.DiagramPackage_ClassdiagramsDBID_Index.Int64 < classdiagramDB_j.DiagramPackage_ClassdiagramsDBID_Index.Int64
	})

	// SelectedClassdiagram field
	if diagrampackageDB.SelectedClassdiagramID.Int64 != 0 {
		diagrampackage.SelectedClassdiagram = (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[uint(diagrampackageDB.SelectedClassdiagramID.Int64)]
	}
	// This loop redeem diagrampackage.Umlscs in the stage from the encode in the back repo
	// It parses all UmlscDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	diagrampackage.Umlscs = diagrampackage.Umlscs[:0]
	// 2. loop all instances in the type in the association end
	for _, umlscDB_AssocEnd := range *backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if umlscDB_AssocEnd.DiagramPackage_UmlscsDBID.Int64 == int64(diagrampackageDB.ID) {
			// 4. fetch the associated instance in the stage
			umlsc_AssocEnd := (*backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscPtr)[umlscDB_AssocEnd.ID]
			// 5. append it the association slice
			diagrampackage.Umlscs = append(diagrampackage.Umlscs, umlsc_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(diagrampackage.Umlscs, func(i, j int) bool {
		umlscDB_i_ID := (*backRepo.BackRepoUmlsc.Map_UmlscPtr_UmlscDBID)[diagrampackage.Umlscs[i]]
		umlscDB_j_ID := (*backRepo.BackRepoUmlsc.Map_UmlscPtr_UmlscDBID)[diagrampackage.Umlscs[j]]

		umlscDB_i := (*backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscDB)[umlscDB_i_ID]
		umlscDB_j := (*backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscDB)[umlscDB_j_ID]

		return umlscDB_i.DiagramPackage_UmlscsDBID_Index.Int64 < umlscDB_j.DiagramPackage_UmlscsDBID_Index.Int64
	})

	return
}

// CommitDiagramPackage allows commit of a single diagrampackage (if already staged)
func (backRepo *BackRepoStruct) CommitDiagramPackage(diagrampackage *models.DiagramPackage) {
	backRepo.BackRepoDiagramPackage.CommitPhaseOneInstance(diagrampackage)
	if id, ok := (*backRepo.BackRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID)[diagrampackage]; ok {
		backRepo.BackRepoDiagramPackage.CommitPhaseTwoInstance(backRepo, id, diagrampackage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDiagramPackage allows checkout of a single diagrampackage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDiagramPackage(diagrampackage *models.DiagramPackage) {
	// check if the diagrampackage is staged
	if _, ok := (*backRepo.BackRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID)[diagrampackage]; ok {

		if id, ok := (*backRepo.BackRepoDiagramPackage.Map_DiagramPackagePtr_DiagramPackageDBID)[diagrampackage]; ok {
			var diagrampackageDB DiagramPackageDB
			diagrampackageDB.ID = id

			if err := backRepo.BackRepoDiagramPackage.db.First(&diagrampackageDB, id).Error; err != nil {
				log.Panicln("CheckoutDiagramPackage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDiagramPackage.CheckoutPhaseOneInstance(&diagrampackageDB)
			backRepo.BackRepoDiagramPackage.CheckoutPhaseTwoInstance(backRepo, &diagrampackageDB)
		}
	}
}

// CopyBasicFieldsFromDiagramPackage
func (diagrampackageDB *DiagramPackageDB) CopyBasicFieldsFromDiagramPackage(diagrampackage *models.DiagramPackage) {
	// insertion point for fields commit

	diagrampackageDB.Name_Data.String = diagrampackage.Name
	diagrampackageDB.Name_Data.Valid = true

	diagrampackageDB.Path_Data.String = diagrampackage.Path
	diagrampackageDB.Path_Data.Valid = true

	diagrampackageDB.GongModelPath_Data.String = diagrampackage.GongModelPath
	diagrampackageDB.GongModelPath_Data.Valid = true

	diagrampackageDB.IsEditable_Data.Bool = diagrampackage.IsEditable
	diagrampackageDB.IsEditable_Data.Valid = true

	diagrampackageDB.IsReloaded_Data.Bool = diagrampackage.IsReloaded
	diagrampackageDB.IsReloaded_Data.Valid = true

	diagrampackageDB.AbsolutePathToDiagramPackage_Data.String = diagrampackage.AbsolutePathToDiagramPackage
	diagrampackageDB.AbsolutePathToDiagramPackage_Data.Valid = true
}

// CopyBasicFieldsFromDiagramPackageWOP
func (diagrampackageDB *DiagramPackageDB) CopyBasicFieldsFromDiagramPackageWOP(diagrampackage *DiagramPackageWOP) {
	// insertion point for fields commit

	diagrampackageDB.Name_Data.String = diagrampackage.Name
	diagrampackageDB.Name_Data.Valid = true

	diagrampackageDB.Path_Data.String = diagrampackage.Path
	diagrampackageDB.Path_Data.Valid = true

	diagrampackageDB.GongModelPath_Data.String = diagrampackage.GongModelPath
	diagrampackageDB.GongModelPath_Data.Valid = true

	diagrampackageDB.IsEditable_Data.Bool = diagrampackage.IsEditable
	diagrampackageDB.IsEditable_Data.Valid = true

	diagrampackageDB.IsReloaded_Data.Bool = diagrampackage.IsReloaded
	diagrampackageDB.IsReloaded_Data.Valid = true

	diagrampackageDB.AbsolutePathToDiagramPackage_Data.String = diagrampackage.AbsolutePathToDiagramPackage
	diagrampackageDB.AbsolutePathToDiagramPackage_Data.Valid = true
}

// CopyBasicFieldsToDiagramPackage
func (diagrampackageDB *DiagramPackageDB) CopyBasicFieldsToDiagramPackage(diagrampackage *models.DiagramPackage) {
	// insertion point for checkout of basic fields (back repo to stage)
	diagrampackage.Name = diagrampackageDB.Name_Data.String
	diagrampackage.Path = diagrampackageDB.Path_Data.String
	diagrampackage.GongModelPath = diagrampackageDB.GongModelPath_Data.String
	diagrampackage.IsEditable = diagrampackageDB.IsEditable_Data.Bool
	diagrampackage.IsReloaded = diagrampackageDB.IsReloaded_Data.Bool
	diagrampackage.AbsolutePathToDiagramPackage = diagrampackageDB.AbsolutePathToDiagramPackage_Data.String
}

// CopyBasicFieldsToDiagramPackageWOP
func (diagrampackageDB *DiagramPackageDB) CopyBasicFieldsToDiagramPackageWOP(diagrampackage *DiagramPackageWOP) {
	diagrampackage.ID = int(diagrampackageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	diagrampackage.Name = diagrampackageDB.Name_Data.String
	diagrampackage.Path = diagrampackageDB.Path_Data.String
	diagrampackage.GongModelPath = diagrampackageDB.GongModelPath_Data.String
	diagrampackage.IsEditable = diagrampackageDB.IsEditable_Data.Bool
	diagrampackage.IsReloaded = diagrampackageDB.IsReloaded_Data.Bool
	diagrampackage.AbsolutePathToDiagramPackage = diagrampackageDB.AbsolutePathToDiagramPackage_Data.String
}

// Backup generates a json file from a slice of all DiagramPackageDB instances in the backrepo
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DiagramPackageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DiagramPackageDB, 0)
	for _, diagrampackageDB := range *backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB {
		forBackup = append(forBackup, diagrampackageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json DiagramPackage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json DiagramPackage file", err.Error())
	}
}

// Backup generates a json file from a slice of all DiagramPackageDB instances in the backrepo
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DiagramPackageDB, 0)
	for _, diagrampackageDB := range *backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB {
		forBackup = append(forBackup, diagrampackageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DiagramPackage")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DiagramPackage_Fields, -1)
	for _, diagrampackageDB := range forBackup {

		var diagrampackageWOP DiagramPackageWOP
		diagrampackageDB.CopyBasicFieldsToDiagramPackageWOP(&diagrampackageWOP)

		row := sh.AddRow()
		row.WriteStruct(&diagrampackageWOP, -1)
	}
}

// RestoreXL from the "DiagramPackage" sheet all DiagramPackageDB instances
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDiagramPackageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DiagramPackage"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDiagramPackage.rowVisitorDiagramPackage)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) rowVisitorDiagramPackage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var diagrampackageWOP DiagramPackageWOP
		row.ReadStruct(&diagrampackageWOP)

		// add the unmarshalled struct to the stage
		diagrampackageDB := new(DiagramPackageDB)
		diagrampackageDB.CopyBasicFieldsFromDiagramPackageWOP(&diagrampackageWOP)

		diagrampackageDB_ID_atBackupTime := diagrampackageDB.ID
		diagrampackageDB.ID = 0
		query := backRepoDiagramPackage.db.Create(diagrampackageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB)[diagrampackageDB.ID] = diagrampackageDB
		BackRepoDiagramPackageid_atBckpTime_newID[diagrampackageDB_ID_atBackupTime] = diagrampackageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DiagramPackageDB.json" in dirPath that stores an array
// of DiagramPackageDB and stores it in the database
// the map BackRepoDiagramPackageid_atBckpTime_newID is updated accordingly
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDiagramPackageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DiagramPackageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json DiagramPackage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DiagramPackageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DiagramPackageDBID_DiagramPackageDB
	for _, diagrampackageDB := range forRestore {

		diagrampackageDB_ID_atBackupTime := diagrampackageDB.ID
		diagrampackageDB.ID = 0
		query := backRepoDiagramPackage.db.Create(diagrampackageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB)[diagrampackageDB.ID] = diagrampackageDB
		BackRepoDiagramPackageid_atBckpTime_newID[diagrampackageDB_ID_atBackupTime] = diagrampackageDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json DiagramPackage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DiagramPackage>id_atBckpTime_newID
// to compute new index
func (backRepoDiagramPackage *BackRepoDiagramPackageStruct) RestorePhaseTwo() {

	for _, diagrampackageDB := range *backRepoDiagramPackage.Map_DiagramPackageDBID_DiagramPackageDB {

		// next line of code is to avert unused variable compilation error
		_ = diagrampackageDB

		// insertion point for reindexing pointers encoding
		// reindexing SelectedClassdiagram field
		if diagrampackageDB.SelectedClassdiagramID.Int64 != 0 {
			diagrampackageDB.SelectedClassdiagramID.Int64 = int64(BackRepoClassdiagramid_atBckpTime_newID[uint(diagrampackageDB.SelectedClassdiagramID.Int64)])
			diagrampackageDB.SelectedClassdiagramID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDiagramPackage.db.Model(diagrampackageDB).Updates(*diagrampackageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDiagramPackageid_atBckpTime_newID map[uint]uint
