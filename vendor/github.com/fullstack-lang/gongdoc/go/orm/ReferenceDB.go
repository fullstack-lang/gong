// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Reference_sql sql.NullBool
var dummy_Reference_time time.Duration
var dummy_Reference_sort sort.Float64Slice

// ReferenceAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model referenceAPI
type ReferenceAPI struct {
	gorm.Model

	models.Reference

	// encoding of pointers
	ReferencePointersEnconding
}

// ReferencePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ReferencePointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// ReferenceDB describes a reference in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model referenceDB
type ReferenceDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field referenceDB.Name
	Name_Data sql.NullString

	// Declation for basic field referenceDB.NbInstances
	NbInstances_Data sql.NullInt64

	// Declation for basic field referenceDB.Type
	Type_Data sql.NullString
	// encoding of pointers
	ReferencePointersEnconding
}

// ReferenceDBs arrays referenceDBs
// swagger:response referenceDBsResponse
type ReferenceDBs []ReferenceDB

// ReferenceDBResponse provides response
// swagger:response referenceDBResponse
type ReferenceDBResponse struct {
	ReferenceDB
}

// ReferenceWOP is a Reference without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ReferenceWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NbInstances int `xlsx:"2"`

	Type models.ReferenceType `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Reference_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NbInstances",
	"Type",
}

type BackRepoReferenceStruct struct {
	// stores ReferenceDB according to their gorm ID
	Map_ReferenceDBID_ReferenceDB *map[uint]*ReferenceDB

	// stores ReferenceDB ID according to Reference address
	Map_ReferencePtr_ReferenceDBID *map[*models.Reference]uint

	// stores Reference according to their gorm ID
	Map_ReferenceDBID_ReferencePtr *map[uint]*models.Reference

	db *gorm.DB
}

func (backRepoReference *BackRepoReferenceStruct) GetDB() *gorm.DB {
	return backRepoReference.db
}

// GetReferenceDBFromReferencePtr is a handy function to access the back repo instance from the stage instance
func (backRepoReference *BackRepoReferenceStruct) GetReferenceDBFromReferencePtr(reference *models.Reference) (referenceDB *ReferenceDB) {
	id := (*backRepoReference.Map_ReferencePtr_ReferenceDBID)[reference]
	referenceDB = (*backRepoReference.Map_ReferenceDBID_ReferenceDB)[id]
	return
}

// BackRepoReference.Init set up the BackRepo of the Reference
func (backRepoReference *BackRepoReferenceStruct) Init(db *gorm.DB) (Error error) {

	if backRepoReference.Map_ReferenceDBID_ReferencePtr != nil {
		err := errors.New("In Init, backRepoReference.Map_ReferenceDBID_ReferencePtr should be nil")
		return err
	}

	if backRepoReference.Map_ReferenceDBID_ReferenceDB != nil {
		err := errors.New("In Init, backRepoReference.Map_ReferenceDBID_ReferenceDB should be nil")
		return err
	}

	if backRepoReference.Map_ReferencePtr_ReferenceDBID != nil {
		err := errors.New("In Init, backRepoReference.Map_ReferencePtr_ReferenceDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Reference, 0)
	backRepoReference.Map_ReferenceDBID_ReferencePtr = &tmp

	tmpDB := make(map[uint]*ReferenceDB, 0)
	backRepoReference.Map_ReferenceDBID_ReferenceDB = &tmpDB

	tmpID := make(map[*models.Reference]uint, 0)
	backRepoReference.Map_ReferencePtr_ReferenceDBID = &tmpID

	backRepoReference.db = db
	return
}

// BackRepoReference.CommitPhaseOne commits all staged instances of Reference to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoReference *BackRepoReferenceStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for reference := range stage.References {
		backRepoReference.CommitPhaseOneInstance(reference)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, reference := range *backRepoReference.Map_ReferenceDBID_ReferencePtr {
		if _, ok := stage.References[reference]; !ok {
			backRepoReference.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoReference.CommitDeleteInstance commits deletion of Reference to the BackRepo
func (backRepoReference *BackRepoReferenceStruct) CommitDeleteInstance(id uint) (Error error) {

	reference := (*backRepoReference.Map_ReferenceDBID_ReferencePtr)[id]

	// reference is not staged anymore, remove referenceDB
	referenceDB := (*backRepoReference.Map_ReferenceDBID_ReferenceDB)[id]
	query := backRepoReference.db.Unscoped().Delete(&referenceDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoReference.Map_ReferencePtr_ReferenceDBID), reference)
	delete((*backRepoReference.Map_ReferenceDBID_ReferencePtr), id)
	delete((*backRepoReference.Map_ReferenceDBID_ReferenceDB), id)

	return
}

// BackRepoReference.CommitPhaseOneInstance commits reference staged instances of Reference to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoReference *BackRepoReferenceStruct) CommitPhaseOneInstance(reference *models.Reference) (Error error) {

	// check if the reference is not commited yet
	if _, ok := (*backRepoReference.Map_ReferencePtr_ReferenceDBID)[reference]; ok {
		return
	}

	// initiate reference
	var referenceDB ReferenceDB
	referenceDB.CopyBasicFieldsFromReference(reference)

	query := backRepoReference.db.Create(&referenceDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoReference.Map_ReferencePtr_ReferenceDBID)[reference] = referenceDB.ID
	(*backRepoReference.Map_ReferenceDBID_ReferencePtr)[referenceDB.ID] = reference
	(*backRepoReference.Map_ReferenceDBID_ReferenceDB)[referenceDB.ID] = &referenceDB

	return
}

// BackRepoReference.CommitPhaseTwo commits all staged instances of Reference to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReference *BackRepoReferenceStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, reference := range *backRepoReference.Map_ReferenceDBID_ReferencePtr {
		backRepoReference.CommitPhaseTwoInstance(backRepo, idx, reference)
	}

	return
}

// BackRepoReference.CommitPhaseTwoInstance commits {{structname }} of models.Reference to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReference *BackRepoReferenceStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, reference *models.Reference) (Error error) {

	// fetch matching referenceDB
	if referenceDB, ok := (*backRepoReference.Map_ReferenceDBID_ReferenceDB)[idx]; ok {

		referenceDB.CopyBasicFieldsFromReference(reference)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoReference.db.Save(&referenceDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Reference intance %s", reference.Name))
		return err
	}

	return
}

// BackRepoReference.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoReference *BackRepoReferenceStruct) CheckoutPhaseOne() (Error error) {

	referenceDBArray := make([]ReferenceDB, 0)
	query := backRepoReference.db.Find(&referenceDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	referenceInstancesToBeRemovedFromTheStage := make(map[*models.Reference]any)
	for key, value := range models.Stage.References {
		referenceInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, referenceDB := range referenceDBArray {
		backRepoReference.CheckoutPhaseOneInstance(&referenceDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		reference, ok := (*backRepoReference.Map_ReferenceDBID_ReferencePtr)[referenceDB.ID]
		if ok {
			delete(referenceInstancesToBeRemovedFromTheStage, reference)
		}
	}

	// remove from stage and back repo's 3 maps all references that are not in the checkout
	for reference := range referenceInstancesToBeRemovedFromTheStage {
		reference.Unstage()

		// remove instance from the back repo 3 maps
		referenceID := (*backRepoReference.Map_ReferencePtr_ReferenceDBID)[reference]
		delete((*backRepoReference.Map_ReferencePtr_ReferenceDBID), reference)
		delete((*backRepoReference.Map_ReferenceDBID_ReferenceDB), referenceID)
		delete((*backRepoReference.Map_ReferenceDBID_ReferencePtr), referenceID)
	}

	return
}

// CheckoutPhaseOneInstance takes a referenceDB that has been found in the DB, updates the backRepo and stages the
// models version of the referenceDB
func (backRepoReference *BackRepoReferenceStruct) CheckoutPhaseOneInstance(referenceDB *ReferenceDB) (Error error) {

	reference, ok := (*backRepoReference.Map_ReferenceDBID_ReferencePtr)[referenceDB.ID]
	if !ok {
		reference = new(models.Reference)

		(*backRepoReference.Map_ReferenceDBID_ReferencePtr)[referenceDB.ID] = reference
		(*backRepoReference.Map_ReferencePtr_ReferenceDBID)[reference] = referenceDB.ID

		// append model store with the new element
		reference.Name = referenceDB.Name_Data.String
		reference.Stage()
	}
	referenceDB.CopyBasicFieldsToReference(reference)

	// preserve pointer to referenceDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ReferenceDBID_ReferenceDB)[referenceDB hold variable pointers
	referenceDB_Data := *referenceDB
	preservedPtrToReference := &referenceDB_Data
	(*backRepoReference.Map_ReferenceDBID_ReferenceDB)[referenceDB.ID] = preservedPtrToReference

	return
}

// BackRepoReference.CheckoutPhaseTwo Checkouts all staged instances of Reference to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReference *BackRepoReferenceStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, referenceDB := range *backRepoReference.Map_ReferenceDBID_ReferenceDB {
		backRepoReference.CheckoutPhaseTwoInstance(backRepo, referenceDB)
	}
	return
}

// BackRepoReference.CheckoutPhaseTwoInstance Checkouts staged instances of Reference to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReference *BackRepoReferenceStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, referenceDB *ReferenceDB) (Error error) {

	reference := (*backRepoReference.Map_ReferenceDBID_ReferencePtr)[referenceDB.ID]
	_ = reference // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitReference allows commit of a single reference (if already staged)
func (backRepo *BackRepoStruct) CommitReference(reference *models.Reference) {
	backRepo.BackRepoReference.CommitPhaseOneInstance(reference)
	if id, ok := (*backRepo.BackRepoReference.Map_ReferencePtr_ReferenceDBID)[reference]; ok {
		backRepo.BackRepoReference.CommitPhaseTwoInstance(backRepo, id, reference)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitReference allows checkout of a single reference (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutReference(reference *models.Reference) {
	// check if the reference is staged
	if _, ok := (*backRepo.BackRepoReference.Map_ReferencePtr_ReferenceDBID)[reference]; ok {

		if id, ok := (*backRepo.BackRepoReference.Map_ReferencePtr_ReferenceDBID)[reference]; ok {
			var referenceDB ReferenceDB
			referenceDB.ID = id

			if err := backRepo.BackRepoReference.db.First(&referenceDB, id).Error; err != nil {
				log.Panicln("CheckoutReference : Problem with getting object with id:", id)
			}
			backRepo.BackRepoReference.CheckoutPhaseOneInstance(&referenceDB)
			backRepo.BackRepoReference.CheckoutPhaseTwoInstance(backRepo, &referenceDB)
		}
	}
}

// CopyBasicFieldsFromReference
func (referenceDB *ReferenceDB) CopyBasicFieldsFromReference(reference *models.Reference) {
	// insertion point for fields commit

	referenceDB.Name_Data.String = reference.Name
	referenceDB.Name_Data.Valid = true

	referenceDB.NbInstances_Data.Int64 = int64(reference.NbInstances)
	referenceDB.NbInstances_Data.Valid = true

	referenceDB.Type_Data.String = reference.Type.ToString()
	referenceDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromReferenceWOP
func (referenceDB *ReferenceDB) CopyBasicFieldsFromReferenceWOP(reference *ReferenceWOP) {
	// insertion point for fields commit

	referenceDB.Name_Data.String = reference.Name
	referenceDB.Name_Data.Valid = true

	referenceDB.NbInstances_Data.Int64 = int64(reference.NbInstances)
	referenceDB.NbInstances_Data.Valid = true

	referenceDB.Type_Data.String = reference.Type.ToString()
	referenceDB.Type_Data.Valid = true
}

// CopyBasicFieldsToReference
func (referenceDB *ReferenceDB) CopyBasicFieldsToReference(reference *models.Reference) {
	// insertion point for checkout of basic fields (back repo to stage)
	reference.Name = referenceDB.Name_Data.String
	reference.NbInstances = int(referenceDB.NbInstances_Data.Int64)
	reference.Type.FromString(referenceDB.Type_Data.String)
}

// CopyBasicFieldsToReferenceWOP
func (referenceDB *ReferenceDB) CopyBasicFieldsToReferenceWOP(reference *ReferenceWOP) {
	reference.ID = int(referenceDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	reference.Name = referenceDB.Name_Data.String
	reference.NbInstances = int(referenceDB.NbInstances_Data.Int64)
	reference.Type.FromString(referenceDB.Type_Data.String)
}

// Backup generates a json file from a slice of all ReferenceDB instances in the backrepo
func (backRepoReference *BackRepoReferenceStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ReferenceDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ReferenceDB, 0)
	for _, referenceDB := range *backRepoReference.Map_ReferenceDBID_ReferenceDB {
		forBackup = append(forBackup, referenceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Reference ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Reference file", err.Error())
	}
}

// Backup generates a json file from a slice of all ReferenceDB instances in the backrepo
func (backRepoReference *BackRepoReferenceStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ReferenceDB, 0)
	for _, referenceDB := range *backRepoReference.Map_ReferenceDBID_ReferenceDB {
		forBackup = append(forBackup, referenceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Reference")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Reference_Fields, -1)
	for _, referenceDB := range forBackup {

		var referenceWOP ReferenceWOP
		referenceDB.CopyBasicFieldsToReferenceWOP(&referenceWOP)

		row := sh.AddRow()
		row.WriteStruct(&referenceWOP, -1)
	}
}

// RestoreXL from the "Reference" sheet all ReferenceDB instances
func (backRepoReference *BackRepoReferenceStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoReferenceid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Reference"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoReference.rowVisitorReference)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoReference *BackRepoReferenceStruct) rowVisitorReference(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var referenceWOP ReferenceWOP
		row.ReadStruct(&referenceWOP)

		// add the unmarshalled struct to the stage
		referenceDB := new(ReferenceDB)
		referenceDB.CopyBasicFieldsFromReferenceWOP(&referenceWOP)

		referenceDB_ID_atBackupTime := referenceDB.ID
		referenceDB.ID = 0
		query := backRepoReference.db.Create(referenceDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoReference.Map_ReferenceDBID_ReferenceDB)[referenceDB.ID] = referenceDB
		BackRepoReferenceid_atBckpTime_newID[referenceDB_ID_atBackupTime] = referenceDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ReferenceDB.json" in dirPath that stores an array
// of ReferenceDB and stores it in the database
// the map BackRepoReferenceid_atBckpTime_newID is updated accordingly
func (backRepoReference *BackRepoReferenceStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoReferenceid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ReferenceDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Reference file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ReferenceDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ReferenceDBID_ReferenceDB
	for _, referenceDB := range forRestore {

		referenceDB_ID_atBackupTime := referenceDB.ID
		referenceDB.ID = 0
		query := backRepoReference.db.Create(referenceDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoReference.Map_ReferenceDBID_ReferenceDB)[referenceDB.ID] = referenceDB
		BackRepoReferenceid_atBckpTime_newID[referenceDB_ID_atBackupTime] = referenceDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Reference file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Reference>id_atBckpTime_newID
// to compute new index
func (backRepoReference *BackRepoReferenceStruct) RestorePhaseTwo() {

	for _, referenceDB := range *backRepoReference.Map_ReferenceDBID_ReferenceDB {

		// next line of code is to avert unused variable compilation error
		_ = referenceDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoReference.db.Model(referenceDB).Updates(*referenceDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoReferenceid_atBckpTime_newID map[uint]uint
