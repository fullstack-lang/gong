// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Field_sql sql.NullBool
var dummy_Field_time time.Duration
var dummy_Field_sort sort.Float64Slice

// FieldAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fieldAPI
type FieldAPI struct {
	gorm.Model

	models.Field

	// encoding of pointers
	FieldPointersEnconding
}

// FieldPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FieldPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field GongStructShape{}.Fields []*Field
	GongStructShape_FieldsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	GongStructShape_FieldsDBID_Index sql.NullInt64
}

// FieldDB describes a field in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model fieldDB
type FieldDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field fieldDB.Name
	Name_Data sql.NullString

	// Declation for basic field fieldDB.Identifier
	Identifier_Data sql.NullString

	// Declation for basic field fieldDB.FieldTypeAsString
	FieldTypeAsString_Data sql.NullString

	// Declation for basic field fieldDB.Structname
	Structname_Data sql.NullString

	// Declation for basic field fieldDB.Fieldtypename
	Fieldtypename_Data sql.NullString
	// encoding of pointers
	FieldPointersEnconding
}

// FieldDBs arrays fieldDBs
// swagger:response fieldDBsResponse
type FieldDBs []FieldDB

// FieldDBResponse provides response
// swagger:response fieldDBResponse
type FieldDBResponse struct {
	FieldDB
}

// FieldWOP is a Field without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FieldWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Identifier string `xlsx:"2"`

	FieldTypeAsString string `xlsx:"3"`

	Structname string `xlsx:"4"`

	Fieldtypename string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var Field_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Identifier",
	"FieldTypeAsString",
	"Structname",
	"Fieldtypename",
}

type BackRepoFieldStruct struct {
	// stores FieldDB according to their gorm ID
	Map_FieldDBID_FieldDB *map[uint]*FieldDB

	// stores FieldDB ID according to Field address
	Map_FieldPtr_FieldDBID *map[*models.Field]uint

	// stores Field according to their gorm ID
	Map_FieldDBID_FieldPtr *map[uint]*models.Field

	db *gorm.DB
}

func (backRepoField *BackRepoFieldStruct) GetDB() *gorm.DB {
	return backRepoField.db
}

// GetFieldDBFromFieldPtr is a handy function to access the back repo instance from the stage instance
func (backRepoField *BackRepoFieldStruct) GetFieldDBFromFieldPtr(field *models.Field) (fieldDB *FieldDB) {
	id := (*backRepoField.Map_FieldPtr_FieldDBID)[field]
	fieldDB = (*backRepoField.Map_FieldDBID_FieldDB)[id]
	return
}

// BackRepoField.Init set up the BackRepo of the Field
func (backRepoField *BackRepoFieldStruct) Init(db *gorm.DB) (Error error) {

	if backRepoField.Map_FieldDBID_FieldPtr != nil {
		err := errors.New("In Init, backRepoField.Map_FieldDBID_FieldPtr should be nil")
		return err
	}

	if backRepoField.Map_FieldDBID_FieldDB != nil {
		err := errors.New("In Init, backRepoField.Map_FieldDBID_FieldDB should be nil")
		return err
	}

	if backRepoField.Map_FieldPtr_FieldDBID != nil {
		err := errors.New("In Init, backRepoField.Map_FieldPtr_FieldDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Field, 0)
	backRepoField.Map_FieldDBID_FieldPtr = &tmp

	tmpDB := make(map[uint]*FieldDB, 0)
	backRepoField.Map_FieldDBID_FieldDB = &tmpDB

	tmpID := make(map[*models.Field]uint, 0)
	backRepoField.Map_FieldPtr_FieldDBID = &tmpID

	backRepoField.db = db
	return
}

// BackRepoField.CommitPhaseOne commits all staged instances of Field to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoField *BackRepoFieldStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for field := range stage.Fields {
		backRepoField.CommitPhaseOneInstance(field)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, field := range *backRepoField.Map_FieldDBID_FieldPtr {
		if _, ok := stage.Fields[field]; !ok {
			backRepoField.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoField.CommitDeleteInstance commits deletion of Field to the BackRepo
func (backRepoField *BackRepoFieldStruct) CommitDeleteInstance(id uint) (Error error) {

	field := (*backRepoField.Map_FieldDBID_FieldPtr)[id]

	// field is not staged anymore, remove fieldDB
	fieldDB := (*backRepoField.Map_FieldDBID_FieldDB)[id]
	query := backRepoField.db.Unscoped().Delete(&fieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoField.Map_FieldPtr_FieldDBID), field)
	delete((*backRepoField.Map_FieldDBID_FieldPtr), id)
	delete((*backRepoField.Map_FieldDBID_FieldDB), id)

	return
}

// BackRepoField.CommitPhaseOneInstance commits field staged instances of Field to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoField *BackRepoFieldStruct) CommitPhaseOneInstance(field *models.Field) (Error error) {

	// check if the field is not commited yet
	if _, ok := (*backRepoField.Map_FieldPtr_FieldDBID)[field]; ok {
		return
	}

	// initiate field
	var fieldDB FieldDB
	fieldDB.CopyBasicFieldsFromField(field)

	query := backRepoField.db.Create(&fieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoField.Map_FieldPtr_FieldDBID)[field] = fieldDB.ID
	(*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID] = field
	(*backRepoField.Map_FieldDBID_FieldDB)[fieldDB.ID] = &fieldDB

	return
}

// BackRepoField.CommitPhaseTwo commits all staged instances of Field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoField *BackRepoFieldStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, field := range *backRepoField.Map_FieldDBID_FieldPtr {
		backRepoField.CommitPhaseTwoInstance(backRepo, idx, field)
	}

	return
}

// BackRepoField.CommitPhaseTwoInstance commits {{structname }} of models.Field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoField *BackRepoFieldStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, field *models.Field) (Error error) {

	// fetch matching fieldDB
	if fieldDB, ok := (*backRepoField.Map_FieldDBID_FieldDB)[idx]; ok {

		fieldDB.CopyBasicFieldsFromField(field)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoField.db.Save(&fieldDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Field intance %s", field.Name))
		return err
	}

	return
}

// BackRepoField.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoField *BackRepoFieldStruct) CheckoutPhaseOne() (Error error) {

	fieldDBArray := make([]FieldDB, 0)
	query := backRepoField.db.Find(&fieldDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	fieldInstancesToBeRemovedFromTheStage := make(map[*models.Field]any)
	for key, value := range models.Stage.Fields {
		fieldInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, fieldDB := range fieldDBArray {
		backRepoField.CheckoutPhaseOneInstance(&fieldDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		field, ok := (*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID]
		if ok {
			delete(fieldInstancesToBeRemovedFromTheStage, field)
		}
	}

	// remove from stage and back repo's 3 maps all fields that are not in the checkout
	for field := range fieldInstancesToBeRemovedFromTheStage {
		field.Unstage()

		// remove instance from the back repo 3 maps
		fieldID := (*backRepoField.Map_FieldPtr_FieldDBID)[field]
		delete((*backRepoField.Map_FieldPtr_FieldDBID), field)
		delete((*backRepoField.Map_FieldDBID_FieldDB), fieldID)
		delete((*backRepoField.Map_FieldDBID_FieldPtr), fieldID)
	}

	return
}

// CheckoutPhaseOneInstance takes a fieldDB that has been found in the DB, updates the backRepo and stages the
// models version of the fieldDB
func (backRepoField *BackRepoFieldStruct) CheckoutPhaseOneInstance(fieldDB *FieldDB) (Error error) {

	field, ok := (*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID]
	if !ok {
		field = new(models.Field)

		(*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID] = field
		(*backRepoField.Map_FieldPtr_FieldDBID)[field] = fieldDB.ID

		// append model store with the new element
		field.Name = fieldDB.Name_Data.String
		field.Stage()
	}
	fieldDB.CopyBasicFieldsToField(field)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	field.Stage()

	// preserve pointer to fieldDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FieldDBID_FieldDB)[fieldDB hold variable pointers
	fieldDB_Data := *fieldDB
	preservedPtrToField := &fieldDB_Data
	(*backRepoField.Map_FieldDBID_FieldDB)[fieldDB.ID] = preservedPtrToField

	return
}

// BackRepoField.CheckoutPhaseTwo Checkouts all staged instances of Field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoField *BackRepoFieldStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fieldDB := range *backRepoField.Map_FieldDBID_FieldDB {
		backRepoField.CheckoutPhaseTwoInstance(backRepo, fieldDB)
	}
	return
}

// BackRepoField.CheckoutPhaseTwoInstance Checkouts staged instances of Field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoField *BackRepoFieldStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fieldDB *FieldDB) (Error error) {

	field := (*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID]
	_ = field // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitField allows commit of a single field (if already staged)
func (backRepo *BackRepoStruct) CommitField(field *models.Field) {
	backRepo.BackRepoField.CommitPhaseOneInstance(field)
	if id, ok := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[field]; ok {
		backRepo.BackRepoField.CommitPhaseTwoInstance(backRepo, id, field)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitField allows checkout of a single field (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutField(field *models.Field) {
	// check if the field is staged
	if _, ok := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[field]; ok {

		if id, ok := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[field]; ok {
			var fieldDB FieldDB
			fieldDB.ID = id

			if err := backRepo.BackRepoField.db.First(&fieldDB, id).Error; err != nil {
				log.Panicln("CheckoutField : Problem with getting object with id:", id)
			}
			backRepo.BackRepoField.CheckoutPhaseOneInstance(&fieldDB)
			backRepo.BackRepoField.CheckoutPhaseTwoInstance(backRepo, &fieldDB)
		}
	}
}

// CopyBasicFieldsFromField
func (fieldDB *FieldDB) CopyBasicFieldsFromField(field *models.Field) {
	// insertion point for fields commit

	fieldDB.Name_Data.String = field.Name
	fieldDB.Name_Data.Valid = true

	fieldDB.Identifier_Data.String = field.Identifier
	fieldDB.Identifier_Data.Valid = true

	fieldDB.FieldTypeAsString_Data.String = field.FieldTypeAsString
	fieldDB.FieldTypeAsString_Data.Valid = true

	fieldDB.Structname_Data.String = field.Structname
	fieldDB.Structname_Data.Valid = true

	fieldDB.Fieldtypename_Data.String = field.Fieldtypename
	fieldDB.Fieldtypename_Data.Valid = true
}

// CopyBasicFieldsFromFieldWOP
func (fieldDB *FieldDB) CopyBasicFieldsFromFieldWOP(field *FieldWOP) {
	// insertion point for fields commit

	fieldDB.Name_Data.String = field.Name
	fieldDB.Name_Data.Valid = true

	fieldDB.Identifier_Data.String = field.Identifier
	fieldDB.Identifier_Data.Valid = true

	fieldDB.FieldTypeAsString_Data.String = field.FieldTypeAsString
	fieldDB.FieldTypeAsString_Data.Valid = true

	fieldDB.Structname_Data.String = field.Structname
	fieldDB.Structname_Data.Valid = true

	fieldDB.Fieldtypename_Data.String = field.Fieldtypename
	fieldDB.Fieldtypename_Data.Valid = true
}

// CopyBasicFieldsToField
func (fieldDB *FieldDB) CopyBasicFieldsToField(field *models.Field) {
	// insertion point for checkout of basic fields (back repo to stage)
	field.Name = fieldDB.Name_Data.String
	field.Identifier = fieldDB.Identifier_Data.String
	field.FieldTypeAsString = fieldDB.FieldTypeAsString_Data.String
	field.Structname = fieldDB.Structname_Data.String
	field.Fieldtypename = fieldDB.Fieldtypename_Data.String
}

// CopyBasicFieldsToFieldWOP
func (fieldDB *FieldDB) CopyBasicFieldsToFieldWOP(field *FieldWOP) {
	field.ID = int(fieldDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	field.Name = fieldDB.Name_Data.String
	field.Identifier = fieldDB.Identifier_Data.String
	field.FieldTypeAsString = fieldDB.FieldTypeAsString_Data.String
	field.Structname = fieldDB.Structname_Data.String
	field.Fieldtypename = fieldDB.Fieldtypename_Data.String
}

// Backup generates a json file from a slice of all FieldDB instances in the backrepo
func (backRepoField *BackRepoFieldStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FieldDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FieldDB, 0)
	for _, fieldDB := range *backRepoField.Map_FieldDBID_FieldDB {
		forBackup = append(forBackup, fieldDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Field ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Field file", err.Error())
	}
}

// Backup generates a json file from a slice of all FieldDB instances in the backrepo
func (backRepoField *BackRepoFieldStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FieldDB, 0)
	for _, fieldDB := range *backRepoField.Map_FieldDBID_FieldDB {
		forBackup = append(forBackup, fieldDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Field")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Field_Fields, -1)
	for _, fieldDB := range forBackup {

		var fieldWOP FieldWOP
		fieldDB.CopyBasicFieldsToFieldWOP(&fieldWOP)

		row := sh.AddRow()
		row.WriteStruct(&fieldWOP, -1)
	}
}

// RestoreXL from the "Field" sheet all FieldDB instances
func (backRepoField *BackRepoFieldStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFieldid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Field"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoField.rowVisitorField)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoField *BackRepoFieldStruct) rowVisitorField(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var fieldWOP FieldWOP
		row.ReadStruct(&fieldWOP)

		// add the unmarshalled struct to the stage
		fieldDB := new(FieldDB)
		fieldDB.CopyBasicFieldsFromFieldWOP(&fieldWOP)

		fieldDB_ID_atBackupTime := fieldDB.ID
		fieldDB.ID = 0
		query := backRepoField.db.Create(fieldDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoField.Map_FieldDBID_FieldDB)[fieldDB.ID] = fieldDB
		BackRepoFieldid_atBckpTime_newID[fieldDB_ID_atBackupTime] = fieldDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FieldDB.json" in dirPath that stores an array
// of FieldDB and stores it in the database
// the map BackRepoFieldid_atBckpTime_newID is updated accordingly
func (backRepoField *BackRepoFieldStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFieldid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FieldDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Field file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FieldDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FieldDBID_FieldDB
	for _, fieldDB := range forRestore {

		fieldDB_ID_atBackupTime := fieldDB.ID
		fieldDB.ID = 0
		query := backRepoField.db.Create(fieldDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoField.Map_FieldDBID_FieldDB)[fieldDB.ID] = fieldDB
		BackRepoFieldid_atBckpTime_newID[fieldDB_ID_atBackupTime] = fieldDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Field file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Field>id_atBckpTime_newID
// to compute new index
func (backRepoField *BackRepoFieldStruct) RestorePhaseTwo() {

	for _, fieldDB := range *backRepoField.Map_FieldDBID_FieldDB {

		// next line of code is to avert unused variable compilation error
		_ = fieldDB

		// insertion point for reindexing pointers encoding
		// This reindex field.Fields
		if fieldDB.GongStructShape_FieldsDBID.Int64 != 0 {
			fieldDB.GongStructShape_FieldsDBID.Int64 =
				int64(BackRepoGongStructShapeid_atBckpTime_newID[uint(fieldDB.GongStructShape_FieldsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoField.db.Model(fieldDB).Updates(*fieldDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFieldid_atBckpTime_newID map[uint]uint
