// generated by genORMTranslation.go
package orm

import (
	"bufio"
	"bytes"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"gorm.io/gorm"

	"github.com/fullstack-lang/gongdoc/go/models"

	"github.com/tealeg/xlsx/v3"
)

// BackRepoStruct supports callback functions
type BackRepoStruct struct {
	// insertion point for per struct back repo declarations
	BackRepoClassdiagram BackRepoClassdiagramStruct

	BackRepoClassshape BackRepoClassshapeStruct

	BackRepoField BackRepoFieldStruct

	BackRepoGongStruct BackRepoGongStructStruct

	BackRepoGongdocCommand BackRepoGongdocCommandStruct

	BackRepoGongdocStatus BackRepoGongdocStatusStruct

	BackRepoLink BackRepoLinkStruct

	BackRepoPkgelt BackRepoPkgeltStruct

	BackRepoPosition BackRepoPositionStruct

	BackRepoUmlState BackRepoUmlStateStruct

	BackRepoUmlsc BackRepoUmlscStruct

	BackRepoVertice BackRepoVerticeStruct

	CommitFromBackNb uint // this ng is updated at the BackRepo level but also at the BackRepo<GongStruct> level

	PushFromFrontNb uint // records increments from push from front
}

func (backRepo *BackRepoStruct) GetLastCommitFromBackNb() uint {
	return backRepo.CommitFromBackNb
}

func (backRepo *BackRepoStruct) GetLastPushFromFrontNb() uint {
	return backRepo.PushFromFrontNb
}

func (backRepo *BackRepoStruct) IncrementCommitFromBackNb() uint {
	if models.Stage.OnInitCommitCallback != nil {
		models.Stage.OnInitCommitCallback.BeforeCommit(&models.Stage)
	}
	if models.Stage.OnInitCommitFromBackCallback != nil {
		models.Stage.OnInitCommitFromBackCallback.BeforeCommit(&models.Stage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
	return backRepo.CommitFromBackNb
}

func (backRepo *BackRepoStruct) IncrementPushFromFrontNb() uint {
	if models.Stage.OnInitCommitCallback != nil {
		models.Stage.OnInitCommitCallback.BeforeCommit(&models.Stage)
	}
	if models.Stage.OnInitCommitFromFrontCallback != nil {
		models.Stage.OnInitCommitFromFrontCallback.BeforeCommit(&models.Stage)
	}
	backRepo.PushFromFrontNb = backRepo.PushFromFrontNb + 1
	return backRepo.CommitFromBackNb
}

// Init the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) init(db *gorm.DB) {
	// insertion point for per struct back repo declarations
	backRepo.BackRepoClassdiagram.Init(db)
	backRepo.BackRepoClassshape.Init(db)
	backRepo.BackRepoField.Init(db)
	backRepo.BackRepoGongStruct.Init(db)
	backRepo.BackRepoGongdocCommand.Init(db)
	backRepo.BackRepoGongdocStatus.Init(db)
	backRepo.BackRepoLink.Init(db)
	backRepo.BackRepoPkgelt.Init(db)
	backRepo.BackRepoPosition.Init(db)
	backRepo.BackRepoUmlState.Init(db)
	backRepo.BackRepoUmlsc.Init(db)
	backRepo.BackRepoVertice.Init(db)

	models.Stage.BackRepo = backRepo
}

// Commit the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) Commit(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoClassdiagram.CommitPhaseOne(stage)
	backRepo.BackRepoClassshape.CommitPhaseOne(stage)
	backRepo.BackRepoField.CommitPhaseOne(stage)
	backRepo.BackRepoGongStruct.CommitPhaseOne(stage)
	backRepo.BackRepoGongdocCommand.CommitPhaseOne(stage)
	backRepo.BackRepoGongdocStatus.CommitPhaseOne(stage)
	backRepo.BackRepoLink.CommitPhaseOne(stage)
	backRepo.BackRepoPkgelt.CommitPhaseOne(stage)
	backRepo.BackRepoPosition.CommitPhaseOne(stage)
	backRepo.BackRepoUmlState.CommitPhaseOne(stage)
	backRepo.BackRepoUmlsc.CommitPhaseOne(stage)
	backRepo.BackRepoVertice.CommitPhaseOne(stage)

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoClassdiagram.CommitPhaseTwo(backRepo)
	backRepo.BackRepoClassshape.CommitPhaseTwo(backRepo)
	backRepo.BackRepoField.CommitPhaseTwo(backRepo)
	backRepo.BackRepoGongStruct.CommitPhaseTwo(backRepo)
	backRepo.BackRepoGongdocCommand.CommitPhaseTwo(backRepo)
	backRepo.BackRepoGongdocStatus.CommitPhaseTwo(backRepo)
	backRepo.BackRepoLink.CommitPhaseTwo(backRepo)
	backRepo.BackRepoPkgelt.CommitPhaseTwo(backRepo)
	backRepo.BackRepoPosition.CommitPhaseTwo(backRepo)
	backRepo.BackRepoUmlState.CommitPhaseTwo(backRepo)
	backRepo.BackRepoUmlsc.CommitPhaseTwo(backRepo)
	backRepo.BackRepoVertice.CommitPhaseTwo(backRepo)

	backRepo.IncrementCommitFromBackNb()
}

// Checkout the database into the stage
func (backRepo *BackRepoStruct) Checkout(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoClassdiagram.CheckoutPhaseOne()
	backRepo.BackRepoClassshape.CheckoutPhaseOne()
	backRepo.BackRepoField.CheckoutPhaseOne()
	backRepo.BackRepoGongStruct.CheckoutPhaseOne()
	backRepo.BackRepoGongdocCommand.CheckoutPhaseOne()
	backRepo.BackRepoGongdocStatus.CheckoutPhaseOne()
	backRepo.BackRepoLink.CheckoutPhaseOne()
	backRepo.BackRepoPkgelt.CheckoutPhaseOne()
	backRepo.BackRepoPosition.CheckoutPhaseOne()
	backRepo.BackRepoUmlState.CheckoutPhaseOne()
	backRepo.BackRepoUmlsc.CheckoutPhaseOne()
	backRepo.BackRepoVertice.CheckoutPhaseOne()

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoClassdiagram.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoClassshape.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoField.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoGongStruct.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoGongdocCommand.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoGongdocStatus.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoLink.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoPkgelt.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoPosition.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoUmlState.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoUmlsc.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoVertice.CheckoutPhaseTwo(backRepo)
}

var BackRepo BackRepoStruct

func GetLastCommitFromBackNb() uint {
	return BackRepo.GetLastCommitFromBackNb()
}

func GetLastPushFromFrontNb() uint {
	return BackRepo.GetLastPushFromFrontNb()
}

// Backup the BackRepoStruct
func (backRepo *BackRepoStruct) Backup(stage *models.StageStruct, dirPath string) {
	os.MkdirAll(dirPath, os.ModePerm)

	// insertion point for per struct backup
	backRepo.BackRepoClassdiagram.Backup(dirPath)
	backRepo.BackRepoClassshape.Backup(dirPath)
	backRepo.BackRepoField.Backup(dirPath)
	backRepo.BackRepoGongStruct.Backup(dirPath)
	backRepo.BackRepoGongdocCommand.Backup(dirPath)
	backRepo.BackRepoGongdocStatus.Backup(dirPath)
	backRepo.BackRepoLink.Backup(dirPath)
	backRepo.BackRepoPkgelt.Backup(dirPath)
	backRepo.BackRepoPosition.Backup(dirPath)
	backRepo.BackRepoUmlState.Backup(dirPath)
	backRepo.BackRepoUmlsc.Backup(dirPath)
	backRepo.BackRepoVertice.Backup(dirPath)
}

// Backup in XL the BackRepoStruct
func (backRepo *BackRepoStruct) BackupXL(stage *models.StageStruct, dirPath string) {
	os.MkdirAll(dirPath, os.ModePerm)

	// open an existing file
	file := xlsx.NewFile()

	// insertion point for per struct backup
	backRepo.BackRepoClassdiagram.BackupXL(file)
	backRepo.BackRepoClassshape.BackupXL(file)
	backRepo.BackRepoField.BackupXL(file)
	backRepo.BackRepoGongStruct.BackupXL(file)
	backRepo.BackRepoGongdocCommand.BackupXL(file)
	backRepo.BackRepoGongdocStatus.BackupXL(file)
	backRepo.BackRepoLink.BackupXL(file)
	backRepo.BackRepoPkgelt.BackupXL(file)
	backRepo.BackRepoPosition.BackupXL(file)
	backRepo.BackRepoUmlState.BackupXL(file)
	backRepo.BackRepoUmlsc.BackupXL(file)
	backRepo.BackRepoVertice.BackupXL(file)

	var b bytes.Buffer
	writer := bufio.NewWriter(&b)
	file.Write(writer)
	theBytes := b.Bytes()

	filename := filepath.Join(dirPath, "bckp.xlsx")
	err := ioutil.WriteFile(filename, theBytes, 0644)
	if err != nil {
		log.Panic("Cannot write the XL file", err.Error())
	}
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) Restore(stage *models.StageStruct, dirPath string) {
	models.Stage.Commit()
	models.Stage.Reset()
	models.Stage.Checkout()

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoClassdiagram.RestorePhaseOne(dirPath)
	backRepo.BackRepoClassshape.RestorePhaseOne(dirPath)
	backRepo.BackRepoField.RestorePhaseOne(dirPath)
	backRepo.BackRepoGongStruct.RestorePhaseOne(dirPath)
	backRepo.BackRepoGongdocCommand.RestorePhaseOne(dirPath)
	backRepo.BackRepoGongdocStatus.RestorePhaseOne(dirPath)
	backRepo.BackRepoLink.RestorePhaseOne(dirPath)
	backRepo.BackRepoPkgelt.RestorePhaseOne(dirPath)
	backRepo.BackRepoPosition.RestorePhaseOne(dirPath)
	backRepo.BackRepoUmlState.RestorePhaseOne(dirPath)
	backRepo.BackRepoUmlsc.RestorePhaseOne(dirPath)
	backRepo.BackRepoVertice.RestorePhaseOne(dirPath)

	//
	// restauration second phase (reindex pointers with the new ID)
	//

	// insertion point for per struct backup
	backRepo.BackRepoClassdiagram.RestorePhaseTwo()
	backRepo.BackRepoClassshape.RestorePhaseTwo()
	backRepo.BackRepoField.RestorePhaseTwo()
	backRepo.BackRepoGongStruct.RestorePhaseTwo()
	backRepo.BackRepoGongdocCommand.RestorePhaseTwo()
	backRepo.BackRepoGongdocStatus.RestorePhaseTwo()
	backRepo.BackRepoLink.RestorePhaseTwo()
	backRepo.BackRepoPkgelt.RestorePhaseTwo()
	backRepo.BackRepoPosition.RestorePhaseTwo()
	backRepo.BackRepoUmlState.RestorePhaseTwo()
	backRepo.BackRepoUmlsc.RestorePhaseTwo()
	backRepo.BackRepoVertice.RestorePhaseTwo()

	models.Stage.Checkout()
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) RestoreXL(stage *models.StageStruct, dirPath string) {

	// clean the stage
	models.Stage.Reset()

	// commit the cleaned stage
	models.Stage.Commit()

	// open an existing file
	filename := filepath.Join(dirPath, "bckp.xlsx")
	file, err := xlsx.OpenFile(filename)

	if err != nil {
		log.Panic("Cannot read the XL file", err.Error())
	}

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoClassdiagram.RestoreXLPhaseOne(file)
	backRepo.BackRepoClassshape.RestoreXLPhaseOne(file)
	backRepo.BackRepoField.RestoreXLPhaseOne(file)
	backRepo.BackRepoGongStruct.RestoreXLPhaseOne(file)
	backRepo.BackRepoGongdocCommand.RestoreXLPhaseOne(file)
	backRepo.BackRepoGongdocStatus.RestoreXLPhaseOne(file)
	backRepo.BackRepoLink.RestoreXLPhaseOne(file)
	backRepo.BackRepoPkgelt.RestoreXLPhaseOne(file)
	backRepo.BackRepoPosition.RestoreXLPhaseOne(file)
	backRepo.BackRepoUmlState.RestoreXLPhaseOne(file)
	backRepo.BackRepoUmlsc.RestoreXLPhaseOne(file)
	backRepo.BackRepoVertice.RestoreXLPhaseOne(file)

	// commit the restored stage
	models.Stage.Commit()
}
