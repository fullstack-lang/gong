// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Position_sql sql.NullBool
var dummy_Position_time time.Duration
var dummy_Position_sort sort.Float64Slice

// PositionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model positionAPI
type PositionAPI struct {
	gorm.Model

	models.Position

	// encoding of pointers
	PositionPointersEnconding
}

// PositionPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PositionPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// PositionDB describes a position in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model positionDB
type PositionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field positionDB.X
	X_Data sql.NullFloat64

	// Declation for basic field positionDB.Y
	Y_Data sql.NullFloat64

	// Declation for basic field positionDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	PositionPointersEnconding
}

// PositionDBs arrays positionDBs
// swagger:response positionDBsResponse
type PositionDBs []PositionDB

// PositionDBResponse provides response
// swagger:response positionDBResponse
type PositionDBResponse struct {
	PositionDB
}

// PositionWOP is a Position without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PositionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	X float64 `xlsx:"1"`

	Y float64 `xlsx:"2"`

	Name string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Position_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"X",
	"Y",
	"Name",
}

type BackRepoPositionStruct struct {
	// stores PositionDB according to their gorm ID
	Map_PositionDBID_PositionDB *map[uint]*PositionDB

	// stores PositionDB ID according to Position address
	Map_PositionPtr_PositionDBID *map[*models.Position]uint

	// stores Position according to their gorm ID
	Map_PositionDBID_PositionPtr *map[uint]*models.Position

	db *gorm.DB
}

func (backRepoPosition *BackRepoPositionStruct) GetDB() *gorm.DB {
	return backRepoPosition.db
}

// GetPositionDBFromPositionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPosition *BackRepoPositionStruct) GetPositionDBFromPositionPtr(position *models.Position) (positionDB *PositionDB) {
	id := (*backRepoPosition.Map_PositionPtr_PositionDBID)[position]
	positionDB = (*backRepoPosition.Map_PositionDBID_PositionDB)[id]
	return
}

// BackRepoPosition.Init set up the BackRepo of the Position
func (backRepoPosition *BackRepoPositionStruct) Init(db *gorm.DB) (Error error) {

	if backRepoPosition.Map_PositionDBID_PositionPtr != nil {
		err := errors.New("In Init, backRepoPosition.Map_PositionDBID_PositionPtr should be nil")
		return err
	}

	if backRepoPosition.Map_PositionDBID_PositionDB != nil {
		err := errors.New("In Init, backRepoPosition.Map_PositionDBID_PositionDB should be nil")
		return err
	}

	if backRepoPosition.Map_PositionPtr_PositionDBID != nil {
		err := errors.New("In Init, backRepoPosition.Map_PositionPtr_PositionDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Position, 0)
	backRepoPosition.Map_PositionDBID_PositionPtr = &tmp

	tmpDB := make(map[uint]*PositionDB, 0)
	backRepoPosition.Map_PositionDBID_PositionDB = &tmpDB

	tmpID := make(map[*models.Position]uint, 0)
	backRepoPosition.Map_PositionPtr_PositionDBID = &tmpID

	backRepoPosition.db = db
	return
}

// BackRepoPosition.CommitPhaseOne commits all staged instances of Position to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPosition *BackRepoPositionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for position := range stage.Positions {
		backRepoPosition.CommitPhaseOneInstance(position)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, position := range *backRepoPosition.Map_PositionDBID_PositionPtr {
		if _, ok := stage.Positions[position]; !ok {
			backRepoPosition.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPosition.CommitDeleteInstance commits deletion of Position to the BackRepo
func (backRepoPosition *BackRepoPositionStruct) CommitDeleteInstance(id uint) (Error error) {

	position := (*backRepoPosition.Map_PositionDBID_PositionPtr)[id]

	// position is not staged anymore, remove positionDB
	positionDB := (*backRepoPosition.Map_PositionDBID_PositionDB)[id]
	query := backRepoPosition.db.Unscoped().Delete(&positionDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoPosition.Map_PositionPtr_PositionDBID), position)
	delete((*backRepoPosition.Map_PositionDBID_PositionPtr), id)
	delete((*backRepoPosition.Map_PositionDBID_PositionDB), id)

	return
}

// BackRepoPosition.CommitPhaseOneInstance commits position staged instances of Position to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPosition *BackRepoPositionStruct) CommitPhaseOneInstance(position *models.Position) (Error error) {

	// check if the position is not commited yet
	if _, ok := (*backRepoPosition.Map_PositionPtr_PositionDBID)[position]; ok {
		return
	}

	// initiate position
	var positionDB PositionDB
	positionDB.CopyBasicFieldsFromPosition(position)

	query := backRepoPosition.db.Create(&positionDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoPosition.Map_PositionPtr_PositionDBID)[position] = positionDB.ID
	(*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID] = position
	(*backRepoPosition.Map_PositionDBID_PositionDB)[positionDB.ID] = &positionDB

	return
}

// BackRepoPosition.CommitPhaseTwo commits all staged instances of Position to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPosition *BackRepoPositionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, position := range *backRepoPosition.Map_PositionDBID_PositionPtr {
		backRepoPosition.CommitPhaseTwoInstance(backRepo, idx, position)
	}

	return
}

// BackRepoPosition.CommitPhaseTwoInstance commits {{structname }} of models.Position to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPosition *BackRepoPositionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, position *models.Position) (Error error) {

	// fetch matching positionDB
	if positionDB, ok := (*backRepoPosition.Map_PositionDBID_PositionDB)[idx]; ok {

		positionDB.CopyBasicFieldsFromPosition(position)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPosition.db.Save(&positionDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Position intance %s", position.Name))
		return err
	}

	return
}

// BackRepoPosition.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPosition *BackRepoPositionStruct) CheckoutPhaseOne() (Error error) {

	positionDBArray := make([]PositionDB, 0)
	query := backRepoPosition.db.Find(&positionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	positionInstancesToBeRemovedFromTheStage := make(map[*models.Position]any)
	for key, value := range models.Stage.Positions {
		positionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, positionDB := range positionDBArray {
		backRepoPosition.CheckoutPhaseOneInstance(&positionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		position, ok := (*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID]
		if ok {
			delete(positionInstancesToBeRemovedFromTheStage, position)
		}
	}

	// remove from stage and back repo's 3 maps all positions that are not in the checkout
	for position := range positionInstancesToBeRemovedFromTheStage {
		position.Unstage()

		// remove instance from the back repo 3 maps
		positionID := (*backRepoPosition.Map_PositionPtr_PositionDBID)[position]
		delete((*backRepoPosition.Map_PositionPtr_PositionDBID), position)
		delete((*backRepoPosition.Map_PositionDBID_PositionDB), positionID)
		delete((*backRepoPosition.Map_PositionDBID_PositionPtr), positionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a positionDB that has been found in the DB, updates the backRepo and stages the
// models version of the positionDB
func (backRepoPosition *BackRepoPositionStruct) CheckoutPhaseOneInstance(positionDB *PositionDB) (Error error) {

	position, ok := (*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID]
	if !ok {
		position = new(models.Position)

		(*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID] = position
		(*backRepoPosition.Map_PositionPtr_PositionDBID)[position] = positionDB.ID

		// append model store with the new element
		position.Name = positionDB.Name_Data.String
		position.Stage()
	}
	positionDB.CopyBasicFieldsToPosition(position)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	position.Stage()

	// preserve pointer to positionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PositionDBID_PositionDB)[positionDB hold variable pointers
	positionDB_Data := *positionDB
	preservedPtrToPosition := &positionDB_Data
	(*backRepoPosition.Map_PositionDBID_PositionDB)[positionDB.ID] = preservedPtrToPosition

	return
}

// BackRepoPosition.CheckoutPhaseTwo Checkouts all staged instances of Position to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPosition *BackRepoPositionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, positionDB := range *backRepoPosition.Map_PositionDBID_PositionDB {
		backRepoPosition.CheckoutPhaseTwoInstance(backRepo, positionDB)
	}
	return
}

// BackRepoPosition.CheckoutPhaseTwoInstance Checkouts staged instances of Position to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPosition *BackRepoPositionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, positionDB *PositionDB) (Error error) {

	position := (*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID]
	_ = position // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitPosition allows commit of a single position (if already staged)
func (backRepo *BackRepoStruct) CommitPosition(position *models.Position) {
	backRepo.BackRepoPosition.CommitPhaseOneInstance(position)
	if id, ok := (*backRepo.BackRepoPosition.Map_PositionPtr_PositionDBID)[position]; ok {
		backRepo.BackRepoPosition.CommitPhaseTwoInstance(backRepo, id, position)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPosition allows checkout of a single position (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPosition(position *models.Position) {
	// check if the position is staged
	if _, ok := (*backRepo.BackRepoPosition.Map_PositionPtr_PositionDBID)[position]; ok {

		if id, ok := (*backRepo.BackRepoPosition.Map_PositionPtr_PositionDBID)[position]; ok {
			var positionDB PositionDB
			positionDB.ID = id

			if err := backRepo.BackRepoPosition.db.First(&positionDB, id).Error; err != nil {
				log.Panicln("CheckoutPosition : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPosition.CheckoutPhaseOneInstance(&positionDB)
			backRepo.BackRepoPosition.CheckoutPhaseTwoInstance(backRepo, &positionDB)
		}
	}
}

// CopyBasicFieldsFromPosition
func (positionDB *PositionDB) CopyBasicFieldsFromPosition(position *models.Position) {
	// insertion point for fields commit

	positionDB.X_Data.Float64 = position.X
	positionDB.X_Data.Valid = true

	positionDB.Y_Data.Float64 = position.Y
	positionDB.Y_Data.Valid = true

	positionDB.Name_Data.String = position.Name
	positionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPositionWOP
func (positionDB *PositionDB) CopyBasicFieldsFromPositionWOP(position *PositionWOP) {
	// insertion point for fields commit

	positionDB.X_Data.Float64 = position.X
	positionDB.X_Data.Valid = true

	positionDB.Y_Data.Float64 = position.Y
	positionDB.Y_Data.Valid = true

	positionDB.Name_Data.String = position.Name
	positionDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPosition
func (positionDB *PositionDB) CopyBasicFieldsToPosition(position *models.Position) {
	// insertion point for checkout of basic fields (back repo to stage)
	position.X = positionDB.X_Data.Float64
	position.Y = positionDB.Y_Data.Float64
	position.Name = positionDB.Name_Data.String
}

// CopyBasicFieldsToPositionWOP
func (positionDB *PositionDB) CopyBasicFieldsToPositionWOP(position *PositionWOP) {
	position.ID = int(positionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	position.X = positionDB.X_Data.Float64
	position.Y = positionDB.Y_Data.Float64
	position.Name = positionDB.Name_Data.String
}

// Backup generates a json file from a slice of all PositionDB instances in the backrepo
func (backRepoPosition *BackRepoPositionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PositionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PositionDB, 0)
	for _, positionDB := range *backRepoPosition.Map_PositionDBID_PositionDB {
		forBackup = append(forBackup, positionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Position ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Position file", err.Error())
	}
}

// Backup generates a json file from a slice of all PositionDB instances in the backrepo
func (backRepoPosition *BackRepoPositionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PositionDB, 0)
	for _, positionDB := range *backRepoPosition.Map_PositionDBID_PositionDB {
		forBackup = append(forBackup, positionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Position")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Position_Fields, -1)
	for _, positionDB := range forBackup {

		var positionWOP PositionWOP
		positionDB.CopyBasicFieldsToPositionWOP(&positionWOP)

		row := sh.AddRow()
		row.WriteStruct(&positionWOP, -1)
	}
}

// RestoreXL from the "Position" sheet all PositionDB instances
func (backRepoPosition *BackRepoPositionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPositionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Position"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPosition.rowVisitorPosition)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoPosition *BackRepoPositionStruct) rowVisitorPosition(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var positionWOP PositionWOP
		row.ReadStruct(&positionWOP)

		// add the unmarshalled struct to the stage
		positionDB := new(PositionDB)
		positionDB.CopyBasicFieldsFromPositionWOP(&positionWOP)

		positionDB_ID_atBackupTime := positionDB.ID
		positionDB.ID = 0
		query := backRepoPosition.db.Create(positionDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoPosition.Map_PositionDBID_PositionDB)[positionDB.ID] = positionDB
		BackRepoPositionid_atBckpTime_newID[positionDB_ID_atBackupTime] = positionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PositionDB.json" in dirPath that stores an array
// of PositionDB and stores it in the database
// the map BackRepoPositionid_atBckpTime_newID is updated accordingly
func (backRepoPosition *BackRepoPositionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPositionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PositionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Position file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PositionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PositionDBID_PositionDB
	for _, positionDB := range forRestore {

		positionDB_ID_atBackupTime := positionDB.ID
		positionDB.ID = 0
		query := backRepoPosition.db.Create(positionDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoPosition.Map_PositionDBID_PositionDB)[positionDB.ID] = positionDB
		BackRepoPositionid_atBckpTime_newID[positionDB_ID_atBackupTime] = positionDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Position file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Position>id_atBckpTime_newID
// to compute new index
func (backRepoPosition *BackRepoPositionStruct) RestorePhaseTwo() {

	for _, positionDB := range *backRepoPosition.Map_PositionDBID_PositionDB {

		// next line of code is to avert unused variable compilation error
		_ = positionDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPosition.db.Model(positionDB).Updates(*positionDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPositionid_atBckpTime_newID map[uint]uint
