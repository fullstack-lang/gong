// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Path__dummysDeclaration__ models.Path
var __Path_time__dummyDeclaration time.Duration

// An PathID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPath updatePath deletePath
type PathID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PathInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPath updatePath
type PathInput struct {
	// The Path to submit or modify
	// in: body
	Path *orm.PathAPI
}

// GetPaths
//
// swagger:route GET /paths paths getPaths
//
// # Get all paths
//
// Responses:
// default: genericError
//
//	200: pathDBResponse
func (controller *Controller) GetPaths(c *gin.Context) {

	// source slice
	var pathDBs []orm.PathDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetPaths", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoPath.GetDB()

	query := db.Find(&pathDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	pathAPIs := make([]orm.PathAPI, 0)

	// for each path, update fields from the database nullable fields
	for idx := range pathDBs {
		pathDB := &pathDBs[idx]
		_ = pathDB
		var pathAPI orm.PathAPI

		// insertion point for updating fields
		pathAPI.ID = pathDB.ID
		pathDB.CopyBasicFieldsToPath(&pathAPI.Path)
		pathAPI.PathPointersEnconding = pathDB.PathPointersEnconding
		pathAPIs = append(pathAPIs, pathAPI)
	}

	c.JSON(http.StatusOK, pathAPIs)
}

// PostPath
//
// swagger:route POST /paths paths postPath
//
// Creates a path
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostPath(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostPaths", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoPath.GetDB()

	// Validate input
	var input orm.PathAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create path
	pathDB := orm.PathDB{}
	pathDB.PathPointersEnconding = input.PathPointersEnconding
	pathDB.CopyBasicFieldsFromPath(&input.Path)

	query := db.Create(&pathDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoPath.CheckoutPhaseOneInstance(&pathDB)
	path := backRepo.BackRepoPath.Map_PathDBID_PathPtr[pathDB.ID]

	if path != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), path)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, pathDB)
}

// GetPath
//
// swagger:route GET /paths/{ID} paths getPath
//
// Gets the details for a path.
//
// Responses:
// default: genericError
//
//	200: pathDBResponse
func (controller *Controller) GetPath(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetPath", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoPath.GetDB()

	// Get pathDB in DB
	var pathDB orm.PathDB
	if err := db.First(&pathDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var pathAPI orm.PathAPI
	pathAPI.ID = pathDB.ID
	pathAPI.PathPointersEnconding = pathDB.PathPointersEnconding
	pathDB.CopyBasicFieldsToPath(&pathAPI.Path)

	c.JSON(http.StatusOK, pathAPI)
}

// UpdatePath
//
// swagger:route PATCH /paths/{ID} paths updatePath
//
// # Update a path
//
// Responses:
// default: genericError
//
//	200: pathDBResponse
func (controller *Controller) UpdatePath(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdatePath", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoPath.GetDB()

	// Validate input
	var input orm.PathAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var pathDB orm.PathDB

	// fetch the path
	query := db.First(&pathDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	pathDB.CopyBasicFieldsFromPath(&input.Path)
	pathDB.PathPointersEnconding = input.PathPointersEnconding

	query = db.Model(&pathDB).Updates(pathDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	pathNew := new(models.Path)
	pathDB.CopyBasicFieldsToPath(pathNew)

	// get stage instance from DB instance, and call callback function
	pathOld := backRepo.BackRepoPath.Map_PathDBID_PathPtr[pathDB.ID]
	if pathOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), pathOld, pathNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the pathDB
	c.JSON(http.StatusOK, pathDB)
}

// DeletePath
//
// swagger:route DELETE /paths/{ID} paths deletePath
//
// # Delete a path
//
// default: genericError
//
//	200: pathDBResponse
func (controller *Controller) DeletePath(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeletePath", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoPath.GetDB()

	// Get model if exist
	var pathDB orm.PathDB
	if err := db.First(&pathDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&pathDB)

	// get an instance (not staged) from DB instance, and call callback function
	pathDeleted := new(models.Path)
	pathDB.CopyBasicFieldsToPath(pathDeleted)

	// get stage instance from DB instance, and call callback function
	pathStaged := backRepo.BackRepoPath.Map_PathDBID_PathPtr[pathDB.ID]
	if pathStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), pathStaged, pathDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
