// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_RectAnchoredText_sql sql.NullBool
var dummy_RectAnchoredText_time time.Duration
var dummy_RectAnchoredText_sort sort.Float64Slice

// RectAnchoredTextAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model rectanchoredtextAPI
type RectAnchoredTextAPI struct {
	gorm.Model

	models.RectAnchoredText

	// encoding of pointers
	RectAnchoredTextPointersEnconding
}

// RectAnchoredTextPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RectAnchoredTextPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Rect{}.RectAnchoredTexts []*RectAnchoredText
	Rect_RectAnchoredTextsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Rect_RectAnchoredTextsDBID_Index sql.NullInt64
}

// RectAnchoredTextDB describes a rectanchoredtext in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model rectanchoredtextDB
type RectAnchoredTextDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field rectanchoredtextDB.Name
	Name_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.Content
	Content_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.FontWeight
	FontWeight_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.FontSize
	FontSize_Data sql.NullInt64

	// Declation for basic field rectanchoredtextDB.X_Offset
	X_Offset_Data sql.NullFloat64

	// Declation for basic field rectanchoredtextDB.Y_Offset
	Y_Offset_Data sql.NullFloat64

	// Declation for basic field rectanchoredtextDB.RectAnchorType
	RectAnchorType_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.TextAnchorType
	TextAnchorType_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.Color
	Color_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field rectanchoredtextDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field rectanchoredtextDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field rectanchoredtextDB.Transform
	Transform_Data sql.NullString
	// encoding of pointers
	RectAnchoredTextPointersEnconding
}

// RectAnchoredTextDBs arrays rectanchoredtextDBs
// swagger:response rectanchoredtextDBsResponse
type RectAnchoredTextDBs []RectAnchoredTextDB

// RectAnchoredTextDBResponse provides response
// swagger:response rectanchoredtextDBResponse
type RectAnchoredTextDBResponse struct {
	RectAnchoredTextDB
}

// RectAnchoredTextWOP is a RectAnchoredText without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RectAnchoredTextWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`

	FontWeight string `xlsx:"3"`

	FontSize int `xlsx:"4"`

	X_Offset float64 `xlsx:"5"`

	Y_Offset float64 `xlsx:"6"`

	RectAnchorType models.RectAnchorType `xlsx:"7"`

	TextAnchorType models.TextAnchorType `xlsx:"8"`

	Color string `xlsx:"9"`

	FillOpacity float64 `xlsx:"10"`

	Stroke string `xlsx:"11"`

	StrokeWidth float64 `xlsx:"12"`

	StrokeDashArray string `xlsx:"13"`

	StrokeDashArrayWhenSelected string `xlsx:"14"`

	Transform string `xlsx:"15"`
	// insertion for WOP pointer fields
}

var RectAnchoredText_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
	"FontWeight",
	"FontSize",
	"X_Offset",
	"Y_Offset",
	"RectAnchorType",
	"TextAnchorType",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoRectAnchoredTextStruct struct {
	// stores RectAnchoredTextDB according to their gorm ID
	Map_RectAnchoredTextDBID_RectAnchoredTextDB map[uint]*RectAnchoredTextDB

	// stores RectAnchoredTextDB ID according to RectAnchoredText address
	Map_RectAnchoredTextPtr_RectAnchoredTextDBID map[*models.RectAnchoredText]uint

	// stores RectAnchoredText according to their gorm ID
	Map_RectAnchoredTextDBID_RectAnchoredTextPtr map[uint]*models.RectAnchoredText

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRectAnchoredText.stage
	return
}

func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) GetDB() *gorm.DB {
	return backRepoRectAnchoredText.db
}

// GetRectAnchoredTextDBFromRectAnchoredTextPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) GetRectAnchoredTextDBFromRectAnchoredTextPtr(rectanchoredtext *models.RectAnchoredText) (rectanchoredtextDB *RectAnchoredTextDB) {
	id := backRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID[rectanchoredtext]
	rectanchoredtextDB = backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB[id]
	return
}

// BackRepoRectAnchoredText.CommitPhaseOne commits all staged instances of RectAnchoredText to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for rectanchoredtext := range stage.RectAnchoredTexts {
		backRepoRectAnchoredText.CommitPhaseOneInstance(rectanchoredtext)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, rectanchoredtext := range backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr {
		if _, ok := stage.RectAnchoredTexts[rectanchoredtext]; !ok {
			backRepoRectAnchoredText.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRectAnchoredText.CommitDeleteInstance commits deletion of RectAnchoredText to the BackRepo
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CommitDeleteInstance(id uint) (Error error) {

	rectanchoredtext := backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr[id]

	// rectanchoredtext is not staged anymore, remove rectanchoredtextDB
	rectanchoredtextDB := backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB[id]
	query := backRepoRectAnchoredText.db.Unscoped().Delete(&rectanchoredtextDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID, rectanchoredtext)
	delete(backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr, id)
	delete(backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB, id)

	return
}

// BackRepoRectAnchoredText.CommitPhaseOneInstance commits rectanchoredtext staged instances of RectAnchoredText to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CommitPhaseOneInstance(rectanchoredtext *models.RectAnchoredText) (Error error) {

	// check if the rectanchoredtext is not commited yet
	if _, ok := backRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID[rectanchoredtext]; ok {
		return
	}

	// initiate rectanchoredtext
	var rectanchoredtextDB RectAnchoredTextDB
	rectanchoredtextDB.CopyBasicFieldsFromRectAnchoredText(rectanchoredtext)

	query := backRepoRectAnchoredText.db.Create(&rectanchoredtextDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID[rectanchoredtext] = rectanchoredtextDB.ID
	backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr[rectanchoredtextDB.ID] = rectanchoredtext
	backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB[rectanchoredtextDB.ID] = &rectanchoredtextDB

	return
}

// BackRepoRectAnchoredText.CommitPhaseTwo commits all staged instances of RectAnchoredText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, rectanchoredtext := range backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr {
		backRepoRectAnchoredText.CommitPhaseTwoInstance(backRepo, idx, rectanchoredtext)
	}

	return
}

// BackRepoRectAnchoredText.CommitPhaseTwoInstance commits {{structname }} of models.RectAnchoredText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, rectanchoredtext *models.RectAnchoredText) (Error error) {

	// fetch matching rectanchoredtextDB
	if rectanchoredtextDB, ok := backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB[idx]; ok {

		rectanchoredtextDB.CopyBasicFieldsFromRectAnchoredText(rectanchoredtext)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers rectanchoredtext.Animates into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, animateAssocEnd := range rectanchoredtext.Animates {

			// get the back repo instance at the association end
			animateAssocEnd_DB :=
				backRepo.BackRepoAnimate.GetAnimateDBFromAnimatePtr(animateAssocEnd)

			// encode reverse pointer in the association end back repo instance
			animateAssocEnd_DB.RectAnchoredText_AnimatesDBID.Int64 = int64(rectanchoredtextDB.ID)
			animateAssocEnd_DB.RectAnchoredText_AnimatesDBID.Valid = true
			animateAssocEnd_DB.RectAnchoredText_AnimatesDBID_Index.Int64 = int64(idx)
			animateAssocEnd_DB.RectAnchoredText_AnimatesDBID_Index.Valid = true
			if q := backRepoRectAnchoredText.db.Save(animateAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoRectAnchoredText.db.Save(&rectanchoredtextDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown RectAnchoredText intance %s", rectanchoredtext.Name))
		return err
	}

	return
}

// BackRepoRectAnchoredText.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CheckoutPhaseOne() (Error error) {

	rectanchoredtextDBArray := make([]RectAnchoredTextDB, 0)
	query := backRepoRectAnchoredText.db.Find(&rectanchoredtextDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	rectanchoredtextInstancesToBeRemovedFromTheStage := make(map[*models.RectAnchoredText]any)
	for key, value := range backRepoRectAnchoredText.stage.RectAnchoredTexts {
		rectanchoredtextInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, rectanchoredtextDB := range rectanchoredtextDBArray {
		backRepoRectAnchoredText.CheckoutPhaseOneInstance(&rectanchoredtextDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		rectanchoredtext, ok := backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr[rectanchoredtextDB.ID]
		if ok {
			delete(rectanchoredtextInstancesToBeRemovedFromTheStage, rectanchoredtext)
		}
	}

	// remove from stage and back repo's 3 maps all rectanchoredtexts that are not in the checkout
	for rectanchoredtext := range rectanchoredtextInstancesToBeRemovedFromTheStage {
		rectanchoredtext.Unstage(backRepoRectAnchoredText.GetStage())

		// remove instance from the back repo 3 maps
		rectanchoredtextID := backRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID[rectanchoredtext]
		delete(backRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID, rectanchoredtext)
		delete(backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB, rectanchoredtextID)
		delete(backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr, rectanchoredtextID)
	}

	return
}

// CheckoutPhaseOneInstance takes a rectanchoredtextDB that has been found in the DB, updates the backRepo and stages the
// models version of the rectanchoredtextDB
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CheckoutPhaseOneInstance(rectanchoredtextDB *RectAnchoredTextDB) (Error error) {

	rectanchoredtext, ok := backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr[rectanchoredtextDB.ID]
	if !ok {
		rectanchoredtext = new(models.RectAnchoredText)

		backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr[rectanchoredtextDB.ID] = rectanchoredtext
		backRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID[rectanchoredtext] = rectanchoredtextDB.ID

		// append model store with the new element
		rectanchoredtext.Name = rectanchoredtextDB.Name_Data.String
		rectanchoredtext.Stage(backRepoRectAnchoredText.GetStage())
	}
	rectanchoredtextDB.CopyBasicFieldsToRectAnchoredText(rectanchoredtext)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	rectanchoredtext.Stage(backRepoRectAnchoredText.GetStage())

	// preserve pointer to rectanchoredtextDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RectAnchoredTextDBID_RectAnchoredTextDB)[rectanchoredtextDB hold variable pointers
	rectanchoredtextDB_Data := *rectanchoredtextDB
	preservedPtrToRectAnchoredText := &rectanchoredtextDB_Data
	backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB[rectanchoredtextDB.ID] = preservedPtrToRectAnchoredText

	return
}

// BackRepoRectAnchoredText.CheckoutPhaseTwo Checkouts all staged instances of RectAnchoredText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, rectanchoredtextDB := range backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB {
		backRepoRectAnchoredText.CheckoutPhaseTwoInstance(backRepo, rectanchoredtextDB)
	}
	return
}

// BackRepoRectAnchoredText.CheckoutPhaseTwoInstance Checkouts staged instances of RectAnchoredText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, rectanchoredtextDB *RectAnchoredTextDB) (Error error) {

	rectanchoredtext := backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextPtr[rectanchoredtextDB.ID]
	_ = rectanchoredtext // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem rectanchoredtext.Animates in the stage from the encode in the back repo
	// It parses all AnimateDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	rectanchoredtext.Animates = rectanchoredtext.Animates[:0]
	// 2. loop all instances in the type in the association end
	for _, animateDB_AssocEnd := range backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if animateDB_AssocEnd.RectAnchoredText_AnimatesDBID.Int64 == int64(rectanchoredtextDB.ID) {
			// 4. fetch the associated instance in the stage
			animate_AssocEnd := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimatePtr[animateDB_AssocEnd.ID]
			// 5. append it the association slice
			rectanchoredtext.Animates = append(rectanchoredtext.Animates, animate_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(rectanchoredtext.Animates, func(i, j int) bool {
		animateDB_i_ID := backRepo.BackRepoAnimate.Map_AnimatePtr_AnimateDBID[rectanchoredtext.Animates[i]]
		animateDB_j_ID := backRepo.BackRepoAnimate.Map_AnimatePtr_AnimateDBID[rectanchoredtext.Animates[j]]

		animateDB_i := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB[animateDB_i_ID]
		animateDB_j := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB[animateDB_j_ID]

		return animateDB_i.RectAnchoredText_AnimatesDBID_Index.Int64 < animateDB_j.RectAnchoredText_AnimatesDBID_Index.Int64
	})

	return
}

// CommitRectAnchoredText allows commit of a single rectanchoredtext (if already staged)
func (backRepo *BackRepoStruct) CommitRectAnchoredText(rectanchoredtext *models.RectAnchoredText) {
	backRepo.BackRepoRectAnchoredText.CommitPhaseOneInstance(rectanchoredtext)
	if id, ok := backRepo.BackRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID[rectanchoredtext]; ok {
		backRepo.BackRepoRectAnchoredText.CommitPhaseTwoInstance(backRepo, id, rectanchoredtext)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRectAnchoredText allows checkout of a single rectanchoredtext (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRectAnchoredText(rectanchoredtext *models.RectAnchoredText) {
	// check if the rectanchoredtext is staged
	if _, ok := backRepo.BackRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID[rectanchoredtext]; ok {

		if id, ok := backRepo.BackRepoRectAnchoredText.Map_RectAnchoredTextPtr_RectAnchoredTextDBID[rectanchoredtext]; ok {
			var rectanchoredtextDB RectAnchoredTextDB
			rectanchoredtextDB.ID = id

			if err := backRepo.BackRepoRectAnchoredText.db.First(&rectanchoredtextDB, id).Error; err != nil {
				log.Panicln("CheckoutRectAnchoredText : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRectAnchoredText.CheckoutPhaseOneInstance(&rectanchoredtextDB)
			backRepo.BackRepoRectAnchoredText.CheckoutPhaseTwoInstance(backRepo, &rectanchoredtextDB)
		}
	}
}

// CopyBasicFieldsFromRectAnchoredText
func (rectanchoredtextDB *RectAnchoredTextDB) CopyBasicFieldsFromRectAnchoredText(rectanchoredtext *models.RectAnchoredText) {
	// insertion point for fields commit

	rectanchoredtextDB.Name_Data.String = rectanchoredtext.Name
	rectanchoredtextDB.Name_Data.Valid = true

	rectanchoredtextDB.Content_Data.String = rectanchoredtext.Content
	rectanchoredtextDB.Content_Data.Valid = true

	rectanchoredtextDB.FontWeight_Data.String = rectanchoredtext.FontWeight
	rectanchoredtextDB.FontWeight_Data.Valid = true

	rectanchoredtextDB.FontSize_Data.Int64 = int64(rectanchoredtext.FontSize)
	rectanchoredtextDB.FontSize_Data.Valid = true

	rectanchoredtextDB.X_Offset_Data.Float64 = rectanchoredtext.X_Offset
	rectanchoredtextDB.X_Offset_Data.Valid = true

	rectanchoredtextDB.Y_Offset_Data.Float64 = rectanchoredtext.Y_Offset
	rectanchoredtextDB.Y_Offset_Data.Valid = true

	rectanchoredtextDB.RectAnchorType_Data.String = rectanchoredtext.RectAnchorType.ToString()
	rectanchoredtextDB.RectAnchorType_Data.Valid = true

	rectanchoredtextDB.TextAnchorType_Data.String = rectanchoredtext.TextAnchorType.ToString()
	rectanchoredtextDB.TextAnchorType_Data.Valid = true

	rectanchoredtextDB.Color_Data.String = rectanchoredtext.Color
	rectanchoredtextDB.Color_Data.Valid = true

	rectanchoredtextDB.FillOpacity_Data.Float64 = rectanchoredtext.FillOpacity
	rectanchoredtextDB.FillOpacity_Data.Valid = true

	rectanchoredtextDB.Stroke_Data.String = rectanchoredtext.Stroke
	rectanchoredtextDB.Stroke_Data.Valid = true

	rectanchoredtextDB.StrokeWidth_Data.Float64 = rectanchoredtext.StrokeWidth
	rectanchoredtextDB.StrokeWidth_Data.Valid = true

	rectanchoredtextDB.StrokeDashArray_Data.String = rectanchoredtext.StrokeDashArray
	rectanchoredtextDB.StrokeDashArray_Data.Valid = true

	rectanchoredtextDB.StrokeDashArrayWhenSelected_Data.String = rectanchoredtext.StrokeDashArrayWhenSelected
	rectanchoredtextDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rectanchoredtextDB.Transform_Data.String = rectanchoredtext.Transform
	rectanchoredtextDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromRectAnchoredTextWOP
func (rectanchoredtextDB *RectAnchoredTextDB) CopyBasicFieldsFromRectAnchoredTextWOP(rectanchoredtext *RectAnchoredTextWOP) {
	// insertion point for fields commit

	rectanchoredtextDB.Name_Data.String = rectanchoredtext.Name
	rectanchoredtextDB.Name_Data.Valid = true

	rectanchoredtextDB.Content_Data.String = rectanchoredtext.Content
	rectanchoredtextDB.Content_Data.Valid = true

	rectanchoredtextDB.FontWeight_Data.String = rectanchoredtext.FontWeight
	rectanchoredtextDB.FontWeight_Data.Valid = true

	rectanchoredtextDB.FontSize_Data.Int64 = int64(rectanchoredtext.FontSize)
	rectanchoredtextDB.FontSize_Data.Valid = true

	rectanchoredtextDB.X_Offset_Data.Float64 = rectanchoredtext.X_Offset
	rectanchoredtextDB.X_Offset_Data.Valid = true

	rectanchoredtextDB.Y_Offset_Data.Float64 = rectanchoredtext.Y_Offset
	rectanchoredtextDB.Y_Offset_Data.Valid = true

	rectanchoredtextDB.RectAnchorType_Data.String = rectanchoredtext.RectAnchorType.ToString()
	rectanchoredtextDB.RectAnchorType_Data.Valid = true

	rectanchoredtextDB.TextAnchorType_Data.String = rectanchoredtext.TextAnchorType.ToString()
	rectanchoredtextDB.TextAnchorType_Data.Valid = true

	rectanchoredtextDB.Color_Data.String = rectanchoredtext.Color
	rectanchoredtextDB.Color_Data.Valid = true

	rectanchoredtextDB.FillOpacity_Data.Float64 = rectanchoredtext.FillOpacity
	rectanchoredtextDB.FillOpacity_Data.Valid = true

	rectanchoredtextDB.Stroke_Data.String = rectanchoredtext.Stroke
	rectanchoredtextDB.Stroke_Data.Valid = true

	rectanchoredtextDB.StrokeWidth_Data.Float64 = rectanchoredtext.StrokeWidth
	rectanchoredtextDB.StrokeWidth_Data.Valid = true

	rectanchoredtextDB.StrokeDashArray_Data.String = rectanchoredtext.StrokeDashArray
	rectanchoredtextDB.StrokeDashArray_Data.Valid = true

	rectanchoredtextDB.StrokeDashArrayWhenSelected_Data.String = rectanchoredtext.StrokeDashArrayWhenSelected
	rectanchoredtextDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rectanchoredtextDB.Transform_Data.String = rectanchoredtext.Transform
	rectanchoredtextDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToRectAnchoredText
func (rectanchoredtextDB *RectAnchoredTextDB) CopyBasicFieldsToRectAnchoredText(rectanchoredtext *models.RectAnchoredText) {
	// insertion point for checkout of basic fields (back repo to stage)
	rectanchoredtext.Name = rectanchoredtextDB.Name_Data.String
	rectanchoredtext.Content = rectanchoredtextDB.Content_Data.String
	rectanchoredtext.FontWeight = rectanchoredtextDB.FontWeight_Data.String
	rectanchoredtext.FontSize = int(rectanchoredtextDB.FontSize_Data.Int64)
	rectanchoredtext.X_Offset = rectanchoredtextDB.X_Offset_Data.Float64
	rectanchoredtext.Y_Offset = rectanchoredtextDB.Y_Offset_Data.Float64
	rectanchoredtext.RectAnchorType.FromString(rectanchoredtextDB.RectAnchorType_Data.String)
	rectanchoredtext.TextAnchorType.FromString(rectanchoredtextDB.TextAnchorType_Data.String)
	rectanchoredtext.Color = rectanchoredtextDB.Color_Data.String
	rectanchoredtext.FillOpacity = rectanchoredtextDB.FillOpacity_Data.Float64
	rectanchoredtext.Stroke = rectanchoredtextDB.Stroke_Data.String
	rectanchoredtext.StrokeWidth = rectanchoredtextDB.StrokeWidth_Data.Float64
	rectanchoredtext.StrokeDashArray = rectanchoredtextDB.StrokeDashArray_Data.String
	rectanchoredtext.StrokeDashArrayWhenSelected = rectanchoredtextDB.StrokeDashArrayWhenSelected_Data.String
	rectanchoredtext.Transform = rectanchoredtextDB.Transform_Data.String
}

// CopyBasicFieldsToRectAnchoredTextWOP
func (rectanchoredtextDB *RectAnchoredTextDB) CopyBasicFieldsToRectAnchoredTextWOP(rectanchoredtext *RectAnchoredTextWOP) {
	rectanchoredtext.ID = int(rectanchoredtextDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	rectanchoredtext.Name = rectanchoredtextDB.Name_Data.String
	rectanchoredtext.Content = rectanchoredtextDB.Content_Data.String
	rectanchoredtext.FontWeight = rectanchoredtextDB.FontWeight_Data.String
	rectanchoredtext.FontSize = int(rectanchoredtextDB.FontSize_Data.Int64)
	rectanchoredtext.X_Offset = rectanchoredtextDB.X_Offset_Data.Float64
	rectanchoredtext.Y_Offset = rectanchoredtextDB.Y_Offset_Data.Float64
	rectanchoredtext.RectAnchorType.FromString(rectanchoredtextDB.RectAnchorType_Data.String)
	rectanchoredtext.TextAnchorType.FromString(rectanchoredtextDB.TextAnchorType_Data.String)
	rectanchoredtext.Color = rectanchoredtextDB.Color_Data.String
	rectanchoredtext.FillOpacity = rectanchoredtextDB.FillOpacity_Data.Float64
	rectanchoredtext.Stroke = rectanchoredtextDB.Stroke_Data.String
	rectanchoredtext.StrokeWidth = rectanchoredtextDB.StrokeWidth_Data.Float64
	rectanchoredtext.StrokeDashArray = rectanchoredtextDB.StrokeDashArray_Data.String
	rectanchoredtext.StrokeDashArrayWhenSelected = rectanchoredtextDB.StrokeDashArrayWhenSelected_Data.String
	rectanchoredtext.Transform = rectanchoredtextDB.Transform_Data.String
}

// Backup generates a json file from a slice of all RectAnchoredTextDB instances in the backrepo
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RectAnchoredTextDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RectAnchoredTextDB, 0)
	for _, rectanchoredtextDB := range backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB {
		forBackup = append(forBackup, rectanchoredtextDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json RectAnchoredText ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json RectAnchoredText file", err.Error())
	}
}

// Backup generates a json file from a slice of all RectAnchoredTextDB instances in the backrepo
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RectAnchoredTextDB, 0)
	for _, rectanchoredtextDB := range backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB {
		forBackup = append(forBackup, rectanchoredtextDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("RectAnchoredText")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&RectAnchoredText_Fields, -1)
	for _, rectanchoredtextDB := range forBackup {

		var rectanchoredtextWOP RectAnchoredTextWOP
		rectanchoredtextDB.CopyBasicFieldsToRectAnchoredTextWOP(&rectanchoredtextWOP)

		row := sh.AddRow()
		row.WriteStruct(&rectanchoredtextWOP, -1)
	}
}

// RestoreXL from the "RectAnchoredText" sheet all RectAnchoredTextDB instances
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRectAnchoredTextid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["RectAnchoredText"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRectAnchoredText.rowVisitorRectAnchoredText)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) rowVisitorRectAnchoredText(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var rectanchoredtextWOP RectAnchoredTextWOP
		row.ReadStruct(&rectanchoredtextWOP)

		// add the unmarshalled struct to the stage
		rectanchoredtextDB := new(RectAnchoredTextDB)
		rectanchoredtextDB.CopyBasicFieldsFromRectAnchoredTextWOP(&rectanchoredtextWOP)

		rectanchoredtextDB_ID_atBackupTime := rectanchoredtextDB.ID
		rectanchoredtextDB.ID = 0
		query := backRepoRectAnchoredText.db.Create(rectanchoredtextDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB[rectanchoredtextDB.ID] = rectanchoredtextDB
		BackRepoRectAnchoredTextid_atBckpTime_newID[rectanchoredtextDB_ID_atBackupTime] = rectanchoredtextDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RectAnchoredTextDB.json" in dirPath that stores an array
// of RectAnchoredTextDB and stores it in the database
// the map BackRepoRectAnchoredTextid_atBckpTime_newID is updated accordingly
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRectAnchoredTextid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RectAnchoredTextDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json RectAnchoredText file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RectAnchoredTextDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RectAnchoredTextDBID_RectAnchoredTextDB
	for _, rectanchoredtextDB := range forRestore {

		rectanchoredtextDB_ID_atBackupTime := rectanchoredtextDB.ID
		rectanchoredtextDB.ID = 0
		query := backRepoRectAnchoredText.db.Create(rectanchoredtextDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB[rectanchoredtextDB.ID] = rectanchoredtextDB
		BackRepoRectAnchoredTextid_atBckpTime_newID[rectanchoredtextDB_ID_atBackupTime] = rectanchoredtextDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json RectAnchoredText file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<RectAnchoredText>id_atBckpTime_newID
// to compute new index
func (backRepoRectAnchoredText *BackRepoRectAnchoredTextStruct) RestorePhaseTwo() {

	for _, rectanchoredtextDB := range backRepoRectAnchoredText.Map_RectAnchoredTextDBID_RectAnchoredTextDB {

		// next line of code is to avert unused variable compilation error
		_ = rectanchoredtextDB

		// insertion point for reindexing pointers encoding
		// This reindex rectanchoredtext.RectAnchoredTexts
		if rectanchoredtextDB.Rect_RectAnchoredTextsDBID.Int64 != 0 {
			rectanchoredtextDB.Rect_RectAnchoredTextsDBID.Int64 =
				int64(BackRepoRectid_atBckpTime_newID[uint(rectanchoredtextDB.Rect_RectAnchoredTextsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoRectAnchoredText.db.Model(rectanchoredtextDB).Updates(*rectanchoredtextDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRectAnchoredTextid_atBckpTime_newID map[uint]uint
