// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/db"
	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SvgText_sql sql.NullBool
var dummy_SvgText_time time.Duration
var dummy_SvgText_sort sort.Float64Slice

// SvgTextAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model svgtextAPI
type SvgTextAPI struct {
	gorm.Model

	models.SvgText_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SvgTextPointersEncoding SvgTextPointersEncoding
}

// SvgTextPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SvgTextPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SvgTextDB describes a svgtext in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model svgtextDB
type SvgTextDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field svgtextDB.Name
	Name_Data sql.NullString

	// Declation for basic field svgtextDB.Text
	Text_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SvgTextPointersEncoding
}

// SvgTextDBs arrays svgtextDBs
// swagger:response svgtextDBsResponse
type SvgTextDBs []SvgTextDB

// SvgTextDBResponse provides response
// swagger:response svgtextDBResponse
type SvgTextDBResponse struct {
	SvgTextDB
}

// SvgTextWOP is a SvgText without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SvgTextWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var SvgText_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoSvgTextStruct struct {
	// stores SvgTextDB according to their gorm ID
	Map_SvgTextDBID_SvgTextDB map[uint]*SvgTextDB

	// stores SvgTextDB ID according to SvgText address
	Map_SvgTextPtr_SvgTextDBID map[*models.SvgText]uint

	// stores SvgText according to their gorm ID
	Map_SvgTextDBID_SvgTextPtr map[uint]*models.SvgText

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSvgText *BackRepoSvgTextStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSvgText.stage
	return
}

func (backRepoSvgText *BackRepoSvgTextStruct) GetDB() db.DBInterface {
	return backRepoSvgText.db
}

// GetSvgTextDBFromSvgTextPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSvgText *BackRepoSvgTextStruct) GetSvgTextDBFromSvgTextPtr(svgtext *models.SvgText) (svgtextDB *SvgTextDB) {
	id := backRepoSvgText.Map_SvgTextPtr_SvgTextDBID[svgtext]
	svgtextDB = backRepoSvgText.Map_SvgTextDBID_SvgTextDB[id]
	return
}

// BackRepoSvgText.CommitPhaseOne commits all staged instances of SvgText to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSvgText *BackRepoSvgTextStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for svgtext := range stage.SvgTexts {
		backRepoSvgText.CommitPhaseOneInstance(svgtext)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, svgtext := range backRepoSvgText.Map_SvgTextDBID_SvgTextPtr {
		if _, ok := stage.SvgTexts[svgtext]; !ok {
			backRepoSvgText.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSvgText.CommitDeleteInstance commits deletion of SvgText to the BackRepo
func (backRepoSvgText *BackRepoSvgTextStruct) CommitDeleteInstance(id uint) (Error error) {

	svgtext := backRepoSvgText.Map_SvgTextDBID_SvgTextPtr[id]

	// svgtext is not staged anymore, remove svgtextDB
	svgtextDB := backRepoSvgText.Map_SvgTextDBID_SvgTextDB[id]
	db, _ := backRepoSvgText.db.Unscoped()
	_, err := db.Delete(svgtextDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSvgText.Map_SvgTextPtr_SvgTextDBID, svgtext)
	delete(backRepoSvgText.Map_SvgTextDBID_SvgTextPtr, id)
	delete(backRepoSvgText.Map_SvgTextDBID_SvgTextDB, id)

	return
}

// BackRepoSvgText.CommitPhaseOneInstance commits svgtext staged instances of SvgText to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSvgText *BackRepoSvgTextStruct) CommitPhaseOneInstance(svgtext *models.SvgText) (Error error) {

	// check if the svgtext is not commited yet
	if _, ok := backRepoSvgText.Map_SvgTextPtr_SvgTextDBID[svgtext]; ok {
		return
	}

	// initiate svgtext
	var svgtextDB SvgTextDB
	svgtextDB.CopyBasicFieldsFromSvgText(svgtext)

	_, err := backRepoSvgText.db.Create(&svgtextDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSvgText.Map_SvgTextPtr_SvgTextDBID[svgtext] = svgtextDB.ID
	backRepoSvgText.Map_SvgTextDBID_SvgTextPtr[svgtextDB.ID] = svgtext
	backRepoSvgText.Map_SvgTextDBID_SvgTextDB[svgtextDB.ID] = &svgtextDB

	return
}

// BackRepoSvgText.CommitPhaseTwo commits all staged instances of SvgText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgText *BackRepoSvgTextStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, svgtext := range backRepoSvgText.Map_SvgTextDBID_SvgTextPtr {
		backRepoSvgText.CommitPhaseTwoInstance(backRepo, idx, svgtext)
	}

	return
}

// BackRepoSvgText.CommitPhaseTwoInstance commits {{structname }} of models.SvgText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgText *BackRepoSvgTextStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, svgtext *models.SvgText) (Error error) {

	// fetch matching svgtextDB
	if svgtextDB, ok := backRepoSvgText.Map_SvgTextDBID_SvgTextDB[idx]; ok {

		svgtextDB.CopyBasicFieldsFromSvgText(svgtext)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoSvgText.db.Save(svgtextDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SvgText intance %s", svgtext.Name))
		return err
	}

	return
}

// BackRepoSvgText.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSvgText *BackRepoSvgTextStruct) CheckoutPhaseOne() (Error error) {

	svgtextDBArray := make([]SvgTextDB, 0)
	_, err := backRepoSvgText.db.Find(&svgtextDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	svgtextInstancesToBeRemovedFromTheStage := make(map[*models.SvgText]any)
	for key, value := range backRepoSvgText.stage.SvgTexts {
		svgtextInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, svgtextDB := range svgtextDBArray {
		backRepoSvgText.CheckoutPhaseOneInstance(&svgtextDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		svgtext, ok := backRepoSvgText.Map_SvgTextDBID_SvgTextPtr[svgtextDB.ID]
		if ok {
			delete(svgtextInstancesToBeRemovedFromTheStage, svgtext)
		}
	}

	// remove from stage and back repo's 3 maps all svgtexts that are not in the checkout
	for svgtext := range svgtextInstancesToBeRemovedFromTheStage {
		svgtext.Unstage(backRepoSvgText.GetStage())

		// remove instance from the back repo 3 maps
		svgtextID := backRepoSvgText.Map_SvgTextPtr_SvgTextDBID[svgtext]
		delete(backRepoSvgText.Map_SvgTextPtr_SvgTextDBID, svgtext)
		delete(backRepoSvgText.Map_SvgTextDBID_SvgTextDB, svgtextID)
		delete(backRepoSvgText.Map_SvgTextDBID_SvgTextPtr, svgtextID)
	}

	return
}

// CheckoutPhaseOneInstance takes a svgtextDB that has been found in the DB, updates the backRepo and stages the
// models version of the svgtextDB
func (backRepoSvgText *BackRepoSvgTextStruct) CheckoutPhaseOneInstance(svgtextDB *SvgTextDB) (Error error) {

	svgtext, ok := backRepoSvgText.Map_SvgTextDBID_SvgTextPtr[svgtextDB.ID]
	if !ok {
		svgtext = new(models.SvgText)

		backRepoSvgText.Map_SvgTextDBID_SvgTextPtr[svgtextDB.ID] = svgtext
		backRepoSvgText.Map_SvgTextPtr_SvgTextDBID[svgtext] = svgtextDB.ID

		// append model store with the new element
		svgtext.Name = svgtextDB.Name_Data.String
		svgtext.Stage(backRepoSvgText.GetStage())
	}
	svgtextDB.CopyBasicFieldsToSvgText(svgtext)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	svgtext.Stage(backRepoSvgText.GetStage())

	// preserve pointer to svgtextDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SvgTextDBID_SvgTextDB)[svgtextDB hold variable pointers
	svgtextDB_Data := *svgtextDB
	preservedPtrToSvgText := &svgtextDB_Data
	backRepoSvgText.Map_SvgTextDBID_SvgTextDB[svgtextDB.ID] = preservedPtrToSvgText

	return
}

// BackRepoSvgText.CheckoutPhaseTwo Checkouts all staged instances of SvgText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgText *BackRepoSvgTextStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, svgtextDB := range backRepoSvgText.Map_SvgTextDBID_SvgTextDB {
		backRepoSvgText.CheckoutPhaseTwoInstance(backRepo, svgtextDB)
	}
	return
}

// BackRepoSvgText.CheckoutPhaseTwoInstance Checkouts staged instances of SvgText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgText *BackRepoSvgTextStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, svgtextDB *SvgTextDB) (Error error) {

	svgtext := backRepoSvgText.Map_SvgTextDBID_SvgTextPtr[svgtextDB.ID]

	svgtextDB.DecodePointers(backRepo, svgtext)

	return
}

func (svgtextDB *SvgTextDB) DecodePointers(backRepo *BackRepoStruct, svgtext *models.SvgText) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSvgText allows commit of a single svgtext (if already staged)
func (backRepo *BackRepoStruct) CommitSvgText(svgtext *models.SvgText) {
	backRepo.BackRepoSvgText.CommitPhaseOneInstance(svgtext)
	if id, ok := backRepo.BackRepoSvgText.Map_SvgTextPtr_SvgTextDBID[svgtext]; ok {
		backRepo.BackRepoSvgText.CommitPhaseTwoInstance(backRepo, id, svgtext)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSvgText allows checkout of a single svgtext (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSvgText(svgtext *models.SvgText) {
	// check if the svgtext is staged
	if _, ok := backRepo.BackRepoSvgText.Map_SvgTextPtr_SvgTextDBID[svgtext]; ok {

		if id, ok := backRepo.BackRepoSvgText.Map_SvgTextPtr_SvgTextDBID[svgtext]; ok {
			var svgtextDB SvgTextDB
			svgtextDB.ID = id

			if _, err := backRepo.BackRepoSvgText.db.First(&svgtextDB, id); err != nil {
				log.Fatalln("CheckoutSvgText : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSvgText.CheckoutPhaseOneInstance(&svgtextDB)
			backRepo.BackRepoSvgText.CheckoutPhaseTwoInstance(backRepo, &svgtextDB)
		}
	}
}

// CopyBasicFieldsFromSvgText
func (svgtextDB *SvgTextDB) CopyBasicFieldsFromSvgText(svgtext *models.SvgText) {
	// insertion point for fields commit

	svgtextDB.Name_Data.String = svgtext.Name
	svgtextDB.Name_Data.Valid = true

	svgtextDB.Text_Data.String = svgtext.Text
	svgtextDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromSvgText_WOP
func (svgtextDB *SvgTextDB) CopyBasicFieldsFromSvgText_WOP(svgtext *models.SvgText_WOP) {
	// insertion point for fields commit

	svgtextDB.Name_Data.String = svgtext.Name
	svgtextDB.Name_Data.Valid = true

	svgtextDB.Text_Data.String = svgtext.Text
	svgtextDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromSvgTextWOP
func (svgtextDB *SvgTextDB) CopyBasicFieldsFromSvgTextWOP(svgtext *SvgTextWOP) {
	// insertion point for fields commit

	svgtextDB.Name_Data.String = svgtext.Name
	svgtextDB.Name_Data.Valid = true

	svgtextDB.Text_Data.String = svgtext.Text
	svgtextDB.Text_Data.Valid = true
}

// CopyBasicFieldsToSvgText
func (svgtextDB *SvgTextDB) CopyBasicFieldsToSvgText(svgtext *models.SvgText) {
	// insertion point for checkout of basic fields (back repo to stage)
	svgtext.Name = svgtextDB.Name_Data.String
	svgtext.Text = svgtextDB.Text_Data.String
}

// CopyBasicFieldsToSvgText_WOP
func (svgtextDB *SvgTextDB) CopyBasicFieldsToSvgText_WOP(svgtext *models.SvgText_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	svgtext.Name = svgtextDB.Name_Data.String
	svgtext.Text = svgtextDB.Text_Data.String
}

// CopyBasicFieldsToSvgTextWOP
func (svgtextDB *SvgTextDB) CopyBasicFieldsToSvgTextWOP(svgtext *SvgTextWOP) {
	svgtext.ID = int(svgtextDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	svgtext.Name = svgtextDB.Name_Data.String
	svgtext.Text = svgtextDB.Text_Data.String
}

// Backup generates a json file from a slice of all SvgTextDB instances in the backrepo
func (backRepoSvgText *BackRepoSvgTextStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SvgTextDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SvgTextDB, 0)
	for _, svgtextDB := range backRepoSvgText.Map_SvgTextDBID_SvgTextDB {
		forBackup = append(forBackup, svgtextDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SvgText ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SvgText file", err.Error())
	}
}

// Backup generates a json file from a slice of all SvgTextDB instances in the backrepo
func (backRepoSvgText *BackRepoSvgTextStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SvgTextDB, 0)
	for _, svgtextDB := range backRepoSvgText.Map_SvgTextDBID_SvgTextDB {
		forBackup = append(forBackup, svgtextDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SvgText")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SvgText_Fields, -1)
	for _, svgtextDB := range forBackup {

		var svgtextWOP SvgTextWOP
		svgtextDB.CopyBasicFieldsToSvgTextWOP(&svgtextWOP)

		row := sh.AddRow()
		row.WriteStruct(&svgtextWOP, -1)
	}
}

// RestoreXL from the "SvgText" sheet all SvgTextDB instances
func (backRepoSvgText *BackRepoSvgTextStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSvgTextid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SvgText"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSvgText.rowVisitorSvgText)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSvgText *BackRepoSvgTextStruct) rowVisitorSvgText(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var svgtextWOP SvgTextWOP
		row.ReadStruct(&svgtextWOP)

		// add the unmarshalled struct to the stage
		svgtextDB := new(SvgTextDB)
		svgtextDB.CopyBasicFieldsFromSvgTextWOP(&svgtextWOP)

		svgtextDB_ID_atBackupTime := svgtextDB.ID
		svgtextDB.ID = 0
		_, err := backRepoSvgText.db.Create(svgtextDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSvgText.Map_SvgTextDBID_SvgTextDB[svgtextDB.ID] = svgtextDB
		BackRepoSvgTextid_atBckpTime_newID[svgtextDB_ID_atBackupTime] = svgtextDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SvgTextDB.json" in dirPath that stores an array
// of SvgTextDB and stores it in the database
// the map BackRepoSvgTextid_atBckpTime_newID is updated accordingly
func (backRepoSvgText *BackRepoSvgTextStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSvgTextid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SvgTextDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SvgText file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SvgTextDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SvgTextDBID_SvgTextDB
	for _, svgtextDB := range forRestore {

		svgtextDB_ID_atBackupTime := svgtextDB.ID
		svgtextDB.ID = 0
		_, err := backRepoSvgText.db.Create(svgtextDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSvgText.Map_SvgTextDBID_SvgTextDB[svgtextDB.ID] = svgtextDB
		BackRepoSvgTextid_atBckpTime_newID[svgtextDB_ID_atBackupTime] = svgtextDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SvgText file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SvgText>id_atBckpTime_newID
// to compute new index
func (backRepoSvgText *BackRepoSvgTextStruct) RestorePhaseTwo() {

	for _, svgtextDB := range backRepoSvgText.Map_SvgTextDBID_SvgTextDB {

		// next line of code is to avert unused variable compilation error
		_ = svgtextDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoSvgText.db.Model(svgtextDB)
		_, err := db.Updates(*svgtextDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSvgText.ResetReversePointers commits all staged instances of SvgText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgText *BackRepoSvgTextStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, svgtext := range backRepoSvgText.Map_SvgTextDBID_SvgTextPtr {
		backRepoSvgText.ResetReversePointersInstance(backRepo, idx, svgtext)
	}

	return
}

func (backRepoSvgText *BackRepoSvgTextStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, svgtext *models.SvgText) (Error error) {

	// fetch matching svgtextDB
	if svgtextDB, ok := backRepoSvgText.Map_SvgTextDBID_SvgTextDB[idx]; ok {
		_ = svgtextDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSvgTextid_atBckpTime_newID map[uint]uint
