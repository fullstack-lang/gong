// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_RectAnchoredRect_sql sql.NullBool
var dummy_RectAnchoredRect_time time.Duration
var dummy_RectAnchoredRect_sort sort.Float64Slice

// RectAnchoredRectAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model rectanchoredrectAPI
type RectAnchoredRectAPI struct {
	gorm.Model

	models.RectAnchoredRect

	// encoding of pointers
	RectAnchoredRectPointersEnconding
}

// RectAnchoredRectPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RectAnchoredRectPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Rect{}.RectAnchoredRects []*RectAnchoredRect
	Rect_RectAnchoredRectsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Rect_RectAnchoredRectsDBID_Index sql.NullInt64
}

// RectAnchoredRectDB describes a rectanchoredrect in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model rectanchoredrectDB
type RectAnchoredRectDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field rectanchoredrectDB.Name
	Name_Data sql.NullString

	// Declation for basic field rectanchoredrectDB.X
	X_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.Y
	Y_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.Height
	Height_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.RX
	RX_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.X_Offset
	X_Offset_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.Y_Offset
	Y_Offset_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.RectAnchorType
	RectAnchorType_Data sql.NullString

	// Declation for basic field rectanchoredrectDB.WidthFollowRect
	// provide the sql storage for the boolan
	WidthFollowRect_Data sql.NullBool

	// Declation for basic field rectanchoredrectDB.HeightFollowRect
	// provide the sql storage for the boolan
	HeightFollowRect_Data sql.NullBool

	// Declation for basic field rectanchoredrectDB.Color
	Color_Data sql.NullString

	// Declation for basic field rectanchoredrectDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field rectanchoredrectDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field rectanchoredrectDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field rectanchoredrectDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field rectanchoredrectDB.Transform
	Transform_Data sql.NullString
	// encoding of pointers
	RectAnchoredRectPointersEnconding
}

// RectAnchoredRectDBs arrays rectanchoredrectDBs
// swagger:response rectanchoredrectDBsResponse
type RectAnchoredRectDBs []RectAnchoredRectDB

// RectAnchoredRectDBResponse provides response
// swagger:response rectanchoredrectDBResponse
type RectAnchoredRectDBResponse struct {
	RectAnchoredRectDB
}

// RectAnchoredRectWOP is a RectAnchoredRect without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RectAnchoredRectWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	X float64 `xlsx:"2"`

	Y float64 `xlsx:"3"`

	Width float64 `xlsx:"4"`

	Height float64 `xlsx:"5"`

	RX float64 `xlsx:"6"`

	X_Offset float64 `xlsx:"7"`

	Y_Offset float64 `xlsx:"8"`

	RectAnchorType models.RectAnchorType `xlsx:"9"`

	WidthFollowRect bool `xlsx:"10"`

	HeightFollowRect bool `xlsx:"11"`

	Color string `xlsx:"12"`

	FillOpacity float64 `xlsx:"13"`

	Stroke string `xlsx:"14"`

	StrokeWidth float64 `xlsx:"15"`

	StrokeDashArray string `xlsx:"16"`

	StrokeDashArrayWhenSelected string `xlsx:"17"`

	Transform string `xlsx:"18"`
	// insertion for WOP pointer fields
}

var RectAnchoredRect_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"X",
	"Y",
	"Width",
	"Height",
	"RX",
	"X_Offset",
	"Y_Offset",
	"RectAnchorType",
	"WidthFollowRect",
	"HeightFollowRect",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoRectAnchoredRectStruct struct {
	// stores RectAnchoredRectDB according to their gorm ID
	Map_RectAnchoredRectDBID_RectAnchoredRectDB map[uint]*RectAnchoredRectDB

	// stores RectAnchoredRectDB ID according to RectAnchoredRect address
	Map_RectAnchoredRectPtr_RectAnchoredRectDBID map[*models.RectAnchoredRect]uint

	// stores RectAnchoredRect according to their gorm ID
	Map_RectAnchoredRectDBID_RectAnchoredRectPtr map[uint]*models.RectAnchoredRect

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRectAnchoredRect.stage
	return
}

func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) GetDB() *gorm.DB {
	return backRepoRectAnchoredRect.db
}

// GetRectAnchoredRectDBFromRectAnchoredRectPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) GetRectAnchoredRectDBFromRectAnchoredRectPtr(rectanchoredrect *models.RectAnchoredRect) (rectanchoredrectDB *RectAnchoredRectDB) {
	id := backRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID[rectanchoredrect]
	rectanchoredrectDB = backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB[id]
	return
}

// BackRepoRectAnchoredRect.CommitPhaseOne commits all staged instances of RectAnchoredRect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for rectanchoredrect := range stage.RectAnchoredRects {
		backRepoRectAnchoredRect.CommitPhaseOneInstance(rectanchoredrect)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, rectanchoredrect := range backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr {
		if _, ok := stage.RectAnchoredRects[rectanchoredrect]; !ok {
			backRepoRectAnchoredRect.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRectAnchoredRect.CommitDeleteInstance commits deletion of RectAnchoredRect to the BackRepo
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CommitDeleteInstance(id uint) (Error error) {

	rectanchoredrect := backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr[id]

	// rectanchoredrect is not staged anymore, remove rectanchoredrectDB
	rectanchoredrectDB := backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB[id]
	query := backRepoRectAnchoredRect.db.Unscoped().Delete(&rectanchoredrectDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID, rectanchoredrect)
	delete(backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr, id)
	delete(backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB, id)

	return
}

// BackRepoRectAnchoredRect.CommitPhaseOneInstance commits rectanchoredrect staged instances of RectAnchoredRect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CommitPhaseOneInstance(rectanchoredrect *models.RectAnchoredRect) (Error error) {

	// check if the rectanchoredrect is not commited yet
	if _, ok := backRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID[rectanchoredrect]; ok {
		return
	}

	// initiate rectanchoredrect
	var rectanchoredrectDB RectAnchoredRectDB
	rectanchoredrectDB.CopyBasicFieldsFromRectAnchoredRect(rectanchoredrect)

	query := backRepoRectAnchoredRect.db.Create(&rectanchoredrectDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID[rectanchoredrect] = rectanchoredrectDB.ID
	backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr[rectanchoredrectDB.ID] = rectanchoredrect
	backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB[rectanchoredrectDB.ID] = &rectanchoredrectDB

	return
}

// BackRepoRectAnchoredRect.CommitPhaseTwo commits all staged instances of RectAnchoredRect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, rectanchoredrect := range backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr {
		backRepoRectAnchoredRect.CommitPhaseTwoInstance(backRepo, idx, rectanchoredrect)
	}

	return
}

// BackRepoRectAnchoredRect.CommitPhaseTwoInstance commits {{structname }} of models.RectAnchoredRect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, rectanchoredrect *models.RectAnchoredRect) (Error error) {

	// fetch matching rectanchoredrectDB
	if rectanchoredrectDB, ok := backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB[idx]; ok {

		rectanchoredrectDB.CopyBasicFieldsFromRectAnchoredRect(rectanchoredrect)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoRectAnchoredRect.db.Save(&rectanchoredrectDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown RectAnchoredRect intance %s", rectanchoredrect.Name))
		return err
	}

	return
}

// BackRepoRectAnchoredRect.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CheckoutPhaseOne() (Error error) {

	rectanchoredrectDBArray := make([]RectAnchoredRectDB, 0)
	query := backRepoRectAnchoredRect.db.Find(&rectanchoredrectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	rectanchoredrectInstancesToBeRemovedFromTheStage := make(map[*models.RectAnchoredRect]any)
	for key, value := range backRepoRectAnchoredRect.stage.RectAnchoredRects {
		rectanchoredrectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, rectanchoredrectDB := range rectanchoredrectDBArray {
		backRepoRectAnchoredRect.CheckoutPhaseOneInstance(&rectanchoredrectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		rectanchoredrect, ok := backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr[rectanchoredrectDB.ID]
		if ok {
			delete(rectanchoredrectInstancesToBeRemovedFromTheStage, rectanchoredrect)
		}
	}

	// remove from stage and back repo's 3 maps all rectanchoredrects that are not in the checkout
	for rectanchoredrect := range rectanchoredrectInstancesToBeRemovedFromTheStage {
		rectanchoredrect.Unstage(backRepoRectAnchoredRect.GetStage())

		// remove instance from the back repo 3 maps
		rectanchoredrectID := backRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID[rectanchoredrect]
		delete(backRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID, rectanchoredrect)
		delete(backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB, rectanchoredrectID)
		delete(backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr, rectanchoredrectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a rectanchoredrectDB that has been found in the DB, updates the backRepo and stages the
// models version of the rectanchoredrectDB
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CheckoutPhaseOneInstance(rectanchoredrectDB *RectAnchoredRectDB) (Error error) {

	rectanchoredrect, ok := backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr[rectanchoredrectDB.ID]
	if !ok {
		rectanchoredrect = new(models.RectAnchoredRect)

		backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr[rectanchoredrectDB.ID] = rectanchoredrect
		backRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID[rectanchoredrect] = rectanchoredrectDB.ID

		// append model store with the new element
		rectanchoredrect.Name = rectanchoredrectDB.Name_Data.String
		rectanchoredrect.Stage(backRepoRectAnchoredRect.GetStage())
	}
	rectanchoredrectDB.CopyBasicFieldsToRectAnchoredRect(rectanchoredrect)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	rectanchoredrect.Stage(backRepoRectAnchoredRect.GetStage())

	// preserve pointer to rectanchoredrectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RectAnchoredRectDBID_RectAnchoredRectDB)[rectanchoredrectDB hold variable pointers
	rectanchoredrectDB_Data := *rectanchoredrectDB
	preservedPtrToRectAnchoredRect := &rectanchoredrectDB_Data
	backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB[rectanchoredrectDB.ID] = preservedPtrToRectAnchoredRect

	return
}

// BackRepoRectAnchoredRect.CheckoutPhaseTwo Checkouts all staged instances of RectAnchoredRect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, rectanchoredrectDB := range backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB {
		backRepoRectAnchoredRect.CheckoutPhaseTwoInstance(backRepo, rectanchoredrectDB)
	}
	return
}

// BackRepoRectAnchoredRect.CheckoutPhaseTwoInstance Checkouts staged instances of RectAnchoredRect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, rectanchoredrectDB *RectAnchoredRectDB) (Error error) {

	rectanchoredrect := backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectPtr[rectanchoredrectDB.ID]
	_ = rectanchoredrect // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitRectAnchoredRect allows commit of a single rectanchoredrect (if already staged)
func (backRepo *BackRepoStruct) CommitRectAnchoredRect(rectanchoredrect *models.RectAnchoredRect) {
	backRepo.BackRepoRectAnchoredRect.CommitPhaseOneInstance(rectanchoredrect)
	if id, ok := backRepo.BackRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID[rectanchoredrect]; ok {
		backRepo.BackRepoRectAnchoredRect.CommitPhaseTwoInstance(backRepo, id, rectanchoredrect)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRectAnchoredRect allows checkout of a single rectanchoredrect (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRectAnchoredRect(rectanchoredrect *models.RectAnchoredRect) {
	// check if the rectanchoredrect is staged
	if _, ok := backRepo.BackRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID[rectanchoredrect]; ok {

		if id, ok := backRepo.BackRepoRectAnchoredRect.Map_RectAnchoredRectPtr_RectAnchoredRectDBID[rectanchoredrect]; ok {
			var rectanchoredrectDB RectAnchoredRectDB
			rectanchoredrectDB.ID = id

			if err := backRepo.BackRepoRectAnchoredRect.db.First(&rectanchoredrectDB, id).Error; err != nil {
				log.Panicln("CheckoutRectAnchoredRect : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRectAnchoredRect.CheckoutPhaseOneInstance(&rectanchoredrectDB)
			backRepo.BackRepoRectAnchoredRect.CheckoutPhaseTwoInstance(backRepo, &rectanchoredrectDB)
		}
	}
}

// CopyBasicFieldsFromRectAnchoredRect
func (rectanchoredrectDB *RectAnchoredRectDB) CopyBasicFieldsFromRectAnchoredRect(rectanchoredrect *models.RectAnchoredRect) {
	// insertion point for fields commit

	rectanchoredrectDB.Name_Data.String = rectanchoredrect.Name
	rectanchoredrectDB.Name_Data.Valid = true

	rectanchoredrectDB.X_Data.Float64 = rectanchoredrect.X
	rectanchoredrectDB.X_Data.Valid = true

	rectanchoredrectDB.Y_Data.Float64 = rectanchoredrect.Y
	rectanchoredrectDB.Y_Data.Valid = true

	rectanchoredrectDB.Width_Data.Float64 = rectanchoredrect.Width
	rectanchoredrectDB.Width_Data.Valid = true

	rectanchoredrectDB.Height_Data.Float64 = rectanchoredrect.Height
	rectanchoredrectDB.Height_Data.Valid = true

	rectanchoredrectDB.RX_Data.Float64 = rectanchoredrect.RX
	rectanchoredrectDB.RX_Data.Valid = true

	rectanchoredrectDB.X_Offset_Data.Float64 = rectanchoredrect.X_Offset
	rectanchoredrectDB.X_Offset_Data.Valid = true

	rectanchoredrectDB.Y_Offset_Data.Float64 = rectanchoredrect.Y_Offset
	rectanchoredrectDB.Y_Offset_Data.Valid = true

	rectanchoredrectDB.RectAnchorType_Data.String = rectanchoredrect.RectAnchorType.ToString()
	rectanchoredrectDB.RectAnchorType_Data.Valid = true

	rectanchoredrectDB.WidthFollowRect_Data.Bool = rectanchoredrect.WidthFollowRect
	rectanchoredrectDB.WidthFollowRect_Data.Valid = true

	rectanchoredrectDB.HeightFollowRect_Data.Bool = rectanchoredrect.HeightFollowRect
	rectanchoredrectDB.HeightFollowRect_Data.Valid = true

	rectanchoredrectDB.Color_Data.String = rectanchoredrect.Color
	rectanchoredrectDB.Color_Data.Valid = true

	rectanchoredrectDB.FillOpacity_Data.Float64 = rectanchoredrect.FillOpacity
	rectanchoredrectDB.FillOpacity_Data.Valid = true

	rectanchoredrectDB.Stroke_Data.String = rectanchoredrect.Stroke
	rectanchoredrectDB.Stroke_Data.Valid = true

	rectanchoredrectDB.StrokeWidth_Data.Float64 = rectanchoredrect.StrokeWidth
	rectanchoredrectDB.StrokeWidth_Data.Valid = true

	rectanchoredrectDB.StrokeDashArray_Data.String = rectanchoredrect.StrokeDashArray
	rectanchoredrectDB.StrokeDashArray_Data.Valid = true

	rectanchoredrectDB.StrokeDashArrayWhenSelected_Data.String = rectanchoredrect.StrokeDashArrayWhenSelected
	rectanchoredrectDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rectanchoredrectDB.Transform_Data.String = rectanchoredrect.Transform
	rectanchoredrectDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromRectAnchoredRectWOP
func (rectanchoredrectDB *RectAnchoredRectDB) CopyBasicFieldsFromRectAnchoredRectWOP(rectanchoredrect *RectAnchoredRectWOP) {
	// insertion point for fields commit

	rectanchoredrectDB.Name_Data.String = rectanchoredrect.Name
	rectanchoredrectDB.Name_Data.Valid = true

	rectanchoredrectDB.X_Data.Float64 = rectanchoredrect.X
	rectanchoredrectDB.X_Data.Valid = true

	rectanchoredrectDB.Y_Data.Float64 = rectanchoredrect.Y
	rectanchoredrectDB.Y_Data.Valid = true

	rectanchoredrectDB.Width_Data.Float64 = rectanchoredrect.Width
	rectanchoredrectDB.Width_Data.Valid = true

	rectanchoredrectDB.Height_Data.Float64 = rectanchoredrect.Height
	rectanchoredrectDB.Height_Data.Valid = true

	rectanchoredrectDB.RX_Data.Float64 = rectanchoredrect.RX
	rectanchoredrectDB.RX_Data.Valid = true

	rectanchoredrectDB.X_Offset_Data.Float64 = rectanchoredrect.X_Offset
	rectanchoredrectDB.X_Offset_Data.Valid = true

	rectanchoredrectDB.Y_Offset_Data.Float64 = rectanchoredrect.Y_Offset
	rectanchoredrectDB.Y_Offset_Data.Valid = true

	rectanchoredrectDB.RectAnchorType_Data.String = rectanchoredrect.RectAnchorType.ToString()
	rectanchoredrectDB.RectAnchorType_Data.Valid = true

	rectanchoredrectDB.WidthFollowRect_Data.Bool = rectanchoredrect.WidthFollowRect
	rectanchoredrectDB.WidthFollowRect_Data.Valid = true

	rectanchoredrectDB.HeightFollowRect_Data.Bool = rectanchoredrect.HeightFollowRect
	rectanchoredrectDB.HeightFollowRect_Data.Valid = true

	rectanchoredrectDB.Color_Data.String = rectanchoredrect.Color
	rectanchoredrectDB.Color_Data.Valid = true

	rectanchoredrectDB.FillOpacity_Data.Float64 = rectanchoredrect.FillOpacity
	rectanchoredrectDB.FillOpacity_Data.Valid = true

	rectanchoredrectDB.Stroke_Data.String = rectanchoredrect.Stroke
	rectanchoredrectDB.Stroke_Data.Valid = true

	rectanchoredrectDB.StrokeWidth_Data.Float64 = rectanchoredrect.StrokeWidth
	rectanchoredrectDB.StrokeWidth_Data.Valid = true

	rectanchoredrectDB.StrokeDashArray_Data.String = rectanchoredrect.StrokeDashArray
	rectanchoredrectDB.StrokeDashArray_Data.Valid = true

	rectanchoredrectDB.StrokeDashArrayWhenSelected_Data.String = rectanchoredrect.StrokeDashArrayWhenSelected
	rectanchoredrectDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rectanchoredrectDB.Transform_Data.String = rectanchoredrect.Transform
	rectanchoredrectDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToRectAnchoredRect
func (rectanchoredrectDB *RectAnchoredRectDB) CopyBasicFieldsToRectAnchoredRect(rectanchoredrect *models.RectAnchoredRect) {
	// insertion point for checkout of basic fields (back repo to stage)
	rectanchoredrect.Name = rectanchoredrectDB.Name_Data.String
	rectanchoredrect.X = rectanchoredrectDB.X_Data.Float64
	rectanchoredrect.Y = rectanchoredrectDB.Y_Data.Float64
	rectanchoredrect.Width = rectanchoredrectDB.Width_Data.Float64
	rectanchoredrect.Height = rectanchoredrectDB.Height_Data.Float64
	rectanchoredrect.RX = rectanchoredrectDB.RX_Data.Float64
	rectanchoredrect.X_Offset = rectanchoredrectDB.X_Offset_Data.Float64
	rectanchoredrect.Y_Offset = rectanchoredrectDB.Y_Offset_Data.Float64
	rectanchoredrect.RectAnchorType.FromString(rectanchoredrectDB.RectAnchorType_Data.String)
	rectanchoredrect.WidthFollowRect = rectanchoredrectDB.WidthFollowRect_Data.Bool
	rectanchoredrect.HeightFollowRect = rectanchoredrectDB.HeightFollowRect_Data.Bool
	rectanchoredrect.Color = rectanchoredrectDB.Color_Data.String
	rectanchoredrect.FillOpacity = rectanchoredrectDB.FillOpacity_Data.Float64
	rectanchoredrect.Stroke = rectanchoredrectDB.Stroke_Data.String
	rectanchoredrect.StrokeWidth = rectanchoredrectDB.StrokeWidth_Data.Float64
	rectanchoredrect.StrokeDashArray = rectanchoredrectDB.StrokeDashArray_Data.String
	rectanchoredrect.StrokeDashArrayWhenSelected = rectanchoredrectDB.StrokeDashArrayWhenSelected_Data.String
	rectanchoredrect.Transform = rectanchoredrectDB.Transform_Data.String
}

// CopyBasicFieldsToRectAnchoredRectWOP
func (rectanchoredrectDB *RectAnchoredRectDB) CopyBasicFieldsToRectAnchoredRectWOP(rectanchoredrect *RectAnchoredRectWOP) {
	rectanchoredrect.ID = int(rectanchoredrectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	rectanchoredrect.Name = rectanchoredrectDB.Name_Data.String
	rectanchoredrect.X = rectanchoredrectDB.X_Data.Float64
	rectanchoredrect.Y = rectanchoredrectDB.Y_Data.Float64
	rectanchoredrect.Width = rectanchoredrectDB.Width_Data.Float64
	rectanchoredrect.Height = rectanchoredrectDB.Height_Data.Float64
	rectanchoredrect.RX = rectanchoredrectDB.RX_Data.Float64
	rectanchoredrect.X_Offset = rectanchoredrectDB.X_Offset_Data.Float64
	rectanchoredrect.Y_Offset = rectanchoredrectDB.Y_Offset_Data.Float64
	rectanchoredrect.RectAnchorType.FromString(rectanchoredrectDB.RectAnchorType_Data.String)
	rectanchoredrect.WidthFollowRect = rectanchoredrectDB.WidthFollowRect_Data.Bool
	rectanchoredrect.HeightFollowRect = rectanchoredrectDB.HeightFollowRect_Data.Bool
	rectanchoredrect.Color = rectanchoredrectDB.Color_Data.String
	rectanchoredrect.FillOpacity = rectanchoredrectDB.FillOpacity_Data.Float64
	rectanchoredrect.Stroke = rectanchoredrectDB.Stroke_Data.String
	rectanchoredrect.StrokeWidth = rectanchoredrectDB.StrokeWidth_Data.Float64
	rectanchoredrect.StrokeDashArray = rectanchoredrectDB.StrokeDashArray_Data.String
	rectanchoredrect.StrokeDashArrayWhenSelected = rectanchoredrectDB.StrokeDashArrayWhenSelected_Data.String
	rectanchoredrect.Transform = rectanchoredrectDB.Transform_Data.String
}

// Backup generates a json file from a slice of all RectAnchoredRectDB instances in the backrepo
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RectAnchoredRectDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RectAnchoredRectDB, 0)
	for _, rectanchoredrectDB := range backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB {
		forBackup = append(forBackup, rectanchoredrectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json RectAnchoredRect ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json RectAnchoredRect file", err.Error())
	}
}

// Backup generates a json file from a slice of all RectAnchoredRectDB instances in the backrepo
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RectAnchoredRectDB, 0)
	for _, rectanchoredrectDB := range backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB {
		forBackup = append(forBackup, rectanchoredrectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("RectAnchoredRect")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&RectAnchoredRect_Fields, -1)
	for _, rectanchoredrectDB := range forBackup {

		var rectanchoredrectWOP RectAnchoredRectWOP
		rectanchoredrectDB.CopyBasicFieldsToRectAnchoredRectWOP(&rectanchoredrectWOP)

		row := sh.AddRow()
		row.WriteStruct(&rectanchoredrectWOP, -1)
	}
}

// RestoreXL from the "RectAnchoredRect" sheet all RectAnchoredRectDB instances
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRectAnchoredRectid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["RectAnchoredRect"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRectAnchoredRect.rowVisitorRectAnchoredRect)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) rowVisitorRectAnchoredRect(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var rectanchoredrectWOP RectAnchoredRectWOP
		row.ReadStruct(&rectanchoredrectWOP)

		// add the unmarshalled struct to the stage
		rectanchoredrectDB := new(RectAnchoredRectDB)
		rectanchoredrectDB.CopyBasicFieldsFromRectAnchoredRectWOP(&rectanchoredrectWOP)

		rectanchoredrectDB_ID_atBackupTime := rectanchoredrectDB.ID
		rectanchoredrectDB.ID = 0
		query := backRepoRectAnchoredRect.db.Create(rectanchoredrectDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB[rectanchoredrectDB.ID] = rectanchoredrectDB
		BackRepoRectAnchoredRectid_atBckpTime_newID[rectanchoredrectDB_ID_atBackupTime] = rectanchoredrectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RectAnchoredRectDB.json" in dirPath that stores an array
// of RectAnchoredRectDB and stores it in the database
// the map BackRepoRectAnchoredRectid_atBckpTime_newID is updated accordingly
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRectAnchoredRectid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RectAnchoredRectDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json RectAnchoredRect file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RectAnchoredRectDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RectAnchoredRectDBID_RectAnchoredRectDB
	for _, rectanchoredrectDB := range forRestore {

		rectanchoredrectDB_ID_atBackupTime := rectanchoredrectDB.ID
		rectanchoredrectDB.ID = 0
		query := backRepoRectAnchoredRect.db.Create(rectanchoredrectDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB[rectanchoredrectDB.ID] = rectanchoredrectDB
		BackRepoRectAnchoredRectid_atBckpTime_newID[rectanchoredrectDB_ID_atBackupTime] = rectanchoredrectDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json RectAnchoredRect file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<RectAnchoredRect>id_atBckpTime_newID
// to compute new index
func (backRepoRectAnchoredRect *BackRepoRectAnchoredRectStruct) RestorePhaseTwo() {

	for _, rectanchoredrectDB := range backRepoRectAnchoredRect.Map_RectAnchoredRectDBID_RectAnchoredRectDB {

		// next line of code is to avert unused variable compilation error
		_ = rectanchoredrectDB

		// insertion point for reindexing pointers encoding
		// This reindex rectanchoredrect.RectAnchoredRects
		if rectanchoredrectDB.Rect_RectAnchoredRectsDBID.Int64 != 0 {
			rectanchoredrectDB.Rect_RectAnchoredRectsDBID.Int64 =
				int64(BackRepoRectid_atBckpTime_newID[uint(rectanchoredrectDB.Rect_RectAnchoredRectsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoRectAnchoredRect.db.Model(rectanchoredrectDB).Updates(*rectanchoredrectDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRectAnchoredRectid_atBckpTime_newID map[uint]uint
