// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Link_sql sql.NullBool
var dummy_Link_time time.Duration
var dummy_Link_sort sort.Float64Slice

// LinkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model linkAPI
type LinkAPI struct {
	gorm.Model

	models.Link

	// encoding of pointers
	LinkPointersEnconding
}

// LinkPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LinkPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Start is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	StartID sql.NullInt64

	// field End is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EndID sql.NullInt64

	// Implementation of a reverse ID for field Layer{}.Links []*Link
	Layer_LinksDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Layer_LinksDBID_Index sql.NullInt64
}

// LinkDB describes a link in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model linkDB
type LinkDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field linkDB.Name
	Name_Data sql.NullString

	// Declation for basic field linkDB.Type
	Type_Data sql.NullString

	// Declation for basic field linkDB.StartAnchorType
	StartAnchorType_Data sql.NullString

	// Declation for basic field linkDB.EndAnchorType
	EndAnchorType_Data sql.NullString

	// Declation for basic field linkDB.StartOrientation
	StartOrientation_Data sql.NullString

	// Declation for basic field linkDB.StartRatio
	StartRatio_Data sql.NullFloat64

	// Declation for basic field linkDB.EndOrientation
	EndOrientation_Data sql.NullString

	// Declation for basic field linkDB.EndRatio
	EndRatio_Data sql.NullFloat64

	// Declation for basic field linkDB.CornerOffsetRatio
	CornerOffsetRatio_Data sql.NullFloat64

	// Declation for basic field linkDB.CornerRadius
	CornerRadius_Data sql.NullFloat64

	// Declation for basic field linkDB.HasEndArrow
	// provide the sql storage for the boolan
	HasEndArrow_Data sql.NullBool

	// Declation for basic field linkDB.EndArrowSize
	EndArrowSize_Data sql.NullFloat64

	// Declation for basic field linkDB.Color
	Color_Data sql.NullString

	// Declation for basic field linkDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field linkDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field linkDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field linkDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field linkDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field linkDB.Transform
	Transform_Data sql.NullString
	// encoding of pointers
	LinkPointersEnconding
}

// LinkDBs arrays linkDBs
// swagger:response linkDBsResponse
type LinkDBs []LinkDB

// LinkDBResponse provides response
// swagger:response linkDBResponse
type LinkDBResponse struct {
	LinkDB
}

// LinkWOP is a Link without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LinkWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Type models.LinkType `xlsx:"2"`

	StartAnchorType models.AnchorType `xlsx:"3"`

	EndAnchorType models.AnchorType `xlsx:"4"`

	StartOrientation models.OrientationType `xlsx:"5"`

	StartRatio float64 `xlsx:"6"`

	EndOrientation models.OrientationType `xlsx:"7"`

	EndRatio float64 `xlsx:"8"`

	CornerOffsetRatio float64 `xlsx:"9"`

	CornerRadius float64 `xlsx:"10"`

	HasEndArrow bool `xlsx:"11"`

	EndArrowSize float64 `xlsx:"12"`

	Color string `xlsx:"13"`

	FillOpacity float64 `xlsx:"14"`

	Stroke string `xlsx:"15"`

	StrokeWidth float64 `xlsx:"16"`

	StrokeDashArray string `xlsx:"17"`

	StrokeDashArrayWhenSelected string `xlsx:"18"`

	Transform string `xlsx:"19"`
	// insertion for WOP pointer fields
}

var Link_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Type",
	"StartAnchorType",
	"EndAnchorType",
	"StartOrientation",
	"StartRatio",
	"EndOrientation",
	"EndRatio",
	"CornerOffsetRatio",
	"CornerRadius",
	"HasEndArrow",
	"EndArrowSize",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoLinkStruct struct {
	// stores LinkDB according to their gorm ID
	Map_LinkDBID_LinkDB map[uint]*LinkDB

	// stores LinkDB ID according to Link address
	Map_LinkPtr_LinkDBID map[*models.Link]uint

	// stores Link according to their gorm ID
	Map_LinkDBID_LinkPtr map[uint]*models.Link

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLink *BackRepoLinkStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLink.stage
	return
}

func (backRepoLink *BackRepoLinkStruct) GetDB() *gorm.DB {
	return backRepoLink.db
}

// GetLinkDBFromLinkPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLink *BackRepoLinkStruct) GetLinkDBFromLinkPtr(link *models.Link) (linkDB *LinkDB) {
	id := backRepoLink.Map_LinkPtr_LinkDBID[link]
	linkDB = backRepoLink.Map_LinkDBID_LinkDB[id]
	return
}

// BackRepoLink.CommitPhaseOne commits all staged instances of Link to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLink *BackRepoLinkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for link := range stage.Links {
		backRepoLink.CommitPhaseOneInstance(link)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, link := range backRepoLink.Map_LinkDBID_LinkPtr {
		if _, ok := stage.Links[link]; !ok {
			backRepoLink.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLink.CommitDeleteInstance commits deletion of Link to the BackRepo
func (backRepoLink *BackRepoLinkStruct) CommitDeleteInstance(id uint) (Error error) {

	link := backRepoLink.Map_LinkDBID_LinkPtr[id]

	// link is not staged anymore, remove linkDB
	linkDB := backRepoLink.Map_LinkDBID_LinkDB[id]
	query := backRepoLink.db.Unscoped().Delete(&linkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoLink.Map_LinkPtr_LinkDBID, link)
	delete(backRepoLink.Map_LinkDBID_LinkPtr, id)
	delete(backRepoLink.Map_LinkDBID_LinkDB, id)

	return
}

// BackRepoLink.CommitPhaseOneInstance commits link staged instances of Link to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLink *BackRepoLinkStruct) CommitPhaseOneInstance(link *models.Link) (Error error) {

	// check if the link is not commited yet
	if _, ok := backRepoLink.Map_LinkPtr_LinkDBID[link]; ok {
		return
	}

	// initiate link
	var linkDB LinkDB
	linkDB.CopyBasicFieldsFromLink(link)

	query := backRepoLink.db.Create(&linkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoLink.Map_LinkPtr_LinkDBID[link] = linkDB.ID
	backRepoLink.Map_LinkDBID_LinkPtr[linkDB.ID] = link
	backRepoLink.Map_LinkDBID_LinkDB[linkDB.ID] = &linkDB

	return
}

// BackRepoLink.CommitPhaseTwo commits all staged instances of Link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLink *BackRepoLinkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, link := range backRepoLink.Map_LinkDBID_LinkPtr {
		backRepoLink.CommitPhaseTwoInstance(backRepo, idx, link)
	}

	return
}

// BackRepoLink.CommitPhaseTwoInstance commits {{structname }} of models.Link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLink *BackRepoLinkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, link *models.Link) (Error error) {

	// fetch matching linkDB
	if linkDB, ok := backRepoLink.Map_LinkDBID_LinkDB[idx]; ok {

		linkDB.CopyBasicFieldsFromLink(link)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value link.Start translates to updating the link.StartID
		linkDB.StartID.Valid = true // allow for a 0 value (nil association)
		if link.Start != nil {
			if StartId, ok := backRepo.BackRepoRect.Map_RectPtr_RectDBID[link.Start]; ok {
				linkDB.StartID.Int64 = int64(StartId)
				linkDB.StartID.Valid = true
			}
		}

		// commit pointer value link.End translates to updating the link.EndID
		linkDB.EndID.Valid = true // allow for a 0 value (nil association)
		if link.End != nil {
			if EndId, ok := backRepo.BackRepoRect.Map_RectPtr_RectDBID[link.End]; ok {
				linkDB.EndID.Int64 = int64(EndId)
				linkDB.EndID.Valid = true
			}
		}

		// This loop encodes the slice of pointers link.TextAtArrowEnd into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, linkanchoredtextAssocEnd := range link.TextAtArrowEnd {

			// get the back repo instance at the association end
			linkanchoredtextAssocEnd_DB :=
				backRepo.BackRepoLinkAnchoredText.GetLinkAnchoredTextDBFromLinkAnchoredTextPtr(linkanchoredtextAssocEnd)

			// encode reverse pointer in the association end back repo instance
			linkanchoredtextAssocEnd_DB.Link_TextAtArrowEndDBID.Int64 = int64(linkDB.ID)
			linkanchoredtextAssocEnd_DB.Link_TextAtArrowEndDBID.Valid = true
			linkanchoredtextAssocEnd_DB.Link_TextAtArrowEndDBID_Index.Int64 = int64(idx)
			linkanchoredtextAssocEnd_DB.Link_TextAtArrowEndDBID_Index.Valid = true
			if q := backRepoLink.db.Save(linkanchoredtextAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers link.TextAtArrowStart into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, linkanchoredtextAssocEnd := range link.TextAtArrowStart {

			// get the back repo instance at the association end
			linkanchoredtextAssocEnd_DB :=
				backRepo.BackRepoLinkAnchoredText.GetLinkAnchoredTextDBFromLinkAnchoredTextPtr(linkanchoredtextAssocEnd)

			// encode reverse pointer in the association end back repo instance
			linkanchoredtextAssocEnd_DB.Link_TextAtArrowStartDBID.Int64 = int64(linkDB.ID)
			linkanchoredtextAssocEnd_DB.Link_TextAtArrowStartDBID.Valid = true
			linkanchoredtextAssocEnd_DB.Link_TextAtArrowStartDBID_Index.Int64 = int64(idx)
			linkanchoredtextAssocEnd_DB.Link_TextAtArrowStartDBID_Index.Valid = true
			if q := backRepoLink.db.Save(linkanchoredtextAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers link.ControlPoints into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, pointAssocEnd := range link.ControlPoints {

			// get the back repo instance at the association end
			pointAssocEnd_DB :=
				backRepo.BackRepoPoint.GetPointDBFromPointPtr(pointAssocEnd)

			// encode reverse pointer in the association end back repo instance
			pointAssocEnd_DB.Link_ControlPointsDBID.Int64 = int64(linkDB.ID)
			pointAssocEnd_DB.Link_ControlPointsDBID.Valid = true
			pointAssocEnd_DB.Link_ControlPointsDBID_Index.Int64 = int64(idx)
			pointAssocEnd_DB.Link_ControlPointsDBID_Index.Valid = true
			if q := backRepoLink.db.Save(pointAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoLink.db.Save(&linkDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Link intance %s", link.Name))
		return err
	}

	return
}

// BackRepoLink.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLink *BackRepoLinkStruct) CheckoutPhaseOne() (Error error) {

	linkDBArray := make([]LinkDB, 0)
	query := backRepoLink.db.Find(&linkDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	linkInstancesToBeRemovedFromTheStage := make(map[*models.Link]any)
	for key, value := range backRepoLink.stage.Links {
		linkInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, linkDB := range linkDBArray {
		backRepoLink.CheckoutPhaseOneInstance(&linkDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		link, ok := backRepoLink.Map_LinkDBID_LinkPtr[linkDB.ID]
		if ok {
			delete(linkInstancesToBeRemovedFromTheStage, link)
		}
	}

	// remove from stage and back repo's 3 maps all links that are not in the checkout
	for link := range linkInstancesToBeRemovedFromTheStage {
		link.Unstage(backRepoLink.GetStage())

		// remove instance from the back repo 3 maps
		linkID := backRepoLink.Map_LinkPtr_LinkDBID[link]
		delete(backRepoLink.Map_LinkPtr_LinkDBID, link)
		delete(backRepoLink.Map_LinkDBID_LinkDB, linkID)
		delete(backRepoLink.Map_LinkDBID_LinkPtr, linkID)
	}

	return
}

// CheckoutPhaseOneInstance takes a linkDB that has been found in the DB, updates the backRepo and stages the
// models version of the linkDB
func (backRepoLink *BackRepoLinkStruct) CheckoutPhaseOneInstance(linkDB *LinkDB) (Error error) {

	link, ok := backRepoLink.Map_LinkDBID_LinkPtr[linkDB.ID]
	if !ok {
		link = new(models.Link)

		backRepoLink.Map_LinkDBID_LinkPtr[linkDB.ID] = link
		backRepoLink.Map_LinkPtr_LinkDBID[link] = linkDB.ID

		// append model store with the new element
		link.Name = linkDB.Name_Data.String
		link.Stage(backRepoLink.GetStage())
	}
	linkDB.CopyBasicFieldsToLink(link)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	link.Stage(backRepoLink.GetStage())

	// preserve pointer to linkDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LinkDBID_LinkDB)[linkDB hold variable pointers
	linkDB_Data := *linkDB
	preservedPtrToLink := &linkDB_Data
	backRepoLink.Map_LinkDBID_LinkDB[linkDB.ID] = preservedPtrToLink

	return
}

// BackRepoLink.CheckoutPhaseTwo Checkouts all staged instances of Link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLink *BackRepoLinkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, linkDB := range backRepoLink.Map_LinkDBID_LinkDB {
		backRepoLink.CheckoutPhaseTwoInstance(backRepo, linkDB)
	}
	return
}

// BackRepoLink.CheckoutPhaseTwoInstance Checkouts staged instances of Link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLink *BackRepoLinkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, linkDB *LinkDB) (Error error) {

	link := backRepoLink.Map_LinkDBID_LinkPtr[linkDB.ID]
	_ = link // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Start field
	if linkDB.StartID.Int64 != 0 {
		link.Start = backRepo.BackRepoRect.Map_RectDBID_RectPtr[uint(linkDB.StartID.Int64)]
	}
	// End field
	if linkDB.EndID.Int64 != 0 {
		link.End = backRepo.BackRepoRect.Map_RectDBID_RectPtr[uint(linkDB.EndID.Int64)]
	}
	// This loop redeem link.TextAtArrowEnd in the stage from the encode in the back repo
	// It parses all LinkAnchoredTextDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	link.TextAtArrowEnd = link.TextAtArrowEnd[:0]
	// 2. loop all instances in the type in the association end
	for _, linkanchoredtextDB_AssocEnd := range backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextDBID_LinkAnchoredTextDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if linkanchoredtextDB_AssocEnd.Link_TextAtArrowEndDBID.Int64 == int64(linkDB.ID) {
			// 4. fetch the associated instance in the stage
			linkanchoredtext_AssocEnd := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextDBID_LinkAnchoredTextPtr[linkanchoredtextDB_AssocEnd.ID]
			// 5. append it the association slice
			link.TextAtArrowEnd = append(link.TextAtArrowEnd, linkanchoredtext_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(link.TextAtArrowEnd, func(i, j int) bool {
		linkanchoredtextDB_i_ID := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextPtr_LinkAnchoredTextDBID[link.TextAtArrowEnd[i]]
		linkanchoredtextDB_j_ID := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextPtr_LinkAnchoredTextDBID[link.TextAtArrowEnd[j]]

		linkanchoredtextDB_i := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextDBID_LinkAnchoredTextDB[linkanchoredtextDB_i_ID]
		linkanchoredtextDB_j := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextDBID_LinkAnchoredTextDB[linkanchoredtextDB_j_ID]

		return linkanchoredtextDB_i.Link_TextAtArrowEndDBID_Index.Int64 < linkanchoredtextDB_j.Link_TextAtArrowEndDBID_Index.Int64
	})

	// This loop redeem link.TextAtArrowStart in the stage from the encode in the back repo
	// It parses all LinkAnchoredTextDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	link.TextAtArrowStart = link.TextAtArrowStart[:0]
	// 2. loop all instances in the type in the association end
	for _, linkanchoredtextDB_AssocEnd := range backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextDBID_LinkAnchoredTextDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if linkanchoredtextDB_AssocEnd.Link_TextAtArrowStartDBID.Int64 == int64(linkDB.ID) {
			// 4. fetch the associated instance in the stage
			linkanchoredtext_AssocEnd := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextDBID_LinkAnchoredTextPtr[linkanchoredtextDB_AssocEnd.ID]
			// 5. append it the association slice
			link.TextAtArrowStart = append(link.TextAtArrowStart, linkanchoredtext_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(link.TextAtArrowStart, func(i, j int) bool {
		linkanchoredtextDB_i_ID := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextPtr_LinkAnchoredTextDBID[link.TextAtArrowStart[i]]
		linkanchoredtextDB_j_ID := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextPtr_LinkAnchoredTextDBID[link.TextAtArrowStart[j]]

		linkanchoredtextDB_i := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextDBID_LinkAnchoredTextDB[linkanchoredtextDB_i_ID]
		linkanchoredtextDB_j := backRepo.BackRepoLinkAnchoredText.Map_LinkAnchoredTextDBID_LinkAnchoredTextDB[linkanchoredtextDB_j_ID]

		return linkanchoredtextDB_i.Link_TextAtArrowStartDBID_Index.Int64 < linkanchoredtextDB_j.Link_TextAtArrowStartDBID_Index.Int64
	})

	// This loop redeem link.ControlPoints in the stage from the encode in the back repo
	// It parses all PointDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	link.ControlPoints = link.ControlPoints[:0]
	// 2. loop all instances in the type in the association end
	for _, pointDB_AssocEnd := range backRepo.BackRepoPoint.Map_PointDBID_PointDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if pointDB_AssocEnd.Link_ControlPointsDBID.Int64 == int64(linkDB.ID) {
			// 4. fetch the associated instance in the stage
			point_AssocEnd := backRepo.BackRepoPoint.Map_PointDBID_PointPtr[pointDB_AssocEnd.ID]
			// 5. append it the association slice
			link.ControlPoints = append(link.ControlPoints, point_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(link.ControlPoints, func(i, j int) bool {
		pointDB_i_ID := backRepo.BackRepoPoint.Map_PointPtr_PointDBID[link.ControlPoints[i]]
		pointDB_j_ID := backRepo.BackRepoPoint.Map_PointPtr_PointDBID[link.ControlPoints[j]]

		pointDB_i := backRepo.BackRepoPoint.Map_PointDBID_PointDB[pointDB_i_ID]
		pointDB_j := backRepo.BackRepoPoint.Map_PointDBID_PointDB[pointDB_j_ID]

		return pointDB_i.Link_ControlPointsDBID_Index.Int64 < pointDB_j.Link_ControlPointsDBID_Index.Int64
	})

	return
}

// CommitLink allows commit of a single link (if already staged)
func (backRepo *BackRepoStruct) CommitLink(link *models.Link) {
	backRepo.BackRepoLink.CommitPhaseOneInstance(link)
	if id, ok := backRepo.BackRepoLink.Map_LinkPtr_LinkDBID[link]; ok {
		backRepo.BackRepoLink.CommitPhaseTwoInstance(backRepo, id, link)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLink allows checkout of a single link (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLink(link *models.Link) {
	// check if the link is staged
	if _, ok := backRepo.BackRepoLink.Map_LinkPtr_LinkDBID[link]; ok {

		if id, ok := backRepo.BackRepoLink.Map_LinkPtr_LinkDBID[link]; ok {
			var linkDB LinkDB
			linkDB.ID = id

			if err := backRepo.BackRepoLink.db.First(&linkDB, id).Error; err != nil {
				log.Panicln("CheckoutLink : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLink.CheckoutPhaseOneInstance(&linkDB)
			backRepo.BackRepoLink.CheckoutPhaseTwoInstance(backRepo, &linkDB)
		}
	}
}

// CopyBasicFieldsFromLink
func (linkDB *LinkDB) CopyBasicFieldsFromLink(link *models.Link) {
	// insertion point for fields commit

	linkDB.Name_Data.String = link.Name
	linkDB.Name_Data.Valid = true

	linkDB.Type_Data.String = link.Type.ToString()
	linkDB.Type_Data.Valid = true

	linkDB.StartAnchorType_Data.String = link.StartAnchorType.ToString()
	linkDB.StartAnchorType_Data.Valid = true

	linkDB.EndAnchorType_Data.String = link.EndAnchorType.ToString()
	linkDB.EndAnchorType_Data.Valid = true

	linkDB.StartOrientation_Data.String = link.StartOrientation.ToString()
	linkDB.StartOrientation_Data.Valid = true

	linkDB.StartRatio_Data.Float64 = link.StartRatio
	linkDB.StartRatio_Data.Valid = true

	linkDB.EndOrientation_Data.String = link.EndOrientation.ToString()
	linkDB.EndOrientation_Data.Valid = true

	linkDB.EndRatio_Data.Float64 = link.EndRatio
	linkDB.EndRatio_Data.Valid = true

	linkDB.CornerOffsetRatio_Data.Float64 = link.CornerOffsetRatio
	linkDB.CornerOffsetRatio_Data.Valid = true

	linkDB.CornerRadius_Data.Float64 = link.CornerRadius
	linkDB.CornerRadius_Data.Valid = true

	linkDB.HasEndArrow_Data.Bool = link.HasEndArrow
	linkDB.HasEndArrow_Data.Valid = true

	linkDB.EndArrowSize_Data.Float64 = link.EndArrowSize
	linkDB.EndArrowSize_Data.Valid = true

	linkDB.Color_Data.String = link.Color
	linkDB.Color_Data.Valid = true

	linkDB.FillOpacity_Data.Float64 = link.FillOpacity
	linkDB.FillOpacity_Data.Valid = true

	linkDB.Stroke_Data.String = link.Stroke
	linkDB.Stroke_Data.Valid = true

	linkDB.StrokeWidth_Data.Float64 = link.StrokeWidth
	linkDB.StrokeWidth_Data.Valid = true

	linkDB.StrokeDashArray_Data.String = link.StrokeDashArray
	linkDB.StrokeDashArray_Data.Valid = true

	linkDB.StrokeDashArrayWhenSelected_Data.String = link.StrokeDashArrayWhenSelected
	linkDB.StrokeDashArrayWhenSelected_Data.Valid = true

	linkDB.Transform_Data.String = link.Transform
	linkDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromLinkWOP
func (linkDB *LinkDB) CopyBasicFieldsFromLinkWOP(link *LinkWOP) {
	// insertion point for fields commit

	linkDB.Name_Data.String = link.Name
	linkDB.Name_Data.Valid = true

	linkDB.Type_Data.String = link.Type.ToString()
	linkDB.Type_Data.Valid = true

	linkDB.StartAnchorType_Data.String = link.StartAnchorType.ToString()
	linkDB.StartAnchorType_Data.Valid = true

	linkDB.EndAnchorType_Data.String = link.EndAnchorType.ToString()
	linkDB.EndAnchorType_Data.Valid = true

	linkDB.StartOrientation_Data.String = link.StartOrientation.ToString()
	linkDB.StartOrientation_Data.Valid = true

	linkDB.StartRatio_Data.Float64 = link.StartRatio
	linkDB.StartRatio_Data.Valid = true

	linkDB.EndOrientation_Data.String = link.EndOrientation.ToString()
	linkDB.EndOrientation_Data.Valid = true

	linkDB.EndRatio_Data.Float64 = link.EndRatio
	linkDB.EndRatio_Data.Valid = true

	linkDB.CornerOffsetRatio_Data.Float64 = link.CornerOffsetRatio
	linkDB.CornerOffsetRatio_Data.Valid = true

	linkDB.CornerRadius_Data.Float64 = link.CornerRadius
	linkDB.CornerRadius_Data.Valid = true

	linkDB.HasEndArrow_Data.Bool = link.HasEndArrow
	linkDB.HasEndArrow_Data.Valid = true

	linkDB.EndArrowSize_Data.Float64 = link.EndArrowSize
	linkDB.EndArrowSize_Data.Valid = true

	linkDB.Color_Data.String = link.Color
	linkDB.Color_Data.Valid = true

	linkDB.FillOpacity_Data.Float64 = link.FillOpacity
	linkDB.FillOpacity_Data.Valid = true

	linkDB.Stroke_Data.String = link.Stroke
	linkDB.Stroke_Data.Valid = true

	linkDB.StrokeWidth_Data.Float64 = link.StrokeWidth
	linkDB.StrokeWidth_Data.Valid = true

	linkDB.StrokeDashArray_Data.String = link.StrokeDashArray
	linkDB.StrokeDashArray_Data.Valid = true

	linkDB.StrokeDashArrayWhenSelected_Data.String = link.StrokeDashArrayWhenSelected
	linkDB.StrokeDashArrayWhenSelected_Data.Valid = true

	linkDB.Transform_Data.String = link.Transform
	linkDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToLink
func (linkDB *LinkDB) CopyBasicFieldsToLink(link *models.Link) {
	// insertion point for checkout of basic fields (back repo to stage)
	link.Name = linkDB.Name_Data.String
	link.Type.FromString(linkDB.Type_Data.String)
	link.StartAnchorType.FromString(linkDB.StartAnchorType_Data.String)
	link.EndAnchorType.FromString(linkDB.EndAnchorType_Data.String)
	link.StartOrientation.FromString(linkDB.StartOrientation_Data.String)
	link.StartRatio = linkDB.StartRatio_Data.Float64
	link.EndOrientation.FromString(linkDB.EndOrientation_Data.String)
	link.EndRatio = linkDB.EndRatio_Data.Float64
	link.CornerOffsetRatio = linkDB.CornerOffsetRatio_Data.Float64
	link.CornerRadius = linkDB.CornerRadius_Data.Float64
	link.HasEndArrow = linkDB.HasEndArrow_Data.Bool
	link.EndArrowSize = linkDB.EndArrowSize_Data.Float64
	link.Color = linkDB.Color_Data.String
	link.FillOpacity = linkDB.FillOpacity_Data.Float64
	link.Stroke = linkDB.Stroke_Data.String
	link.StrokeWidth = linkDB.StrokeWidth_Data.Float64
	link.StrokeDashArray = linkDB.StrokeDashArray_Data.String
	link.StrokeDashArrayWhenSelected = linkDB.StrokeDashArrayWhenSelected_Data.String
	link.Transform = linkDB.Transform_Data.String
}

// CopyBasicFieldsToLinkWOP
func (linkDB *LinkDB) CopyBasicFieldsToLinkWOP(link *LinkWOP) {
	link.ID = int(linkDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	link.Name = linkDB.Name_Data.String
	link.Type.FromString(linkDB.Type_Data.String)
	link.StartAnchorType.FromString(linkDB.StartAnchorType_Data.String)
	link.EndAnchorType.FromString(linkDB.EndAnchorType_Data.String)
	link.StartOrientation.FromString(linkDB.StartOrientation_Data.String)
	link.StartRatio = linkDB.StartRatio_Data.Float64
	link.EndOrientation.FromString(linkDB.EndOrientation_Data.String)
	link.EndRatio = linkDB.EndRatio_Data.Float64
	link.CornerOffsetRatio = linkDB.CornerOffsetRatio_Data.Float64
	link.CornerRadius = linkDB.CornerRadius_Data.Float64
	link.HasEndArrow = linkDB.HasEndArrow_Data.Bool
	link.EndArrowSize = linkDB.EndArrowSize_Data.Float64
	link.Color = linkDB.Color_Data.String
	link.FillOpacity = linkDB.FillOpacity_Data.Float64
	link.Stroke = linkDB.Stroke_Data.String
	link.StrokeWidth = linkDB.StrokeWidth_Data.Float64
	link.StrokeDashArray = linkDB.StrokeDashArray_Data.String
	link.StrokeDashArrayWhenSelected = linkDB.StrokeDashArrayWhenSelected_Data.String
	link.Transform = linkDB.Transform_Data.String
}

// Backup generates a json file from a slice of all LinkDB instances in the backrepo
func (backRepoLink *BackRepoLinkStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LinkDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LinkDB, 0)
	for _, linkDB := range backRepoLink.Map_LinkDBID_LinkDB {
		forBackup = append(forBackup, linkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Link ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Link file", err.Error())
	}
}

// Backup generates a json file from a slice of all LinkDB instances in the backrepo
func (backRepoLink *BackRepoLinkStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LinkDB, 0)
	for _, linkDB := range backRepoLink.Map_LinkDBID_LinkDB {
		forBackup = append(forBackup, linkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Link")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Link_Fields, -1)
	for _, linkDB := range forBackup {

		var linkWOP LinkWOP
		linkDB.CopyBasicFieldsToLinkWOP(&linkWOP)

		row := sh.AddRow()
		row.WriteStruct(&linkWOP, -1)
	}
}

// RestoreXL from the "Link" sheet all LinkDB instances
func (backRepoLink *BackRepoLinkStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLinkid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Link"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLink.rowVisitorLink)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoLink *BackRepoLinkStruct) rowVisitorLink(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var linkWOP LinkWOP
		row.ReadStruct(&linkWOP)

		// add the unmarshalled struct to the stage
		linkDB := new(LinkDB)
		linkDB.CopyBasicFieldsFromLinkWOP(&linkWOP)

		linkDB_ID_atBackupTime := linkDB.ID
		linkDB.ID = 0
		query := backRepoLink.db.Create(linkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoLink.Map_LinkDBID_LinkDB[linkDB.ID] = linkDB
		BackRepoLinkid_atBckpTime_newID[linkDB_ID_atBackupTime] = linkDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LinkDB.json" in dirPath that stores an array
// of LinkDB and stores it in the database
// the map BackRepoLinkid_atBckpTime_newID is updated accordingly
func (backRepoLink *BackRepoLinkStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLinkid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LinkDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Link file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LinkDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LinkDBID_LinkDB
	for _, linkDB := range forRestore {

		linkDB_ID_atBackupTime := linkDB.ID
		linkDB.ID = 0
		query := backRepoLink.db.Create(linkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoLink.Map_LinkDBID_LinkDB[linkDB.ID] = linkDB
		BackRepoLinkid_atBckpTime_newID[linkDB_ID_atBackupTime] = linkDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Link file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Link>id_atBckpTime_newID
// to compute new index
func (backRepoLink *BackRepoLinkStruct) RestorePhaseTwo() {

	for _, linkDB := range backRepoLink.Map_LinkDBID_LinkDB {

		// next line of code is to avert unused variable compilation error
		_ = linkDB

		// insertion point for reindexing pointers encoding
		// reindexing Start field
		if linkDB.StartID.Int64 != 0 {
			linkDB.StartID.Int64 = int64(BackRepoRectid_atBckpTime_newID[uint(linkDB.StartID.Int64)])
			linkDB.StartID.Valid = true
		}

		// reindexing End field
		if linkDB.EndID.Int64 != 0 {
			linkDB.EndID.Int64 = int64(BackRepoRectid_atBckpTime_newID[uint(linkDB.EndID.Int64)])
			linkDB.EndID.Valid = true
		}

		// This reindex link.Links
		if linkDB.Layer_LinksDBID.Int64 != 0 {
			linkDB.Layer_LinksDBID.Int64 =
				int64(BackRepoLayerid_atBckpTime_newID[uint(linkDB.Layer_LinksDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoLink.db.Model(linkDB).Updates(*linkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLinkid_atBckpTime_newID map[uint]uint
