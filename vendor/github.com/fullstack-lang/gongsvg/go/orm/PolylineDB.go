// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Polyline_sql sql.NullBool
var dummy_Polyline_time time.Duration
var dummy_Polyline_sort sort.Float64Slice

// PolylineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model polylineAPI
type PolylineAPI struct {
	gorm.Model

	models.Polyline

	// encoding of pointers
	PolylinePointersEnconding
}

// PolylinePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PolylinePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Layer{}.Polylines []*Polyline
	Layer_PolylinesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Layer_PolylinesDBID_Index sql.NullInt64
}

// PolylineDB describes a polyline in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model polylineDB
type PolylineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field polylineDB.Name
	Name_Data sql.NullString

	// Declation for basic field polylineDB.Points
	Points_Data sql.NullString

	// Declation for basic field polylineDB.Color
	Color_Data sql.NullString

	// Declation for basic field polylineDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field polylineDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field polylineDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field polylineDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field polylineDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field polylineDB.Transform
	Transform_Data sql.NullString
	// encoding of pointers
	PolylinePointersEnconding
}

// PolylineDBs arrays polylineDBs
// swagger:response polylineDBsResponse
type PolylineDBs []PolylineDB

// PolylineDBResponse provides response
// swagger:response polylineDBResponse
type PolylineDBResponse struct {
	PolylineDB
}

// PolylineWOP is a Polyline without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PolylineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Points string `xlsx:"2"`

	Color string `xlsx:"3"`

	FillOpacity float64 `xlsx:"4"`

	Stroke string `xlsx:"5"`

	StrokeWidth float64 `xlsx:"6"`

	StrokeDashArray string `xlsx:"7"`

	StrokeDashArrayWhenSelected string `xlsx:"8"`

	Transform string `xlsx:"9"`
	// insertion for WOP pointer fields
}

var Polyline_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Points",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoPolylineStruct struct {
	// stores PolylineDB according to their gorm ID
	Map_PolylineDBID_PolylineDB map[uint]*PolylineDB

	// stores PolylineDB ID according to Polyline address
	Map_PolylinePtr_PolylineDBID map[*models.Polyline]uint

	// stores Polyline according to their gorm ID
	Map_PolylineDBID_PolylinePtr map[uint]*models.Polyline

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPolyline *BackRepoPolylineStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPolyline.stage
	return
}

func (backRepoPolyline *BackRepoPolylineStruct) GetDB() *gorm.DB {
	return backRepoPolyline.db
}

// GetPolylineDBFromPolylinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoPolyline *BackRepoPolylineStruct) GetPolylineDBFromPolylinePtr(polyline *models.Polyline) (polylineDB *PolylineDB) {
	id := backRepoPolyline.Map_PolylinePtr_PolylineDBID[polyline]
	polylineDB = backRepoPolyline.Map_PolylineDBID_PolylineDB[id]
	return
}

// BackRepoPolyline.CommitPhaseOne commits all staged instances of Polyline to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPolyline *BackRepoPolylineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for polyline := range stage.Polylines {
		backRepoPolyline.CommitPhaseOneInstance(polyline)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, polyline := range backRepoPolyline.Map_PolylineDBID_PolylinePtr {
		if _, ok := stage.Polylines[polyline]; !ok {
			backRepoPolyline.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPolyline.CommitDeleteInstance commits deletion of Polyline to the BackRepo
func (backRepoPolyline *BackRepoPolylineStruct) CommitDeleteInstance(id uint) (Error error) {

	polyline := backRepoPolyline.Map_PolylineDBID_PolylinePtr[id]

	// polyline is not staged anymore, remove polylineDB
	polylineDB := backRepoPolyline.Map_PolylineDBID_PolylineDB[id]
	query := backRepoPolyline.db.Unscoped().Delete(&polylineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoPolyline.Map_PolylinePtr_PolylineDBID, polyline)
	delete(backRepoPolyline.Map_PolylineDBID_PolylinePtr, id)
	delete(backRepoPolyline.Map_PolylineDBID_PolylineDB, id)

	return
}

// BackRepoPolyline.CommitPhaseOneInstance commits polyline staged instances of Polyline to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPolyline *BackRepoPolylineStruct) CommitPhaseOneInstance(polyline *models.Polyline) (Error error) {

	// check if the polyline is not commited yet
	if _, ok := backRepoPolyline.Map_PolylinePtr_PolylineDBID[polyline]; ok {
		return
	}

	// initiate polyline
	var polylineDB PolylineDB
	polylineDB.CopyBasicFieldsFromPolyline(polyline)

	query := backRepoPolyline.db.Create(&polylineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoPolyline.Map_PolylinePtr_PolylineDBID[polyline] = polylineDB.ID
	backRepoPolyline.Map_PolylineDBID_PolylinePtr[polylineDB.ID] = polyline
	backRepoPolyline.Map_PolylineDBID_PolylineDB[polylineDB.ID] = &polylineDB

	return
}

// BackRepoPolyline.CommitPhaseTwo commits all staged instances of Polyline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPolyline *BackRepoPolylineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, polyline := range backRepoPolyline.Map_PolylineDBID_PolylinePtr {
		backRepoPolyline.CommitPhaseTwoInstance(backRepo, idx, polyline)
	}

	return
}

// BackRepoPolyline.CommitPhaseTwoInstance commits {{structname }} of models.Polyline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPolyline *BackRepoPolylineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, polyline *models.Polyline) (Error error) {

	// fetch matching polylineDB
	if polylineDB, ok := backRepoPolyline.Map_PolylineDBID_PolylineDB[idx]; ok {

		polylineDB.CopyBasicFieldsFromPolyline(polyline)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers polyline.Animates into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, animateAssocEnd := range polyline.Animates {

			// get the back repo instance at the association end
			animateAssocEnd_DB :=
				backRepo.BackRepoAnimate.GetAnimateDBFromAnimatePtr(animateAssocEnd)

			// encode reverse pointer in the association end back repo instance
			animateAssocEnd_DB.Polyline_AnimatesDBID.Int64 = int64(polylineDB.ID)
			animateAssocEnd_DB.Polyline_AnimatesDBID.Valid = true
			animateAssocEnd_DB.Polyline_AnimatesDBID_Index.Int64 = int64(idx)
			animateAssocEnd_DB.Polyline_AnimatesDBID_Index.Valid = true
			if q := backRepoPolyline.db.Save(animateAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoPolyline.db.Save(&polylineDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Polyline intance %s", polyline.Name))
		return err
	}

	return
}

// BackRepoPolyline.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPolyline *BackRepoPolylineStruct) CheckoutPhaseOne() (Error error) {

	polylineDBArray := make([]PolylineDB, 0)
	query := backRepoPolyline.db.Find(&polylineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	polylineInstancesToBeRemovedFromTheStage := make(map[*models.Polyline]any)
	for key, value := range backRepoPolyline.stage.Polylines {
		polylineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, polylineDB := range polylineDBArray {
		backRepoPolyline.CheckoutPhaseOneInstance(&polylineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		polyline, ok := backRepoPolyline.Map_PolylineDBID_PolylinePtr[polylineDB.ID]
		if ok {
			delete(polylineInstancesToBeRemovedFromTheStage, polyline)
		}
	}

	// remove from stage and back repo's 3 maps all polylines that are not in the checkout
	for polyline := range polylineInstancesToBeRemovedFromTheStage {
		polyline.Unstage(backRepoPolyline.GetStage())

		// remove instance from the back repo 3 maps
		polylineID := backRepoPolyline.Map_PolylinePtr_PolylineDBID[polyline]
		delete(backRepoPolyline.Map_PolylinePtr_PolylineDBID, polyline)
		delete(backRepoPolyline.Map_PolylineDBID_PolylineDB, polylineID)
		delete(backRepoPolyline.Map_PolylineDBID_PolylinePtr, polylineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a polylineDB that has been found in the DB, updates the backRepo and stages the
// models version of the polylineDB
func (backRepoPolyline *BackRepoPolylineStruct) CheckoutPhaseOneInstance(polylineDB *PolylineDB) (Error error) {

	polyline, ok := backRepoPolyline.Map_PolylineDBID_PolylinePtr[polylineDB.ID]
	if !ok {
		polyline = new(models.Polyline)

		backRepoPolyline.Map_PolylineDBID_PolylinePtr[polylineDB.ID] = polyline
		backRepoPolyline.Map_PolylinePtr_PolylineDBID[polyline] = polylineDB.ID

		// append model store with the new element
		polyline.Name = polylineDB.Name_Data.String
		polyline.Stage(backRepoPolyline.GetStage())
	}
	polylineDB.CopyBasicFieldsToPolyline(polyline)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	polyline.Stage(backRepoPolyline.GetStage())

	// preserve pointer to polylineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PolylineDBID_PolylineDB)[polylineDB hold variable pointers
	polylineDB_Data := *polylineDB
	preservedPtrToPolyline := &polylineDB_Data
	backRepoPolyline.Map_PolylineDBID_PolylineDB[polylineDB.ID] = preservedPtrToPolyline

	return
}

// BackRepoPolyline.CheckoutPhaseTwo Checkouts all staged instances of Polyline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPolyline *BackRepoPolylineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, polylineDB := range backRepoPolyline.Map_PolylineDBID_PolylineDB {
		backRepoPolyline.CheckoutPhaseTwoInstance(backRepo, polylineDB)
	}
	return
}

// BackRepoPolyline.CheckoutPhaseTwoInstance Checkouts staged instances of Polyline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPolyline *BackRepoPolylineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, polylineDB *PolylineDB) (Error error) {

	polyline := backRepoPolyline.Map_PolylineDBID_PolylinePtr[polylineDB.ID]
	_ = polyline // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem polyline.Animates in the stage from the encode in the back repo
	// It parses all AnimateDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	polyline.Animates = polyline.Animates[:0]
	// 2. loop all instances in the type in the association end
	for _, animateDB_AssocEnd := range backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if animateDB_AssocEnd.Polyline_AnimatesDBID.Int64 == int64(polylineDB.ID) {
			// 4. fetch the associated instance in the stage
			animate_AssocEnd := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimatePtr[animateDB_AssocEnd.ID]
			// 5. append it the association slice
			polyline.Animates = append(polyline.Animates, animate_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(polyline.Animates, func(i, j int) bool {
		animateDB_i_ID := backRepo.BackRepoAnimate.Map_AnimatePtr_AnimateDBID[polyline.Animates[i]]
		animateDB_j_ID := backRepo.BackRepoAnimate.Map_AnimatePtr_AnimateDBID[polyline.Animates[j]]

		animateDB_i := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB[animateDB_i_ID]
		animateDB_j := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB[animateDB_j_ID]

		return animateDB_i.Polyline_AnimatesDBID_Index.Int64 < animateDB_j.Polyline_AnimatesDBID_Index.Int64
	})

	return
}

// CommitPolyline allows commit of a single polyline (if already staged)
func (backRepo *BackRepoStruct) CommitPolyline(polyline *models.Polyline) {
	backRepo.BackRepoPolyline.CommitPhaseOneInstance(polyline)
	if id, ok := backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID[polyline]; ok {
		backRepo.BackRepoPolyline.CommitPhaseTwoInstance(backRepo, id, polyline)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPolyline allows checkout of a single polyline (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPolyline(polyline *models.Polyline) {
	// check if the polyline is staged
	if _, ok := backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID[polyline]; ok {

		if id, ok := backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID[polyline]; ok {
			var polylineDB PolylineDB
			polylineDB.ID = id

			if err := backRepo.BackRepoPolyline.db.First(&polylineDB, id).Error; err != nil {
				log.Panicln("CheckoutPolyline : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPolyline.CheckoutPhaseOneInstance(&polylineDB)
			backRepo.BackRepoPolyline.CheckoutPhaseTwoInstance(backRepo, &polylineDB)
		}
	}
}

// CopyBasicFieldsFromPolyline
func (polylineDB *PolylineDB) CopyBasicFieldsFromPolyline(polyline *models.Polyline) {
	// insertion point for fields commit

	polylineDB.Name_Data.String = polyline.Name
	polylineDB.Name_Data.Valid = true

	polylineDB.Points_Data.String = polyline.Points
	polylineDB.Points_Data.Valid = true

	polylineDB.Color_Data.String = polyline.Color
	polylineDB.Color_Data.Valid = true

	polylineDB.FillOpacity_Data.Float64 = polyline.FillOpacity
	polylineDB.FillOpacity_Data.Valid = true

	polylineDB.Stroke_Data.String = polyline.Stroke
	polylineDB.Stroke_Data.Valid = true

	polylineDB.StrokeWidth_Data.Float64 = polyline.StrokeWidth
	polylineDB.StrokeWidth_Data.Valid = true

	polylineDB.StrokeDashArray_Data.String = polyline.StrokeDashArray
	polylineDB.StrokeDashArray_Data.Valid = true

	polylineDB.StrokeDashArrayWhenSelected_Data.String = polyline.StrokeDashArrayWhenSelected
	polylineDB.StrokeDashArrayWhenSelected_Data.Valid = true

	polylineDB.Transform_Data.String = polyline.Transform
	polylineDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromPolylineWOP
func (polylineDB *PolylineDB) CopyBasicFieldsFromPolylineWOP(polyline *PolylineWOP) {
	// insertion point for fields commit

	polylineDB.Name_Data.String = polyline.Name
	polylineDB.Name_Data.Valid = true

	polylineDB.Points_Data.String = polyline.Points
	polylineDB.Points_Data.Valid = true

	polylineDB.Color_Data.String = polyline.Color
	polylineDB.Color_Data.Valid = true

	polylineDB.FillOpacity_Data.Float64 = polyline.FillOpacity
	polylineDB.FillOpacity_Data.Valid = true

	polylineDB.Stroke_Data.String = polyline.Stroke
	polylineDB.Stroke_Data.Valid = true

	polylineDB.StrokeWidth_Data.Float64 = polyline.StrokeWidth
	polylineDB.StrokeWidth_Data.Valid = true

	polylineDB.StrokeDashArray_Data.String = polyline.StrokeDashArray
	polylineDB.StrokeDashArray_Data.Valid = true

	polylineDB.StrokeDashArrayWhenSelected_Data.String = polyline.StrokeDashArrayWhenSelected
	polylineDB.StrokeDashArrayWhenSelected_Data.Valid = true

	polylineDB.Transform_Data.String = polyline.Transform
	polylineDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToPolyline
func (polylineDB *PolylineDB) CopyBasicFieldsToPolyline(polyline *models.Polyline) {
	// insertion point for checkout of basic fields (back repo to stage)
	polyline.Name = polylineDB.Name_Data.String
	polyline.Points = polylineDB.Points_Data.String
	polyline.Color = polylineDB.Color_Data.String
	polyline.FillOpacity = polylineDB.FillOpacity_Data.Float64
	polyline.Stroke = polylineDB.Stroke_Data.String
	polyline.StrokeWidth = polylineDB.StrokeWidth_Data.Float64
	polyline.StrokeDashArray = polylineDB.StrokeDashArray_Data.String
	polyline.StrokeDashArrayWhenSelected = polylineDB.StrokeDashArrayWhenSelected_Data.String
	polyline.Transform = polylineDB.Transform_Data.String
}

// CopyBasicFieldsToPolylineWOP
func (polylineDB *PolylineDB) CopyBasicFieldsToPolylineWOP(polyline *PolylineWOP) {
	polyline.ID = int(polylineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	polyline.Name = polylineDB.Name_Data.String
	polyline.Points = polylineDB.Points_Data.String
	polyline.Color = polylineDB.Color_Data.String
	polyline.FillOpacity = polylineDB.FillOpacity_Data.Float64
	polyline.Stroke = polylineDB.Stroke_Data.String
	polyline.StrokeWidth = polylineDB.StrokeWidth_Data.Float64
	polyline.StrokeDashArray = polylineDB.StrokeDashArray_Data.String
	polyline.StrokeDashArrayWhenSelected = polylineDB.StrokeDashArrayWhenSelected_Data.String
	polyline.Transform = polylineDB.Transform_Data.String
}

// Backup generates a json file from a slice of all PolylineDB instances in the backrepo
func (backRepoPolyline *BackRepoPolylineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PolylineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PolylineDB, 0)
	for _, polylineDB := range backRepoPolyline.Map_PolylineDBID_PolylineDB {
		forBackup = append(forBackup, polylineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Polyline ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Polyline file", err.Error())
	}
}

// Backup generates a json file from a slice of all PolylineDB instances in the backrepo
func (backRepoPolyline *BackRepoPolylineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PolylineDB, 0)
	for _, polylineDB := range backRepoPolyline.Map_PolylineDBID_PolylineDB {
		forBackup = append(forBackup, polylineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Polyline")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Polyline_Fields, -1)
	for _, polylineDB := range forBackup {

		var polylineWOP PolylineWOP
		polylineDB.CopyBasicFieldsToPolylineWOP(&polylineWOP)

		row := sh.AddRow()
		row.WriteStruct(&polylineWOP, -1)
	}
}

// RestoreXL from the "Polyline" sheet all PolylineDB instances
func (backRepoPolyline *BackRepoPolylineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPolylineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Polyline"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPolyline.rowVisitorPolyline)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoPolyline *BackRepoPolylineStruct) rowVisitorPolyline(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var polylineWOP PolylineWOP
		row.ReadStruct(&polylineWOP)

		// add the unmarshalled struct to the stage
		polylineDB := new(PolylineDB)
		polylineDB.CopyBasicFieldsFromPolylineWOP(&polylineWOP)

		polylineDB_ID_atBackupTime := polylineDB.ID
		polylineDB.ID = 0
		query := backRepoPolyline.db.Create(polylineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoPolyline.Map_PolylineDBID_PolylineDB[polylineDB.ID] = polylineDB
		BackRepoPolylineid_atBckpTime_newID[polylineDB_ID_atBackupTime] = polylineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PolylineDB.json" in dirPath that stores an array
// of PolylineDB and stores it in the database
// the map BackRepoPolylineid_atBckpTime_newID is updated accordingly
func (backRepoPolyline *BackRepoPolylineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPolylineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PolylineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Polyline file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PolylineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PolylineDBID_PolylineDB
	for _, polylineDB := range forRestore {

		polylineDB_ID_atBackupTime := polylineDB.ID
		polylineDB.ID = 0
		query := backRepoPolyline.db.Create(polylineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoPolyline.Map_PolylineDBID_PolylineDB[polylineDB.ID] = polylineDB
		BackRepoPolylineid_atBckpTime_newID[polylineDB_ID_atBackupTime] = polylineDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Polyline file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Polyline>id_atBckpTime_newID
// to compute new index
func (backRepoPolyline *BackRepoPolylineStruct) RestorePhaseTwo() {

	for _, polylineDB := range backRepoPolyline.Map_PolylineDBID_PolylineDB {

		// next line of code is to avert unused variable compilation error
		_ = polylineDB

		// insertion point for reindexing pointers encoding
		// This reindex polyline.Polylines
		if polylineDB.Layer_PolylinesDBID.Int64 != 0 {
			polylineDB.Layer_PolylinesDBID.Int64 =
				int64(BackRepoLayerid_atBckpTime_newID[uint(polylineDB.Layer_PolylinesDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoPolyline.db.Model(polylineDB).Updates(*polylineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPolylineid_atBckpTime_newID map[uint]uint
