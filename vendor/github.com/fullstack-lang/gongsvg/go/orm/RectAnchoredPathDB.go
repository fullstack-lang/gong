// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_RectAnchoredPath_sql sql.NullBool
var dummy_RectAnchoredPath_time time.Duration
var dummy_RectAnchoredPath_sort sort.Float64Slice

// RectAnchoredPathAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model rectanchoredpathAPI
type RectAnchoredPathAPI struct {
	gorm.Model

	models.RectAnchoredPath_WOP

	// encoding of pointers
	RectAnchoredPathPointersEncoding RectAnchoredPathPointersEncoding
}

// RectAnchoredPathPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RectAnchoredPathPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// RectAnchoredPathDB describes a rectanchoredpath in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model rectanchoredpathDB
type RectAnchoredPathDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field rectanchoredpathDB.Name
	Name_Data sql.NullString

	// Declation for basic field rectanchoredpathDB.Definition
	Definition_Data sql.NullString

	// Declation for basic field rectanchoredpathDB.X_Offset
	X_Offset_Data sql.NullFloat64

	// Declation for basic field rectanchoredpathDB.Y_Offset
	Y_Offset_Data sql.NullFloat64

	// Declation for basic field rectanchoredpathDB.RectAnchorType
	RectAnchorType_Data sql.NullString

	// Declation for basic field rectanchoredpathDB.ScalePropotionnally
	// provide the sql storage for the boolan
	ScalePropotionnally_Data sql.NullBool

	// Declation for basic field rectanchoredpathDB.AppliedScaling
	AppliedScaling_Data sql.NullFloat64

	// Declation for basic field rectanchoredpathDB.Color
	Color_Data sql.NullString

	// Declation for basic field rectanchoredpathDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field rectanchoredpathDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field rectanchoredpathDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field rectanchoredpathDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field rectanchoredpathDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field rectanchoredpathDB.Transform
	Transform_Data sql.NullString
	// encoding of pointers
	RectAnchoredPathPointersEncoding
}

// RectAnchoredPathDBs arrays rectanchoredpathDBs
// swagger:response rectanchoredpathDBsResponse
type RectAnchoredPathDBs []RectAnchoredPathDB

// RectAnchoredPathDBResponse provides response
// swagger:response rectanchoredpathDBResponse
type RectAnchoredPathDBResponse struct {
	RectAnchoredPathDB
}

// RectAnchoredPathWOP is a RectAnchoredPath without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RectAnchoredPathWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Definition string `xlsx:"2"`

	X_Offset float64 `xlsx:"3"`

	Y_Offset float64 `xlsx:"4"`

	RectAnchorType models.RectAnchorType `xlsx:"5"`

	ScalePropotionnally bool `xlsx:"6"`

	AppliedScaling float64 `xlsx:"7"`

	Color string `xlsx:"8"`

	FillOpacity float64 `xlsx:"9"`

	Stroke string `xlsx:"10"`

	StrokeWidth float64 `xlsx:"11"`

	StrokeDashArray string `xlsx:"12"`

	StrokeDashArrayWhenSelected string `xlsx:"13"`

	Transform string `xlsx:"14"`
	// insertion for WOP pointer fields
}

var RectAnchoredPath_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Definition",
	"X_Offset",
	"Y_Offset",
	"RectAnchorType",
	"ScalePropotionnally",
	"AppliedScaling",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoRectAnchoredPathStruct struct {
	// stores RectAnchoredPathDB according to their gorm ID
	Map_RectAnchoredPathDBID_RectAnchoredPathDB map[uint]*RectAnchoredPathDB

	// stores RectAnchoredPathDB ID according to RectAnchoredPath address
	Map_RectAnchoredPathPtr_RectAnchoredPathDBID map[*models.RectAnchoredPath]uint

	// stores RectAnchoredPath according to their gorm ID
	Map_RectAnchoredPathDBID_RectAnchoredPathPtr map[uint]*models.RectAnchoredPath

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRectAnchoredPath.stage
	return
}

func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) GetDB() *gorm.DB {
	return backRepoRectAnchoredPath.db
}

// GetRectAnchoredPathDBFromRectAnchoredPathPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) GetRectAnchoredPathDBFromRectAnchoredPathPtr(rectanchoredpath *models.RectAnchoredPath) (rectanchoredpathDB *RectAnchoredPathDB) {
	id := backRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID[rectanchoredpath]
	rectanchoredpathDB = backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB[id]
	return
}

// BackRepoRectAnchoredPath.CommitPhaseOne commits all staged instances of RectAnchoredPath to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for rectanchoredpath := range stage.RectAnchoredPaths {
		backRepoRectAnchoredPath.CommitPhaseOneInstance(rectanchoredpath)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, rectanchoredpath := range backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr {
		if _, ok := stage.RectAnchoredPaths[rectanchoredpath]; !ok {
			backRepoRectAnchoredPath.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRectAnchoredPath.CommitDeleteInstance commits deletion of RectAnchoredPath to the BackRepo
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CommitDeleteInstance(id uint) (Error error) {

	rectanchoredpath := backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr[id]

	// rectanchoredpath is not staged anymore, remove rectanchoredpathDB
	rectanchoredpathDB := backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB[id]
	query := backRepoRectAnchoredPath.db.Unscoped().Delete(&rectanchoredpathDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID, rectanchoredpath)
	delete(backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr, id)
	delete(backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB, id)

	return
}

// BackRepoRectAnchoredPath.CommitPhaseOneInstance commits rectanchoredpath staged instances of RectAnchoredPath to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CommitPhaseOneInstance(rectanchoredpath *models.RectAnchoredPath) (Error error) {

	// check if the rectanchoredpath is not commited yet
	if _, ok := backRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID[rectanchoredpath]; ok {
		return
	}

	// initiate rectanchoredpath
	var rectanchoredpathDB RectAnchoredPathDB
	rectanchoredpathDB.CopyBasicFieldsFromRectAnchoredPath(rectanchoredpath)

	query := backRepoRectAnchoredPath.db.Create(&rectanchoredpathDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID[rectanchoredpath] = rectanchoredpathDB.ID
	backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr[rectanchoredpathDB.ID] = rectanchoredpath
	backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB[rectanchoredpathDB.ID] = &rectanchoredpathDB

	return
}

// BackRepoRectAnchoredPath.CommitPhaseTwo commits all staged instances of RectAnchoredPath to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, rectanchoredpath := range backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr {
		backRepoRectAnchoredPath.CommitPhaseTwoInstance(backRepo, idx, rectanchoredpath)
	}

	return
}

// BackRepoRectAnchoredPath.CommitPhaseTwoInstance commits {{structname }} of models.RectAnchoredPath to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, rectanchoredpath *models.RectAnchoredPath) (Error error) {

	// fetch matching rectanchoredpathDB
	if rectanchoredpathDB, ok := backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB[idx]; ok {

		rectanchoredpathDB.CopyBasicFieldsFromRectAnchoredPath(rectanchoredpath)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoRectAnchoredPath.db.Save(&rectanchoredpathDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown RectAnchoredPath intance %s", rectanchoredpath.Name))
		return err
	}

	return
}

// BackRepoRectAnchoredPath.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CheckoutPhaseOne() (Error error) {

	rectanchoredpathDBArray := make([]RectAnchoredPathDB, 0)
	query := backRepoRectAnchoredPath.db.Find(&rectanchoredpathDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	rectanchoredpathInstancesToBeRemovedFromTheStage := make(map[*models.RectAnchoredPath]any)
	for key, value := range backRepoRectAnchoredPath.stage.RectAnchoredPaths {
		rectanchoredpathInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, rectanchoredpathDB := range rectanchoredpathDBArray {
		backRepoRectAnchoredPath.CheckoutPhaseOneInstance(&rectanchoredpathDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		rectanchoredpath, ok := backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr[rectanchoredpathDB.ID]
		if ok {
			delete(rectanchoredpathInstancesToBeRemovedFromTheStage, rectanchoredpath)
		}
	}

	// remove from stage and back repo's 3 maps all rectanchoredpaths that are not in the checkout
	for rectanchoredpath := range rectanchoredpathInstancesToBeRemovedFromTheStage {
		rectanchoredpath.Unstage(backRepoRectAnchoredPath.GetStage())

		// remove instance from the back repo 3 maps
		rectanchoredpathID := backRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID[rectanchoredpath]
		delete(backRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID, rectanchoredpath)
		delete(backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB, rectanchoredpathID)
		delete(backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr, rectanchoredpathID)
	}

	return
}

// CheckoutPhaseOneInstance takes a rectanchoredpathDB that has been found in the DB, updates the backRepo and stages the
// models version of the rectanchoredpathDB
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CheckoutPhaseOneInstance(rectanchoredpathDB *RectAnchoredPathDB) (Error error) {

	rectanchoredpath, ok := backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr[rectanchoredpathDB.ID]
	if !ok {
		rectanchoredpath = new(models.RectAnchoredPath)

		backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr[rectanchoredpathDB.ID] = rectanchoredpath
		backRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID[rectanchoredpath] = rectanchoredpathDB.ID

		// append model store with the new element
		rectanchoredpath.Name = rectanchoredpathDB.Name_Data.String
		rectanchoredpath.Stage(backRepoRectAnchoredPath.GetStage())
	}
	rectanchoredpathDB.CopyBasicFieldsToRectAnchoredPath(rectanchoredpath)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	rectanchoredpath.Stage(backRepoRectAnchoredPath.GetStage())

	// preserve pointer to rectanchoredpathDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RectAnchoredPathDBID_RectAnchoredPathDB)[rectanchoredpathDB hold variable pointers
	rectanchoredpathDB_Data := *rectanchoredpathDB
	preservedPtrToRectAnchoredPath := &rectanchoredpathDB_Data
	backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB[rectanchoredpathDB.ID] = preservedPtrToRectAnchoredPath

	return
}

// BackRepoRectAnchoredPath.CheckoutPhaseTwo Checkouts all staged instances of RectAnchoredPath to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, rectanchoredpathDB := range backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB {
		backRepoRectAnchoredPath.CheckoutPhaseTwoInstance(backRepo, rectanchoredpathDB)
	}
	return
}

// BackRepoRectAnchoredPath.CheckoutPhaseTwoInstance Checkouts staged instances of RectAnchoredPath to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, rectanchoredpathDB *RectAnchoredPathDB) (Error error) {

	rectanchoredpath := backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr[rectanchoredpathDB.ID]

	rectanchoredpathDB.DecodePointers(backRepo, rectanchoredpath)

	return
}

func (rectanchoredpathDB *RectAnchoredPathDB) DecodePointers(backRepo *BackRepoStruct, rectanchoredpath *models.RectAnchoredPath) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitRectAnchoredPath allows commit of a single rectanchoredpath (if already staged)
func (backRepo *BackRepoStruct) CommitRectAnchoredPath(rectanchoredpath *models.RectAnchoredPath) {
	backRepo.BackRepoRectAnchoredPath.CommitPhaseOneInstance(rectanchoredpath)
	if id, ok := backRepo.BackRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID[rectanchoredpath]; ok {
		backRepo.BackRepoRectAnchoredPath.CommitPhaseTwoInstance(backRepo, id, rectanchoredpath)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRectAnchoredPath allows checkout of a single rectanchoredpath (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRectAnchoredPath(rectanchoredpath *models.RectAnchoredPath) {
	// check if the rectanchoredpath is staged
	if _, ok := backRepo.BackRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID[rectanchoredpath]; ok {

		if id, ok := backRepo.BackRepoRectAnchoredPath.Map_RectAnchoredPathPtr_RectAnchoredPathDBID[rectanchoredpath]; ok {
			var rectanchoredpathDB RectAnchoredPathDB
			rectanchoredpathDB.ID = id

			if err := backRepo.BackRepoRectAnchoredPath.db.First(&rectanchoredpathDB, id).Error; err != nil {
				log.Fatalln("CheckoutRectAnchoredPath : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRectAnchoredPath.CheckoutPhaseOneInstance(&rectanchoredpathDB)
			backRepo.BackRepoRectAnchoredPath.CheckoutPhaseTwoInstance(backRepo, &rectanchoredpathDB)
		}
	}
}

// CopyBasicFieldsFromRectAnchoredPath
func (rectanchoredpathDB *RectAnchoredPathDB) CopyBasicFieldsFromRectAnchoredPath(rectanchoredpath *models.RectAnchoredPath) {
	// insertion point for fields commit

	rectanchoredpathDB.Name_Data.String = rectanchoredpath.Name
	rectanchoredpathDB.Name_Data.Valid = true

	rectanchoredpathDB.Definition_Data.String = rectanchoredpath.Definition
	rectanchoredpathDB.Definition_Data.Valid = true

	rectanchoredpathDB.X_Offset_Data.Float64 = rectanchoredpath.X_Offset
	rectanchoredpathDB.X_Offset_Data.Valid = true

	rectanchoredpathDB.Y_Offset_Data.Float64 = rectanchoredpath.Y_Offset
	rectanchoredpathDB.Y_Offset_Data.Valid = true

	rectanchoredpathDB.RectAnchorType_Data.String = rectanchoredpath.RectAnchorType.ToString()
	rectanchoredpathDB.RectAnchorType_Data.Valid = true

	rectanchoredpathDB.ScalePropotionnally_Data.Bool = rectanchoredpath.ScalePropotionnally
	rectanchoredpathDB.ScalePropotionnally_Data.Valid = true

	rectanchoredpathDB.AppliedScaling_Data.Float64 = rectanchoredpath.AppliedScaling
	rectanchoredpathDB.AppliedScaling_Data.Valid = true

	rectanchoredpathDB.Color_Data.String = rectanchoredpath.Color
	rectanchoredpathDB.Color_Data.Valid = true

	rectanchoredpathDB.FillOpacity_Data.Float64 = rectanchoredpath.FillOpacity
	rectanchoredpathDB.FillOpacity_Data.Valid = true

	rectanchoredpathDB.Stroke_Data.String = rectanchoredpath.Stroke
	rectanchoredpathDB.Stroke_Data.Valid = true

	rectanchoredpathDB.StrokeWidth_Data.Float64 = rectanchoredpath.StrokeWidth
	rectanchoredpathDB.StrokeWidth_Data.Valid = true

	rectanchoredpathDB.StrokeDashArray_Data.String = rectanchoredpath.StrokeDashArray
	rectanchoredpathDB.StrokeDashArray_Data.Valid = true

	rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.String = rectanchoredpath.StrokeDashArrayWhenSelected
	rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rectanchoredpathDB.Transform_Data.String = rectanchoredpath.Transform
	rectanchoredpathDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromRectAnchoredPath_WOP
func (rectanchoredpathDB *RectAnchoredPathDB) CopyBasicFieldsFromRectAnchoredPath_WOP(rectanchoredpath *models.RectAnchoredPath_WOP) {
	// insertion point for fields commit

	rectanchoredpathDB.Name_Data.String = rectanchoredpath.Name
	rectanchoredpathDB.Name_Data.Valid = true

	rectanchoredpathDB.Definition_Data.String = rectanchoredpath.Definition
	rectanchoredpathDB.Definition_Data.Valid = true

	rectanchoredpathDB.X_Offset_Data.Float64 = rectanchoredpath.X_Offset
	rectanchoredpathDB.X_Offset_Data.Valid = true

	rectanchoredpathDB.Y_Offset_Data.Float64 = rectanchoredpath.Y_Offset
	rectanchoredpathDB.Y_Offset_Data.Valid = true

	rectanchoredpathDB.RectAnchorType_Data.String = rectanchoredpath.RectAnchorType.ToString()
	rectanchoredpathDB.RectAnchorType_Data.Valid = true

	rectanchoredpathDB.ScalePropotionnally_Data.Bool = rectanchoredpath.ScalePropotionnally
	rectanchoredpathDB.ScalePropotionnally_Data.Valid = true

	rectanchoredpathDB.AppliedScaling_Data.Float64 = rectanchoredpath.AppliedScaling
	rectanchoredpathDB.AppliedScaling_Data.Valid = true

	rectanchoredpathDB.Color_Data.String = rectanchoredpath.Color
	rectanchoredpathDB.Color_Data.Valid = true

	rectanchoredpathDB.FillOpacity_Data.Float64 = rectanchoredpath.FillOpacity
	rectanchoredpathDB.FillOpacity_Data.Valid = true

	rectanchoredpathDB.Stroke_Data.String = rectanchoredpath.Stroke
	rectanchoredpathDB.Stroke_Data.Valid = true

	rectanchoredpathDB.StrokeWidth_Data.Float64 = rectanchoredpath.StrokeWidth
	rectanchoredpathDB.StrokeWidth_Data.Valid = true

	rectanchoredpathDB.StrokeDashArray_Data.String = rectanchoredpath.StrokeDashArray
	rectanchoredpathDB.StrokeDashArray_Data.Valid = true

	rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.String = rectanchoredpath.StrokeDashArrayWhenSelected
	rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rectanchoredpathDB.Transform_Data.String = rectanchoredpath.Transform
	rectanchoredpathDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromRectAnchoredPathWOP
func (rectanchoredpathDB *RectAnchoredPathDB) CopyBasicFieldsFromRectAnchoredPathWOP(rectanchoredpath *RectAnchoredPathWOP) {
	// insertion point for fields commit

	rectanchoredpathDB.Name_Data.String = rectanchoredpath.Name
	rectanchoredpathDB.Name_Data.Valid = true

	rectanchoredpathDB.Definition_Data.String = rectanchoredpath.Definition
	rectanchoredpathDB.Definition_Data.Valid = true

	rectanchoredpathDB.X_Offset_Data.Float64 = rectanchoredpath.X_Offset
	rectanchoredpathDB.X_Offset_Data.Valid = true

	rectanchoredpathDB.Y_Offset_Data.Float64 = rectanchoredpath.Y_Offset
	rectanchoredpathDB.Y_Offset_Data.Valid = true

	rectanchoredpathDB.RectAnchorType_Data.String = rectanchoredpath.RectAnchorType.ToString()
	rectanchoredpathDB.RectAnchorType_Data.Valid = true

	rectanchoredpathDB.ScalePropotionnally_Data.Bool = rectanchoredpath.ScalePropotionnally
	rectanchoredpathDB.ScalePropotionnally_Data.Valid = true

	rectanchoredpathDB.AppliedScaling_Data.Float64 = rectanchoredpath.AppliedScaling
	rectanchoredpathDB.AppliedScaling_Data.Valid = true

	rectanchoredpathDB.Color_Data.String = rectanchoredpath.Color
	rectanchoredpathDB.Color_Data.Valid = true

	rectanchoredpathDB.FillOpacity_Data.Float64 = rectanchoredpath.FillOpacity
	rectanchoredpathDB.FillOpacity_Data.Valid = true

	rectanchoredpathDB.Stroke_Data.String = rectanchoredpath.Stroke
	rectanchoredpathDB.Stroke_Data.Valid = true

	rectanchoredpathDB.StrokeWidth_Data.Float64 = rectanchoredpath.StrokeWidth
	rectanchoredpathDB.StrokeWidth_Data.Valid = true

	rectanchoredpathDB.StrokeDashArray_Data.String = rectanchoredpath.StrokeDashArray
	rectanchoredpathDB.StrokeDashArray_Data.Valid = true

	rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.String = rectanchoredpath.StrokeDashArrayWhenSelected
	rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rectanchoredpathDB.Transform_Data.String = rectanchoredpath.Transform
	rectanchoredpathDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToRectAnchoredPath
func (rectanchoredpathDB *RectAnchoredPathDB) CopyBasicFieldsToRectAnchoredPath(rectanchoredpath *models.RectAnchoredPath) {
	// insertion point for checkout of basic fields (back repo to stage)
	rectanchoredpath.Name = rectanchoredpathDB.Name_Data.String
	rectanchoredpath.Definition = rectanchoredpathDB.Definition_Data.String
	rectanchoredpath.X_Offset = rectanchoredpathDB.X_Offset_Data.Float64
	rectanchoredpath.Y_Offset = rectanchoredpathDB.Y_Offset_Data.Float64
	rectanchoredpath.RectAnchorType.FromString(rectanchoredpathDB.RectAnchorType_Data.String)
	rectanchoredpath.ScalePropotionnally = rectanchoredpathDB.ScalePropotionnally_Data.Bool
	rectanchoredpath.AppliedScaling = rectanchoredpathDB.AppliedScaling_Data.Float64
	rectanchoredpath.Color = rectanchoredpathDB.Color_Data.String
	rectanchoredpath.FillOpacity = rectanchoredpathDB.FillOpacity_Data.Float64
	rectanchoredpath.Stroke = rectanchoredpathDB.Stroke_Data.String
	rectanchoredpath.StrokeWidth = rectanchoredpathDB.StrokeWidth_Data.Float64
	rectanchoredpath.StrokeDashArray = rectanchoredpathDB.StrokeDashArray_Data.String
	rectanchoredpath.StrokeDashArrayWhenSelected = rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.String
	rectanchoredpath.Transform = rectanchoredpathDB.Transform_Data.String
}

// CopyBasicFieldsToRectAnchoredPath_WOP
func (rectanchoredpathDB *RectAnchoredPathDB) CopyBasicFieldsToRectAnchoredPath_WOP(rectanchoredpath *models.RectAnchoredPath_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	rectanchoredpath.Name = rectanchoredpathDB.Name_Data.String
	rectanchoredpath.Definition = rectanchoredpathDB.Definition_Data.String
	rectanchoredpath.X_Offset = rectanchoredpathDB.X_Offset_Data.Float64
	rectanchoredpath.Y_Offset = rectanchoredpathDB.Y_Offset_Data.Float64
	rectanchoredpath.RectAnchorType.FromString(rectanchoredpathDB.RectAnchorType_Data.String)
	rectanchoredpath.ScalePropotionnally = rectanchoredpathDB.ScalePropotionnally_Data.Bool
	rectanchoredpath.AppliedScaling = rectanchoredpathDB.AppliedScaling_Data.Float64
	rectanchoredpath.Color = rectanchoredpathDB.Color_Data.String
	rectanchoredpath.FillOpacity = rectanchoredpathDB.FillOpacity_Data.Float64
	rectanchoredpath.Stroke = rectanchoredpathDB.Stroke_Data.String
	rectanchoredpath.StrokeWidth = rectanchoredpathDB.StrokeWidth_Data.Float64
	rectanchoredpath.StrokeDashArray = rectanchoredpathDB.StrokeDashArray_Data.String
	rectanchoredpath.StrokeDashArrayWhenSelected = rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.String
	rectanchoredpath.Transform = rectanchoredpathDB.Transform_Data.String
}

// CopyBasicFieldsToRectAnchoredPathWOP
func (rectanchoredpathDB *RectAnchoredPathDB) CopyBasicFieldsToRectAnchoredPathWOP(rectanchoredpath *RectAnchoredPathWOP) {
	rectanchoredpath.ID = int(rectanchoredpathDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	rectanchoredpath.Name = rectanchoredpathDB.Name_Data.String
	rectanchoredpath.Definition = rectanchoredpathDB.Definition_Data.String
	rectanchoredpath.X_Offset = rectanchoredpathDB.X_Offset_Data.Float64
	rectanchoredpath.Y_Offset = rectanchoredpathDB.Y_Offset_Data.Float64
	rectanchoredpath.RectAnchorType.FromString(rectanchoredpathDB.RectAnchorType_Data.String)
	rectanchoredpath.ScalePropotionnally = rectanchoredpathDB.ScalePropotionnally_Data.Bool
	rectanchoredpath.AppliedScaling = rectanchoredpathDB.AppliedScaling_Data.Float64
	rectanchoredpath.Color = rectanchoredpathDB.Color_Data.String
	rectanchoredpath.FillOpacity = rectanchoredpathDB.FillOpacity_Data.Float64
	rectanchoredpath.Stroke = rectanchoredpathDB.Stroke_Data.String
	rectanchoredpath.StrokeWidth = rectanchoredpathDB.StrokeWidth_Data.Float64
	rectanchoredpath.StrokeDashArray = rectanchoredpathDB.StrokeDashArray_Data.String
	rectanchoredpath.StrokeDashArrayWhenSelected = rectanchoredpathDB.StrokeDashArrayWhenSelected_Data.String
	rectanchoredpath.Transform = rectanchoredpathDB.Transform_Data.String
}

// Backup generates a json file from a slice of all RectAnchoredPathDB instances in the backrepo
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RectAnchoredPathDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RectAnchoredPathDB, 0)
	for _, rectanchoredpathDB := range backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB {
		forBackup = append(forBackup, rectanchoredpathDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json RectAnchoredPath ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json RectAnchoredPath file", err.Error())
	}
}

// Backup generates a json file from a slice of all RectAnchoredPathDB instances in the backrepo
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RectAnchoredPathDB, 0)
	for _, rectanchoredpathDB := range backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB {
		forBackup = append(forBackup, rectanchoredpathDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("RectAnchoredPath")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&RectAnchoredPath_Fields, -1)
	for _, rectanchoredpathDB := range forBackup {

		var rectanchoredpathWOP RectAnchoredPathWOP
		rectanchoredpathDB.CopyBasicFieldsToRectAnchoredPathWOP(&rectanchoredpathWOP)

		row := sh.AddRow()
		row.WriteStruct(&rectanchoredpathWOP, -1)
	}
}

// RestoreXL from the "RectAnchoredPath" sheet all RectAnchoredPathDB instances
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRectAnchoredPathid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["RectAnchoredPath"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRectAnchoredPath.rowVisitorRectAnchoredPath)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) rowVisitorRectAnchoredPath(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var rectanchoredpathWOP RectAnchoredPathWOP
		row.ReadStruct(&rectanchoredpathWOP)

		// add the unmarshalled struct to the stage
		rectanchoredpathDB := new(RectAnchoredPathDB)
		rectanchoredpathDB.CopyBasicFieldsFromRectAnchoredPathWOP(&rectanchoredpathWOP)

		rectanchoredpathDB_ID_atBackupTime := rectanchoredpathDB.ID
		rectanchoredpathDB.ID = 0
		query := backRepoRectAnchoredPath.db.Create(rectanchoredpathDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB[rectanchoredpathDB.ID] = rectanchoredpathDB
		BackRepoRectAnchoredPathid_atBckpTime_newID[rectanchoredpathDB_ID_atBackupTime] = rectanchoredpathDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RectAnchoredPathDB.json" in dirPath that stores an array
// of RectAnchoredPathDB and stores it in the database
// the map BackRepoRectAnchoredPathid_atBckpTime_newID is updated accordingly
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRectAnchoredPathid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RectAnchoredPathDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json RectAnchoredPath file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RectAnchoredPathDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RectAnchoredPathDBID_RectAnchoredPathDB
	for _, rectanchoredpathDB := range forRestore {

		rectanchoredpathDB_ID_atBackupTime := rectanchoredpathDB.ID
		rectanchoredpathDB.ID = 0
		query := backRepoRectAnchoredPath.db.Create(rectanchoredpathDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB[rectanchoredpathDB.ID] = rectanchoredpathDB
		BackRepoRectAnchoredPathid_atBckpTime_newID[rectanchoredpathDB_ID_atBackupTime] = rectanchoredpathDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json RectAnchoredPath file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<RectAnchoredPath>id_atBckpTime_newID
// to compute new index
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) RestorePhaseTwo() {

	for _, rectanchoredpathDB := range backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB {

		// next line of code is to avert unused variable compilation error
		_ = rectanchoredpathDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRectAnchoredPath.db.Model(rectanchoredpathDB).Updates(*rectanchoredpathDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRectAnchoredPath.ResetReversePointers commits all staged instances of RectAnchoredPath to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, rectanchoredpath := range backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathPtr {
		backRepoRectAnchoredPath.ResetReversePointersInstance(backRepo, idx, rectanchoredpath)
	}

	return
}

func (backRepoRectAnchoredPath *BackRepoRectAnchoredPathStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, rectanchoredpath *models.RectAnchoredPath) (Error error) {

	// fetch matching rectanchoredpathDB
	if rectanchoredpathDB, ok := backRepoRectAnchoredPath.Map_RectAnchoredPathDBID_RectAnchoredPathDB[idx]; ok {
		_ = rectanchoredpathDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRectAnchoredPathid_atBckpTime_newID map[uint]uint
