// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { RectAnchoredRectDB } from './rectanchoredrect-db';

// insertion point for imports
import { RectDB } from './rect-db'

@Injectable({
  providedIn: 'root'
})
export class RectAnchoredRectService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  RectAnchoredRectServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private rectanchoredrectsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.rectanchoredrectsUrl = origin + '/api/github.com/fullstack-lang/gongsvg/go/v1/rectanchoredrects';
  }

  /** GET rectanchoredrects from the server */
  getRectAnchoredRects(GONG__StackPath: string): Observable<RectAnchoredRectDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<RectAnchoredRectDB[]>(this.rectanchoredrectsUrl, { params: params })
      .pipe(
        tap(),
		// tap(_ => this.log('fetched rectanchoredrects')),
        catchError(this.handleError<RectAnchoredRectDB[]>('getRectAnchoredRects', []))
      );
  }

  /** GET rectanchoredrect by id. Will 404 if id not found */
  getRectAnchoredRect(id: number, GONG__StackPath: string): Observable<RectAnchoredRectDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.rectanchoredrectsUrl}/${id}`;
    return this.http.get<RectAnchoredRectDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched rectanchoredrect id=${id}`)),
      catchError(this.handleError<RectAnchoredRectDB>(`getRectAnchoredRect id=${id}`))
    );
  }

  /** POST: add a new rectanchoredrect to the server */
  postRectAnchoredRect(rectanchoredrectdb: RectAnchoredRectDB, GONG__StackPath: string): Observable<RectAnchoredRectDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let _Rect_RectAnchoredRects_reverse = rectanchoredrectdb.Rect_RectAnchoredRects_reverse
    rectanchoredrectdb.Rect_RectAnchoredRects_reverse = new RectDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<RectAnchoredRectDB>(this.rectanchoredrectsUrl, rectanchoredrectdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        rectanchoredrectdb.Rect_RectAnchoredRects_reverse = _Rect_RectAnchoredRects_reverse
        // this.log(`posted rectanchoredrectdb id=${rectanchoredrectdb.ID}`)
      }),
      catchError(this.handleError<RectAnchoredRectDB>('postRectAnchoredRect'))
    );
  }

  /** DELETE: delete the rectanchoredrectdb from the server */
  deleteRectAnchoredRect(rectanchoredrectdb: RectAnchoredRectDB | number, GONG__StackPath: string): Observable<RectAnchoredRectDB> {
    const id = typeof rectanchoredrectdb === 'number' ? rectanchoredrectdb : rectanchoredrectdb.ID;
    const url = `${this.rectanchoredrectsUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<RectAnchoredRectDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted rectanchoredrectdb id=${id}`)),
      catchError(this.handleError<RectAnchoredRectDB>('deleteRectAnchoredRect'))
    );
  }

  /** PUT: update the rectanchoredrectdb on the server */
  updateRectAnchoredRect(rectanchoredrectdb: RectAnchoredRectDB, GONG__StackPath: string): Observable<RectAnchoredRectDB> {
    const id = typeof rectanchoredrectdb === 'number' ? rectanchoredrectdb : rectanchoredrectdb.ID;
    const url = `${this.rectanchoredrectsUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let _Rect_RectAnchoredRects_reverse = rectanchoredrectdb.Rect_RectAnchoredRects_reverse
    rectanchoredrectdb.Rect_RectAnchoredRects_reverse = new RectDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<RectAnchoredRectDB>(url, rectanchoredrectdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        rectanchoredrectdb.Rect_RectAnchoredRects_reverse = _Rect_RectAnchoredRects_reverse
        // this.log(`updated rectanchoredrectdb id=${rectanchoredrectdb.ID}`)
      }),
      catchError(this.handleError<RectAnchoredRectDB>('updateRectAnchoredRect'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in RectAnchoredRectService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("RectAnchoredRectService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
      console.log(message)
  }
}
