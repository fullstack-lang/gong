// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { LayerDB } from './layer-db';
import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { RectDB } from './rect-db'
import { TextDB } from './text-db'
import { CircleDB } from './circle-db'
import { LineDB } from './line-db'
import { EllipseDB } from './ellipse-db'
import { PolylineDB } from './polyline-db'
import { PolygoneDB } from './polygone-db'
import { PathDB } from './path-db'
import { LinkDB } from './link-db'
import { RectLinkLinkDB } from './rectlinklink-db'

@Injectable({
  providedIn: 'root'
})
export class LayerService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  LayerServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private layersUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.layersUrl = origin + '/api/github.com/fullstack-lang/gongsvg/go/v1/layers';
  }

  /** GET layers from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<LayerDB[]> {
    return this.getLayers(GONG__StackPath, frontRepo)
  }
  getLayers(GONG__StackPath: string, frontRepo: FrontRepo): Observable<LayerDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<LayerDB[]>(this.layersUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<LayerDB[]>('getLayers', []))
      );
  }

  /** GET layer by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<LayerDB> {
    return this.getLayer(id, GONG__StackPath, frontRepo)
  }
  getLayer(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<LayerDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.layersUrl}/${id}`;
    return this.http.get<LayerDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched layer id=${id}`)),
      catchError(this.handleError<LayerDB>(`getLayer id=${id}`))
    );
  }

  /** POST: add a new layer to the server */
  post(layerdb: LayerDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<LayerDB> {
    return this.postLayer(layerdb, GONG__StackPath, frontRepo)
  }
  postLayer(layerdb: LayerDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<LayerDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    layerdb.LayerPointersEncoding.Rects = []
    for (let _rect of layerdb.Rects) {
      layerdb.LayerPointersEncoding.Rects.push(_rect.ID)
    }
    layerdb.Rects = []
    layerdb.LayerPointersEncoding.Texts = []
    for (let _text of layerdb.Texts) {
      layerdb.LayerPointersEncoding.Texts.push(_text.ID)
    }
    layerdb.Texts = []
    layerdb.LayerPointersEncoding.Circles = []
    for (let _circle of layerdb.Circles) {
      layerdb.LayerPointersEncoding.Circles.push(_circle.ID)
    }
    layerdb.Circles = []
    layerdb.LayerPointersEncoding.Lines = []
    for (let _line of layerdb.Lines) {
      layerdb.LayerPointersEncoding.Lines.push(_line.ID)
    }
    layerdb.Lines = []
    layerdb.LayerPointersEncoding.Ellipses = []
    for (let _ellipse of layerdb.Ellipses) {
      layerdb.LayerPointersEncoding.Ellipses.push(_ellipse.ID)
    }
    layerdb.Ellipses = []
    layerdb.LayerPointersEncoding.Polylines = []
    for (let _polyline of layerdb.Polylines) {
      layerdb.LayerPointersEncoding.Polylines.push(_polyline.ID)
    }
    layerdb.Polylines = []
    layerdb.LayerPointersEncoding.Polygones = []
    for (let _polygone of layerdb.Polygones) {
      layerdb.LayerPointersEncoding.Polygones.push(_polygone.ID)
    }
    layerdb.Polygones = []
    layerdb.LayerPointersEncoding.Paths = []
    for (let _path of layerdb.Paths) {
      layerdb.LayerPointersEncoding.Paths.push(_path.ID)
    }
    layerdb.Paths = []
    layerdb.LayerPointersEncoding.Links = []
    for (let _link of layerdb.Links) {
      layerdb.LayerPointersEncoding.Links.push(_link.ID)
    }
    layerdb.Links = []
    layerdb.LayerPointersEncoding.RectLinkLinks = []
    for (let _rectlinklink of layerdb.RectLinkLinks) {
      layerdb.LayerPointersEncoding.RectLinkLinks.push(_rectlinklink.ID)
    }
    layerdb.RectLinkLinks = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<LayerDB>(this.layersUrl, layerdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        layerdb.Rects = new Array<RectDB>()
        for (let _id of layerdb.LayerPointersEncoding.Rects) {
          let _rect = frontRepo.Rects.get(_id)
          if (_rect != undefined) {
            layerdb.Rects.push(_rect!)
          }
        }
        layerdb.Texts = new Array<TextDB>()
        for (let _id of layerdb.LayerPointersEncoding.Texts) {
          let _text = frontRepo.Texts.get(_id)
          if (_text != undefined) {
            layerdb.Texts.push(_text!)
          }
        }
        layerdb.Circles = new Array<CircleDB>()
        for (let _id of layerdb.LayerPointersEncoding.Circles) {
          let _circle = frontRepo.Circles.get(_id)
          if (_circle != undefined) {
            layerdb.Circles.push(_circle!)
          }
        }
        layerdb.Lines = new Array<LineDB>()
        for (let _id of layerdb.LayerPointersEncoding.Lines) {
          let _line = frontRepo.Lines.get(_id)
          if (_line != undefined) {
            layerdb.Lines.push(_line!)
          }
        }
        layerdb.Ellipses = new Array<EllipseDB>()
        for (let _id of layerdb.LayerPointersEncoding.Ellipses) {
          let _ellipse = frontRepo.Ellipses.get(_id)
          if (_ellipse != undefined) {
            layerdb.Ellipses.push(_ellipse!)
          }
        }
        layerdb.Polylines = new Array<PolylineDB>()
        for (let _id of layerdb.LayerPointersEncoding.Polylines) {
          let _polyline = frontRepo.Polylines.get(_id)
          if (_polyline != undefined) {
            layerdb.Polylines.push(_polyline!)
          }
        }
        layerdb.Polygones = new Array<PolygoneDB>()
        for (let _id of layerdb.LayerPointersEncoding.Polygones) {
          let _polygone = frontRepo.Polygones.get(_id)
          if (_polygone != undefined) {
            layerdb.Polygones.push(_polygone!)
          }
        }
        layerdb.Paths = new Array<PathDB>()
        for (let _id of layerdb.LayerPointersEncoding.Paths) {
          let _path = frontRepo.Paths.get(_id)
          if (_path != undefined) {
            layerdb.Paths.push(_path!)
          }
        }
        layerdb.Links = new Array<LinkDB>()
        for (let _id of layerdb.LayerPointersEncoding.Links) {
          let _link = frontRepo.Links.get(_id)
          if (_link != undefined) {
            layerdb.Links.push(_link!)
          }
        }
        layerdb.RectLinkLinks = new Array<RectLinkLinkDB>()
        for (let _id of layerdb.LayerPointersEncoding.RectLinkLinks) {
          let _rectlinklink = frontRepo.RectLinkLinks.get(_id)
          if (_rectlinklink != undefined) {
            layerdb.RectLinkLinks.push(_rectlinklink!)
          }
        }
        // this.log(`posted layerdb id=${layerdb.ID}`)
      }),
      catchError(this.handleError<LayerDB>('postLayer'))
    );
  }

  /** DELETE: delete the layerdb from the server */
  delete(layerdb: LayerDB | number, GONG__StackPath: string): Observable<LayerDB> {
    return this.deleteLayer(layerdb, GONG__StackPath)
  }
  deleteLayer(layerdb: LayerDB | number, GONG__StackPath: string): Observable<LayerDB> {
    const id = typeof layerdb === 'number' ? layerdb : layerdb.ID;
    const url = `${this.layersUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<LayerDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted layerdb id=${id}`)),
      catchError(this.handleError<LayerDB>('deleteLayer'))
    );
  }

  /** PUT: update the layerdb on the server */
  update(layerdb: LayerDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<LayerDB> {
    return this.updateLayer(layerdb, GONG__StackPath, frontRepo)
  }
  updateLayer(layerdb: LayerDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<LayerDB> {
    const id = typeof layerdb === 'number' ? layerdb : layerdb.ID;
    const url = `${this.layersUrl}/${id}`;

    // insertion point for reset of pointers (to avoid circular JSON)
    // and encoding of pointers
    layerdb.LayerPointersEncoding.Rects = []
    for (let _rect of layerdb.Rects) {
      layerdb.LayerPointersEncoding.Rects.push(_rect.ID)
    }
    layerdb.Rects = []
    layerdb.LayerPointersEncoding.Texts = []
    for (let _text of layerdb.Texts) {
      layerdb.LayerPointersEncoding.Texts.push(_text.ID)
    }
    layerdb.Texts = []
    layerdb.LayerPointersEncoding.Circles = []
    for (let _circle of layerdb.Circles) {
      layerdb.LayerPointersEncoding.Circles.push(_circle.ID)
    }
    layerdb.Circles = []
    layerdb.LayerPointersEncoding.Lines = []
    for (let _line of layerdb.Lines) {
      layerdb.LayerPointersEncoding.Lines.push(_line.ID)
    }
    layerdb.Lines = []
    layerdb.LayerPointersEncoding.Ellipses = []
    for (let _ellipse of layerdb.Ellipses) {
      layerdb.LayerPointersEncoding.Ellipses.push(_ellipse.ID)
    }
    layerdb.Ellipses = []
    layerdb.LayerPointersEncoding.Polylines = []
    for (let _polyline of layerdb.Polylines) {
      layerdb.LayerPointersEncoding.Polylines.push(_polyline.ID)
    }
    layerdb.Polylines = []
    layerdb.LayerPointersEncoding.Polygones = []
    for (let _polygone of layerdb.Polygones) {
      layerdb.LayerPointersEncoding.Polygones.push(_polygone.ID)
    }
    layerdb.Polygones = []
    layerdb.LayerPointersEncoding.Paths = []
    for (let _path of layerdb.Paths) {
      layerdb.LayerPointersEncoding.Paths.push(_path.ID)
    }
    layerdb.Paths = []
    layerdb.LayerPointersEncoding.Links = []
    for (let _link of layerdb.Links) {
      layerdb.LayerPointersEncoding.Links.push(_link.ID)
    }
    layerdb.Links = []
    layerdb.LayerPointersEncoding.RectLinkLinks = []
    for (let _rectlinklink of layerdb.RectLinkLinks) {
      layerdb.LayerPointersEncoding.RectLinkLinks.push(_rectlinklink.ID)
    }
    layerdb.RectLinkLinks = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<LayerDB>(url, layerdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        layerdb.Rects = new Array<RectDB>()
        for (let _id of layerdb.LayerPointersEncoding.Rects) {
          let _rect = frontRepo.Rects.get(_id)
          if (_rect != undefined) {
            layerdb.Rects.push(_rect!)
          }
        }
        layerdb.Texts = new Array<TextDB>()
        for (let _id of layerdb.LayerPointersEncoding.Texts) {
          let _text = frontRepo.Texts.get(_id)
          if (_text != undefined) {
            layerdb.Texts.push(_text!)
          }
        }
        layerdb.Circles = new Array<CircleDB>()
        for (let _id of layerdb.LayerPointersEncoding.Circles) {
          let _circle = frontRepo.Circles.get(_id)
          if (_circle != undefined) {
            layerdb.Circles.push(_circle!)
          }
        }
        layerdb.Lines = new Array<LineDB>()
        for (let _id of layerdb.LayerPointersEncoding.Lines) {
          let _line = frontRepo.Lines.get(_id)
          if (_line != undefined) {
            layerdb.Lines.push(_line!)
          }
        }
        layerdb.Ellipses = new Array<EllipseDB>()
        for (let _id of layerdb.LayerPointersEncoding.Ellipses) {
          let _ellipse = frontRepo.Ellipses.get(_id)
          if (_ellipse != undefined) {
            layerdb.Ellipses.push(_ellipse!)
          }
        }
        layerdb.Polylines = new Array<PolylineDB>()
        for (let _id of layerdb.LayerPointersEncoding.Polylines) {
          let _polyline = frontRepo.Polylines.get(_id)
          if (_polyline != undefined) {
            layerdb.Polylines.push(_polyline!)
          }
        }
        layerdb.Polygones = new Array<PolygoneDB>()
        for (let _id of layerdb.LayerPointersEncoding.Polygones) {
          let _polygone = frontRepo.Polygones.get(_id)
          if (_polygone != undefined) {
            layerdb.Polygones.push(_polygone!)
          }
        }
        layerdb.Paths = new Array<PathDB>()
        for (let _id of layerdb.LayerPointersEncoding.Paths) {
          let _path = frontRepo.Paths.get(_id)
          if (_path != undefined) {
            layerdb.Paths.push(_path!)
          }
        }
        layerdb.Links = new Array<LinkDB>()
        for (let _id of layerdb.LayerPointersEncoding.Links) {
          let _link = frontRepo.Links.get(_id)
          if (_link != undefined) {
            layerdb.Links.push(_link!)
          }
        }
        layerdb.RectLinkLinks = new Array<RectLinkLinkDB>()
        for (let _id of layerdb.LayerPointersEncoding.RectLinkLinks) {
          let _rectlinklink = frontRepo.RectLinkLinks.get(_id)
          if (_rectlinklink != undefined) {
            layerdb.RectLinkLinks.push(_rectlinklink!)
          }
        }
        // this.log(`updated layerdb id=${layerdb.ID}`)
      }),
      catchError(this.handleError<LayerDB>('updateLayer'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in LayerService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("LayerService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
