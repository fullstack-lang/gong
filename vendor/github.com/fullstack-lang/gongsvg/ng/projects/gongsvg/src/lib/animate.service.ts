// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { AnimateDB } from './animate-db';

// insertion point for imports
import { CircleDB } from './circle-db'
import { EllipseDB } from './ellipse-db'
import { LineDB } from './line-db'
import { LinkAnchoredTextDB } from './linkanchoredtext-db'
import { PathDB } from './path-db'
import { PolygoneDB } from './polygone-db'
import { PolylineDB } from './polyline-db'
import { RectDB } from './rect-db'
import { RectAnchoredTextDB } from './rectanchoredtext-db'
import { TextDB } from './text-db'

@Injectable({
  providedIn: 'root'
})
export class AnimateService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  AnimateServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private animatesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.animatesUrl = origin + '/api/github.com/fullstack-lang/gongsvg/go/v1/animates';
  }

  /** GET animates from the server */
  getAnimates(GONG__StackPath: string): Observable<AnimateDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<AnimateDB[]>(this.animatesUrl, { params: params })
      .pipe(
        tap(),
		// tap(_ => this.log('fetched animates')),
        catchError(this.handleError<AnimateDB[]>('getAnimates', []))
      );
  }

  /** GET animate by id. Will 404 if id not found */
  getAnimate(id: number, GONG__StackPath: string): Observable<AnimateDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.animatesUrl}/${id}`;
    return this.http.get<AnimateDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched animate id=${id}`)),
      catchError(this.handleError<AnimateDB>(`getAnimate id=${id}`))
    );
  }

  /** POST: add a new animate to the server */
  postAnimate(animatedb: AnimateDB, GONG__StackPath: string): Observable<AnimateDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let _Circle_Animations_reverse = animatedb.Circle_Animations_reverse
    animatedb.Circle_Animations_reverse = new CircleDB
    let _Ellipse_Animates_reverse = animatedb.Ellipse_Animates_reverse
    animatedb.Ellipse_Animates_reverse = new EllipseDB
    let _Line_Animates_reverse = animatedb.Line_Animates_reverse
    animatedb.Line_Animates_reverse = new LineDB
    let _LinkAnchoredText_Animates_reverse = animatedb.LinkAnchoredText_Animates_reverse
    animatedb.LinkAnchoredText_Animates_reverse = new LinkAnchoredTextDB
    let _Path_Animates_reverse = animatedb.Path_Animates_reverse
    animatedb.Path_Animates_reverse = new PathDB
    let _Polygone_Animates_reverse = animatedb.Polygone_Animates_reverse
    animatedb.Polygone_Animates_reverse = new PolygoneDB
    let _Polyline_Animates_reverse = animatedb.Polyline_Animates_reverse
    animatedb.Polyline_Animates_reverse = new PolylineDB
    let _Rect_Animations_reverse = animatedb.Rect_Animations_reverse
    animatedb.Rect_Animations_reverse = new RectDB
    let _RectAnchoredText_Animates_reverse = animatedb.RectAnchoredText_Animates_reverse
    animatedb.RectAnchoredText_Animates_reverse = new RectAnchoredTextDB
    let _Text_Animates_reverse = animatedb.Text_Animates_reverse
    animatedb.Text_Animates_reverse = new TextDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<AnimateDB>(this.animatesUrl, animatedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        animatedb.Circle_Animations_reverse = _Circle_Animations_reverse
        animatedb.Ellipse_Animates_reverse = _Ellipse_Animates_reverse
        animatedb.Line_Animates_reverse = _Line_Animates_reverse
        animatedb.LinkAnchoredText_Animates_reverse = _LinkAnchoredText_Animates_reverse
        animatedb.Path_Animates_reverse = _Path_Animates_reverse
        animatedb.Polygone_Animates_reverse = _Polygone_Animates_reverse
        animatedb.Polyline_Animates_reverse = _Polyline_Animates_reverse
        animatedb.Rect_Animations_reverse = _Rect_Animations_reverse
        animatedb.RectAnchoredText_Animates_reverse = _RectAnchoredText_Animates_reverse
        animatedb.Text_Animates_reverse = _Text_Animates_reverse
        // this.log(`posted animatedb id=${animatedb.ID}`)
      }),
      catchError(this.handleError<AnimateDB>('postAnimate'))
    );
  }

  /** DELETE: delete the animatedb from the server */
  deleteAnimate(animatedb: AnimateDB | number, GONG__StackPath: string): Observable<AnimateDB> {
    const id = typeof animatedb === 'number' ? animatedb : animatedb.ID;
    const url = `${this.animatesUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<AnimateDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted animatedb id=${id}`)),
      catchError(this.handleError<AnimateDB>('deleteAnimate'))
    );
  }

  /** PUT: update the animatedb on the server */
  updateAnimate(animatedb: AnimateDB, GONG__StackPath: string): Observable<AnimateDB> {
    const id = typeof animatedb === 'number' ? animatedb : animatedb.ID;
    const url = `${this.animatesUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let _Circle_Animations_reverse = animatedb.Circle_Animations_reverse
    animatedb.Circle_Animations_reverse = new CircleDB
    let _Ellipse_Animates_reverse = animatedb.Ellipse_Animates_reverse
    animatedb.Ellipse_Animates_reverse = new EllipseDB
    let _Line_Animates_reverse = animatedb.Line_Animates_reverse
    animatedb.Line_Animates_reverse = new LineDB
    let _LinkAnchoredText_Animates_reverse = animatedb.LinkAnchoredText_Animates_reverse
    animatedb.LinkAnchoredText_Animates_reverse = new LinkAnchoredTextDB
    let _Path_Animates_reverse = animatedb.Path_Animates_reverse
    animatedb.Path_Animates_reverse = new PathDB
    let _Polygone_Animates_reverse = animatedb.Polygone_Animates_reverse
    animatedb.Polygone_Animates_reverse = new PolygoneDB
    let _Polyline_Animates_reverse = animatedb.Polyline_Animates_reverse
    animatedb.Polyline_Animates_reverse = new PolylineDB
    let _Rect_Animations_reverse = animatedb.Rect_Animations_reverse
    animatedb.Rect_Animations_reverse = new RectDB
    let _RectAnchoredText_Animates_reverse = animatedb.RectAnchoredText_Animates_reverse
    animatedb.RectAnchoredText_Animates_reverse = new RectAnchoredTextDB
    let _Text_Animates_reverse = animatedb.Text_Animates_reverse
    animatedb.Text_Animates_reverse = new TextDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<AnimateDB>(url, animatedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        animatedb.Circle_Animations_reverse = _Circle_Animations_reverse
        animatedb.Ellipse_Animates_reverse = _Ellipse_Animates_reverse
        animatedb.Line_Animates_reverse = _Line_Animates_reverse
        animatedb.LinkAnchoredText_Animates_reverse = _LinkAnchoredText_Animates_reverse
        animatedb.Path_Animates_reverse = _Path_Animates_reverse
        animatedb.Polygone_Animates_reverse = _Polygone_Animates_reverse
        animatedb.Polyline_Animates_reverse = _Polyline_Animates_reverse
        animatedb.Rect_Animations_reverse = _Rect_Animations_reverse
        animatedb.RectAnchoredText_Animates_reverse = _RectAnchoredText_Animates_reverse
        animatedb.Text_Animates_reverse = _Text_Animates_reverse
        // this.log(`updated animatedb id=${animatedb.ID}`)
      }),
      catchError(this.handleError<AnimateDB>('updateAnimate'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in AnimateService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("AnimateService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
      console.log(message)
  }
}
