// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { NodeDB } from './node-db';

// insertion point for imports
import { TreeDB } from './tree-db'

@Injectable({
  providedIn: 'root'
})
export class NodeService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  NodeServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private nodesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.nodesUrl = origin + '/api/github.com/fullstack-lang/gongtree/go/v1/nodes';
  }

  /** GET nodes from the server */
  getNodes(GONG__StackPath: string): Observable<NodeDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<NodeDB[]>(this.nodesUrl, { params: params })
      .pipe(
        tap(),
		// tap(_ => this.log('fetched nodes')),
        catchError(this.handleError<NodeDB[]>('getNodes', []))
      );
  }

  /** GET node by id. Will 404 if id not found */
  getNode(id: number, GONG__StackPath: string): Observable<NodeDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.nodesUrl}/${id}`;
    return this.http.get<NodeDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched node id=${id}`)),
      catchError(this.handleError<NodeDB>(`getNode id=${id}`))
    );
  }

  /** POST: add a new node to the server */
  postNode(nodedb: NodeDB, GONG__StackPath: string): Observable<NodeDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    nodedb.Children = []
    nodedb.Buttons = []
    let _Node_Children_reverse = nodedb.Node_Children_reverse
    nodedb.Node_Children_reverse = new NodeDB
    let _Tree_RootNodes_reverse = nodedb.Tree_RootNodes_reverse
    nodedb.Tree_RootNodes_reverse = new TreeDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<NodeDB>(this.nodesUrl, nodedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        nodedb.Node_Children_reverse = _Node_Children_reverse
        nodedb.Tree_RootNodes_reverse = _Tree_RootNodes_reverse
        // this.log(`posted nodedb id=${nodedb.ID}`)
      }),
      catchError(this.handleError<NodeDB>('postNode'))
    );
  }

  /** DELETE: delete the nodedb from the server */
  deleteNode(nodedb: NodeDB | number, GONG__StackPath: string): Observable<NodeDB> {
    const id = typeof nodedb === 'number' ? nodedb : nodedb.ID;
    const url = `${this.nodesUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<NodeDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted nodedb id=${id}`)),
      catchError(this.handleError<NodeDB>('deleteNode'))
    );
  }

  /** PUT: update the nodedb on the server */
  updateNode(nodedb: NodeDB, GONG__StackPath: string): Observable<NodeDB> {
    const id = typeof nodedb === 'number' ? nodedb : nodedb.ID;
    const url = `${this.nodesUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    nodedb.Children = []
    nodedb.Buttons = []
    let _Node_Children_reverse = nodedb.Node_Children_reverse
    nodedb.Node_Children_reverse = new NodeDB
    let _Tree_RootNodes_reverse = nodedb.Tree_RootNodes_reverse
    nodedb.Tree_RootNodes_reverse = new TreeDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<NodeDB>(url, nodedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        nodedb.Node_Children_reverse = _Node_Children_reverse
        nodedb.Tree_RootNodes_reverse = _Tree_RootNodes_reverse
        // this.log(`updated nodedb id=${nodedb.ID}`)
      }),
      catchError(this.handleError<NodeDB>('updateNode'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in NodeService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("NodeService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
      console.log(message)
  }
}
