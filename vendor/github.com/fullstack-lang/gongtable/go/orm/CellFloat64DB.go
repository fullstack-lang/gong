// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CellFloat64_sql sql.NullBool
var dummy_CellFloat64_time time.Duration
var dummy_CellFloat64_sort sort.Float64Slice

// CellFloat64API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model cellfloat64API
type CellFloat64API struct {
	gorm.Model

	models.CellFloat64_WOP

	// encoding of pointers
	CellFloat64PointersEncoding CellFloat64PointersEncoding
}

// CellFloat64PointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CellFloat64PointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CellFloat64DB describes a cellfloat64 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model cellfloat64DB
type CellFloat64DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field cellfloat64DB.Name
	Name_Data sql.NullString

	// Declation for basic field cellfloat64DB.Value
	Value_Data sql.NullFloat64
	// encoding of pointers
	CellFloat64PointersEncoding
}

// CellFloat64DBs arrays cellfloat64DBs
// swagger:response cellfloat64DBsResponse
type CellFloat64DBs []CellFloat64DB

// CellFloat64DBResponse provides response
// swagger:response cellfloat64DBResponse
type CellFloat64DBResponse struct {
	CellFloat64DB
}

// CellFloat64WOP is a CellFloat64 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CellFloat64WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value float64 `xlsx:"2"`
	// insertion for WOP pointer fields
}

var CellFloat64_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoCellFloat64Struct struct {
	// stores CellFloat64DB according to their gorm ID
	Map_CellFloat64DBID_CellFloat64DB map[uint]*CellFloat64DB

	// stores CellFloat64DB ID according to CellFloat64 address
	Map_CellFloat64Ptr_CellFloat64DBID map[*models.CellFloat64]uint

	// stores CellFloat64 according to their gorm ID
	Map_CellFloat64DBID_CellFloat64Ptr map[uint]*models.CellFloat64

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCellFloat64 *BackRepoCellFloat64Struct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCellFloat64.stage
	return
}

func (backRepoCellFloat64 *BackRepoCellFloat64Struct) GetDB() *gorm.DB {
	return backRepoCellFloat64.db
}

// GetCellFloat64DBFromCellFloat64Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) GetCellFloat64DBFromCellFloat64Ptr(cellfloat64 *models.CellFloat64) (cellfloat64DB *CellFloat64DB) {
	id := backRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID[cellfloat64]
	cellfloat64DB = backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB[id]
	return
}

// BackRepoCellFloat64.CommitPhaseOne commits all staged instances of CellFloat64 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for cellfloat64 := range stage.CellFloat64s {
		backRepoCellFloat64.CommitPhaseOneInstance(cellfloat64)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, cellfloat64 := range backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr {
		if _, ok := stage.CellFloat64s[cellfloat64]; !ok {
			backRepoCellFloat64.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCellFloat64.CommitDeleteInstance commits deletion of CellFloat64 to the BackRepo
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CommitDeleteInstance(id uint) (Error error) {

	cellfloat64 := backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr[id]

	// cellfloat64 is not staged anymore, remove cellfloat64DB
	cellfloat64DB := backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB[id]
	query := backRepoCellFloat64.db.Unscoped().Delete(&cellfloat64DB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID, cellfloat64)
	delete(backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr, id)
	delete(backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB, id)

	return
}

// BackRepoCellFloat64.CommitPhaseOneInstance commits cellfloat64 staged instances of CellFloat64 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CommitPhaseOneInstance(cellfloat64 *models.CellFloat64) (Error error) {

	// check if the cellfloat64 is not commited yet
	if _, ok := backRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID[cellfloat64]; ok {
		return
	}

	// initiate cellfloat64
	var cellfloat64DB CellFloat64DB
	cellfloat64DB.CopyBasicFieldsFromCellFloat64(cellfloat64)

	query := backRepoCellFloat64.db.Create(&cellfloat64DB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID[cellfloat64] = cellfloat64DB.ID
	backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr[cellfloat64DB.ID] = cellfloat64
	backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB[cellfloat64DB.ID] = &cellfloat64DB

	return
}

// BackRepoCellFloat64.CommitPhaseTwo commits all staged instances of CellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, cellfloat64 := range backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr {
		backRepoCellFloat64.CommitPhaseTwoInstance(backRepo, idx, cellfloat64)
	}

	return
}

// BackRepoCellFloat64.CommitPhaseTwoInstance commits {{structname }} of models.CellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, cellfloat64 *models.CellFloat64) (Error error) {

	// fetch matching cellfloat64DB
	if cellfloat64DB, ok := backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB[idx]; ok {

		cellfloat64DB.CopyBasicFieldsFromCellFloat64(cellfloat64)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCellFloat64.db.Save(&cellfloat64DB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CellFloat64 intance %s", cellfloat64.Name))
		return err
	}

	return
}

// BackRepoCellFloat64.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CheckoutPhaseOne() (Error error) {

	cellfloat64DBArray := make([]CellFloat64DB, 0)
	query := backRepoCellFloat64.db.Find(&cellfloat64DBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	cellfloat64InstancesToBeRemovedFromTheStage := make(map[*models.CellFloat64]any)
	for key, value := range backRepoCellFloat64.stage.CellFloat64s {
		cellfloat64InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, cellfloat64DB := range cellfloat64DBArray {
		backRepoCellFloat64.CheckoutPhaseOneInstance(&cellfloat64DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		cellfloat64, ok := backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr[cellfloat64DB.ID]
		if ok {
			delete(cellfloat64InstancesToBeRemovedFromTheStage, cellfloat64)
		}
	}

	// remove from stage and back repo's 3 maps all cellfloat64s that are not in the checkout
	for cellfloat64 := range cellfloat64InstancesToBeRemovedFromTheStage {
		cellfloat64.Unstage(backRepoCellFloat64.GetStage())

		// remove instance from the back repo 3 maps
		cellfloat64ID := backRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID[cellfloat64]
		delete(backRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID, cellfloat64)
		delete(backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB, cellfloat64ID)
		delete(backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr, cellfloat64ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a cellfloat64DB that has been found in the DB, updates the backRepo and stages the
// models version of the cellfloat64DB
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CheckoutPhaseOneInstance(cellfloat64DB *CellFloat64DB) (Error error) {

	cellfloat64, ok := backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr[cellfloat64DB.ID]
	if !ok {
		cellfloat64 = new(models.CellFloat64)

		backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr[cellfloat64DB.ID] = cellfloat64
		backRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID[cellfloat64] = cellfloat64DB.ID

		// append model store with the new element
		cellfloat64.Name = cellfloat64DB.Name_Data.String
		cellfloat64.Stage(backRepoCellFloat64.GetStage())
	}
	cellfloat64DB.CopyBasicFieldsToCellFloat64(cellfloat64)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	cellfloat64.Stage(backRepoCellFloat64.GetStage())

	// preserve pointer to cellfloat64DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CellFloat64DBID_CellFloat64DB)[cellfloat64DB hold variable pointers
	cellfloat64DB_Data := *cellfloat64DB
	preservedPtrToCellFloat64 := &cellfloat64DB_Data
	backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB[cellfloat64DB.ID] = preservedPtrToCellFloat64

	return
}

// BackRepoCellFloat64.CheckoutPhaseTwo Checkouts all staged instances of CellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, cellfloat64DB := range backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB {
		backRepoCellFloat64.CheckoutPhaseTwoInstance(backRepo, cellfloat64DB)
	}
	return
}

// BackRepoCellFloat64.CheckoutPhaseTwoInstance Checkouts staged instances of CellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, cellfloat64DB *CellFloat64DB) (Error error) {

	cellfloat64 := backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr[cellfloat64DB.ID]

	cellfloat64DB.DecodePointers(backRepo, cellfloat64)

	return
}

func (cellfloat64DB *CellFloat64DB) DecodePointers(backRepo *BackRepoStruct, cellfloat64 *models.CellFloat64) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCellFloat64 allows commit of a single cellfloat64 (if already staged)
func (backRepo *BackRepoStruct) CommitCellFloat64(cellfloat64 *models.CellFloat64) {
	backRepo.BackRepoCellFloat64.CommitPhaseOneInstance(cellfloat64)
	if id, ok := backRepo.BackRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID[cellfloat64]; ok {
		backRepo.BackRepoCellFloat64.CommitPhaseTwoInstance(backRepo, id, cellfloat64)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCellFloat64 allows checkout of a single cellfloat64 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCellFloat64(cellfloat64 *models.CellFloat64) {
	// check if the cellfloat64 is staged
	if _, ok := backRepo.BackRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID[cellfloat64]; ok {

		if id, ok := backRepo.BackRepoCellFloat64.Map_CellFloat64Ptr_CellFloat64DBID[cellfloat64]; ok {
			var cellfloat64DB CellFloat64DB
			cellfloat64DB.ID = id

			if err := backRepo.BackRepoCellFloat64.db.First(&cellfloat64DB, id).Error; err != nil {
				log.Fatalln("CheckoutCellFloat64 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCellFloat64.CheckoutPhaseOneInstance(&cellfloat64DB)
			backRepo.BackRepoCellFloat64.CheckoutPhaseTwoInstance(backRepo, &cellfloat64DB)
		}
	}
}

// CopyBasicFieldsFromCellFloat64
func (cellfloat64DB *CellFloat64DB) CopyBasicFieldsFromCellFloat64(cellfloat64 *models.CellFloat64) {
	// insertion point for fields commit

	cellfloat64DB.Name_Data.String = cellfloat64.Name
	cellfloat64DB.Name_Data.Valid = true

	cellfloat64DB.Value_Data.Float64 = cellfloat64.Value
	cellfloat64DB.Value_Data.Valid = true
}

// CopyBasicFieldsFromCellFloat64_WOP
func (cellfloat64DB *CellFloat64DB) CopyBasicFieldsFromCellFloat64_WOP(cellfloat64 *models.CellFloat64_WOP) {
	// insertion point for fields commit

	cellfloat64DB.Name_Data.String = cellfloat64.Name
	cellfloat64DB.Name_Data.Valid = true

	cellfloat64DB.Value_Data.Float64 = cellfloat64.Value
	cellfloat64DB.Value_Data.Valid = true
}

// CopyBasicFieldsFromCellFloat64WOP
func (cellfloat64DB *CellFloat64DB) CopyBasicFieldsFromCellFloat64WOP(cellfloat64 *CellFloat64WOP) {
	// insertion point for fields commit

	cellfloat64DB.Name_Data.String = cellfloat64.Name
	cellfloat64DB.Name_Data.Valid = true

	cellfloat64DB.Value_Data.Float64 = cellfloat64.Value
	cellfloat64DB.Value_Data.Valid = true
}

// CopyBasicFieldsToCellFloat64
func (cellfloat64DB *CellFloat64DB) CopyBasicFieldsToCellFloat64(cellfloat64 *models.CellFloat64) {
	// insertion point for checkout of basic fields (back repo to stage)
	cellfloat64.Name = cellfloat64DB.Name_Data.String
	cellfloat64.Value = cellfloat64DB.Value_Data.Float64
}

// CopyBasicFieldsToCellFloat64_WOP
func (cellfloat64DB *CellFloat64DB) CopyBasicFieldsToCellFloat64_WOP(cellfloat64 *models.CellFloat64_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	cellfloat64.Name = cellfloat64DB.Name_Data.String
	cellfloat64.Value = cellfloat64DB.Value_Data.Float64
}

// CopyBasicFieldsToCellFloat64WOP
func (cellfloat64DB *CellFloat64DB) CopyBasicFieldsToCellFloat64WOP(cellfloat64 *CellFloat64WOP) {
	cellfloat64.ID = int(cellfloat64DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	cellfloat64.Name = cellfloat64DB.Name_Data.String
	cellfloat64.Value = cellfloat64DB.Value_Data.Float64
}

// Backup generates a json file from a slice of all CellFloat64DB instances in the backrepo
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CellFloat64DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CellFloat64DB, 0)
	for _, cellfloat64DB := range backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB {
		forBackup = append(forBackup, cellfloat64DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json CellFloat64 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json CellFloat64 file", err.Error())
	}
}

// Backup generates a json file from a slice of all CellFloat64DB instances in the backrepo
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CellFloat64DB, 0)
	for _, cellfloat64DB := range backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB {
		forBackup = append(forBackup, cellfloat64DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CellFloat64")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CellFloat64_Fields, -1)
	for _, cellfloat64DB := range forBackup {

		var cellfloat64WOP CellFloat64WOP
		cellfloat64DB.CopyBasicFieldsToCellFloat64WOP(&cellfloat64WOP)

		row := sh.AddRow()
		row.WriteStruct(&cellfloat64WOP, -1)
	}
}

// RestoreXL from the "CellFloat64" sheet all CellFloat64DB instances
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCellFloat64id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CellFloat64"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCellFloat64.rowVisitorCellFloat64)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCellFloat64 *BackRepoCellFloat64Struct) rowVisitorCellFloat64(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var cellfloat64WOP CellFloat64WOP
		row.ReadStruct(&cellfloat64WOP)

		// add the unmarshalled struct to the stage
		cellfloat64DB := new(CellFloat64DB)
		cellfloat64DB.CopyBasicFieldsFromCellFloat64WOP(&cellfloat64WOP)

		cellfloat64DB_ID_atBackupTime := cellfloat64DB.ID
		cellfloat64DB.ID = 0
		query := backRepoCellFloat64.db.Create(cellfloat64DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB[cellfloat64DB.ID] = cellfloat64DB
		BackRepoCellFloat64id_atBckpTime_newID[cellfloat64DB_ID_atBackupTime] = cellfloat64DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CellFloat64DB.json" in dirPath that stores an array
// of CellFloat64DB and stores it in the database
// the map BackRepoCellFloat64id_atBckpTime_newID is updated accordingly
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCellFloat64id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CellFloat64DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json CellFloat64 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CellFloat64DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CellFloat64DBID_CellFloat64DB
	for _, cellfloat64DB := range forRestore {

		cellfloat64DB_ID_atBackupTime := cellfloat64DB.ID
		cellfloat64DB.ID = 0
		query := backRepoCellFloat64.db.Create(cellfloat64DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB[cellfloat64DB.ID] = cellfloat64DB
		BackRepoCellFloat64id_atBckpTime_newID[cellfloat64DB_ID_atBackupTime] = cellfloat64DB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json CellFloat64 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CellFloat64>id_atBckpTime_newID
// to compute new index
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) RestorePhaseTwo() {

	for _, cellfloat64DB := range backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB {

		// next line of code is to avert unused variable compilation error
		_ = cellfloat64DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCellFloat64.db.Model(cellfloat64DB).Updates(*cellfloat64DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCellFloat64.ResetReversePointers commits all staged instances of CellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellFloat64 *BackRepoCellFloat64Struct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, cellfloat64 := range backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64Ptr {
		backRepoCellFloat64.ResetReversePointersInstance(backRepo, idx, cellfloat64)
	}

	return
}

func (backRepoCellFloat64 *BackRepoCellFloat64Struct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, cellfloat64 *models.CellFloat64) (Error error) {

	// fetch matching cellfloat64DB
	if cellfloat64DB, ok := backRepoCellFloat64.Map_CellFloat64DBID_CellFloat64DB[idx]; ok {
		_ = cellfloat64DB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCellFloat64id_atBckpTime_newID map[uint]uint
