// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormFieldTime_sql sql.NullBool
var dummy_FormFieldTime_time time.Duration
var dummy_FormFieldTime_sort sort.Float64Slice

// FormFieldTimeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formfieldtimeAPI
type FormFieldTimeAPI struct {
	gorm.Model

	models.FormFieldTime_WOP

	// encoding of pointers
	FormFieldTimePointersEncoding FormFieldTimePointersEncoding
}

// FormFieldTimePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormFieldTimePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FormFieldTimeDB describes a formfieldtime in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formfieldtimeDB
type FormFieldTimeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formfieldtimeDB.Name
	Name_Data sql.NullString

	// Declation for basic field formfieldtimeDB.Value
	Value_Data sql.NullTime

	// Declation for basic field formfieldtimeDB.Step
	Step_Data sql.NullFloat64
	// encoding of pointers
	FormFieldTimePointersEncoding
}

// FormFieldTimeDBs arrays formfieldtimeDBs
// swagger:response formfieldtimeDBsResponse
type FormFieldTimeDBs []FormFieldTimeDB

// FormFieldTimeDBResponse provides response
// swagger:response formfieldtimeDBResponse
type FormFieldTimeDBResponse struct {
	FormFieldTimeDB
}

// FormFieldTimeWOP is a FormFieldTime without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormFieldTimeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value time.Time `xlsx:"2"`

	Step float64 `xlsx:"3"`
	// insertion for WOP pointer fields
}

var FormFieldTime_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
	"Step",
}

type BackRepoFormFieldTimeStruct struct {
	// stores FormFieldTimeDB according to their gorm ID
	Map_FormFieldTimeDBID_FormFieldTimeDB map[uint]*FormFieldTimeDB

	// stores FormFieldTimeDB ID according to FormFieldTime address
	Map_FormFieldTimePtr_FormFieldTimeDBID map[*models.FormFieldTime]uint

	// stores FormFieldTime according to their gorm ID
	Map_FormFieldTimeDBID_FormFieldTimePtr map[uint]*models.FormFieldTime

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormFieldTime.stage
	return
}

func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) GetDB() *gorm.DB {
	return backRepoFormFieldTime.db
}

// GetFormFieldTimeDBFromFormFieldTimePtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) GetFormFieldTimeDBFromFormFieldTimePtr(formfieldtime *models.FormFieldTime) (formfieldtimeDB *FormFieldTimeDB) {
	id := backRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID[formfieldtime]
	formfieldtimeDB = backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB[id]
	return
}

// BackRepoFormFieldTime.CommitPhaseOne commits all staged instances of FormFieldTime to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formfieldtime := range stage.FormFieldTimes {
		backRepoFormFieldTime.CommitPhaseOneInstance(formfieldtime)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formfieldtime := range backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr {
		if _, ok := stage.FormFieldTimes[formfieldtime]; !ok {
			backRepoFormFieldTime.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormFieldTime.CommitDeleteInstance commits deletion of FormFieldTime to the BackRepo
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CommitDeleteInstance(id uint) (Error error) {

	formfieldtime := backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr[id]

	// formfieldtime is not staged anymore, remove formfieldtimeDB
	formfieldtimeDB := backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB[id]
	query := backRepoFormFieldTime.db.Unscoped().Delete(&formfieldtimeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID, formfieldtime)
	delete(backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr, id)
	delete(backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB, id)

	return
}

// BackRepoFormFieldTime.CommitPhaseOneInstance commits formfieldtime staged instances of FormFieldTime to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CommitPhaseOneInstance(formfieldtime *models.FormFieldTime) (Error error) {

	// check if the formfieldtime is not commited yet
	if _, ok := backRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID[formfieldtime]; ok {
		return
	}

	// initiate formfieldtime
	var formfieldtimeDB FormFieldTimeDB
	formfieldtimeDB.CopyBasicFieldsFromFormFieldTime(formfieldtime)

	query := backRepoFormFieldTime.db.Create(&formfieldtimeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID[formfieldtime] = formfieldtimeDB.ID
	backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr[formfieldtimeDB.ID] = formfieldtime
	backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB[formfieldtimeDB.ID] = &formfieldtimeDB

	return
}

// BackRepoFormFieldTime.CommitPhaseTwo commits all staged instances of FormFieldTime to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formfieldtime := range backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr {
		backRepoFormFieldTime.CommitPhaseTwoInstance(backRepo, idx, formfieldtime)
	}

	return
}

// BackRepoFormFieldTime.CommitPhaseTwoInstance commits {{structname }} of models.FormFieldTime to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formfieldtime *models.FormFieldTime) (Error error) {

	// fetch matching formfieldtimeDB
	if formfieldtimeDB, ok := backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB[idx]; ok {

		formfieldtimeDB.CopyBasicFieldsFromFormFieldTime(formfieldtime)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFormFieldTime.db.Save(&formfieldtimeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormFieldTime intance %s", formfieldtime.Name))
		return err
	}

	return
}

// BackRepoFormFieldTime.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CheckoutPhaseOne() (Error error) {

	formfieldtimeDBArray := make([]FormFieldTimeDB, 0)
	query := backRepoFormFieldTime.db.Find(&formfieldtimeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formfieldtimeInstancesToBeRemovedFromTheStage := make(map[*models.FormFieldTime]any)
	for key, value := range backRepoFormFieldTime.stage.FormFieldTimes {
		formfieldtimeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formfieldtimeDB := range formfieldtimeDBArray {
		backRepoFormFieldTime.CheckoutPhaseOneInstance(&formfieldtimeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formfieldtime, ok := backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr[formfieldtimeDB.ID]
		if ok {
			delete(formfieldtimeInstancesToBeRemovedFromTheStage, formfieldtime)
		}
	}

	// remove from stage and back repo's 3 maps all formfieldtimes that are not in the checkout
	for formfieldtime := range formfieldtimeInstancesToBeRemovedFromTheStage {
		formfieldtime.Unstage(backRepoFormFieldTime.GetStage())

		// remove instance from the back repo 3 maps
		formfieldtimeID := backRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID[formfieldtime]
		delete(backRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID, formfieldtime)
		delete(backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB, formfieldtimeID)
		delete(backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr, formfieldtimeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formfieldtimeDB that has been found in the DB, updates the backRepo and stages the
// models version of the formfieldtimeDB
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CheckoutPhaseOneInstance(formfieldtimeDB *FormFieldTimeDB) (Error error) {

	formfieldtime, ok := backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr[formfieldtimeDB.ID]
	if !ok {
		formfieldtime = new(models.FormFieldTime)

		backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr[formfieldtimeDB.ID] = formfieldtime
		backRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID[formfieldtime] = formfieldtimeDB.ID

		// append model store with the new element
		formfieldtime.Name = formfieldtimeDB.Name_Data.String
		formfieldtime.Stage(backRepoFormFieldTime.GetStage())
	}
	formfieldtimeDB.CopyBasicFieldsToFormFieldTime(formfieldtime)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formfieldtime.Stage(backRepoFormFieldTime.GetStage())

	// preserve pointer to formfieldtimeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormFieldTimeDBID_FormFieldTimeDB)[formfieldtimeDB hold variable pointers
	formfieldtimeDB_Data := *formfieldtimeDB
	preservedPtrToFormFieldTime := &formfieldtimeDB_Data
	backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB[formfieldtimeDB.ID] = preservedPtrToFormFieldTime

	return
}

// BackRepoFormFieldTime.CheckoutPhaseTwo Checkouts all staged instances of FormFieldTime to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formfieldtimeDB := range backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB {
		backRepoFormFieldTime.CheckoutPhaseTwoInstance(backRepo, formfieldtimeDB)
	}
	return
}

// BackRepoFormFieldTime.CheckoutPhaseTwoInstance Checkouts staged instances of FormFieldTime to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formfieldtimeDB *FormFieldTimeDB) (Error error) {

	formfieldtime := backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr[formfieldtimeDB.ID]

	formfieldtimeDB.DecodePointers(backRepo, formfieldtime)

	return
}

func (formfieldtimeDB *FormFieldTimeDB) DecodePointers(backRepo *BackRepoStruct, formfieldtime *models.FormFieldTime) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFormFieldTime allows commit of a single formfieldtime (if already staged)
func (backRepo *BackRepoStruct) CommitFormFieldTime(formfieldtime *models.FormFieldTime) {
	backRepo.BackRepoFormFieldTime.CommitPhaseOneInstance(formfieldtime)
	if id, ok := backRepo.BackRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID[formfieldtime]; ok {
		backRepo.BackRepoFormFieldTime.CommitPhaseTwoInstance(backRepo, id, formfieldtime)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormFieldTime allows checkout of a single formfieldtime (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormFieldTime(formfieldtime *models.FormFieldTime) {
	// check if the formfieldtime is staged
	if _, ok := backRepo.BackRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID[formfieldtime]; ok {

		if id, ok := backRepo.BackRepoFormFieldTime.Map_FormFieldTimePtr_FormFieldTimeDBID[formfieldtime]; ok {
			var formfieldtimeDB FormFieldTimeDB
			formfieldtimeDB.ID = id

			if err := backRepo.BackRepoFormFieldTime.db.First(&formfieldtimeDB, id).Error; err != nil {
				log.Fatalln("CheckoutFormFieldTime : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormFieldTime.CheckoutPhaseOneInstance(&formfieldtimeDB)
			backRepo.BackRepoFormFieldTime.CheckoutPhaseTwoInstance(backRepo, &formfieldtimeDB)
		}
	}
}

// CopyBasicFieldsFromFormFieldTime
func (formfieldtimeDB *FormFieldTimeDB) CopyBasicFieldsFromFormFieldTime(formfieldtime *models.FormFieldTime) {
	// insertion point for fields commit

	formfieldtimeDB.Name_Data.String = formfieldtime.Name
	formfieldtimeDB.Name_Data.Valid = true

	formfieldtimeDB.Value_Data.Time = formfieldtime.Value
	formfieldtimeDB.Value_Data.Valid = true

	formfieldtimeDB.Step_Data.Float64 = formfieldtime.Step
	formfieldtimeDB.Step_Data.Valid = true
}

// CopyBasicFieldsFromFormFieldTime_WOP
func (formfieldtimeDB *FormFieldTimeDB) CopyBasicFieldsFromFormFieldTime_WOP(formfieldtime *models.FormFieldTime_WOP) {
	// insertion point for fields commit

	formfieldtimeDB.Name_Data.String = formfieldtime.Name
	formfieldtimeDB.Name_Data.Valid = true

	formfieldtimeDB.Value_Data.Time = formfieldtime.Value
	formfieldtimeDB.Value_Data.Valid = true

	formfieldtimeDB.Step_Data.Float64 = formfieldtime.Step
	formfieldtimeDB.Step_Data.Valid = true
}

// CopyBasicFieldsFromFormFieldTimeWOP
func (formfieldtimeDB *FormFieldTimeDB) CopyBasicFieldsFromFormFieldTimeWOP(formfieldtime *FormFieldTimeWOP) {
	// insertion point for fields commit

	formfieldtimeDB.Name_Data.String = formfieldtime.Name
	formfieldtimeDB.Name_Data.Valid = true

	formfieldtimeDB.Value_Data.Time = formfieldtime.Value
	formfieldtimeDB.Value_Data.Valid = true

	formfieldtimeDB.Step_Data.Float64 = formfieldtime.Step
	formfieldtimeDB.Step_Data.Valid = true
}

// CopyBasicFieldsToFormFieldTime
func (formfieldtimeDB *FormFieldTimeDB) CopyBasicFieldsToFormFieldTime(formfieldtime *models.FormFieldTime) {
	// insertion point for checkout of basic fields (back repo to stage)
	formfieldtime.Name = formfieldtimeDB.Name_Data.String
	formfieldtime.Value = formfieldtimeDB.Value_Data.Time
	formfieldtime.Step = formfieldtimeDB.Step_Data.Float64
}

// CopyBasicFieldsToFormFieldTime_WOP
func (formfieldtimeDB *FormFieldTimeDB) CopyBasicFieldsToFormFieldTime_WOP(formfieldtime *models.FormFieldTime_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	formfieldtime.Name = formfieldtimeDB.Name_Data.String
	formfieldtime.Value = formfieldtimeDB.Value_Data.Time
	formfieldtime.Step = formfieldtimeDB.Step_Data.Float64
}

// CopyBasicFieldsToFormFieldTimeWOP
func (formfieldtimeDB *FormFieldTimeDB) CopyBasicFieldsToFormFieldTimeWOP(formfieldtime *FormFieldTimeWOP) {
	formfieldtime.ID = int(formfieldtimeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formfieldtime.Name = formfieldtimeDB.Name_Data.String
	formfieldtime.Value = formfieldtimeDB.Value_Data.Time
	formfieldtime.Step = formfieldtimeDB.Step_Data.Float64
}

// Backup generates a json file from a slice of all FormFieldTimeDB instances in the backrepo
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormFieldTimeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormFieldTimeDB, 0)
	for _, formfieldtimeDB := range backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB {
		forBackup = append(forBackup, formfieldtimeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FormFieldTime ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FormFieldTime file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormFieldTimeDB instances in the backrepo
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormFieldTimeDB, 0)
	for _, formfieldtimeDB := range backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB {
		forBackup = append(forBackup, formfieldtimeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormFieldTime")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormFieldTime_Fields, -1)
	for _, formfieldtimeDB := range forBackup {

		var formfieldtimeWOP FormFieldTimeWOP
		formfieldtimeDB.CopyBasicFieldsToFormFieldTimeWOP(&formfieldtimeWOP)

		row := sh.AddRow()
		row.WriteStruct(&formfieldtimeWOP, -1)
	}
}

// RestoreXL from the "FormFieldTime" sheet all FormFieldTimeDB instances
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormFieldTimeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormFieldTime"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormFieldTime.rowVisitorFormFieldTime)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) rowVisitorFormFieldTime(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formfieldtimeWOP FormFieldTimeWOP
		row.ReadStruct(&formfieldtimeWOP)

		// add the unmarshalled struct to the stage
		formfieldtimeDB := new(FormFieldTimeDB)
		formfieldtimeDB.CopyBasicFieldsFromFormFieldTimeWOP(&formfieldtimeWOP)

		formfieldtimeDB_ID_atBackupTime := formfieldtimeDB.ID
		formfieldtimeDB.ID = 0
		query := backRepoFormFieldTime.db.Create(formfieldtimeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB[formfieldtimeDB.ID] = formfieldtimeDB
		BackRepoFormFieldTimeid_atBckpTime_newID[formfieldtimeDB_ID_atBackupTime] = formfieldtimeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormFieldTimeDB.json" in dirPath that stores an array
// of FormFieldTimeDB and stores it in the database
// the map BackRepoFormFieldTimeid_atBckpTime_newID is updated accordingly
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormFieldTimeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormFieldTimeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FormFieldTime file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormFieldTimeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormFieldTimeDBID_FormFieldTimeDB
	for _, formfieldtimeDB := range forRestore {

		formfieldtimeDB_ID_atBackupTime := formfieldtimeDB.ID
		formfieldtimeDB.ID = 0
		query := backRepoFormFieldTime.db.Create(formfieldtimeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB[formfieldtimeDB.ID] = formfieldtimeDB
		BackRepoFormFieldTimeid_atBckpTime_newID[formfieldtimeDB_ID_atBackupTime] = formfieldtimeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FormFieldTime file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormFieldTime>id_atBckpTime_newID
// to compute new index
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) RestorePhaseTwo() {

	for _, formfieldtimeDB := range backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB {

		// next line of code is to avert unused variable compilation error
		_ = formfieldtimeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFormFieldTime.db.Model(formfieldtimeDB).Updates(*formfieldtimeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFormFieldTime.ResetReversePointers commits all staged instances of FormFieldTime to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, formfieldtime := range backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimePtr {
		backRepoFormFieldTime.ResetReversePointersInstance(backRepo, idx, formfieldtime)
	}

	return
}

func (backRepoFormFieldTime *BackRepoFormFieldTimeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, formfieldtime *models.FormFieldTime) (Error error) {

	// fetch matching formfieldtimeDB
	if formfieldtimeDB, ok := backRepoFormFieldTime.Map_FormFieldTimeDBID_FormFieldTimeDB[idx]; ok {
		_ = formfieldtimeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormFieldTimeid_atBckpTime_newID map[uint]uint
