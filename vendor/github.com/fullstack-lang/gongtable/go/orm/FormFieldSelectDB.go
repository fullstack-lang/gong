// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormFieldSelect_sql sql.NullBool
var dummy_FormFieldSelect_time time.Duration
var dummy_FormFieldSelect_sort sort.Float64Slice

// FormFieldSelectAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formfieldselectAPI
type FormFieldSelectAPI struct {
	gorm.Model

	models.FormFieldSelect_WOP

	// encoding of pointers
	FormFieldSelectPointersEncoding FormFieldSelectPointersEncoding
}

// FormFieldSelectPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormFieldSelectPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Value is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ValueID sql.NullInt64

	// field Options is a slice of pointers to another Struct (optional or 0..1)
	Options IntSlice `gorm:"type:TEXT"`
}

// FormFieldSelectDB describes a formfieldselect in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formfieldselectDB
type FormFieldSelectDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formfieldselectDB.Name
	Name_Data sql.NullString

	// Declation for basic field formfieldselectDB.CanBeEmpty
	// provide the sql storage for the boolan
	CanBeEmpty_Data sql.NullBool
	// encoding of pointers
	FormFieldSelectPointersEncoding
}

// FormFieldSelectDBs arrays formfieldselectDBs
// swagger:response formfieldselectDBsResponse
type FormFieldSelectDBs []FormFieldSelectDB

// FormFieldSelectDBResponse provides response
// swagger:response formfieldselectDBResponse
type FormFieldSelectDBResponse struct {
	FormFieldSelectDB
}

// FormFieldSelectWOP is a FormFieldSelect without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormFieldSelectWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	CanBeEmpty bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FormFieldSelect_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"CanBeEmpty",
}

type BackRepoFormFieldSelectStruct struct {
	// stores FormFieldSelectDB according to their gorm ID
	Map_FormFieldSelectDBID_FormFieldSelectDB map[uint]*FormFieldSelectDB

	// stores FormFieldSelectDB ID according to FormFieldSelect address
	Map_FormFieldSelectPtr_FormFieldSelectDBID map[*models.FormFieldSelect]uint

	// stores FormFieldSelect according to their gorm ID
	Map_FormFieldSelectDBID_FormFieldSelectPtr map[uint]*models.FormFieldSelect

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormFieldSelect.stage
	return
}

func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) GetDB() *gorm.DB {
	return backRepoFormFieldSelect.db
}

// GetFormFieldSelectDBFromFormFieldSelectPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) GetFormFieldSelectDBFromFormFieldSelectPtr(formfieldselect *models.FormFieldSelect) (formfieldselectDB *FormFieldSelectDB) {
	id := backRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID[formfieldselect]
	formfieldselectDB = backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB[id]
	return
}

// BackRepoFormFieldSelect.CommitPhaseOne commits all staged instances of FormFieldSelect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formfieldselect := range stage.FormFieldSelects {
		backRepoFormFieldSelect.CommitPhaseOneInstance(formfieldselect)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formfieldselect := range backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr {
		if _, ok := stage.FormFieldSelects[formfieldselect]; !ok {
			backRepoFormFieldSelect.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormFieldSelect.CommitDeleteInstance commits deletion of FormFieldSelect to the BackRepo
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CommitDeleteInstance(id uint) (Error error) {

	formfieldselect := backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr[id]

	// formfieldselect is not staged anymore, remove formfieldselectDB
	formfieldselectDB := backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB[id]
	query := backRepoFormFieldSelect.db.Unscoped().Delete(&formfieldselectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID, formfieldselect)
	delete(backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr, id)
	delete(backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB, id)

	return
}

// BackRepoFormFieldSelect.CommitPhaseOneInstance commits formfieldselect staged instances of FormFieldSelect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CommitPhaseOneInstance(formfieldselect *models.FormFieldSelect) (Error error) {

	// check if the formfieldselect is not commited yet
	if _, ok := backRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID[formfieldselect]; ok {
		return
	}

	// initiate formfieldselect
	var formfieldselectDB FormFieldSelectDB
	formfieldselectDB.CopyBasicFieldsFromFormFieldSelect(formfieldselect)

	query := backRepoFormFieldSelect.db.Create(&formfieldselectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID[formfieldselect] = formfieldselectDB.ID
	backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr[formfieldselectDB.ID] = formfieldselect
	backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB[formfieldselectDB.ID] = &formfieldselectDB

	return
}

// BackRepoFormFieldSelect.CommitPhaseTwo commits all staged instances of FormFieldSelect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formfieldselect := range backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr {
		backRepoFormFieldSelect.CommitPhaseTwoInstance(backRepo, idx, formfieldselect)
	}

	return
}

// BackRepoFormFieldSelect.CommitPhaseTwoInstance commits {{structname }} of models.FormFieldSelect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formfieldselect *models.FormFieldSelect) (Error error) {

	// fetch matching formfieldselectDB
	if formfieldselectDB, ok := backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB[idx]; ok {

		formfieldselectDB.CopyBasicFieldsFromFormFieldSelect(formfieldselect)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value formfieldselect.Value translates to updating the formfieldselect.ValueID
		formfieldselectDB.ValueID.Valid = true // allow for a 0 value (nil association)
		if formfieldselect.Value != nil {
			if ValueId, ok := backRepo.BackRepoOption.Map_OptionPtr_OptionDBID[formfieldselect.Value]; ok {
				formfieldselectDB.ValueID.Int64 = int64(ValueId)
				formfieldselectDB.ValueID.Valid = true
			}
		} else {
			formfieldselectDB.ValueID.Int64 = 0
			formfieldselectDB.ValueID.Valid = true
		}

		// 1. reset
		formfieldselectDB.FormFieldSelectPointersEncoding.Options = make([]int, 0)
		// 2. encode
		for _, optionAssocEnd := range formfieldselect.Options {
			optionAssocEnd_DB :=
				backRepo.BackRepoOption.GetOptionDBFromOptionPtr(optionAssocEnd)
			formfieldselectDB.FormFieldSelectPointersEncoding.Options =
				append(formfieldselectDB.FormFieldSelectPointersEncoding.Options, int(optionAssocEnd_DB.ID))
		}

		query := backRepoFormFieldSelect.db.Save(&formfieldselectDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormFieldSelect intance %s", formfieldselect.Name))
		return err
	}

	return
}

// BackRepoFormFieldSelect.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CheckoutPhaseOne() (Error error) {

	formfieldselectDBArray := make([]FormFieldSelectDB, 0)
	query := backRepoFormFieldSelect.db.Find(&formfieldselectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formfieldselectInstancesToBeRemovedFromTheStage := make(map[*models.FormFieldSelect]any)
	for key, value := range backRepoFormFieldSelect.stage.FormFieldSelects {
		formfieldselectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formfieldselectDB := range formfieldselectDBArray {
		backRepoFormFieldSelect.CheckoutPhaseOneInstance(&formfieldselectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formfieldselect, ok := backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr[formfieldselectDB.ID]
		if ok {
			delete(formfieldselectInstancesToBeRemovedFromTheStage, formfieldselect)
		}
	}

	// remove from stage and back repo's 3 maps all formfieldselects that are not in the checkout
	for formfieldselect := range formfieldselectInstancesToBeRemovedFromTheStage {
		formfieldselect.Unstage(backRepoFormFieldSelect.GetStage())

		// remove instance from the back repo 3 maps
		formfieldselectID := backRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID[formfieldselect]
		delete(backRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID, formfieldselect)
		delete(backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB, formfieldselectID)
		delete(backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr, formfieldselectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formfieldselectDB that has been found in the DB, updates the backRepo and stages the
// models version of the formfieldselectDB
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CheckoutPhaseOneInstance(formfieldselectDB *FormFieldSelectDB) (Error error) {

	formfieldselect, ok := backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr[formfieldselectDB.ID]
	if !ok {
		formfieldselect = new(models.FormFieldSelect)

		backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr[formfieldselectDB.ID] = formfieldselect
		backRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID[formfieldselect] = formfieldselectDB.ID

		// append model store with the new element
		formfieldselect.Name = formfieldselectDB.Name_Data.String
		formfieldselect.Stage(backRepoFormFieldSelect.GetStage())
	}
	formfieldselectDB.CopyBasicFieldsToFormFieldSelect(formfieldselect)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formfieldselect.Stage(backRepoFormFieldSelect.GetStage())

	// preserve pointer to formfieldselectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormFieldSelectDBID_FormFieldSelectDB)[formfieldselectDB hold variable pointers
	formfieldselectDB_Data := *formfieldselectDB
	preservedPtrToFormFieldSelect := &formfieldselectDB_Data
	backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB[formfieldselectDB.ID] = preservedPtrToFormFieldSelect

	return
}

// BackRepoFormFieldSelect.CheckoutPhaseTwo Checkouts all staged instances of FormFieldSelect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formfieldselectDB := range backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB {
		backRepoFormFieldSelect.CheckoutPhaseTwoInstance(backRepo, formfieldselectDB)
	}
	return
}

// BackRepoFormFieldSelect.CheckoutPhaseTwoInstance Checkouts staged instances of FormFieldSelect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formfieldselectDB *FormFieldSelectDB) (Error error) {

	formfieldselect := backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr[formfieldselectDB.ID]

	formfieldselectDB.DecodePointers(backRepo, formfieldselect)

	return
}

func (formfieldselectDB *FormFieldSelectDB) DecodePointers(backRepo *BackRepoStruct, formfieldselect *models.FormFieldSelect) {

	// insertion point for checkout of pointer encoding
	// Value field
	formfieldselect.Value = nil
	if formfieldselectDB.ValueID.Int64 != 0 {
		formfieldselect.Value = backRepo.BackRepoOption.Map_OptionDBID_OptionPtr[uint(formfieldselectDB.ValueID.Int64)]
	}
	// This loop redeem formfieldselect.Options in the stage from the encode in the back repo
	// It parses all OptionDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	formfieldselect.Options = formfieldselect.Options[:0]
	for _, _Optionid := range formfieldselectDB.FormFieldSelectPointersEncoding.Options {
		formfieldselect.Options = append(formfieldselect.Options, backRepo.BackRepoOption.Map_OptionDBID_OptionPtr[uint(_Optionid)])
	}

	return
}

// CommitFormFieldSelect allows commit of a single formfieldselect (if already staged)
func (backRepo *BackRepoStruct) CommitFormFieldSelect(formfieldselect *models.FormFieldSelect) {
	backRepo.BackRepoFormFieldSelect.CommitPhaseOneInstance(formfieldselect)
	if id, ok := backRepo.BackRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID[formfieldselect]; ok {
		backRepo.BackRepoFormFieldSelect.CommitPhaseTwoInstance(backRepo, id, formfieldselect)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormFieldSelect allows checkout of a single formfieldselect (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormFieldSelect(formfieldselect *models.FormFieldSelect) {
	// check if the formfieldselect is staged
	if _, ok := backRepo.BackRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID[formfieldselect]; ok {

		if id, ok := backRepo.BackRepoFormFieldSelect.Map_FormFieldSelectPtr_FormFieldSelectDBID[formfieldselect]; ok {
			var formfieldselectDB FormFieldSelectDB
			formfieldselectDB.ID = id

			if err := backRepo.BackRepoFormFieldSelect.db.First(&formfieldselectDB, id).Error; err != nil {
				log.Fatalln("CheckoutFormFieldSelect : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormFieldSelect.CheckoutPhaseOneInstance(&formfieldselectDB)
			backRepo.BackRepoFormFieldSelect.CheckoutPhaseTwoInstance(backRepo, &formfieldselectDB)
		}
	}
}

// CopyBasicFieldsFromFormFieldSelect
func (formfieldselectDB *FormFieldSelectDB) CopyBasicFieldsFromFormFieldSelect(formfieldselect *models.FormFieldSelect) {
	// insertion point for fields commit

	formfieldselectDB.Name_Data.String = formfieldselect.Name
	formfieldselectDB.Name_Data.Valid = true

	formfieldselectDB.CanBeEmpty_Data.Bool = formfieldselect.CanBeEmpty
	formfieldselectDB.CanBeEmpty_Data.Valid = true
}

// CopyBasicFieldsFromFormFieldSelect_WOP
func (formfieldselectDB *FormFieldSelectDB) CopyBasicFieldsFromFormFieldSelect_WOP(formfieldselect *models.FormFieldSelect_WOP) {
	// insertion point for fields commit

	formfieldselectDB.Name_Data.String = formfieldselect.Name
	formfieldselectDB.Name_Data.Valid = true

	formfieldselectDB.CanBeEmpty_Data.Bool = formfieldselect.CanBeEmpty
	formfieldselectDB.CanBeEmpty_Data.Valid = true
}

// CopyBasicFieldsFromFormFieldSelectWOP
func (formfieldselectDB *FormFieldSelectDB) CopyBasicFieldsFromFormFieldSelectWOP(formfieldselect *FormFieldSelectWOP) {
	// insertion point for fields commit

	formfieldselectDB.Name_Data.String = formfieldselect.Name
	formfieldselectDB.Name_Data.Valid = true

	formfieldselectDB.CanBeEmpty_Data.Bool = formfieldselect.CanBeEmpty
	formfieldselectDB.CanBeEmpty_Data.Valid = true
}

// CopyBasicFieldsToFormFieldSelect
func (formfieldselectDB *FormFieldSelectDB) CopyBasicFieldsToFormFieldSelect(formfieldselect *models.FormFieldSelect) {
	// insertion point for checkout of basic fields (back repo to stage)
	formfieldselect.Name = formfieldselectDB.Name_Data.String
	formfieldselect.CanBeEmpty = formfieldselectDB.CanBeEmpty_Data.Bool
}

// CopyBasicFieldsToFormFieldSelect_WOP
func (formfieldselectDB *FormFieldSelectDB) CopyBasicFieldsToFormFieldSelect_WOP(formfieldselect *models.FormFieldSelect_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	formfieldselect.Name = formfieldselectDB.Name_Data.String
	formfieldselect.CanBeEmpty = formfieldselectDB.CanBeEmpty_Data.Bool
}

// CopyBasicFieldsToFormFieldSelectWOP
func (formfieldselectDB *FormFieldSelectDB) CopyBasicFieldsToFormFieldSelectWOP(formfieldselect *FormFieldSelectWOP) {
	formfieldselect.ID = int(formfieldselectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formfieldselect.Name = formfieldselectDB.Name_Data.String
	formfieldselect.CanBeEmpty = formfieldselectDB.CanBeEmpty_Data.Bool
}

// Backup generates a json file from a slice of all FormFieldSelectDB instances in the backrepo
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormFieldSelectDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormFieldSelectDB, 0)
	for _, formfieldselectDB := range backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB {
		forBackup = append(forBackup, formfieldselectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FormFieldSelect ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FormFieldSelect file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormFieldSelectDB instances in the backrepo
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormFieldSelectDB, 0)
	for _, formfieldselectDB := range backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB {
		forBackup = append(forBackup, formfieldselectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormFieldSelect")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormFieldSelect_Fields, -1)
	for _, formfieldselectDB := range forBackup {

		var formfieldselectWOP FormFieldSelectWOP
		formfieldselectDB.CopyBasicFieldsToFormFieldSelectWOP(&formfieldselectWOP)

		row := sh.AddRow()
		row.WriteStruct(&formfieldselectWOP, -1)
	}
}

// RestoreXL from the "FormFieldSelect" sheet all FormFieldSelectDB instances
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormFieldSelectid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormFieldSelect"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormFieldSelect.rowVisitorFormFieldSelect)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) rowVisitorFormFieldSelect(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formfieldselectWOP FormFieldSelectWOP
		row.ReadStruct(&formfieldselectWOP)

		// add the unmarshalled struct to the stage
		formfieldselectDB := new(FormFieldSelectDB)
		formfieldselectDB.CopyBasicFieldsFromFormFieldSelectWOP(&formfieldselectWOP)

		formfieldselectDB_ID_atBackupTime := formfieldselectDB.ID
		formfieldselectDB.ID = 0
		query := backRepoFormFieldSelect.db.Create(formfieldselectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB[formfieldselectDB.ID] = formfieldselectDB
		BackRepoFormFieldSelectid_atBckpTime_newID[formfieldselectDB_ID_atBackupTime] = formfieldselectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormFieldSelectDB.json" in dirPath that stores an array
// of FormFieldSelectDB and stores it in the database
// the map BackRepoFormFieldSelectid_atBckpTime_newID is updated accordingly
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormFieldSelectid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormFieldSelectDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FormFieldSelect file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormFieldSelectDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormFieldSelectDBID_FormFieldSelectDB
	for _, formfieldselectDB := range forRestore {

		formfieldselectDB_ID_atBackupTime := formfieldselectDB.ID
		formfieldselectDB.ID = 0
		query := backRepoFormFieldSelect.db.Create(formfieldselectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB[formfieldselectDB.ID] = formfieldselectDB
		BackRepoFormFieldSelectid_atBckpTime_newID[formfieldselectDB_ID_atBackupTime] = formfieldselectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FormFieldSelect file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormFieldSelect>id_atBckpTime_newID
// to compute new index
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) RestorePhaseTwo() {

	for _, formfieldselectDB := range backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB {

		// next line of code is to avert unused variable compilation error
		_ = formfieldselectDB

		// insertion point for reindexing pointers encoding
		// reindexing Value field
		if formfieldselectDB.ValueID.Int64 != 0 {
			formfieldselectDB.ValueID.Int64 = int64(BackRepoOptionid_atBckpTime_newID[uint(formfieldselectDB.ValueID.Int64)])
			formfieldselectDB.ValueID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoFormFieldSelect.db.Model(formfieldselectDB).Updates(*formfieldselectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFormFieldSelect.ResetReversePointers commits all staged instances of FormFieldSelect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, formfieldselect := range backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectPtr {
		backRepoFormFieldSelect.ResetReversePointersInstance(backRepo, idx, formfieldselect)
	}

	return
}

func (backRepoFormFieldSelect *BackRepoFormFieldSelectStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, formfieldselect *models.FormFieldSelect) (Error error) {

	// fetch matching formfieldselectDB
	if formfieldselectDB, ok := backRepoFormFieldSelect.Map_FormFieldSelectDBID_FormFieldSelectDB[idx]; ok {
		_ = formfieldselectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormFieldSelectid_atBckpTime_newID map[uint]uint
