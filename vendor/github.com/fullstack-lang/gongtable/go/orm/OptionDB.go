// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Option_sql sql.NullBool
var dummy_Option_time time.Duration
var dummy_Option_sort sort.Float64Slice

// OptionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model optionAPI
type OptionAPI struct {
	gorm.Model

	models.Option_WOP

	// encoding of pointers
	OptionPointersEncoding OptionPointersEncoding
}

// OptionPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type OptionPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// OptionDB describes a option in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model optionDB
type OptionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field optionDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	OptionPointersEncoding
}

// OptionDBs arrays optionDBs
// swagger:response optionDBsResponse
type OptionDBs []OptionDB

// OptionDBResponse provides response
// swagger:response optionDBResponse
type OptionDBResponse struct {
	OptionDB
}

// OptionWOP is a Option without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type OptionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Option_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoOptionStruct struct {
	// stores OptionDB according to their gorm ID
	Map_OptionDBID_OptionDB map[uint]*OptionDB

	// stores OptionDB ID according to Option address
	Map_OptionPtr_OptionDBID map[*models.Option]uint

	// stores Option according to their gorm ID
	Map_OptionDBID_OptionPtr map[uint]*models.Option

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOption *BackRepoOptionStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOption.stage
	return
}

func (backRepoOption *BackRepoOptionStruct) GetDB() *gorm.DB {
	return backRepoOption.db
}

// GetOptionDBFromOptionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOption *BackRepoOptionStruct) GetOptionDBFromOptionPtr(option *models.Option) (optionDB *OptionDB) {
	id := backRepoOption.Map_OptionPtr_OptionDBID[option]
	optionDB = backRepoOption.Map_OptionDBID_OptionDB[id]
	return
}

// BackRepoOption.CommitPhaseOne commits all staged instances of Option to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOption *BackRepoOptionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for option := range stage.Options {
		backRepoOption.CommitPhaseOneInstance(option)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, option := range backRepoOption.Map_OptionDBID_OptionPtr {
		if _, ok := stage.Options[option]; !ok {
			backRepoOption.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOption.CommitDeleteInstance commits deletion of Option to the BackRepo
func (backRepoOption *BackRepoOptionStruct) CommitDeleteInstance(id uint) (Error error) {

	option := backRepoOption.Map_OptionDBID_OptionPtr[id]

	// option is not staged anymore, remove optionDB
	optionDB := backRepoOption.Map_OptionDBID_OptionDB[id]
	query := backRepoOption.db.Unscoped().Delete(&optionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoOption.Map_OptionPtr_OptionDBID, option)
	delete(backRepoOption.Map_OptionDBID_OptionPtr, id)
	delete(backRepoOption.Map_OptionDBID_OptionDB, id)

	return
}

// BackRepoOption.CommitPhaseOneInstance commits option staged instances of Option to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOption *BackRepoOptionStruct) CommitPhaseOneInstance(option *models.Option) (Error error) {

	// check if the option is not commited yet
	if _, ok := backRepoOption.Map_OptionPtr_OptionDBID[option]; ok {
		return
	}

	// initiate option
	var optionDB OptionDB
	optionDB.CopyBasicFieldsFromOption(option)

	query := backRepoOption.db.Create(&optionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoOption.Map_OptionPtr_OptionDBID[option] = optionDB.ID
	backRepoOption.Map_OptionDBID_OptionPtr[optionDB.ID] = option
	backRepoOption.Map_OptionDBID_OptionDB[optionDB.ID] = &optionDB

	return
}

// BackRepoOption.CommitPhaseTwo commits all staged instances of Option to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOption *BackRepoOptionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, option := range backRepoOption.Map_OptionDBID_OptionPtr {
		backRepoOption.CommitPhaseTwoInstance(backRepo, idx, option)
	}

	return
}

// BackRepoOption.CommitPhaseTwoInstance commits {{structname }} of models.Option to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOption *BackRepoOptionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, option *models.Option) (Error error) {

	// fetch matching optionDB
	if optionDB, ok := backRepoOption.Map_OptionDBID_OptionDB[idx]; ok {

		optionDB.CopyBasicFieldsFromOption(option)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOption.db.Save(&optionDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Option intance %s", option.Name))
		return err
	}

	return
}

// BackRepoOption.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOption *BackRepoOptionStruct) CheckoutPhaseOne() (Error error) {

	optionDBArray := make([]OptionDB, 0)
	query := backRepoOption.db.Find(&optionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	optionInstancesToBeRemovedFromTheStage := make(map[*models.Option]any)
	for key, value := range backRepoOption.stage.Options {
		optionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, optionDB := range optionDBArray {
		backRepoOption.CheckoutPhaseOneInstance(&optionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		option, ok := backRepoOption.Map_OptionDBID_OptionPtr[optionDB.ID]
		if ok {
			delete(optionInstancesToBeRemovedFromTheStage, option)
		}
	}

	// remove from stage and back repo's 3 maps all options that are not in the checkout
	for option := range optionInstancesToBeRemovedFromTheStage {
		option.Unstage(backRepoOption.GetStage())

		// remove instance from the back repo 3 maps
		optionID := backRepoOption.Map_OptionPtr_OptionDBID[option]
		delete(backRepoOption.Map_OptionPtr_OptionDBID, option)
		delete(backRepoOption.Map_OptionDBID_OptionDB, optionID)
		delete(backRepoOption.Map_OptionDBID_OptionPtr, optionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a optionDB that has been found in the DB, updates the backRepo and stages the
// models version of the optionDB
func (backRepoOption *BackRepoOptionStruct) CheckoutPhaseOneInstance(optionDB *OptionDB) (Error error) {

	option, ok := backRepoOption.Map_OptionDBID_OptionPtr[optionDB.ID]
	if !ok {
		option = new(models.Option)

		backRepoOption.Map_OptionDBID_OptionPtr[optionDB.ID] = option
		backRepoOption.Map_OptionPtr_OptionDBID[option] = optionDB.ID

		// append model store with the new element
		option.Name = optionDB.Name_Data.String
		option.Stage(backRepoOption.GetStage())
	}
	optionDB.CopyBasicFieldsToOption(option)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	option.Stage(backRepoOption.GetStage())

	// preserve pointer to optionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_OptionDBID_OptionDB)[optionDB hold variable pointers
	optionDB_Data := *optionDB
	preservedPtrToOption := &optionDB_Data
	backRepoOption.Map_OptionDBID_OptionDB[optionDB.ID] = preservedPtrToOption

	return
}

// BackRepoOption.CheckoutPhaseTwo Checkouts all staged instances of Option to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOption *BackRepoOptionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, optionDB := range backRepoOption.Map_OptionDBID_OptionDB {
		backRepoOption.CheckoutPhaseTwoInstance(backRepo, optionDB)
	}
	return
}

// BackRepoOption.CheckoutPhaseTwoInstance Checkouts staged instances of Option to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOption *BackRepoOptionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, optionDB *OptionDB) (Error error) {

	option := backRepoOption.Map_OptionDBID_OptionPtr[optionDB.ID]

	optionDB.DecodePointers(backRepo, option)

	return
}

func (optionDB *OptionDB) DecodePointers(backRepo *BackRepoStruct, option *models.Option) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitOption allows commit of a single option (if already staged)
func (backRepo *BackRepoStruct) CommitOption(option *models.Option) {
	backRepo.BackRepoOption.CommitPhaseOneInstance(option)
	if id, ok := backRepo.BackRepoOption.Map_OptionPtr_OptionDBID[option]; ok {
		backRepo.BackRepoOption.CommitPhaseTwoInstance(backRepo, id, option)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOption allows checkout of a single option (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOption(option *models.Option) {
	// check if the option is staged
	if _, ok := backRepo.BackRepoOption.Map_OptionPtr_OptionDBID[option]; ok {

		if id, ok := backRepo.BackRepoOption.Map_OptionPtr_OptionDBID[option]; ok {
			var optionDB OptionDB
			optionDB.ID = id

			if err := backRepo.BackRepoOption.db.First(&optionDB, id).Error; err != nil {
				log.Fatalln("CheckoutOption : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOption.CheckoutPhaseOneInstance(&optionDB)
			backRepo.BackRepoOption.CheckoutPhaseTwoInstance(backRepo, &optionDB)
		}
	}
}

// CopyBasicFieldsFromOption
func (optionDB *OptionDB) CopyBasicFieldsFromOption(option *models.Option) {
	// insertion point for fields commit

	optionDB.Name_Data.String = option.Name
	optionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOption_WOP
func (optionDB *OptionDB) CopyBasicFieldsFromOption_WOP(option *models.Option_WOP) {
	// insertion point for fields commit

	optionDB.Name_Data.String = option.Name
	optionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOptionWOP
func (optionDB *OptionDB) CopyBasicFieldsFromOptionWOP(option *OptionWOP) {
	// insertion point for fields commit

	optionDB.Name_Data.String = option.Name
	optionDB.Name_Data.Valid = true
}

// CopyBasicFieldsToOption
func (optionDB *OptionDB) CopyBasicFieldsToOption(option *models.Option) {
	// insertion point for checkout of basic fields (back repo to stage)
	option.Name = optionDB.Name_Data.String
}

// CopyBasicFieldsToOption_WOP
func (optionDB *OptionDB) CopyBasicFieldsToOption_WOP(option *models.Option_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	option.Name = optionDB.Name_Data.String
}

// CopyBasicFieldsToOptionWOP
func (optionDB *OptionDB) CopyBasicFieldsToOptionWOP(option *OptionWOP) {
	option.ID = int(optionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	option.Name = optionDB.Name_Data.String
}

// Backup generates a json file from a slice of all OptionDB instances in the backrepo
func (backRepoOption *BackRepoOptionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "OptionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OptionDB, 0)
	for _, optionDB := range backRepoOption.Map_OptionDBID_OptionDB {
		forBackup = append(forBackup, optionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Option ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Option file", err.Error())
	}
}

// Backup generates a json file from a slice of all OptionDB instances in the backrepo
func (backRepoOption *BackRepoOptionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OptionDB, 0)
	for _, optionDB := range backRepoOption.Map_OptionDBID_OptionDB {
		forBackup = append(forBackup, optionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Option")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Option_Fields, -1)
	for _, optionDB := range forBackup {

		var optionWOP OptionWOP
		optionDB.CopyBasicFieldsToOptionWOP(&optionWOP)

		row := sh.AddRow()
		row.WriteStruct(&optionWOP, -1)
	}
}

// RestoreXL from the "Option" sheet all OptionDB instances
func (backRepoOption *BackRepoOptionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOptionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Option"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOption.rowVisitorOption)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoOption *BackRepoOptionStruct) rowVisitorOption(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var optionWOP OptionWOP
		row.ReadStruct(&optionWOP)

		// add the unmarshalled struct to the stage
		optionDB := new(OptionDB)
		optionDB.CopyBasicFieldsFromOptionWOP(&optionWOP)

		optionDB_ID_atBackupTime := optionDB.ID
		optionDB.ID = 0
		query := backRepoOption.db.Create(optionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOption.Map_OptionDBID_OptionDB[optionDB.ID] = optionDB
		BackRepoOptionid_atBckpTime_newID[optionDB_ID_atBackupTime] = optionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "OptionDB.json" in dirPath that stores an array
// of OptionDB and stores it in the database
// the map BackRepoOptionid_atBckpTime_newID is updated accordingly
func (backRepoOption *BackRepoOptionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOptionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "OptionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Option file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*OptionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_OptionDBID_OptionDB
	for _, optionDB := range forRestore {

		optionDB_ID_atBackupTime := optionDB.ID
		optionDB.ID = 0
		query := backRepoOption.db.Create(optionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOption.Map_OptionDBID_OptionDB[optionDB.ID] = optionDB
		BackRepoOptionid_atBckpTime_newID[optionDB_ID_atBackupTime] = optionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Option file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Option>id_atBckpTime_newID
// to compute new index
func (backRepoOption *BackRepoOptionStruct) RestorePhaseTwo() {

	for _, optionDB := range backRepoOption.Map_OptionDBID_OptionDB {

		// next line of code is to avert unused variable compilation error
		_ = optionDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOption.db.Model(optionDB).Updates(*optionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoOption.ResetReversePointers commits all staged instances of Option to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOption *BackRepoOptionStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, option := range backRepoOption.Map_OptionDBID_OptionPtr {
		backRepoOption.ResetReversePointersInstance(backRepo, idx, option)
	}

	return
}

func (backRepoOption *BackRepoOptionStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, option *models.Option) (Error error) {

	// fetch matching optionDB
	if optionDB, ok := backRepoOption.Map_OptionDBID_OptionDB[idx]; ok {
		_ = optionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOptionid_atBckpTime_newID map[uint]uint
