// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CellInt_sql sql.NullBool
var dummy_CellInt_time time.Duration
var dummy_CellInt_sort sort.Float64Slice

// CellIntAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model cellintAPI
type CellIntAPI struct {
	gorm.Model

	models.CellInt_WOP

	// encoding of pointers
	CellIntPointersEncoding CellIntPointersEncoding
}

// CellIntPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CellIntPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CellIntDB describes a cellint in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model cellintDB
type CellIntDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field cellintDB.Name
	Name_Data sql.NullString

	// Declation for basic field cellintDB.Value
	Value_Data sql.NullInt64
	// encoding of pointers
	CellIntPointersEncoding
}

// CellIntDBs arrays cellintDBs
// swagger:response cellintDBsResponse
type CellIntDBs []CellIntDB

// CellIntDBResponse provides response
// swagger:response cellintDBResponse
type CellIntDBResponse struct {
	CellIntDB
}

// CellIntWOP is a CellInt without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CellIntWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value int `xlsx:"2"`
	// insertion for WOP pointer fields
}

var CellInt_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoCellIntStruct struct {
	// stores CellIntDB according to their gorm ID
	Map_CellIntDBID_CellIntDB map[uint]*CellIntDB

	// stores CellIntDB ID according to CellInt address
	Map_CellIntPtr_CellIntDBID map[*models.CellInt]uint

	// stores CellInt according to their gorm ID
	Map_CellIntDBID_CellIntPtr map[uint]*models.CellInt

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCellInt *BackRepoCellIntStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCellInt.stage
	return
}

func (backRepoCellInt *BackRepoCellIntStruct) GetDB() *gorm.DB {
	return backRepoCellInt.db
}

// GetCellIntDBFromCellIntPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCellInt *BackRepoCellIntStruct) GetCellIntDBFromCellIntPtr(cellint *models.CellInt) (cellintDB *CellIntDB) {
	id := backRepoCellInt.Map_CellIntPtr_CellIntDBID[cellint]
	cellintDB = backRepoCellInt.Map_CellIntDBID_CellIntDB[id]
	return
}

// BackRepoCellInt.CommitPhaseOne commits all staged instances of CellInt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCellInt *BackRepoCellIntStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for cellint := range stage.CellInts {
		backRepoCellInt.CommitPhaseOneInstance(cellint)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, cellint := range backRepoCellInt.Map_CellIntDBID_CellIntPtr {
		if _, ok := stage.CellInts[cellint]; !ok {
			backRepoCellInt.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCellInt.CommitDeleteInstance commits deletion of CellInt to the BackRepo
func (backRepoCellInt *BackRepoCellIntStruct) CommitDeleteInstance(id uint) (Error error) {

	cellint := backRepoCellInt.Map_CellIntDBID_CellIntPtr[id]

	// cellint is not staged anymore, remove cellintDB
	cellintDB := backRepoCellInt.Map_CellIntDBID_CellIntDB[id]
	query := backRepoCellInt.db.Unscoped().Delete(&cellintDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCellInt.Map_CellIntPtr_CellIntDBID, cellint)
	delete(backRepoCellInt.Map_CellIntDBID_CellIntPtr, id)
	delete(backRepoCellInt.Map_CellIntDBID_CellIntDB, id)

	return
}

// BackRepoCellInt.CommitPhaseOneInstance commits cellint staged instances of CellInt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCellInt *BackRepoCellIntStruct) CommitPhaseOneInstance(cellint *models.CellInt) (Error error) {

	// check if the cellint is not commited yet
	if _, ok := backRepoCellInt.Map_CellIntPtr_CellIntDBID[cellint]; ok {
		return
	}

	// initiate cellint
	var cellintDB CellIntDB
	cellintDB.CopyBasicFieldsFromCellInt(cellint)

	query := backRepoCellInt.db.Create(&cellintDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCellInt.Map_CellIntPtr_CellIntDBID[cellint] = cellintDB.ID
	backRepoCellInt.Map_CellIntDBID_CellIntPtr[cellintDB.ID] = cellint
	backRepoCellInt.Map_CellIntDBID_CellIntDB[cellintDB.ID] = &cellintDB

	return
}

// BackRepoCellInt.CommitPhaseTwo commits all staged instances of CellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellInt *BackRepoCellIntStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, cellint := range backRepoCellInt.Map_CellIntDBID_CellIntPtr {
		backRepoCellInt.CommitPhaseTwoInstance(backRepo, idx, cellint)
	}

	return
}

// BackRepoCellInt.CommitPhaseTwoInstance commits {{structname }} of models.CellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellInt *BackRepoCellIntStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, cellint *models.CellInt) (Error error) {

	// fetch matching cellintDB
	if cellintDB, ok := backRepoCellInt.Map_CellIntDBID_CellIntDB[idx]; ok {

		cellintDB.CopyBasicFieldsFromCellInt(cellint)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCellInt.db.Save(&cellintDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CellInt intance %s", cellint.Name))
		return err
	}

	return
}

// BackRepoCellInt.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCellInt *BackRepoCellIntStruct) CheckoutPhaseOne() (Error error) {

	cellintDBArray := make([]CellIntDB, 0)
	query := backRepoCellInt.db.Find(&cellintDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	cellintInstancesToBeRemovedFromTheStage := make(map[*models.CellInt]any)
	for key, value := range backRepoCellInt.stage.CellInts {
		cellintInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, cellintDB := range cellintDBArray {
		backRepoCellInt.CheckoutPhaseOneInstance(&cellintDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		cellint, ok := backRepoCellInt.Map_CellIntDBID_CellIntPtr[cellintDB.ID]
		if ok {
			delete(cellintInstancesToBeRemovedFromTheStage, cellint)
		}
	}

	// remove from stage and back repo's 3 maps all cellints that are not in the checkout
	for cellint := range cellintInstancesToBeRemovedFromTheStage {
		cellint.Unstage(backRepoCellInt.GetStage())

		// remove instance from the back repo 3 maps
		cellintID := backRepoCellInt.Map_CellIntPtr_CellIntDBID[cellint]
		delete(backRepoCellInt.Map_CellIntPtr_CellIntDBID, cellint)
		delete(backRepoCellInt.Map_CellIntDBID_CellIntDB, cellintID)
		delete(backRepoCellInt.Map_CellIntDBID_CellIntPtr, cellintID)
	}

	return
}

// CheckoutPhaseOneInstance takes a cellintDB that has been found in the DB, updates the backRepo and stages the
// models version of the cellintDB
func (backRepoCellInt *BackRepoCellIntStruct) CheckoutPhaseOneInstance(cellintDB *CellIntDB) (Error error) {

	cellint, ok := backRepoCellInt.Map_CellIntDBID_CellIntPtr[cellintDB.ID]
	if !ok {
		cellint = new(models.CellInt)

		backRepoCellInt.Map_CellIntDBID_CellIntPtr[cellintDB.ID] = cellint
		backRepoCellInt.Map_CellIntPtr_CellIntDBID[cellint] = cellintDB.ID

		// append model store with the new element
		cellint.Name = cellintDB.Name_Data.String
		cellint.Stage(backRepoCellInt.GetStage())
	}
	cellintDB.CopyBasicFieldsToCellInt(cellint)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	cellint.Stage(backRepoCellInt.GetStage())

	// preserve pointer to cellintDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CellIntDBID_CellIntDB)[cellintDB hold variable pointers
	cellintDB_Data := *cellintDB
	preservedPtrToCellInt := &cellintDB_Data
	backRepoCellInt.Map_CellIntDBID_CellIntDB[cellintDB.ID] = preservedPtrToCellInt

	return
}

// BackRepoCellInt.CheckoutPhaseTwo Checkouts all staged instances of CellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellInt *BackRepoCellIntStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, cellintDB := range backRepoCellInt.Map_CellIntDBID_CellIntDB {
		backRepoCellInt.CheckoutPhaseTwoInstance(backRepo, cellintDB)
	}
	return
}

// BackRepoCellInt.CheckoutPhaseTwoInstance Checkouts staged instances of CellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellInt *BackRepoCellIntStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, cellintDB *CellIntDB) (Error error) {

	cellint := backRepoCellInt.Map_CellIntDBID_CellIntPtr[cellintDB.ID]

	cellintDB.DecodePointers(backRepo, cellint)

	return
}

func (cellintDB *CellIntDB) DecodePointers(backRepo *BackRepoStruct, cellint *models.CellInt) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCellInt allows commit of a single cellint (if already staged)
func (backRepo *BackRepoStruct) CommitCellInt(cellint *models.CellInt) {
	backRepo.BackRepoCellInt.CommitPhaseOneInstance(cellint)
	if id, ok := backRepo.BackRepoCellInt.Map_CellIntPtr_CellIntDBID[cellint]; ok {
		backRepo.BackRepoCellInt.CommitPhaseTwoInstance(backRepo, id, cellint)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCellInt allows checkout of a single cellint (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCellInt(cellint *models.CellInt) {
	// check if the cellint is staged
	if _, ok := backRepo.BackRepoCellInt.Map_CellIntPtr_CellIntDBID[cellint]; ok {

		if id, ok := backRepo.BackRepoCellInt.Map_CellIntPtr_CellIntDBID[cellint]; ok {
			var cellintDB CellIntDB
			cellintDB.ID = id

			if err := backRepo.BackRepoCellInt.db.First(&cellintDB, id).Error; err != nil {
				log.Fatalln("CheckoutCellInt : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCellInt.CheckoutPhaseOneInstance(&cellintDB)
			backRepo.BackRepoCellInt.CheckoutPhaseTwoInstance(backRepo, &cellintDB)
		}
	}
}

// CopyBasicFieldsFromCellInt
func (cellintDB *CellIntDB) CopyBasicFieldsFromCellInt(cellint *models.CellInt) {
	// insertion point for fields commit

	cellintDB.Name_Data.String = cellint.Name
	cellintDB.Name_Data.Valid = true

	cellintDB.Value_Data.Int64 = int64(cellint.Value)
	cellintDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromCellInt_WOP
func (cellintDB *CellIntDB) CopyBasicFieldsFromCellInt_WOP(cellint *models.CellInt_WOP) {
	// insertion point for fields commit

	cellintDB.Name_Data.String = cellint.Name
	cellintDB.Name_Data.Valid = true

	cellintDB.Value_Data.Int64 = int64(cellint.Value)
	cellintDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromCellIntWOP
func (cellintDB *CellIntDB) CopyBasicFieldsFromCellIntWOP(cellint *CellIntWOP) {
	// insertion point for fields commit

	cellintDB.Name_Data.String = cellint.Name
	cellintDB.Name_Data.Valid = true

	cellintDB.Value_Data.Int64 = int64(cellint.Value)
	cellintDB.Value_Data.Valid = true
}

// CopyBasicFieldsToCellInt
func (cellintDB *CellIntDB) CopyBasicFieldsToCellInt(cellint *models.CellInt) {
	// insertion point for checkout of basic fields (back repo to stage)
	cellint.Name = cellintDB.Name_Data.String
	cellint.Value = int(cellintDB.Value_Data.Int64)
}

// CopyBasicFieldsToCellInt_WOP
func (cellintDB *CellIntDB) CopyBasicFieldsToCellInt_WOP(cellint *models.CellInt_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	cellint.Name = cellintDB.Name_Data.String
	cellint.Value = int(cellintDB.Value_Data.Int64)
}

// CopyBasicFieldsToCellIntWOP
func (cellintDB *CellIntDB) CopyBasicFieldsToCellIntWOP(cellint *CellIntWOP) {
	cellint.ID = int(cellintDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	cellint.Name = cellintDB.Name_Data.String
	cellint.Value = int(cellintDB.Value_Data.Int64)
}

// Backup generates a json file from a slice of all CellIntDB instances in the backrepo
func (backRepoCellInt *BackRepoCellIntStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CellIntDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CellIntDB, 0)
	for _, cellintDB := range backRepoCellInt.Map_CellIntDBID_CellIntDB {
		forBackup = append(forBackup, cellintDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json CellInt ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json CellInt file", err.Error())
	}
}

// Backup generates a json file from a slice of all CellIntDB instances in the backrepo
func (backRepoCellInt *BackRepoCellIntStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CellIntDB, 0)
	for _, cellintDB := range backRepoCellInt.Map_CellIntDBID_CellIntDB {
		forBackup = append(forBackup, cellintDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CellInt")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CellInt_Fields, -1)
	for _, cellintDB := range forBackup {

		var cellintWOP CellIntWOP
		cellintDB.CopyBasicFieldsToCellIntWOP(&cellintWOP)

		row := sh.AddRow()
		row.WriteStruct(&cellintWOP, -1)
	}
}

// RestoreXL from the "CellInt" sheet all CellIntDB instances
func (backRepoCellInt *BackRepoCellIntStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCellIntid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CellInt"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCellInt.rowVisitorCellInt)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCellInt *BackRepoCellIntStruct) rowVisitorCellInt(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var cellintWOP CellIntWOP
		row.ReadStruct(&cellintWOP)

		// add the unmarshalled struct to the stage
		cellintDB := new(CellIntDB)
		cellintDB.CopyBasicFieldsFromCellIntWOP(&cellintWOP)

		cellintDB_ID_atBackupTime := cellintDB.ID
		cellintDB.ID = 0
		query := backRepoCellInt.db.Create(cellintDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCellInt.Map_CellIntDBID_CellIntDB[cellintDB.ID] = cellintDB
		BackRepoCellIntid_atBckpTime_newID[cellintDB_ID_atBackupTime] = cellintDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CellIntDB.json" in dirPath that stores an array
// of CellIntDB and stores it in the database
// the map BackRepoCellIntid_atBckpTime_newID is updated accordingly
func (backRepoCellInt *BackRepoCellIntStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCellIntid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CellIntDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json CellInt file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CellIntDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CellIntDBID_CellIntDB
	for _, cellintDB := range forRestore {

		cellintDB_ID_atBackupTime := cellintDB.ID
		cellintDB.ID = 0
		query := backRepoCellInt.db.Create(cellintDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCellInt.Map_CellIntDBID_CellIntDB[cellintDB.ID] = cellintDB
		BackRepoCellIntid_atBckpTime_newID[cellintDB_ID_atBackupTime] = cellintDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json CellInt file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CellInt>id_atBckpTime_newID
// to compute new index
func (backRepoCellInt *BackRepoCellIntStruct) RestorePhaseTwo() {

	for _, cellintDB := range backRepoCellInt.Map_CellIntDBID_CellIntDB {

		// next line of code is to avert unused variable compilation error
		_ = cellintDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCellInt.db.Model(cellintDB).Updates(*cellintDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCellInt.ResetReversePointers commits all staged instances of CellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellInt *BackRepoCellIntStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, cellint := range backRepoCellInt.Map_CellIntDBID_CellIntPtr {
		backRepoCellInt.ResetReversePointersInstance(backRepo, idx, cellint)
	}

	return
}

func (backRepoCellInt *BackRepoCellIntStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, cellint *models.CellInt) (Error error) {

	// fetch matching cellintDB
	if cellintDB, ok := backRepoCellInt.Map_CellIntDBID_CellIntDB[idx]; ok {
		_ = cellintDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCellIntid_atBckpTime_newID map[uint]uint
