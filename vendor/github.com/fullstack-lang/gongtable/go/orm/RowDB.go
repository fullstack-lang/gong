// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Row_sql sql.NullBool
var dummy_Row_time time.Duration
var dummy_Row_sort sort.Float64Slice

// RowAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model rowAPI
type RowAPI struct {
	gorm.Model

	models.Row_WOP

	// encoding of pointers
	RowPointersEncoding RowPointersEncoding
}

// RowPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RowPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Cells is a slice of pointers to another Struct (optional or 0..1)
	Cells IntSlice `gorm:"type:TEXT"`
}

// RowDB describes a row in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model rowDB
type RowDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field rowDB.Name
	Name_Data sql.NullString

	// Declation for basic field rowDB.IsChecked
	// provide the sql storage for the boolan
	IsChecked_Data sql.NullBool
	// encoding of pointers
	RowPointersEncoding
}

// RowDBs arrays rowDBs
// swagger:response rowDBsResponse
type RowDBs []RowDB

// RowDBResponse provides response
// swagger:response rowDBResponse
type RowDBResponse struct {
	RowDB
}

// RowWOP is a Row without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RowWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsChecked bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Row_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsChecked",
}

type BackRepoRowStruct struct {
	// stores RowDB according to their gorm ID
	Map_RowDBID_RowDB map[uint]*RowDB

	// stores RowDB ID according to Row address
	Map_RowPtr_RowDBID map[*models.Row]uint

	// stores Row according to their gorm ID
	Map_RowDBID_RowPtr map[uint]*models.Row

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRow *BackRepoRowStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRow.stage
	return
}

func (backRepoRow *BackRepoRowStruct) GetDB() *gorm.DB {
	return backRepoRow.db
}

// GetRowDBFromRowPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRow *BackRepoRowStruct) GetRowDBFromRowPtr(row *models.Row) (rowDB *RowDB) {
	id := backRepoRow.Map_RowPtr_RowDBID[row]
	rowDB = backRepoRow.Map_RowDBID_RowDB[id]
	return
}

// BackRepoRow.CommitPhaseOne commits all staged instances of Row to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRow *BackRepoRowStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for row := range stage.Rows {
		backRepoRow.CommitPhaseOneInstance(row)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, row := range backRepoRow.Map_RowDBID_RowPtr {
		if _, ok := stage.Rows[row]; !ok {
			backRepoRow.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRow.CommitDeleteInstance commits deletion of Row to the BackRepo
func (backRepoRow *BackRepoRowStruct) CommitDeleteInstance(id uint) (Error error) {

	row := backRepoRow.Map_RowDBID_RowPtr[id]

	// row is not staged anymore, remove rowDB
	rowDB := backRepoRow.Map_RowDBID_RowDB[id]
	query := backRepoRow.db.Unscoped().Delete(&rowDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRow.Map_RowPtr_RowDBID, row)
	delete(backRepoRow.Map_RowDBID_RowPtr, id)
	delete(backRepoRow.Map_RowDBID_RowDB, id)

	return
}

// BackRepoRow.CommitPhaseOneInstance commits row staged instances of Row to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRow *BackRepoRowStruct) CommitPhaseOneInstance(row *models.Row) (Error error) {

	// check if the row is not commited yet
	if _, ok := backRepoRow.Map_RowPtr_RowDBID[row]; ok {
		return
	}

	// initiate row
	var rowDB RowDB
	rowDB.CopyBasicFieldsFromRow(row)

	query := backRepoRow.db.Create(&rowDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRow.Map_RowPtr_RowDBID[row] = rowDB.ID
	backRepoRow.Map_RowDBID_RowPtr[rowDB.ID] = row
	backRepoRow.Map_RowDBID_RowDB[rowDB.ID] = &rowDB

	return
}

// BackRepoRow.CommitPhaseTwo commits all staged instances of Row to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRow *BackRepoRowStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, row := range backRepoRow.Map_RowDBID_RowPtr {
		backRepoRow.CommitPhaseTwoInstance(backRepo, idx, row)
	}

	return
}

// BackRepoRow.CommitPhaseTwoInstance commits {{structname }} of models.Row to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRow *BackRepoRowStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, row *models.Row) (Error error) {

	// fetch matching rowDB
	if rowDB, ok := backRepoRow.Map_RowDBID_RowDB[idx]; ok {

		rowDB.CopyBasicFieldsFromRow(row)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		rowDB.RowPointersEncoding.Cells = make([]int, 0)
		// 2. encode
		for _, cellAssocEnd := range row.Cells {
			cellAssocEnd_DB :=
				backRepo.BackRepoCell.GetCellDBFromCellPtr(cellAssocEnd)
			rowDB.RowPointersEncoding.Cells =
				append(rowDB.RowPointersEncoding.Cells, int(cellAssocEnd_DB.ID))
		}

		query := backRepoRow.db.Save(&rowDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Row intance %s", row.Name))
		return err
	}

	return
}

// BackRepoRow.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRow *BackRepoRowStruct) CheckoutPhaseOne() (Error error) {

	rowDBArray := make([]RowDB, 0)
	query := backRepoRow.db.Find(&rowDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	rowInstancesToBeRemovedFromTheStage := make(map[*models.Row]any)
	for key, value := range backRepoRow.stage.Rows {
		rowInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, rowDB := range rowDBArray {
		backRepoRow.CheckoutPhaseOneInstance(&rowDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		row, ok := backRepoRow.Map_RowDBID_RowPtr[rowDB.ID]
		if ok {
			delete(rowInstancesToBeRemovedFromTheStage, row)
		}
	}

	// remove from stage and back repo's 3 maps all rows that are not in the checkout
	for row := range rowInstancesToBeRemovedFromTheStage {
		row.Unstage(backRepoRow.GetStage())

		// remove instance from the back repo 3 maps
		rowID := backRepoRow.Map_RowPtr_RowDBID[row]
		delete(backRepoRow.Map_RowPtr_RowDBID, row)
		delete(backRepoRow.Map_RowDBID_RowDB, rowID)
		delete(backRepoRow.Map_RowDBID_RowPtr, rowID)
	}

	return
}

// CheckoutPhaseOneInstance takes a rowDB that has been found in the DB, updates the backRepo and stages the
// models version of the rowDB
func (backRepoRow *BackRepoRowStruct) CheckoutPhaseOneInstance(rowDB *RowDB) (Error error) {

	row, ok := backRepoRow.Map_RowDBID_RowPtr[rowDB.ID]
	if !ok {
		row = new(models.Row)

		backRepoRow.Map_RowDBID_RowPtr[rowDB.ID] = row
		backRepoRow.Map_RowPtr_RowDBID[row] = rowDB.ID

		// append model store with the new element
		row.Name = rowDB.Name_Data.String
		row.Stage(backRepoRow.GetStage())
	}
	rowDB.CopyBasicFieldsToRow(row)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	row.Stage(backRepoRow.GetStage())

	// preserve pointer to rowDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RowDBID_RowDB)[rowDB hold variable pointers
	rowDB_Data := *rowDB
	preservedPtrToRow := &rowDB_Data
	backRepoRow.Map_RowDBID_RowDB[rowDB.ID] = preservedPtrToRow

	return
}

// BackRepoRow.CheckoutPhaseTwo Checkouts all staged instances of Row to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRow *BackRepoRowStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, rowDB := range backRepoRow.Map_RowDBID_RowDB {
		backRepoRow.CheckoutPhaseTwoInstance(backRepo, rowDB)
	}
	return
}

// BackRepoRow.CheckoutPhaseTwoInstance Checkouts staged instances of Row to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRow *BackRepoRowStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, rowDB *RowDB) (Error error) {

	row := backRepoRow.Map_RowDBID_RowPtr[rowDB.ID]

	rowDB.DecodePointers(backRepo, row)

	return
}

func (rowDB *RowDB) DecodePointers(backRepo *BackRepoStruct, row *models.Row) {

	// insertion point for checkout of pointer encoding
	// This loop redeem row.Cells in the stage from the encode in the back repo
	// It parses all CellDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	row.Cells = row.Cells[:0]
	for _, _Cellid := range rowDB.RowPointersEncoding.Cells {
		row.Cells = append(row.Cells, backRepo.BackRepoCell.Map_CellDBID_CellPtr[uint(_Cellid)])
	}

	return
}

// CommitRow allows commit of a single row (if already staged)
func (backRepo *BackRepoStruct) CommitRow(row *models.Row) {
	backRepo.BackRepoRow.CommitPhaseOneInstance(row)
	if id, ok := backRepo.BackRepoRow.Map_RowPtr_RowDBID[row]; ok {
		backRepo.BackRepoRow.CommitPhaseTwoInstance(backRepo, id, row)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRow allows checkout of a single row (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRow(row *models.Row) {
	// check if the row is staged
	if _, ok := backRepo.BackRepoRow.Map_RowPtr_RowDBID[row]; ok {

		if id, ok := backRepo.BackRepoRow.Map_RowPtr_RowDBID[row]; ok {
			var rowDB RowDB
			rowDB.ID = id

			if err := backRepo.BackRepoRow.db.First(&rowDB, id).Error; err != nil {
				log.Fatalln("CheckoutRow : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRow.CheckoutPhaseOneInstance(&rowDB)
			backRepo.BackRepoRow.CheckoutPhaseTwoInstance(backRepo, &rowDB)
		}
	}
}

// CopyBasicFieldsFromRow
func (rowDB *RowDB) CopyBasicFieldsFromRow(row *models.Row) {
	// insertion point for fields commit

	rowDB.Name_Data.String = row.Name
	rowDB.Name_Data.Valid = true

	rowDB.IsChecked_Data.Bool = row.IsChecked
	rowDB.IsChecked_Data.Valid = true
}

// CopyBasicFieldsFromRow_WOP
func (rowDB *RowDB) CopyBasicFieldsFromRow_WOP(row *models.Row_WOP) {
	// insertion point for fields commit

	rowDB.Name_Data.String = row.Name
	rowDB.Name_Data.Valid = true

	rowDB.IsChecked_Data.Bool = row.IsChecked
	rowDB.IsChecked_Data.Valid = true
}

// CopyBasicFieldsFromRowWOP
func (rowDB *RowDB) CopyBasicFieldsFromRowWOP(row *RowWOP) {
	// insertion point for fields commit

	rowDB.Name_Data.String = row.Name
	rowDB.Name_Data.Valid = true

	rowDB.IsChecked_Data.Bool = row.IsChecked
	rowDB.IsChecked_Data.Valid = true
}

// CopyBasicFieldsToRow
func (rowDB *RowDB) CopyBasicFieldsToRow(row *models.Row) {
	// insertion point for checkout of basic fields (back repo to stage)
	row.Name = rowDB.Name_Data.String
	row.IsChecked = rowDB.IsChecked_Data.Bool
}

// CopyBasicFieldsToRow_WOP
func (rowDB *RowDB) CopyBasicFieldsToRow_WOP(row *models.Row_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	row.Name = rowDB.Name_Data.String
	row.IsChecked = rowDB.IsChecked_Data.Bool
}

// CopyBasicFieldsToRowWOP
func (rowDB *RowDB) CopyBasicFieldsToRowWOP(row *RowWOP) {
	row.ID = int(rowDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	row.Name = rowDB.Name_Data.String
	row.IsChecked = rowDB.IsChecked_Data.Bool
}

// Backup generates a json file from a slice of all RowDB instances in the backrepo
func (backRepoRow *BackRepoRowStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RowDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RowDB, 0)
	for _, rowDB := range backRepoRow.Map_RowDBID_RowDB {
		forBackup = append(forBackup, rowDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Row ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Row file", err.Error())
	}
}

// Backup generates a json file from a slice of all RowDB instances in the backrepo
func (backRepoRow *BackRepoRowStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RowDB, 0)
	for _, rowDB := range backRepoRow.Map_RowDBID_RowDB {
		forBackup = append(forBackup, rowDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Row")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Row_Fields, -1)
	for _, rowDB := range forBackup {

		var rowWOP RowWOP
		rowDB.CopyBasicFieldsToRowWOP(&rowWOP)

		row := sh.AddRow()
		row.WriteStruct(&rowWOP, -1)
	}
}

// RestoreXL from the "Row" sheet all RowDB instances
func (backRepoRow *BackRepoRowStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRowid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Row"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRow.rowVisitorRow)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRow *BackRepoRowStruct) rowVisitorRow(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var rowWOP RowWOP
		row.ReadStruct(&rowWOP)

		// add the unmarshalled struct to the stage
		rowDB := new(RowDB)
		rowDB.CopyBasicFieldsFromRowWOP(&rowWOP)

		rowDB_ID_atBackupTime := rowDB.ID
		rowDB.ID = 0
		query := backRepoRow.db.Create(rowDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRow.Map_RowDBID_RowDB[rowDB.ID] = rowDB
		BackRepoRowid_atBckpTime_newID[rowDB_ID_atBackupTime] = rowDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RowDB.json" in dirPath that stores an array
// of RowDB and stores it in the database
// the map BackRepoRowid_atBckpTime_newID is updated accordingly
func (backRepoRow *BackRepoRowStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRowid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RowDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Row file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RowDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RowDBID_RowDB
	for _, rowDB := range forRestore {

		rowDB_ID_atBackupTime := rowDB.ID
		rowDB.ID = 0
		query := backRepoRow.db.Create(rowDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRow.Map_RowDBID_RowDB[rowDB.ID] = rowDB
		BackRepoRowid_atBckpTime_newID[rowDB_ID_atBackupTime] = rowDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Row file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Row>id_atBckpTime_newID
// to compute new index
func (backRepoRow *BackRepoRowStruct) RestorePhaseTwo() {

	for _, rowDB := range backRepoRow.Map_RowDBID_RowDB {

		// next line of code is to avert unused variable compilation error
		_ = rowDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRow.db.Model(rowDB).Updates(*rowDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRow.ResetReversePointers commits all staged instances of Row to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRow *BackRepoRowStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, row := range backRepoRow.Map_RowDBID_RowPtr {
		backRepoRow.ResetReversePointersInstance(backRepo, idx, row)
	}

	return
}

func (backRepoRow *BackRepoRowStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, row *models.Row) (Error error) {

	// fetch matching rowDB
	if rowDB, ok := backRepoRow.Map_RowDBID_RowDB[idx]; ok {
		_ = rowDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRowid_atBckpTime_newID map[uint]uint
