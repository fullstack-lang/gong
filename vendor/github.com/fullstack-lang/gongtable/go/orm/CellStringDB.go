// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CellString_sql sql.NullBool
var dummy_CellString_time time.Duration
var dummy_CellString_sort sort.Float64Slice

// CellStringAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model cellstringAPI
type CellStringAPI struct {
	gorm.Model

	models.CellString_WOP

	// encoding of pointers
	CellStringPointersEncoding CellStringPointersEncoding
}

// CellStringPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CellStringPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CellStringDB describes a cellstring in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model cellstringDB
type CellStringDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field cellstringDB.Name
	Name_Data sql.NullString

	// Declation for basic field cellstringDB.Value
	Value_Data sql.NullString
	// encoding of pointers
	CellStringPointersEncoding
}

// CellStringDBs arrays cellstringDBs
// swagger:response cellstringDBsResponse
type CellStringDBs []CellStringDB

// CellStringDBResponse provides response
// swagger:response cellstringDBResponse
type CellStringDBResponse struct {
	CellStringDB
}

// CellStringWOP is a CellString without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CellStringWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var CellString_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoCellStringStruct struct {
	// stores CellStringDB according to their gorm ID
	Map_CellStringDBID_CellStringDB map[uint]*CellStringDB

	// stores CellStringDB ID according to CellString address
	Map_CellStringPtr_CellStringDBID map[*models.CellString]uint

	// stores CellString according to their gorm ID
	Map_CellStringDBID_CellStringPtr map[uint]*models.CellString

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCellString *BackRepoCellStringStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCellString.stage
	return
}

func (backRepoCellString *BackRepoCellStringStruct) GetDB() *gorm.DB {
	return backRepoCellString.db
}

// GetCellStringDBFromCellStringPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCellString *BackRepoCellStringStruct) GetCellStringDBFromCellStringPtr(cellstring *models.CellString) (cellstringDB *CellStringDB) {
	id := backRepoCellString.Map_CellStringPtr_CellStringDBID[cellstring]
	cellstringDB = backRepoCellString.Map_CellStringDBID_CellStringDB[id]
	return
}

// BackRepoCellString.CommitPhaseOne commits all staged instances of CellString to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCellString *BackRepoCellStringStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for cellstring := range stage.CellStrings {
		backRepoCellString.CommitPhaseOneInstance(cellstring)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, cellstring := range backRepoCellString.Map_CellStringDBID_CellStringPtr {
		if _, ok := stage.CellStrings[cellstring]; !ok {
			backRepoCellString.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCellString.CommitDeleteInstance commits deletion of CellString to the BackRepo
func (backRepoCellString *BackRepoCellStringStruct) CommitDeleteInstance(id uint) (Error error) {

	cellstring := backRepoCellString.Map_CellStringDBID_CellStringPtr[id]

	// cellstring is not staged anymore, remove cellstringDB
	cellstringDB := backRepoCellString.Map_CellStringDBID_CellStringDB[id]
	query := backRepoCellString.db.Unscoped().Delete(&cellstringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCellString.Map_CellStringPtr_CellStringDBID, cellstring)
	delete(backRepoCellString.Map_CellStringDBID_CellStringPtr, id)
	delete(backRepoCellString.Map_CellStringDBID_CellStringDB, id)

	return
}

// BackRepoCellString.CommitPhaseOneInstance commits cellstring staged instances of CellString to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCellString *BackRepoCellStringStruct) CommitPhaseOneInstance(cellstring *models.CellString) (Error error) {

	// check if the cellstring is not commited yet
	if _, ok := backRepoCellString.Map_CellStringPtr_CellStringDBID[cellstring]; ok {
		return
	}

	// initiate cellstring
	var cellstringDB CellStringDB
	cellstringDB.CopyBasicFieldsFromCellString(cellstring)

	query := backRepoCellString.db.Create(&cellstringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCellString.Map_CellStringPtr_CellStringDBID[cellstring] = cellstringDB.ID
	backRepoCellString.Map_CellStringDBID_CellStringPtr[cellstringDB.ID] = cellstring
	backRepoCellString.Map_CellStringDBID_CellStringDB[cellstringDB.ID] = &cellstringDB

	return
}

// BackRepoCellString.CommitPhaseTwo commits all staged instances of CellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellString *BackRepoCellStringStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, cellstring := range backRepoCellString.Map_CellStringDBID_CellStringPtr {
		backRepoCellString.CommitPhaseTwoInstance(backRepo, idx, cellstring)
	}

	return
}

// BackRepoCellString.CommitPhaseTwoInstance commits {{structname }} of models.CellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellString *BackRepoCellStringStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, cellstring *models.CellString) (Error error) {

	// fetch matching cellstringDB
	if cellstringDB, ok := backRepoCellString.Map_CellStringDBID_CellStringDB[idx]; ok {

		cellstringDB.CopyBasicFieldsFromCellString(cellstring)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCellString.db.Save(&cellstringDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CellString intance %s", cellstring.Name))
		return err
	}

	return
}

// BackRepoCellString.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCellString *BackRepoCellStringStruct) CheckoutPhaseOne() (Error error) {

	cellstringDBArray := make([]CellStringDB, 0)
	query := backRepoCellString.db.Find(&cellstringDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	cellstringInstancesToBeRemovedFromTheStage := make(map[*models.CellString]any)
	for key, value := range backRepoCellString.stage.CellStrings {
		cellstringInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, cellstringDB := range cellstringDBArray {
		backRepoCellString.CheckoutPhaseOneInstance(&cellstringDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		cellstring, ok := backRepoCellString.Map_CellStringDBID_CellStringPtr[cellstringDB.ID]
		if ok {
			delete(cellstringInstancesToBeRemovedFromTheStage, cellstring)
		}
	}

	// remove from stage and back repo's 3 maps all cellstrings that are not in the checkout
	for cellstring := range cellstringInstancesToBeRemovedFromTheStage {
		cellstring.Unstage(backRepoCellString.GetStage())

		// remove instance from the back repo 3 maps
		cellstringID := backRepoCellString.Map_CellStringPtr_CellStringDBID[cellstring]
		delete(backRepoCellString.Map_CellStringPtr_CellStringDBID, cellstring)
		delete(backRepoCellString.Map_CellStringDBID_CellStringDB, cellstringID)
		delete(backRepoCellString.Map_CellStringDBID_CellStringPtr, cellstringID)
	}

	return
}

// CheckoutPhaseOneInstance takes a cellstringDB that has been found in the DB, updates the backRepo and stages the
// models version of the cellstringDB
func (backRepoCellString *BackRepoCellStringStruct) CheckoutPhaseOneInstance(cellstringDB *CellStringDB) (Error error) {

	cellstring, ok := backRepoCellString.Map_CellStringDBID_CellStringPtr[cellstringDB.ID]
	if !ok {
		cellstring = new(models.CellString)

		backRepoCellString.Map_CellStringDBID_CellStringPtr[cellstringDB.ID] = cellstring
		backRepoCellString.Map_CellStringPtr_CellStringDBID[cellstring] = cellstringDB.ID

		// append model store with the new element
		cellstring.Name = cellstringDB.Name_Data.String
		cellstring.Stage(backRepoCellString.GetStage())
	}
	cellstringDB.CopyBasicFieldsToCellString(cellstring)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	cellstring.Stage(backRepoCellString.GetStage())

	// preserve pointer to cellstringDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CellStringDBID_CellStringDB)[cellstringDB hold variable pointers
	cellstringDB_Data := *cellstringDB
	preservedPtrToCellString := &cellstringDB_Data
	backRepoCellString.Map_CellStringDBID_CellStringDB[cellstringDB.ID] = preservedPtrToCellString

	return
}

// BackRepoCellString.CheckoutPhaseTwo Checkouts all staged instances of CellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellString *BackRepoCellStringStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, cellstringDB := range backRepoCellString.Map_CellStringDBID_CellStringDB {
		backRepoCellString.CheckoutPhaseTwoInstance(backRepo, cellstringDB)
	}
	return
}

// BackRepoCellString.CheckoutPhaseTwoInstance Checkouts staged instances of CellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellString *BackRepoCellStringStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, cellstringDB *CellStringDB) (Error error) {

	cellstring := backRepoCellString.Map_CellStringDBID_CellStringPtr[cellstringDB.ID]

	cellstringDB.DecodePointers(backRepo, cellstring)

	return
}

func (cellstringDB *CellStringDB) DecodePointers(backRepo *BackRepoStruct, cellstring *models.CellString) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCellString allows commit of a single cellstring (if already staged)
func (backRepo *BackRepoStruct) CommitCellString(cellstring *models.CellString) {
	backRepo.BackRepoCellString.CommitPhaseOneInstance(cellstring)
	if id, ok := backRepo.BackRepoCellString.Map_CellStringPtr_CellStringDBID[cellstring]; ok {
		backRepo.BackRepoCellString.CommitPhaseTwoInstance(backRepo, id, cellstring)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCellString allows checkout of a single cellstring (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCellString(cellstring *models.CellString) {
	// check if the cellstring is staged
	if _, ok := backRepo.BackRepoCellString.Map_CellStringPtr_CellStringDBID[cellstring]; ok {

		if id, ok := backRepo.BackRepoCellString.Map_CellStringPtr_CellStringDBID[cellstring]; ok {
			var cellstringDB CellStringDB
			cellstringDB.ID = id

			if err := backRepo.BackRepoCellString.db.First(&cellstringDB, id).Error; err != nil {
				log.Fatalln("CheckoutCellString : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCellString.CheckoutPhaseOneInstance(&cellstringDB)
			backRepo.BackRepoCellString.CheckoutPhaseTwoInstance(backRepo, &cellstringDB)
		}
	}
}

// CopyBasicFieldsFromCellString
func (cellstringDB *CellStringDB) CopyBasicFieldsFromCellString(cellstring *models.CellString) {
	// insertion point for fields commit

	cellstringDB.Name_Data.String = cellstring.Name
	cellstringDB.Name_Data.Valid = true

	cellstringDB.Value_Data.String = cellstring.Value
	cellstringDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromCellString_WOP
func (cellstringDB *CellStringDB) CopyBasicFieldsFromCellString_WOP(cellstring *models.CellString_WOP) {
	// insertion point for fields commit

	cellstringDB.Name_Data.String = cellstring.Name
	cellstringDB.Name_Data.Valid = true

	cellstringDB.Value_Data.String = cellstring.Value
	cellstringDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromCellStringWOP
func (cellstringDB *CellStringDB) CopyBasicFieldsFromCellStringWOP(cellstring *CellStringWOP) {
	// insertion point for fields commit

	cellstringDB.Name_Data.String = cellstring.Name
	cellstringDB.Name_Data.Valid = true

	cellstringDB.Value_Data.String = cellstring.Value
	cellstringDB.Value_Data.Valid = true
}

// CopyBasicFieldsToCellString
func (cellstringDB *CellStringDB) CopyBasicFieldsToCellString(cellstring *models.CellString) {
	// insertion point for checkout of basic fields (back repo to stage)
	cellstring.Name = cellstringDB.Name_Data.String
	cellstring.Value = cellstringDB.Value_Data.String
}

// CopyBasicFieldsToCellString_WOP
func (cellstringDB *CellStringDB) CopyBasicFieldsToCellString_WOP(cellstring *models.CellString_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	cellstring.Name = cellstringDB.Name_Data.String
	cellstring.Value = cellstringDB.Value_Data.String
}

// CopyBasicFieldsToCellStringWOP
func (cellstringDB *CellStringDB) CopyBasicFieldsToCellStringWOP(cellstring *CellStringWOP) {
	cellstring.ID = int(cellstringDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	cellstring.Name = cellstringDB.Name_Data.String
	cellstring.Value = cellstringDB.Value_Data.String
}

// Backup generates a json file from a slice of all CellStringDB instances in the backrepo
func (backRepoCellString *BackRepoCellStringStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CellStringDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CellStringDB, 0)
	for _, cellstringDB := range backRepoCellString.Map_CellStringDBID_CellStringDB {
		forBackup = append(forBackup, cellstringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json CellString ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json CellString file", err.Error())
	}
}

// Backup generates a json file from a slice of all CellStringDB instances in the backrepo
func (backRepoCellString *BackRepoCellStringStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CellStringDB, 0)
	for _, cellstringDB := range backRepoCellString.Map_CellStringDBID_CellStringDB {
		forBackup = append(forBackup, cellstringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CellString")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CellString_Fields, -1)
	for _, cellstringDB := range forBackup {

		var cellstringWOP CellStringWOP
		cellstringDB.CopyBasicFieldsToCellStringWOP(&cellstringWOP)

		row := sh.AddRow()
		row.WriteStruct(&cellstringWOP, -1)
	}
}

// RestoreXL from the "CellString" sheet all CellStringDB instances
func (backRepoCellString *BackRepoCellStringStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCellStringid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CellString"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCellString.rowVisitorCellString)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCellString *BackRepoCellStringStruct) rowVisitorCellString(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var cellstringWOP CellStringWOP
		row.ReadStruct(&cellstringWOP)

		// add the unmarshalled struct to the stage
		cellstringDB := new(CellStringDB)
		cellstringDB.CopyBasicFieldsFromCellStringWOP(&cellstringWOP)

		cellstringDB_ID_atBackupTime := cellstringDB.ID
		cellstringDB.ID = 0
		query := backRepoCellString.db.Create(cellstringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCellString.Map_CellStringDBID_CellStringDB[cellstringDB.ID] = cellstringDB
		BackRepoCellStringid_atBckpTime_newID[cellstringDB_ID_atBackupTime] = cellstringDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CellStringDB.json" in dirPath that stores an array
// of CellStringDB and stores it in the database
// the map BackRepoCellStringid_atBckpTime_newID is updated accordingly
func (backRepoCellString *BackRepoCellStringStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCellStringid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CellStringDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json CellString file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CellStringDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CellStringDBID_CellStringDB
	for _, cellstringDB := range forRestore {

		cellstringDB_ID_atBackupTime := cellstringDB.ID
		cellstringDB.ID = 0
		query := backRepoCellString.db.Create(cellstringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCellString.Map_CellStringDBID_CellStringDB[cellstringDB.ID] = cellstringDB
		BackRepoCellStringid_atBckpTime_newID[cellstringDB_ID_atBackupTime] = cellstringDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json CellString file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CellString>id_atBckpTime_newID
// to compute new index
func (backRepoCellString *BackRepoCellStringStruct) RestorePhaseTwo() {

	for _, cellstringDB := range backRepoCellString.Map_CellStringDBID_CellStringDB {

		// next line of code is to avert unused variable compilation error
		_ = cellstringDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCellString.db.Model(cellstringDB).Updates(*cellstringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCellString.ResetReversePointers commits all staged instances of CellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCellString *BackRepoCellStringStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, cellstring := range backRepoCellString.Map_CellStringDBID_CellStringPtr {
		backRepoCellString.ResetReversePointersInstance(backRepo, idx, cellstring)
	}

	return
}

func (backRepoCellString *BackRepoCellStringStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, cellstring *models.CellString) (Error error) {

	// fetch matching cellstringDB
	if cellstringDB, ok := backRepoCellString.Map_CellStringDBID_CellStringDB[idx]; ok {
		_ = cellstringDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCellStringid_atBckpTime_newID map[uint]uint
