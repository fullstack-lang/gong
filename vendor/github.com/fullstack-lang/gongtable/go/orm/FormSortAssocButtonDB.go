// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormSortAssocButton_sql sql.NullBool
var dummy_FormSortAssocButton_time time.Duration
var dummy_FormSortAssocButton_sort sort.Float64Slice

// FormSortAssocButtonAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formsortassocbuttonAPI
type FormSortAssocButtonAPI struct {
	gorm.Model

	models.FormSortAssocButton_WOP

	// encoding of pointers
	FormSortAssocButtonPointersEncoding FormSortAssocButtonPointersEncoding
}

// FormSortAssocButtonPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormSortAssocButtonPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FormSortAssocButtonDB describes a formsortassocbutton in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formsortassocbuttonDB
type FormSortAssocButtonDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formsortassocbuttonDB.Name
	Name_Data sql.NullString

	// Declation for basic field formsortassocbuttonDB.Label
	Label_Data sql.NullString
	// encoding of pointers
	FormSortAssocButtonPointersEncoding
}

// FormSortAssocButtonDBs arrays formsortassocbuttonDBs
// swagger:response formsortassocbuttonDBsResponse
type FormSortAssocButtonDBs []FormSortAssocButtonDB

// FormSortAssocButtonDBResponse provides response
// swagger:response formsortassocbuttonDBResponse
type FormSortAssocButtonDBResponse struct {
	FormSortAssocButtonDB
}

// FormSortAssocButtonWOP is a FormSortAssocButton without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormSortAssocButtonWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Label string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FormSortAssocButton_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Label",
}

type BackRepoFormSortAssocButtonStruct struct {
	// stores FormSortAssocButtonDB according to their gorm ID
	Map_FormSortAssocButtonDBID_FormSortAssocButtonDB map[uint]*FormSortAssocButtonDB

	// stores FormSortAssocButtonDB ID according to FormSortAssocButton address
	Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID map[*models.FormSortAssocButton]uint

	// stores FormSortAssocButton according to their gorm ID
	Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr map[uint]*models.FormSortAssocButton

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormSortAssocButton.stage
	return
}

func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) GetDB() *gorm.DB {
	return backRepoFormSortAssocButton.db
}

// GetFormSortAssocButtonDBFromFormSortAssocButtonPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) GetFormSortAssocButtonDBFromFormSortAssocButtonPtr(formsortassocbutton *models.FormSortAssocButton) (formsortassocbuttonDB *FormSortAssocButtonDB) {
	id := backRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID[formsortassocbutton]
	formsortassocbuttonDB = backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB[id]
	return
}

// BackRepoFormSortAssocButton.CommitPhaseOne commits all staged instances of FormSortAssocButton to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formsortassocbutton := range stage.FormSortAssocButtons {
		backRepoFormSortAssocButton.CommitPhaseOneInstance(formsortassocbutton)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formsortassocbutton := range backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr {
		if _, ok := stage.FormSortAssocButtons[formsortassocbutton]; !ok {
			backRepoFormSortAssocButton.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormSortAssocButton.CommitDeleteInstance commits deletion of FormSortAssocButton to the BackRepo
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CommitDeleteInstance(id uint) (Error error) {

	formsortassocbutton := backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr[id]

	// formsortassocbutton is not staged anymore, remove formsortassocbuttonDB
	formsortassocbuttonDB := backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB[id]
	query := backRepoFormSortAssocButton.db.Unscoped().Delete(&formsortassocbuttonDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID, formsortassocbutton)
	delete(backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr, id)
	delete(backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB, id)

	return
}

// BackRepoFormSortAssocButton.CommitPhaseOneInstance commits formsortassocbutton staged instances of FormSortAssocButton to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CommitPhaseOneInstance(formsortassocbutton *models.FormSortAssocButton) (Error error) {

	// check if the formsortassocbutton is not commited yet
	if _, ok := backRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID[formsortassocbutton]; ok {
		return
	}

	// initiate formsortassocbutton
	var formsortassocbuttonDB FormSortAssocButtonDB
	formsortassocbuttonDB.CopyBasicFieldsFromFormSortAssocButton(formsortassocbutton)

	query := backRepoFormSortAssocButton.db.Create(&formsortassocbuttonDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID[formsortassocbutton] = formsortassocbuttonDB.ID
	backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr[formsortassocbuttonDB.ID] = formsortassocbutton
	backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB[formsortassocbuttonDB.ID] = &formsortassocbuttonDB

	return
}

// BackRepoFormSortAssocButton.CommitPhaseTwo commits all staged instances of FormSortAssocButton to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formsortassocbutton := range backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr {
		backRepoFormSortAssocButton.CommitPhaseTwoInstance(backRepo, idx, formsortassocbutton)
	}

	return
}

// BackRepoFormSortAssocButton.CommitPhaseTwoInstance commits {{structname }} of models.FormSortAssocButton to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formsortassocbutton *models.FormSortAssocButton) (Error error) {

	// fetch matching formsortassocbuttonDB
	if formsortassocbuttonDB, ok := backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB[idx]; ok {

		formsortassocbuttonDB.CopyBasicFieldsFromFormSortAssocButton(formsortassocbutton)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFormSortAssocButton.db.Save(&formsortassocbuttonDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormSortAssocButton intance %s", formsortassocbutton.Name))
		return err
	}

	return
}

// BackRepoFormSortAssocButton.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CheckoutPhaseOne() (Error error) {

	formsortassocbuttonDBArray := make([]FormSortAssocButtonDB, 0)
	query := backRepoFormSortAssocButton.db.Find(&formsortassocbuttonDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formsortassocbuttonInstancesToBeRemovedFromTheStage := make(map[*models.FormSortAssocButton]any)
	for key, value := range backRepoFormSortAssocButton.stage.FormSortAssocButtons {
		formsortassocbuttonInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formsortassocbuttonDB := range formsortassocbuttonDBArray {
		backRepoFormSortAssocButton.CheckoutPhaseOneInstance(&formsortassocbuttonDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formsortassocbutton, ok := backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr[formsortassocbuttonDB.ID]
		if ok {
			delete(formsortassocbuttonInstancesToBeRemovedFromTheStage, formsortassocbutton)
		}
	}

	// remove from stage and back repo's 3 maps all formsortassocbuttons that are not in the checkout
	for formsortassocbutton := range formsortassocbuttonInstancesToBeRemovedFromTheStage {
		formsortassocbutton.Unstage(backRepoFormSortAssocButton.GetStage())

		// remove instance from the back repo 3 maps
		formsortassocbuttonID := backRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID[formsortassocbutton]
		delete(backRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID, formsortassocbutton)
		delete(backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB, formsortassocbuttonID)
		delete(backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr, formsortassocbuttonID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formsortassocbuttonDB that has been found in the DB, updates the backRepo and stages the
// models version of the formsortassocbuttonDB
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CheckoutPhaseOneInstance(formsortassocbuttonDB *FormSortAssocButtonDB) (Error error) {

	formsortassocbutton, ok := backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr[formsortassocbuttonDB.ID]
	if !ok {
		formsortassocbutton = new(models.FormSortAssocButton)

		backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr[formsortassocbuttonDB.ID] = formsortassocbutton
		backRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID[formsortassocbutton] = formsortassocbuttonDB.ID

		// append model store with the new element
		formsortassocbutton.Name = formsortassocbuttonDB.Name_Data.String
		formsortassocbutton.Stage(backRepoFormSortAssocButton.GetStage())
	}
	formsortassocbuttonDB.CopyBasicFieldsToFormSortAssocButton(formsortassocbutton)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formsortassocbutton.Stage(backRepoFormSortAssocButton.GetStage())

	// preserve pointer to formsortassocbuttonDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormSortAssocButtonDBID_FormSortAssocButtonDB)[formsortassocbuttonDB hold variable pointers
	formsortassocbuttonDB_Data := *formsortassocbuttonDB
	preservedPtrToFormSortAssocButton := &formsortassocbuttonDB_Data
	backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB[formsortassocbuttonDB.ID] = preservedPtrToFormSortAssocButton

	return
}

// BackRepoFormSortAssocButton.CheckoutPhaseTwo Checkouts all staged instances of FormSortAssocButton to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formsortassocbuttonDB := range backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB {
		backRepoFormSortAssocButton.CheckoutPhaseTwoInstance(backRepo, formsortassocbuttonDB)
	}
	return
}

// BackRepoFormSortAssocButton.CheckoutPhaseTwoInstance Checkouts staged instances of FormSortAssocButton to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formsortassocbuttonDB *FormSortAssocButtonDB) (Error error) {

	formsortassocbutton := backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr[formsortassocbuttonDB.ID]

	formsortassocbuttonDB.DecodePointers(backRepo, formsortassocbutton)

	return
}

func (formsortassocbuttonDB *FormSortAssocButtonDB) DecodePointers(backRepo *BackRepoStruct, formsortassocbutton *models.FormSortAssocButton) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFormSortAssocButton allows commit of a single formsortassocbutton (if already staged)
func (backRepo *BackRepoStruct) CommitFormSortAssocButton(formsortassocbutton *models.FormSortAssocButton) {
	backRepo.BackRepoFormSortAssocButton.CommitPhaseOneInstance(formsortassocbutton)
	if id, ok := backRepo.BackRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID[formsortassocbutton]; ok {
		backRepo.BackRepoFormSortAssocButton.CommitPhaseTwoInstance(backRepo, id, formsortassocbutton)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormSortAssocButton allows checkout of a single formsortassocbutton (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormSortAssocButton(formsortassocbutton *models.FormSortAssocButton) {
	// check if the formsortassocbutton is staged
	if _, ok := backRepo.BackRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID[formsortassocbutton]; ok {

		if id, ok := backRepo.BackRepoFormSortAssocButton.Map_FormSortAssocButtonPtr_FormSortAssocButtonDBID[formsortassocbutton]; ok {
			var formsortassocbuttonDB FormSortAssocButtonDB
			formsortassocbuttonDB.ID = id

			if err := backRepo.BackRepoFormSortAssocButton.db.First(&formsortassocbuttonDB, id).Error; err != nil {
				log.Fatalln("CheckoutFormSortAssocButton : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormSortAssocButton.CheckoutPhaseOneInstance(&formsortassocbuttonDB)
			backRepo.BackRepoFormSortAssocButton.CheckoutPhaseTwoInstance(backRepo, &formsortassocbuttonDB)
		}
	}
}

// CopyBasicFieldsFromFormSortAssocButton
func (formsortassocbuttonDB *FormSortAssocButtonDB) CopyBasicFieldsFromFormSortAssocButton(formsortassocbutton *models.FormSortAssocButton) {
	// insertion point for fields commit

	formsortassocbuttonDB.Name_Data.String = formsortassocbutton.Name
	formsortassocbuttonDB.Name_Data.Valid = true

	formsortassocbuttonDB.Label_Data.String = formsortassocbutton.Label
	formsortassocbuttonDB.Label_Data.Valid = true
}

// CopyBasicFieldsFromFormSortAssocButton_WOP
func (formsortassocbuttonDB *FormSortAssocButtonDB) CopyBasicFieldsFromFormSortAssocButton_WOP(formsortassocbutton *models.FormSortAssocButton_WOP) {
	// insertion point for fields commit

	formsortassocbuttonDB.Name_Data.String = formsortassocbutton.Name
	formsortassocbuttonDB.Name_Data.Valid = true

	formsortassocbuttonDB.Label_Data.String = formsortassocbutton.Label
	formsortassocbuttonDB.Label_Data.Valid = true
}

// CopyBasicFieldsFromFormSortAssocButtonWOP
func (formsortassocbuttonDB *FormSortAssocButtonDB) CopyBasicFieldsFromFormSortAssocButtonWOP(formsortassocbutton *FormSortAssocButtonWOP) {
	// insertion point for fields commit

	formsortassocbuttonDB.Name_Data.String = formsortassocbutton.Name
	formsortassocbuttonDB.Name_Data.Valid = true

	formsortassocbuttonDB.Label_Data.String = formsortassocbutton.Label
	formsortassocbuttonDB.Label_Data.Valid = true
}

// CopyBasicFieldsToFormSortAssocButton
func (formsortassocbuttonDB *FormSortAssocButtonDB) CopyBasicFieldsToFormSortAssocButton(formsortassocbutton *models.FormSortAssocButton) {
	// insertion point for checkout of basic fields (back repo to stage)
	formsortassocbutton.Name = formsortassocbuttonDB.Name_Data.String
	formsortassocbutton.Label = formsortassocbuttonDB.Label_Data.String
}

// CopyBasicFieldsToFormSortAssocButton_WOP
func (formsortassocbuttonDB *FormSortAssocButtonDB) CopyBasicFieldsToFormSortAssocButton_WOP(formsortassocbutton *models.FormSortAssocButton_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	formsortassocbutton.Name = formsortassocbuttonDB.Name_Data.String
	formsortassocbutton.Label = formsortassocbuttonDB.Label_Data.String
}

// CopyBasicFieldsToFormSortAssocButtonWOP
func (formsortassocbuttonDB *FormSortAssocButtonDB) CopyBasicFieldsToFormSortAssocButtonWOP(formsortassocbutton *FormSortAssocButtonWOP) {
	formsortassocbutton.ID = int(formsortassocbuttonDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formsortassocbutton.Name = formsortassocbuttonDB.Name_Data.String
	formsortassocbutton.Label = formsortassocbuttonDB.Label_Data.String
}

// Backup generates a json file from a slice of all FormSortAssocButtonDB instances in the backrepo
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormSortAssocButtonDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormSortAssocButtonDB, 0)
	for _, formsortassocbuttonDB := range backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB {
		forBackup = append(forBackup, formsortassocbuttonDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FormSortAssocButton ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FormSortAssocButton file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormSortAssocButtonDB instances in the backrepo
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormSortAssocButtonDB, 0)
	for _, formsortassocbuttonDB := range backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB {
		forBackup = append(forBackup, formsortassocbuttonDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormSortAssocButton")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormSortAssocButton_Fields, -1)
	for _, formsortassocbuttonDB := range forBackup {

		var formsortassocbuttonWOP FormSortAssocButtonWOP
		formsortassocbuttonDB.CopyBasicFieldsToFormSortAssocButtonWOP(&formsortassocbuttonWOP)

		row := sh.AddRow()
		row.WriteStruct(&formsortassocbuttonWOP, -1)
	}
}

// RestoreXL from the "FormSortAssocButton" sheet all FormSortAssocButtonDB instances
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormSortAssocButtonid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormSortAssocButton"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormSortAssocButton.rowVisitorFormSortAssocButton)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) rowVisitorFormSortAssocButton(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formsortassocbuttonWOP FormSortAssocButtonWOP
		row.ReadStruct(&formsortassocbuttonWOP)

		// add the unmarshalled struct to the stage
		formsortassocbuttonDB := new(FormSortAssocButtonDB)
		formsortassocbuttonDB.CopyBasicFieldsFromFormSortAssocButtonWOP(&formsortassocbuttonWOP)

		formsortassocbuttonDB_ID_atBackupTime := formsortassocbuttonDB.ID
		formsortassocbuttonDB.ID = 0
		query := backRepoFormSortAssocButton.db.Create(formsortassocbuttonDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB[formsortassocbuttonDB.ID] = formsortassocbuttonDB
		BackRepoFormSortAssocButtonid_atBckpTime_newID[formsortassocbuttonDB_ID_atBackupTime] = formsortassocbuttonDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormSortAssocButtonDB.json" in dirPath that stores an array
// of FormSortAssocButtonDB and stores it in the database
// the map BackRepoFormSortAssocButtonid_atBckpTime_newID is updated accordingly
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormSortAssocButtonid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormSortAssocButtonDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FormSortAssocButton file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormSortAssocButtonDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormSortAssocButtonDBID_FormSortAssocButtonDB
	for _, formsortassocbuttonDB := range forRestore {

		formsortassocbuttonDB_ID_atBackupTime := formsortassocbuttonDB.ID
		formsortassocbuttonDB.ID = 0
		query := backRepoFormSortAssocButton.db.Create(formsortassocbuttonDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB[formsortassocbuttonDB.ID] = formsortassocbuttonDB
		BackRepoFormSortAssocButtonid_atBckpTime_newID[formsortassocbuttonDB_ID_atBackupTime] = formsortassocbuttonDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FormSortAssocButton file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormSortAssocButton>id_atBckpTime_newID
// to compute new index
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) RestorePhaseTwo() {

	for _, formsortassocbuttonDB := range backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB {

		// next line of code is to avert unused variable compilation error
		_ = formsortassocbuttonDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFormSortAssocButton.db.Model(formsortassocbuttonDB).Updates(*formsortassocbuttonDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFormSortAssocButton.ResetReversePointers commits all staged instances of FormSortAssocButton to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, formsortassocbutton := range backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonPtr {
		backRepoFormSortAssocButton.ResetReversePointersInstance(backRepo, idx, formsortassocbutton)
	}

	return
}

func (backRepoFormSortAssocButton *BackRepoFormSortAssocButtonStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, formsortassocbutton *models.FormSortAssocButton) (Error error) {

	// fetch matching formsortassocbuttonDB
	if formsortassocbuttonDB, ok := backRepoFormSortAssocButton.Map_FormSortAssocButtonDBID_FormSortAssocButtonDB[idx]; ok {
		_ = formsortassocbuttonDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormSortAssocButtonid_atBckpTime_newID map[uint]uint
