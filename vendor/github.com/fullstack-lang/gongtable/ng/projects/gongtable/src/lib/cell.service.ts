// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { CellDB } from './cell-db';

// insertion point for imports
import { CellStringDB } from './cellstring-db'
import { CellFloat64DB } from './cellfloat64-db'
import { CellIntDB } from './cellint-db'
import { CellBooleanDB } from './cellboolean-db'
import { CellIconDB } from './cellicon-db'
import { RowDB } from './row-db'

@Injectable({
  providedIn: 'root'
})
export class CellService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  CellServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private cellsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.cellsUrl = origin + '/api/github.com/fullstack-lang/gongtable/go/v1/cells';
  }

  /** GET cells from the server */
  getCells(GONG__StackPath: string): Observable<CellDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<CellDB[]>(this.cellsUrl, { params: params })
      .pipe(
        tap(),
		// tap(_ => this.log('fetched cells')),
        catchError(this.handleError<CellDB[]>('getCells', []))
      );
  }

  /** GET cell by id. Will 404 if id not found */
  getCell(id: number, GONG__StackPath: string): Observable<CellDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.cellsUrl}/${id}`;
    return this.http.get<CellDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched cell id=${id}`)),
      catchError(this.handleError<CellDB>(`getCell id=${id}`))
    );
  }

  /** POST: add a new cell to the server */
  postCell(celldb: CellDB, GONG__StackPath: string): Observable<CellDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let CellString = celldb.CellString
    celldb.CellString = new CellStringDB
    let CellFloat64 = celldb.CellFloat64
    celldb.CellFloat64 = new CellFloat64DB
    let CellInt = celldb.CellInt
    celldb.CellInt = new CellIntDB
    let CellBool = celldb.CellBool
    celldb.CellBool = new CellBooleanDB
    let CellIcon = celldb.CellIcon
    celldb.CellIcon = new CellIconDB
    let _Row_Cells_reverse = celldb.Row_Cells_reverse
    celldb.Row_Cells_reverse = new RowDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<CellDB>(this.cellsUrl, celldb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        celldb.Row_Cells_reverse = _Row_Cells_reverse
        // this.log(`posted celldb id=${celldb.ID}`)
      }),
      catchError(this.handleError<CellDB>('postCell'))
    );
  }

  /** DELETE: delete the celldb from the server */
  deleteCell(celldb: CellDB | number, GONG__StackPath: string): Observable<CellDB> {
    const id = typeof celldb === 'number' ? celldb : celldb.ID;
    const url = `${this.cellsUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<CellDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted celldb id=${id}`)),
      catchError(this.handleError<CellDB>('deleteCell'))
    );
  }

  /** PUT: update the celldb on the server */
  updateCell(celldb: CellDB, GONG__StackPath: string): Observable<CellDB> {
    const id = typeof celldb === 'number' ? celldb : celldb.ID;
    const url = `${this.cellsUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let CellString = celldb.CellString
    celldb.CellString = new CellStringDB
    let CellFloat64 = celldb.CellFloat64
    celldb.CellFloat64 = new CellFloat64DB
    let CellInt = celldb.CellInt
    celldb.CellInt = new CellIntDB
    let CellBool = celldb.CellBool
    celldb.CellBool = new CellBooleanDB
    let CellIcon = celldb.CellIcon
    celldb.CellIcon = new CellIconDB
    let _Row_Cells_reverse = celldb.Row_Cells_reverse
    celldb.Row_Cells_reverse = new RowDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<CellDB>(url, celldb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        celldb.Row_Cells_reverse = _Row_Cells_reverse
        // this.log(`updated celldb id=${celldb.ID}`)
      }),
      catchError(this.handleError<CellDB>('updateCell'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in CellService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("CellService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
      console.log(message)
  }
}
