// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/test2/go/models"
	"github.com/fullstack-lang/gong/test2/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Aclass__dummysDeclaration__ models.Aclass
var __Aclass_time__dummyDeclaration time.Duration

// An AclassID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAclass updateAclass deleteAclass
type AclassID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AclassInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAclass updateAclass
type AclassInput struct {
	// The Aclass to submit or modify
	// in: body
	Aclass *orm.AclassAPI
}

// GetAclasss
//
// swagger:route GET /aclasss aclasss getAclasss
//
// Get all aclasss
//
// Responses:
//    default: genericError
//        200: aclassDBsResponse
func GetAclasss(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclass.GetDB()

	// source slice
	var aclassDBs []orm.AclassDB
	query := db.Find(&aclassDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	aclassAPIs := make([]orm.AclassAPI, 0)

	// for each aclass, update fields from the database nullable fields
	for idx := range aclassDBs {
		aclassDB := &aclassDBs[idx]
		_ = aclassDB
		var aclassAPI orm.AclassAPI

		// insertion point for updating fields
		aclassAPI.ID = aclassDB.ID
		aclassDB.CopyBasicFieldsToAclass(&aclassAPI.Aclass)
		aclassAPI.AclassPointersEnconding = aclassDB.AclassPointersEnconding
		aclassAPIs = append(aclassAPIs, aclassAPI)
	}

	c.JSON(http.StatusOK, aclassAPIs)
}

// PostAclass
//
// swagger:route POST /aclasss aclasss postAclass
//
// Creates a aclass
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: aclassDBResponse
func PostAclass(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclass.GetDB()

	// Validate input
	var input orm.AclassAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create aclass
	aclassDB := orm.AclassDB{}
	aclassDB.AclassPointersEnconding = input.AclassPointersEnconding
	aclassDB.CopyBasicFieldsFromAclass(&input.Aclass)

	query := db.Create(&aclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, aclassDB)
}

// GetAclass
//
// swagger:route GET /aclasss/{ID} aclasss getAclass
//
// Gets the details for a aclass.
//
// Responses:
//    default: genericError
//        200: aclassDBResponse
func GetAclass(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclass.GetDB()

	// Get aclassDB in DB
	var aclassDB orm.AclassDB
	if err := db.First(&aclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var aclassAPI orm.AclassAPI
	aclassAPI.ID = aclassDB.ID
	aclassAPI.AclassPointersEnconding = aclassDB.AclassPointersEnconding
	aclassDB.CopyBasicFieldsToAclass(&aclassAPI.Aclass)

	c.JSON(http.StatusOK, aclassAPI)
}

// UpdateAclass
//
// swagger:route PATCH /aclasss/{ID} aclasss updateAclass
//
// Update a aclass
//
// Responses:
//    default: genericError
//        200: aclassDBResponse
func UpdateAclass(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclass.GetDB()

	// Get model if exist
	var aclassDB orm.AclassDB

	// fetch the aclass
	query := db.First(&aclassDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.AclassAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	aclassDB.CopyBasicFieldsFromAclass(&input.Aclass)
	aclassDB.AclassPointersEnconding = input.AclassPointersEnconding

	query = db.Model(&aclassDB).Updates(aclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the aclassDB
	c.JSON(http.StatusOK, aclassDB)
}

// DeleteAclass
//
// swagger:route DELETE /aclasss/{ID} aclasss deleteAclass
//
// Delete a aclass
//
// Responses:
//    default: genericError
func DeleteAclass(c *gin.Context) {
	db := orm.BackRepo.BackRepoAclass.GetDB()

	// Get model if exist
	var aclassDB orm.AclassDB
	if err := db.First(&aclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&aclassDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
