// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_B_sql sql.NullBool
var dummy_B_time time.Duration
var dummy_B_sort sort.Float64Slice

// BAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bAPI
type BAPI struct {
	gorm.Model

	models.B_WOP

	// encoding of pointers
	BPointersEncoding BPointersEncoding
}

// BPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// BDB describes a b in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bDB
type BDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	BPointersEncoding
}

// BDBs arrays bDBs
// swagger:response bDBsResponse
type BDBs []BDB

// BDBResponse provides response
// swagger:response bDBResponse
type BDBResponse struct {
	BDB
}

// BWOP is a B without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var B_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBStruct struct {
	// stores BDB according to their gorm ID
	Map_BDBID_BDB map[uint]*BDB

	// stores BDB ID according to B address
	Map_BPtr_BDBID map[*models.B]uint

	// stores B according to their gorm ID
	Map_BDBID_BPtr map[uint]*models.B

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoB *BackRepoBStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoB.stage
	return
}

func (backRepoB *BackRepoBStruct) GetDB() *gorm.DB {
	return backRepoB.db
}

// GetBDBFromBPtr is a handy function to access the back repo instance from the stage instance
func (backRepoB *BackRepoBStruct) GetBDBFromBPtr(b *models.B) (bDB *BDB) {
	id := backRepoB.Map_BPtr_BDBID[b]
	bDB = backRepoB.Map_BDBID_BDB[id]
	return
}

// BackRepoB.CommitPhaseOne commits all staged instances of B to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoB *BackRepoBStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for b := range stage.Bs {
		backRepoB.CommitPhaseOneInstance(b)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, b := range backRepoB.Map_BDBID_BPtr {
		if _, ok := stage.Bs[b]; !ok {
			backRepoB.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoB.CommitDeleteInstance commits deletion of B to the BackRepo
func (backRepoB *BackRepoBStruct) CommitDeleteInstance(id uint) (Error error) {

	b := backRepoB.Map_BDBID_BPtr[id]

	// b is not staged anymore, remove bDB
	bDB := backRepoB.Map_BDBID_BDB[id]
	query := backRepoB.db.Unscoped().Delete(&bDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoB.Map_BPtr_BDBID, b)
	delete(backRepoB.Map_BDBID_BPtr, id)
	delete(backRepoB.Map_BDBID_BDB, id)

	return
}

// BackRepoB.CommitPhaseOneInstance commits b staged instances of B to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoB *BackRepoBStruct) CommitPhaseOneInstance(b *models.B) (Error error) {

	// check if the b is not commited yet
	if _, ok := backRepoB.Map_BPtr_BDBID[b]; ok {
		return
	}

	// initiate b
	var bDB BDB
	bDB.CopyBasicFieldsFromB(b)

	query := backRepoB.db.Create(&bDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoB.Map_BPtr_BDBID[b] = bDB.ID
	backRepoB.Map_BDBID_BPtr[bDB.ID] = b
	backRepoB.Map_BDBID_BDB[bDB.ID] = &bDB

	return
}

// BackRepoB.CommitPhaseTwo commits all staged instances of B to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoB *BackRepoBStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, b := range backRepoB.Map_BDBID_BPtr {
		backRepoB.CommitPhaseTwoInstance(backRepo, idx, b)
	}

	return
}

// BackRepoB.CommitPhaseTwoInstance commits {{structname }} of models.B to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoB *BackRepoBStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, b *models.B) (Error error) {

	// fetch matching bDB
	if bDB, ok := backRepoB.Map_BDBID_BDB[idx]; ok {

		bDB.CopyBasicFieldsFromB(b)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoB.db.Save(&bDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown B intance %s", b.Name))
		return err
	}

	return
}

// BackRepoB.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoB *BackRepoBStruct) CheckoutPhaseOne() (Error error) {

	bDBArray := make([]BDB, 0)
	query := backRepoB.db.Find(&bDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bInstancesToBeRemovedFromTheStage := make(map[*models.B]any)
	for key, value := range backRepoB.stage.Bs {
		bInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bDB := range bDBArray {
		backRepoB.CheckoutPhaseOneInstance(&bDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		b, ok := backRepoB.Map_BDBID_BPtr[bDB.ID]
		if ok {
			delete(bInstancesToBeRemovedFromTheStage, b)
		}
	}

	// remove from stage and back repo's 3 maps all bs that are not in the checkout
	for b := range bInstancesToBeRemovedFromTheStage {
		b.Unstage(backRepoB.GetStage())

		// remove instance from the back repo 3 maps
		bID := backRepoB.Map_BPtr_BDBID[b]
		delete(backRepoB.Map_BPtr_BDBID, b)
		delete(backRepoB.Map_BDBID_BDB, bID)
		delete(backRepoB.Map_BDBID_BPtr, bID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bDB that has been found in the DB, updates the backRepo and stages the
// models version of the bDB
func (backRepoB *BackRepoBStruct) CheckoutPhaseOneInstance(bDB *BDB) (Error error) {

	b, ok := backRepoB.Map_BDBID_BPtr[bDB.ID]
	if !ok {
		b = new(models.B)

		backRepoB.Map_BDBID_BPtr[bDB.ID] = b
		backRepoB.Map_BPtr_BDBID[b] = bDB.ID

		// append model store with the new element
		b.Name = bDB.Name_Data.String
		b.Stage(backRepoB.GetStage())
	}
	bDB.CopyBasicFieldsToB(b)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	b.Stage(backRepoB.GetStage())

	// preserve pointer to bDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BDBID_BDB)[bDB hold variable pointers
	bDB_Data := *bDB
	preservedPtrToB := &bDB_Data
	backRepoB.Map_BDBID_BDB[bDB.ID] = preservedPtrToB

	return
}

// BackRepoB.CheckoutPhaseTwo Checkouts all staged instances of B to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoB *BackRepoBStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bDB := range backRepoB.Map_BDBID_BDB {
		backRepoB.CheckoutPhaseTwoInstance(backRepo, bDB)
	}
	return
}

// BackRepoB.CheckoutPhaseTwoInstance Checkouts staged instances of B to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoB *BackRepoBStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bDB *BDB) (Error error) {

	b := backRepoB.Map_BDBID_BPtr[bDB.ID]

	bDB.DecodePointers(backRepo, b)

	return
}

func (bDB *BDB) DecodePointers(backRepo *BackRepoStruct, b *models.B) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitB allows commit of a single b (if already staged)
func (backRepo *BackRepoStruct) CommitB(b *models.B) {
	backRepo.BackRepoB.CommitPhaseOneInstance(b)
	if id, ok := backRepo.BackRepoB.Map_BPtr_BDBID[b]; ok {
		backRepo.BackRepoB.CommitPhaseTwoInstance(backRepo, id, b)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitB allows checkout of a single b (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutB(b *models.B) {
	// check if the b is staged
	if _, ok := backRepo.BackRepoB.Map_BPtr_BDBID[b]; ok {

		if id, ok := backRepo.BackRepoB.Map_BPtr_BDBID[b]; ok {
			var bDB BDB
			bDB.ID = id

			if err := backRepo.BackRepoB.db.First(&bDB, id).Error; err != nil {
				log.Fatalln("CheckoutB : Problem with getting object with id:", id)
			}
			backRepo.BackRepoB.CheckoutPhaseOneInstance(&bDB)
			backRepo.BackRepoB.CheckoutPhaseTwoInstance(backRepo, &bDB)
		}
	}
}

// CopyBasicFieldsFromB
func (bDB *BDB) CopyBasicFieldsFromB(b *models.B) {
	// insertion point for fields commit

	bDB.Name_Data.String = b.Name
	bDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromB_WOP
func (bDB *BDB) CopyBasicFieldsFromB_WOP(b *models.B_WOP) {
	// insertion point for fields commit

	bDB.Name_Data.String = b.Name
	bDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBWOP
func (bDB *BDB) CopyBasicFieldsFromBWOP(b *BWOP) {
	// insertion point for fields commit

	bDB.Name_Data.String = b.Name
	bDB.Name_Data.Valid = true
}

// CopyBasicFieldsToB
func (bDB *BDB) CopyBasicFieldsToB(b *models.B) {
	// insertion point for checkout of basic fields (back repo to stage)
	b.Name = bDB.Name_Data.String
}

// CopyBasicFieldsToB_WOP
func (bDB *BDB) CopyBasicFieldsToB_WOP(b *models.B_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	b.Name = bDB.Name_Data.String
}

// CopyBasicFieldsToBWOP
func (bDB *BDB) CopyBasicFieldsToBWOP(b *BWOP) {
	b.ID = int(bDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	b.Name = bDB.Name_Data.String
}

// Backup generates a json file from a slice of all BDB instances in the backrepo
func (backRepoB *BackRepoBStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BDB, 0)
	for _, bDB := range backRepoB.Map_BDBID_BDB {
		forBackup = append(forBackup, bDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json B ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json B file", err.Error())
	}
}

// Backup generates a json file from a slice of all BDB instances in the backrepo
func (backRepoB *BackRepoBStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BDB, 0)
	for _, bDB := range backRepoB.Map_BDBID_BDB {
		forBackup = append(forBackup, bDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("B")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&B_Fields, -1)
	for _, bDB := range forBackup {

		var bWOP BWOP
		bDB.CopyBasicFieldsToBWOP(&bWOP)

		row := sh.AddRow()
		row.WriteStruct(&bWOP, -1)
	}
}

// RestoreXL from the "B" sheet all BDB instances
func (backRepoB *BackRepoBStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["B"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoB.rowVisitorB)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoB *BackRepoBStruct) rowVisitorB(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bWOP BWOP
		row.ReadStruct(&bWOP)

		// add the unmarshalled struct to the stage
		bDB := new(BDB)
		bDB.CopyBasicFieldsFromBWOP(&bWOP)

		bDB_ID_atBackupTime := bDB.ID
		bDB.ID = 0
		query := backRepoB.db.Create(bDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoB.Map_BDBID_BDB[bDB.ID] = bDB
		BackRepoBid_atBckpTime_newID[bDB_ID_atBackupTime] = bDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BDB.json" in dirPath that stores an array
// of BDB and stores it in the database
// the map BackRepoBid_atBckpTime_newID is updated accordingly
func (backRepoB *BackRepoBStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json B file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BDBID_BDB
	for _, bDB := range forRestore {

		bDB_ID_atBackupTime := bDB.ID
		bDB.ID = 0
		query := backRepoB.db.Create(bDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoB.Map_BDBID_BDB[bDB.ID] = bDB
		BackRepoBid_atBckpTime_newID[bDB_ID_atBackupTime] = bDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json B file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<B>id_atBckpTime_newID
// to compute new index
func (backRepoB *BackRepoBStruct) RestorePhaseTwo() {

	for _, bDB := range backRepoB.Map_BDBID_BDB {

		// next line of code is to avert unused variable compilation error
		_ = bDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoB.db.Model(bDB).Updates(*bDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoB.ResetReversePointers commits all staged instances of B to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoB *BackRepoBStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, b := range backRepoB.Map_BDBID_BPtr {
		backRepoB.ResetReversePointersInstance(backRepo, idx, b)
	}

	return
}

func (backRepoB *BackRepoBStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, b *models.B) (Error error) {

	// fetch matching bDB
	if bDB, ok := backRepoB.Map_BDBID_BDB[idx]; ok {
		_ = bDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBid_atBckpTime_newID map[uint]uint
