// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Aclass_sql sql.NullBool
var dummy_Aclass_time time.Duration
var dummy_Aclass_sort sort.Float64Slice

// AclassAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model aclassAPI
type AclassAPI struct {
	gorm.Model

	models.Aclass

	// encoding of pointers
	AclassPointersEnconding
}

// AclassPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AclassPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// AclassDB describes a aclass in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model aclassDB
type AclassDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field aclassDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// encoding of pointers
	AclassPointersEnconding
}

// AclassDBs arrays aclassDBs
// swagger:response aclassDBsResponse
type AclassDBs []AclassDB

// AclassDBResponse provides response
// swagger:response aclassDBResponse
type AclassDBResponse struct {
	AclassDB
}

// AclassWOP is a Aclass without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AclassWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string
	// insertion for WOP pointer fields
}

var Aclass_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAclassStruct struct {
	// stores AclassDB according to their gorm ID
	Map_AclassDBID_AclassDB *map[uint]*AclassDB

	// stores AclassDB ID according to Aclass address
	Map_AclassPtr_AclassDBID *map[*models.Aclass]uint

	// stores Aclass according to their gorm ID
	Map_AclassDBID_AclassPtr *map[uint]*models.Aclass

	db *gorm.DB
}

func (backRepoAclass *BackRepoAclassStruct) GetDB() *gorm.DB {
	return backRepoAclass.db
}

// GetAclassDBFromAclassPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAclass *BackRepoAclassStruct) GetAclassDBFromAclassPtr(aclass *models.Aclass) (aclassDB *AclassDB) {
	id := (*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass]
	aclassDB = (*backRepoAclass.Map_AclassDBID_AclassDB)[id]
	return
}

// BackRepoAclass.Init set up the BackRepo of the Aclass
func (backRepoAclass *BackRepoAclassStruct) Init(db *gorm.DB) (Error error) {

	if backRepoAclass.Map_AclassDBID_AclassPtr != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassDBID_AclassPtr should be nil")
		return err
	}

	if backRepoAclass.Map_AclassDBID_AclassDB != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassDBID_AclassDB should be nil")
		return err
	}

	if backRepoAclass.Map_AclassPtr_AclassDBID != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassPtr_AclassDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Aclass, 0)
	backRepoAclass.Map_AclassDBID_AclassPtr = &tmp

	tmpDB := make(map[uint]*AclassDB, 0)
	backRepoAclass.Map_AclassDBID_AclassDB = &tmpDB

	tmpID := make(map[*models.Aclass]uint, 0)
	backRepoAclass.Map_AclassPtr_AclassDBID = &tmpID

	backRepoAclass.db = db
	return
}

// BackRepoAclass.CommitPhaseOne commits all staged instances of Aclass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for aclass := range stage.Aclasss {
		backRepoAclass.CommitPhaseOneInstance(aclass)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, aclass := range *backRepoAclass.Map_AclassDBID_AclassPtr {
		if _, ok := stage.Aclasss[aclass]; !ok {
			backRepoAclass.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAclass.CommitDeleteInstance commits deletion of Aclass to the BackRepo
func (backRepoAclass *BackRepoAclassStruct) CommitDeleteInstance(id uint) (Error error) {

	aclass := (*backRepoAclass.Map_AclassDBID_AclassPtr)[id]

	// aclass is not staged anymore, remove aclassDB
	aclassDB := (*backRepoAclass.Map_AclassDBID_AclassDB)[id]
	query := backRepoAclass.db.Unscoped().Delete(&aclassDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoAclass.Map_AclassPtr_AclassDBID), aclass)
	delete((*backRepoAclass.Map_AclassDBID_AclassPtr), id)
	delete((*backRepoAclass.Map_AclassDBID_AclassDB), id)

	return
}

// BackRepoAclass.CommitPhaseOneInstance commits aclass staged instances of Aclass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseOneInstance(aclass *models.Aclass) (Error error) {

	// check if the aclass is not commited yet
	if _, ok := (*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
		return
	}

	// initiate aclass
	var aclassDB AclassDB
	aclassDB.CopyBasicFieldsFromAclass(aclass)

	query := backRepoAclass.db.Create(&aclassDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass] = aclassDB.ID
	(*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID] = aclass
	(*backRepoAclass.Map_AclassDBID_AclassDB)[aclassDB.ID] = &aclassDB

	return
}

// BackRepoAclass.CommitPhaseTwo commits all staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, aclass := range *backRepoAclass.Map_AclassDBID_AclassPtr {
		backRepoAclass.CommitPhaseTwoInstance(backRepo, idx, aclass)
	}

	return
}

// BackRepoAclass.CommitPhaseTwoInstance commits {{structname }} of models.Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, aclass *models.Aclass) (Error error) {

	// fetch matching aclassDB
	if aclassDB, ok := (*backRepoAclass.Map_AclassDBID_AclassDB)[idx]; ok {

		aclassDB.CopyBasicFieldsFromAclass(aclass)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoAclass.db.Save(&aclassDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Aclass intance %s", aclass.Name))
		return err
	}

	return
}

// BackRepoAclass.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseOne() (Error error) {

	aclassDBArray := make([]AclassDB, 0)
	query := backRepoAclass.db.Find(&aclassDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	aclassInstancesToBeRemovedFromTheStage := make(map[*models.Aclass]struct{})
	for key, value := range models.Stage.Aclasss {
		aclassInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, aclassDB := range aclassDBArray {
		backRepoAclass.CheckoutPhaseOneInstance(&aclassDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		aclass, ok := (*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID]
		if ok {
			delete(aclassInstancesToBeRemovedFromTheStage, aclass)
		}
	}

	// remove from stage and back repo's 3 maps all aclasss that are not in the checkout
	for aclass := range aclassInstancesToBeRemovedFromTheStage {
		aclass.Unstage()

		// remove instance from the back repo 3 maps
		aclassID := (*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass]
		delete((*backRepoAclass.Map_AclassPtr_AclassDBID), aclass)
		delete((*backRepoAclass.Map_AclassDBID_AclassDB), aclassID)
		delete((*backRepoAclass.Map_AclassDBID_AclassPtr), aclassID)
	}

	return
}

// CheckoutPhaseOneInstance takes a aclassDB that has been found in the DB, updates the backRepo and stages the
// models version of the aclassDB
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseOneInstance(aclassDB *AclassDB) (Error error) {

	aclass, ok := (*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID]
	if !ok {
		aclass = new(models.Aclass)

		(*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID] = aclass
		(*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass] = aclassDB.ID

		// append model store with the new element
		aclass.Name = aclassDB.Name_Data.String
		aclass.Stage()
	}
	aclassDB.CopyBasicFieldsToAclass(aclass)

	// preserve pointer to aclassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AclassDBID_AclassDB)[aclassDB hold variable pointers
	aclassDB_Data := *aclassDB
	preservedPtrToAclass := &aclassDB_Data
	(*backRepoAclass.Map_AclassDBID_AclassDB)[aclassDB.ID] = preservedPtrToAclass

	return
}

// BackRepoAclass.CheckoutPhaseTwo Checkouts all staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, aclassDB := range *backRepoAclass.Map_AclassDBID_AclassDB {
		backRepoAclass.CheckoutPhaseTwoInstance(backRepo, aclassDB)
	}
	return
}

// BackRepoAclass.CheckoutPhaseTwoInstance Checkouts staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, aclassDB *AclassDB) (Error error) {

	aclass := (*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID]
	_ = aclass // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitAclass allows commit of a single aclass (if already staged)
func (backRepo *BackRepoStruct) CommitAclass(aclass *models.Aclass) {
	backRepo.BackRepoAclass.CommitPhaseOneInstance(aclass)
	if id, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
		backRepo.BackRepoAclass.CommitPhaseTwoInstance(backRepo, id, aclass)
	}
}

// CommitAclass allows checkout of a single aclass (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAclass(aclass *models.Aclass) {
	// check if the aclass is staged
	if _, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {

		if id, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
			var aclassDB AclassDB
			aclassDB.ID = id

			if err := backRepo.BackRepoAclass.db.First(&aclassDB, id).Error; err != nil {
				log.Panicln("CheckoutAclass : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAclass.CheckoutPhaseOneInstance(&aclassDB)
			backRepo.BackRepoAclass.CheckoutPhaseTwoInstance(backRepo, &aclassDB)
		}
	}
}

// CopyBasicFieldsFromAclass
func (aclassDB *AclassDB) CopyBasicFieldsFromAclass(aclass *models.Aclass) {
	// insertion point for fields commit
	aclassDB.Name_Data.String = aclass.Name
	aclassDB.Name_Data.Valid = true

}

// CopyBasicFieldsFromAclassWOP
func (aclassDB *AclassDB) CopyBasicFieldsFromAclassWOP(aclass *AclassWOP) {
	// insertion point for fields commit
	aclassDB.Name_Data.String = aclass.Name
	aclassDB.Name_Data.Valid = true

}

// CopyBasicFieldsToAclass
func (aclassDB *AclassDB) CopyBasicFieldsToAclass(aclass *models.Aclass) {
	// insertion point for checkout of basic fields (back repo to stage)
	aclass.Name = aclassDB.Name_Data.String
}

// CopyBasicFieldsToAclassWOP
func (aclassDB *AclassDB) CopyBasicFieldsToAclassWOP(aclass *AclassWOP) {
	aclass.ID = int(aclassDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	aclass.Name = aclassDB.Name_Data.String
}

// Backup generates a json file from a slice of all AclassDB instances in the backrepo
func (backRepoAclass *BackRepoAclassStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AclassDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AclassDB, 0)
	for _, aclassDB := range *backRepoAclass.Map_AclassDBID_AclassDB {
		forBackup = append(forBackup, aclassDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Aclass ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Aclass file", err.Error())
	}
}

// Backup generates a json file from a slice of all AclassDB instances in the backrepo
func (backRepoAclass *BackRepoAclassStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AclassDB, 0)
	for _, aclassDB := range *backRepoAclass.Map_AclassDBID_AclassDB {
		forBackup = append(forBackup, aclassDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Aclass")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Aclass_Fields, -1)
	for _, aclassDB := range forBackup {

		var aclassWOP AclassWOP
		aclassDB.CopyBasicFieldsToAclassWOP(&aclassWOP)

		row := sh.AddRow()
		row.WriteStruct(&aclassWOP, -1)
	}
}

// RestorePhaseOne read the file "AclassDB.json" in dirPath that stores an array
// of AclassDB and stores it in the database
// the map BackRepoAclassid_atBckpTime_newID is updated accordingly
func (backRepoAclass *BackRepoAclassStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAclassid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AclassDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Aclass file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AclassDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AclassDBID_AclassDB
	for _, aclassDB := range forRestore {

		aclassDB_ID_atBackupTime := aclassDB.ID
		aclassDB.ID = 0
		query := backRepoAclass.db.Create(aclassDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAclass.Map_AclassDBID_AclassDB)[aclassDB.ID] = aclassDB
		BackRepoAclassid_atBckpTime_newID[aclassDB_ID_atBackupTime] = aclassDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Aclass file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Aclass>id_atBckpTime_newID
// to compute new index
func (backRepoAclass *BackRepoAclassStruct) RestorePhaseTwo() {

	for _, aclassDB := range *backRepoAclass.Map_AclassDBID_AclassDB {

		// next line of code is to avert unused variable compilation error
		_ = aclassDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoAclass.db.Model(aclassDB).Updates(*aclassDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAclassid_atBckpTime_newID map[uint]uint
