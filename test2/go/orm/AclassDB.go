// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gong/test2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Aclass sql.NullBool
var __Aclass_time__dummyDeclaration time.Duration
var dummy_Aclass_sort sort.Float64Slice

// AclassAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model aclassAPI
type AclassAPI struct {
	models.Aclass

	// insertion for fields declaration
	// Declation for basic field aclassDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field aclassDB.Date
	Date_Data sql.NullTime

	// Declation for basic field aclassDB.Booleanfield bool (to be completed)
	// provide the sql storage for the boolan
	Booleanfield_Data sql.NullBool

	// Declation for basic field aclassDB.Floatfield {{BasicKind}} (to be completed)
	Floatfield_Data sql.NullFloat64

	// Declation for basic field aclassDB.Intfield {{BasicKind}} (to be completed)
	Intfield_Data sql.NullInt64

	// Declation for basic field aclassDB.Anotherbooleanfield bool (to be completed)
	// provide the sql storage for the boolan
	Anotherbooleanfield_Data sql.NullBool

	// Declation for basic field aclassDB.Duration1 {{BasicKind}} (to be completed)
	Duration1_Data sql.NullInt64

	// Implementation of a reverse ID for field Aclass{}.Anarrayofa []*Aclass
	Aclass_AnarrayofaDBID sql.NullInt64
	Aclass_AnarrayofaDBID_Index sql.NullInt64

	// end of insertion
}

// AclassDB describes a aclass in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model aclassDB
type AclassDB struct {
	gorm.Model

	AclassAPI
}

// AclassDBs arrays aclassDBs
// swagger:response aclassDBsResponse
type AclassDBs []AclassDB

// AclassDBResponse provides response
// swagger:response aclassDBResponse
type AclassDBResponse struct {
	AclassDB
}

type BackRepoAclassStruct struct {
	// stores AclassDB according to their gorm ID
	Map_AclassDBID_AclassDB *map[uint]*AclassDB

	// stores AclassDB ID according to Aclass address
	Map_AclassPtr_AclassDBID *map[*models.Aclass]uint

	// stores Aclass according to their gorm ID
	Map_AclassDBID_AclassPtr *map[uint]*models.Aclass

	db *gorm.DB
}

// BackRepoAclass.Init set up the BackRepo of the Aclass
func (backRepoAclass *BackRepoAclassStruct) Init(db *gorm.DB) (Error error) {

	if backRepoAclass.Map_AclassDBID_AclassPtr != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassDBID_AclassPtr should be nil")
		return err
	}

	if backRepoAclass.Map_AclassDBID_AclassDB != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassDBID_AclassDB should be nil")
		return err
	}

	if backRepoAclass.Map_AclassPtr_AclassDBID != nil {
		err := errors.New("In Init, backRepoAclass.Map_AclassPtr_AclassDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Aclass, 0)
	backRepoAclass.Map_AclassDBID_AclassPtr = &tmp

	tmpDB := make(map[uint]*AclassDB, 0)
	backRepoAclass.Map_AclassDBID_AclassDB = &tmpDB

	tmpID := make(map[*models.Aclass]uint, 0)
	backRepoAclass.Map_AclassPtr_AclassDBID = &tmpID

	backRepoAclass.db = db
	return
}

// BackRepoAclass.CommitPhaseOne commits all staged instances of Aclass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for aclass := range stage.Aclasss {
		backRepoAclass.CommitPhaseOneInstance(aclass)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, aclass := range *backRepoAclass.Map_AclassDBID_AclassPtr {
		if _, ok := stage.Aclasss[aclass]; !ok {
			backRepoAclass.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAclass.CommitDeleteInstance commits deletion of Aclass to the BackRepo
func (backRepoAclass *BackRepoAclassStruct) CommitDeleteInstance(id uint) (Error error) {

	aclass := (*backRepoAclass.Map_AclassDBID_AclassPtr)[id]

	// aclass is not staged anymore, remove aclassDB
	aclassDB := (*backRepoAclass.Map_AclassDBID_AclassDB)[id]
	query := backRepoAclass.db.Unscoped().Delete(&aclassDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoAclass.Map_AclassPtr_AclassDBID), aclass)
	delete((*backRepoAclass.Map_AclassDBID_AclassPtr), id)
	delete((*backRepoAclass.Map_AclassDBID_AclassDB), id)

	return
}

// BackRepoAclass.CommitPhaseOneInstance commits aclass staged instances of Aclass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseOneInstance(aclass *models.Aclass) (Error error) {

	// check if the aclass is not commited yet
	if _, ok := (*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
		return
	}

	// initiate aclass
	var aclassDB AclassDB
	aclassDB.Aclass = *aclass

	query := backRepoAclass.db.Create(&aclassDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoAclass.Map_AclassPtr_AclassDBID)[aclass] = aclassDB.ID
	(*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID] = aclass
	(*backRepoAclass.Map_AclassDBID_AclassDB)[aclassDB.ID] = &aclassDB

	return
}

// BackRepoAclass.CommitPhaseTwo commits all staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, aclass := range *backRepoAclass.Map_AclassDBID_AclassPtr {
		backRepoAclass.CommitPhaseTwoInstance(backRepo, idx, aclass)
	}

	return
}

// BackRepoAclass.CommitPhaseTwoInstance commits {{structname }} of models.Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, aclass *models.Aclass) (Error error) {

	// fetch matching aclassDB
	if aclassDB, ok := (*backRepoAclass.Map_AclassDBID_AclassDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				aclassDB.Name_Data.String = aclass.Name
				aclassDB.Name_Data.Valid = true

				aclassDB.Date_Data.Time = aclass.Date
				aclassDB.Date_Data.Valid = true

				aclassDB.Booleanfield_Data.Bool = aclass.Booleanfield
				aclassDB.Booleanfield_Data.Valid = true

				aclassDB.Floatfield_Data.Float64 = aclass.Floatfield
				aclassDB.Floatfield_Data.Valid = true

				aclassDB.Intfield_Data.Int64 = int64(aclass.Intfield)
				aclassDB.Intfield_Data.Valid = true

				aclassDB.Anotherbooleanfield_Data.Bool = aclass.Anotherbooleanfield
				aclassDB.Anotherbooleanfield_Data.Valid = true

				aclassDB.Duration1_Data.Int64 = int64(aclass.Duration1)
				aclassDB.Duration1_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Aclass, i.e.
				index_Anarrayofa := 0
				for _, aclass := range aclass.Anarrayofa {
					if aclassDBID, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
						if aclassDB, ok := (*backRepo.BackRepoAclass.Map_AclassDBID_AclassDB)[aclassDBID]; ok {
							aclassDB.Aclass_AnarrayofaDBID.Int64 = int64(aclassDB.ID)
							aclassDB.Aclass_AnarrayofaDBID.Valid = true
							aclassDB.Aclass_AnarrayofaDBID_Index.Int64 = int64(index_Anarrayofa)
							index_Anarrayofa = index_Anarrayofa + 1
							aclassDB.Aclass_AnarrayofaDBID_Index.Valid = true
							if q := backRepoAclass.db.Save(&aclassDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoAclass.db.Save(&aclassDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Aclass intance %s", aclass.Name))
		return err
	}

	return
}

// BackRepoAclass.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseOne() (Error error) {

	aclassDBArray := make([]AclassDB, 0)
	query := backRepoAclass.db.Find(&aclassDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, aclassDB := range aclassDBArray {
		backRepoAclass.CheckoutPhaseOneInstance(&aclassDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a aclassDB that has been found in the DB, updates the backRepo and stages the
// models version of the aclassDB
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseOneInstance(aclassDB *AclassDB) (Error error) {

	// if absent, create entries in the backRepoAclass maps.
	aclassWithNewFieldValues := aclassDB.Aclass
	if _, ok := (*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID]; !ok {

		(*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID] = &aclassWithNewFieldValues
		(*backRepoAclass.Map_AclassPtr_AclassDBID)[&aclassWithNewFieldValues] = aclassDB.ID

		// append model store with the new element
		aclassWithNewFieldValues.Stage()
	}
	aclassDBWithNewFieldValues := *aclassDB
	(*backRepoAclass.Map_AclassDBID_AclassDB)[aclassDB.ID] = &aclassDBWithNewFieldValues

	return
}

// BackRepoAclass.CheckoutPhaseTwo Checkouts all staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, aclassDB := range *backRepoAclass.Map_AclassDBID_AclassDB {
		backRepoAclass.CheckoutPhaseTwoInstance(backRepo, aclassDB)
	}
	return
}

// BackRepoAclass.CheckoutPhaseTwoInstance Checkouts staged instances of Aclass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAclass *BackRepoAclassStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, aclassDB *AclassDB) (Error error) {

	aclass := (*backRepoAclass.Map_AclassDBID_AclassPtr)[aclassDB.ID]
	_ = aclass // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			aclass.Name = aclassDB.Name_Data.String

			aclass.Date = aclassDB.Date_Data.Time

			aclass.Booleanfield = aclassDB.Booleanfield_Data.Bool
			aclass.Floatfield = aclassDB.Floatfield_Data.Float64

			aclass.Intfield = int(aclassDB.Intfield_Data.Int64)

			aclass.Anotherbooleanfield = aclassDB.Anotherbooleanfield_Data.Bool
			aclass.Duration1 = time.Duration(aclassDB.Duration1_Data.Int64)

			// parse all AclassDB and redeem the array of poiners to Aclass
			// first reset the slice
			aclass.Anarrayofa = aclass.Anarrayofa[:0]
			for _, AclassDB := range *backRepo.BackRepoAclass.Map_AclassDBID_AclassDB {
				if AclassDB.Aclass_AnarrayofaDBID.Int64 == int64(aclassDB.ID) {
					Aclass := (*backRepo.BackRepoAclass.Map_AclassDBID_AclassPtr)[AclassDB.ID]
					aclass.Anarrayofa = append(aclass.Anarrayofa, Aclass)
				}
			}
			
			// sort the array according to the order
			sort.Slice(aclass.Anarrayofa, func(i, j int) bool {
				aclassDB_i_ID := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass.Anarrayofa[i]]
				aclassDB_j_ID := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass.Anarrayofa[j]]

				aclassDB_i := (*backRepo.BackRepoAclass.Map_AclassDBID_AclassDB)[aclassDB_i_ID]
				aclassDB_j := (*backRepo.BackRepoAclass.Map_AclassDBID_AclassDB)[aclassDB_j_ID]

				return aclassDB_i.Aclass_AnarrayofaDBID_Index.Int64 < aclassDB_j.Aclass_AnarrayofaDBID_Index.Int64
			})

		}
	}
	return
}

// CommitAclass allows commit of a single aclass (if already staged)
func (backRepo *BackRepoStruct) CommitAclass(aclass *models.Aclass) {
	backRepo.BackRepoAclass.CommitPhaseOneInstance(aclass)
	if id, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
		backRepo.BackRepoAclass.CommitPhaseTwoInstance(backRepo, id, aclass)
	}
}

// CommitAclass allows checkout of a single aclass (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAclass(aclass *models.Aclass) {
	// check if the aclass is staged
	if _, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {

		if id, ok := (*backRepo.BackRepoAclass.Map_AclassPtr_AclassDBID)[aclass]; ok {
			var aclassDB AclassDB
			aclassDB.ID = id

			if err := backRepo.BackRepoAclass.db.First(&aclassDB, id).Error; err != nil {
				log.Panicln("CheckoutAclass : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAclass.CheckoutPhaseOneInstance(&aclassDB)
			backRepo.BackRepoAclass.CheckoutPhaseTwoInstance(backRepo, &aclassDB)
		}
	}
}
