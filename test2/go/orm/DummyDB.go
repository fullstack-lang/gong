// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Dummy_sql sql.NullBool
var dummy_Dummy_time time.Duration
var dummy_Dummy_sort sort.Float64Slice

// DummyAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model dummyAPI
type DummyAPI struct {
	gorm.Model

	models.Dummy

	// encoding of pointers
	DummyPointersEnconding
}

// DummyPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DummyPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// DummyDB describes a dummy in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model dummyDB
type DummyDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field dummyDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	DummyPointersEnconding
}

// DummyDBs arrays dummyDBs
// swagger:response dummyDBsResponse
type DummyDBs []DummyDB

// DummyDBResponse provides response
// swagger:response dummyDBResponse
type DummyDBResponse struct {
	DummyDB
}

// DummyWOP is a Dummy without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DummyWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Dummy_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDummyStruct struct {
	// stores DummyDB according to their gorm ID
	Map_DummyDBID_DummyDB map[uint]*DummyDB

	// stores DummyDB ID according to Dummy address
	Map_DummyPtr_DummyDBID map[*models.Dummy]uint

	// stores Dummy according to their gorm ID
	Map_DummyDBID_DummyPtr map[uint]*models.Dummy

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDummy *BackRepoDummyStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDummy.stage
	return
}

func (backRepoDummy *BackRepoDummyStruct) GetDB() *gorm.DB {
	return backRepoDummy.db
}

// GetDummyDBFromDummyPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDummy *BackRepoDummyStruct) GetDummyDBFromDummyPtr(dummy *models.Dummy) (dummyDB *DummyDB) {
	id := backRepoDummy.Map_DummyPtr_DummyDBID[dummy]
	dummyDB = backRepoDummy.Map_DummyDBID_DummyDB[id]
	return
}

// BackRepoDummy.CommitPhaseOne commits all staged instances of Dummy to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDummy *BackRepoDummyStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for dummy := range stage.Dummys {
		backRepoDummy.CommitPhaseOneInstance(dummy)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, dummy := range backRepoDummy.Map_DummyDBID_DummyPtr {
		if _, ok := stage.Dummys[dummy]; !ok {
			backRepoDummy.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDummy.CommitDeleteInstance commits deletion of Dummy to the BackRepo
func (backRepoDummy *BackRepoDummyStruct) CommitDeleteInstance(id uint) (Error error) {

	dummy := backRepoDummy.Map_DummyDBID_DummyPtr[id]

	// dummy is not staged anymore, remove dummyDB
	dummyDB := backRepoDummy.Map_DummyDBID_DummyDB[id]
	query := backRepoDummy.db.Unscoped().Delete(&dummyDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoDummy.Map_DummyPtr_DummyDBID, dummy)
	delete(backRepoDummy.Map_DummyDBID_DummyPtr, id)
	delete(backRepoDummy.Map_DummyDBID_DummyDB, id)

	return
}

// BackRepoDummy.CommitPhaseOneInstance commits dummy staged instances of Dummy to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDummy *BackRepoDummyStruct) CommitPhaseOneInstance(dummy *models.Dummy) (Error error) {

	// check if the dummy is not commited yet
	if _, ok := backRepoDummy.Map_DummyPtr_DummyDBID[dummy]; ok {
		return
	}

	// initiate dummy
	var dummyDB DummyDB
	dummyDB.CopyBasicFieldsFromDummy(dummy)

	query := backRepoDummy.db.Create(&dummyDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoDummy.Map_DummyPtr_DummyDBID[dummy] = dummyDB.ID
	backRepoDummy.Map_DummyDBID_DummyPtr[dummyDB.ID] = dummy
	backRepoDummy.Map_DummyDBID_DummyDB[dummyDB.ID] = &dummyDB

	return
}

// BackRepoDummy.CommitPhaseTwo commits all staged instances of Dummy to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummy *BackRepoDummyStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, dummy := range backRepoDummy.Map_DummyDBID_DummyPtr {
		backRepoDummy.CommitPhaseTwoInstance(backRepo, idx, dummy)
	}

	return
}

// BackRepoDummy.CommitPhaseTwoInstance commits {{structname }} of models.Dummy to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummy *BackRepoDummyStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, dummy *models.Dummy) (Error error) {

	// fetch matching dummyDB
	if dummyDB, ok := backRepoDummy.Map_DummyDBID_DummyDB[idx]; ok {

		dummyDB.CopyBasicFieldsFromDummy(dummy)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDummy.db.Save(&dummyDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Dummy intance %s", dummy.Name))
		return err
	}

	return
}

// BackRepoDummy.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDummy *BackRepoDummyStruct) CheckoutPhaseOne() (Error error) {

	dummyDBArray := make([]DummyDB, 0)
	query := backRepoDummy.db.Find(&dummyDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	dummyInstancesToBeRemovedFromTheStage := make(map[*models.Dummy]any)
	for key, value := range backRepoDummy.stage.Dummys {
		dummyInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, dummyDB := range dummyDBArray {
		backRepoDummy.CheckoutPhaseOneInstance(&dummyDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		dummy, ok := backRepoDummy.Map_DummyDBID_DummyPtr[dummyDB.ID]
		if ok {
			delete(dummyInstancesToBeRemovedFromTheStage, dummy)
		}
	}

	// remove from stage and back repo's 3 maps all dummys that are not in the checkout
	for dummy := range dummyInstancesToBeRemovedFromTheStage {
		dummy.Unstage(backRepoDummy.GetStage())

		// remove instance from the back repo 3 maps
		dummyID := backRepoDummy.Map_DummyPtr_DummyDBID[dummy]
		delete(backRepoDummy.Map_DummyPtr_DummyDBID, dummy)
		delete(backRepoDummy.Map_DummyDBID_DummyDB, dummyID)
		delete(backRepoDummy.Map_DummyDBID_DummyPtr, dummyID)
	}

	return
}

// CheckoutPhaseOneInstance takes a dummyDB that has been found in the DB, updates the backRepo and stages the
// models version of the dummyDB
func (backRepoDummy *BackRepoDummyStruct) CheckoutPhaseOneInstance(dummyDB *DummyDB) (Error error) {

	dummy, ok := backRepoDummy.Map_DummyDBID_DummyPtr[dummyDB.ID]
	if !ok {
		dummy = new(models.Dummy)

		backRepoDummy.Map_DummyDBID_DummyPtr[dummyDB.ID] = dummy
		backRepoDummy.Map_DummyPtr_DummyDBID[dummy] = dummyDB.ID

		// append model store with the new element
		dummy.Name = dummyDB.Name_Data.String
		dummy.Stage(backRepoDummy.GetStage())
	}
	dummyDB.CopyBasicFieldsToDummy(dummy)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	dummy.Stage(backRepoDummy.GetStage())

	// preserve pointer to dummyDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DummyDBID_DummyDB)[dummyDB hold variable pointers
	dummyDB_Data := *dummyDB
	preservedPtrToDummy := &dummyDB_Data
	backRepoDummy.Map_DummyDBID_DummyDB[dummyDB.ID] = preservedPtrToDummy

	return
}

// BackRepoDummy.CheckoutPhaseTwo Checkouts all staged instances of Dummy to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummy *BackRepoDummyStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, dummyDB := range backRepoDummy.Map_DummyDBID_DummyDB {
		backRepoDummy.CheckoutPhaseTwoInstance(backRepo, dummyDB)
	}
	return
}

// BackRepoDummy.CheckoutPhaseTwoInstance Checkouts staged instances of Dummy to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummy *BackRepoDummyStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, dummyDB *DummyDB) (Error error) {

	dummy := backRepoDummy.Map_DummyDBID_DummyPtr[dummyDB.ID]
	_ = dummy // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitDummy allows commit of a single dummy (if already staged)
func (backRepo *BackRepoStruct) CommitDummy(dummy *models.Dummy) {
	backRepo.BackRepoDummy.CommitPhaseOneInstance(dummy)
	if id, ok := backRepo.BackRepoDummy.Map_DummyPtr_DummyDBID[dummy]; ok {
		backRepo.BackRepoDummy.CommitPhaseTwoInstance(backRepo, id, dummy)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDummy allows checkout of a single dummy (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDummy(dummy *models.Dummy) {
	// check if the dummy is staged
	if _, ok := backRepo.BackRepoDummy.Map_DummyPtr_DummyDBID[dummy]; ok {

		if id, ok := backRepo.BackRepoDummy.Map_DummyPtr_DummyDBID[dummy]; ok {
			var dummyDB DummyDB
			dummyDB.ID = id

			if err := backRepo.BackRepoDummy.db.First(&dummyDB, id).Error; err != nil {
				log.Panicln("CheckoutDummy : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDummy.CheckoutPhaseOneInstance(&dummyDB)
			backRepo.BackRepoDummy.CheckoutPhaseTwoInstance(backRepo, &dummyDB)
		}
	}
}

// CopyBasicFieldsFromDummy
func (dummyDB *DummyDB) CopyBasicFieldsFromDummy(dummy *models.Dummy) {
	// insertion point for fields commit

	dummyDB.Name_Data.String = dummy.Name
	dummyDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDummyWOP
func (dummyDB *DummyDB) CopyBasicFieldsFromDummyWOP(dummy *DummyWOP) {
	// insertion point for fields commit

	dummyDB.Name_Data.String = dummy.Name
	dummyDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDummy
func (dummyDB *DummyDB) CopyBasicFieldsToDummy(dummy *models.Dummy) {
	// insertion point for checkout of basic fields (back repo to stage)
	dummy.Name = dummyDB.Name_Data.String
}

// CopyBasicFieldsToDummyWOP
func (dummyDB *DummyDB) CopyBasicFieldsToDummyWOP(dummy *DummyWOP) {
	dummy.ID = int(dummyDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	dummy.Name = dummyDB.Name_Data.String
}

// Backup generates a json file from a slice of all DummyDB instances in the backrepo
func (backRepoDummy *BackRepoDummyStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DummyDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DummyDB, 0)
	for _, dummyDB := range backRepoDummy.Map_DummyDBID_DummyDB {
		forBackup = append(forBackup, dummyDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Dummy ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Dummy file", err.Error())
	}
}

// Backup generates a json file from a slice of all DummyDB instances in the backrepo
func (backRepoDummy *BackRepoDummyStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DummyDB, 0)
	for _, dummyDB := range backRepoDummy.Map_DummyDBID_DummyDB {
		forBackup = append(forBackup, dummyDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Dummy")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Dummy_Fields, -1)
	for _, dummyDB := range forBackup {

		var dummyWOP DummyWOP
		dummyDB.CopyBasicFieldsToDummyWOP(&dummyWOP)

		row := sh.AddRow()
		row.WriteStruct(&dummyWOP, -1)
	}
}

// RestoreXL from the "Dummy" sheet all DummyDB instances
func (backRepoDummy *BackRepoDummyStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDummyid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Dummy"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDummy.rowVisitorDummy)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoDummy *BackRepoDummyStruct) rowVisitorDummy(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var dummyWOP DummyWOP
		row.ReadStruct(&dummyWOP)

		// add the unmarshalled struct to the stage
		dummyDB := new(DummyDB)
		dummyDB.CopyBasicFieldsFromDummyWOP(&dummyWOP)

		dummyDB_ID_atBackupTime := dummyDB.ID
		dummyDB.ID = 0
		query := backRepoDummy.db.Create(dummyDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoDummy.Map_DummyDBID_DummyDB[dummyDB.ID] = dummyDB
		BackRepoDummyid_atBckpTime_newID[dummyDB_ID_atBackupTime] = dummyDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DummyDB.json" in dirPath that stores an array
// of DummyDB and stores it in the database
// the map BackRepoDummyid_atBckpTime_newID is updated accordingly
func (backRepoDummy *BackRepoDummyStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDummyid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DummyDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Dummy file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DummyDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DummyDBID_DummyDB
	for _, dummyDB := range forRestore {

		dummyDB_ID_atBackupTime := dummyDB.ID
		dummyDB.ID = 0
		query := backRepoDummy.db.Create(dummyDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoDummy.Map_DummyDBID_DummyDB[dummyDB.ID] = dummyDB
		BackRepoDummyid_atBckpTime_newID[dummyDB_ID_atBackupTime] = dummyDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Dummy file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Dummy>id_atBckpTime_newID
// to compute new index
func (backRepoDummy *BackRepoDummyStruct) RestorePhaseTwo() {

	for _, dummyDB := range backRepoDummy.Map_DummyDBID_DummyDB {

		// next line of code is to avert unused variable compilation error
		_ = dummyDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDummy.db.Model(dummyDB).Updates(*dummyDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// BackRepoDummy.ResetReversePointers commits all staged instances of Dummy to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummy *BackRepoDummyStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, dummy := range backRepoDummy.Map_DummyDBID_DummyPtr {
		backRepoDummy.ResetReversePointersInstance(backRepo, idx, dummy)
	}

	return
}

func (backRepoDummy *BackRepoDummyStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, astruct *models.Dummy) (Error error) {

	// fetch matching dummyDB
	if dummyDB, ok := backRepoDummy.Map_DummyDBID_DummyDB[idx]; ok {
		_ = dummyDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDummyid_atBckpTime_newID map[uint]uint
