// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Aclasss map[*Aclass]struct{}

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface
	
	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	// insertion point for Commit and Checkout signatures
	CommitAclass(aclass *Aclass)
	CheckoutAclass(aclass *Aclass)
	GetLastCommitNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Aclasss: make(map[*Aclass]struct{}, 0),

}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getAclassOrderedStructWithNameField() []*Aclass {
	// have alphabetical order generation
	aclassOrdered := []*Aclass{}
	for aclass := range stage.Aclasss {
		aclassOrdered = append(aclassOrdered, aclass)
	}
	sort.Slice(aclassOrdered[:], func(i, j int) bool {
		return aclassOrdered[i].Name < aclassOrdered[j].Name
	})
	return aclassOrdered
}

// Stage puts aclass to the model stage
func (aclass *Aclass) Stage() *Aclass {
	Stage.Aclasss[aclass] = __member
	return aclass
}

// Unstage removes aclass off the model stage
func (aclass *Aclass) Unstage() *Aclass {
	delete(Stage.Aclasss, aclass)
	return aclass
}

// commit aclass to the back repo (if it is already staged)
func (aclass *Aclass) Commit() *Aclass {
	if _, ok := Stage.Aclasss[aclass]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAclass(aclass)
		}
	}
	return aclass
}

// Checkout aclass to the back repo (if it is already staged)
func (aclass *Aclass) Checkout() *Aclass {
	if _, ok := Stage.Aclasss[aclass]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAclass(aclass)
		}
	}
	return aclass
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of aclass to the model stage
func (aclass *Aclass) StageCopy() *Aclass {
	_aclass := new(Aclass)
	*_aclass = *aclass
	_aclass.Stage()
	return _aclass
}

// StageAndCommit appends aclass to the model stage and commit to the orm repo
func (aclass *Aclass) StageAndCommit() *Aclass {
	aclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAclass(aclass)
	}
	return aclass
}

// DeleteStageAndCommit appends aclass to the model stage and commit to the orm repo
func (aclass *Aclass) DeleteStageAndCommit() *Aclass {
	aclass.Unstage()
	DeleteORMAclass(aclass)
	return aclass
}

// StageCopyAndCommit appends a copy of aclass to the model stage and commit to the orm repo
func (aclass *Aclass) StageCopyAndCommit() *Aclass {
	_aclass := new(Aclass)
	*_aclass = *aclass
	_aclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAclass(aclass)
	}
	return _aclass
}

// CreateORMAclass enables dynamic staging of a Aclass instance
func CreateORMAclass(aclass *Aclass) {
	aclass.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAclass(aclass)
	}
}

// DeleteORMAclass enables dynamic staging of a Aclass instance
func DeleteORMAclass(aclass *Aclass) {
	aclass.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAclass(aclass)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMAclass(Aclass *Aclass)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMAclass(Aclass *Aclass)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Aclasss = make(map[*Aclass]struct{}, 0)
}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Aclasss = nil
}
