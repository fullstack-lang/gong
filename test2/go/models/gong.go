// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Astructs           map[*Astruct]struct{}
	Astructs_mapString map[string]*Astruct

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitAstruct(astruct *Astruct)
	CheckoutAstruct(astruct *Astruct)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Astructs:           make(map[*Astruct]struct{}),
	Astructs_mapString: make(map[string]*Astruct),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Astruct"] = len(stage.Astructs)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getAstructOrderedStructWithNameField() []*Astruct {
	// have alphabetical order generation
	astructOrdered := []*Astruct{}
	for astruct := range stage.Astructs {
		astructOrdered = append(astructOrdered, astruct)
	}
	sort.Slice(astructOrdered[:], func(i, j int) bool {
		return astructOrdered[i].Name < astructOrdered[j].Name
	})
	return astructOrdered
}

// Stage puts astruct to the model stage
func (astruct *Astruct) Stage() *Astruct {
	Stage.Astructs[astruct] = __member
	Stage.Astructs_mapString[astruct.Name] = astruct

	return astruct
}

// Unstage removes astruct off the model stage
func (astruct *Astruct) Unstage() *Astruct {
	delete(Stage.Astructs, astruct)
	delete(Stage.Astructs_mapString, astruct.Name)
	return astruct
}

// commit astruct to the back repo (if it is already staged)
func (astruct *Astruct) Commit() *Astruct {
	if _, ok := Stage.Astructs[astruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAstruct(astruct)
		}
	}
	return astruct
}

// Checkout astruct to the back repo (if it is already staged)
func (astruct *Astruct) Checkout() *Astruct {
	if _, ok := Stage.Astructs[astruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAstruct(astruct)
		}
	}
	return astruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of astruct to the model stage
func (astruct *Astruct) StageCopy() *Astruct {
	_astruct := new(Astruct)
	*_astruct = *astruct
	_astruct.Stage()
	return _astruct
}

// StageAndCommit appends astruct to the model stage and commit to the orm repo
func (astruct *Astruct) StageAndCommit() *Astruct {
	astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
	return astruct
}

// DeleteStageAndCommit appends astruct to the model stage and commit to the orm repo
func (astruct *Astruct) DeleteStageAndCommit() *Astruct {
	astruct.Unstage()
	DeleteORMAstruct(astruct)
	return astruct
}

// StageCopyAndCommit appends a copy of astruct to the model stage and commit to the orm repo
func (astruct *Astruct) StageCopyAndCommit() *Astruct {
	_astruct := new(Astruct)
	*_astruct = *astruct
	_astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
	return _astruct
}

// CreateORMAstruct enables dynamic staging of a Astruct instance
func CreateORMAstruct(astruct *Astruct) {
	astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
}

// DeleteORMAstruct enables dynamic staging of a Astruct instance
func DeleteORMAstruct(astruct *Astruct) {
	astruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAstruct(astruct)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMAstruct(Astruct *Astruct)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMAstruct(Astruct *Astruct)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Astructs = make(map[*Astruct]struct{})
	stage.Astructs_mapString = make(map[string]*Astruct)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Astructs = nil
	stage.Astructs_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Astruct_Identifiers := make(map[*Astruct]string)
	_ = map_Astruct_Identifiers

	astructOrdered := []*Astruct{}
	for astruct := range stage.Astructs {
		astructOrdered = append(astructOrdered, astruct)
	}
	sort.Slice(astructOrdered[:], func(i, j int) bool {
		return astructOrdered[i].Name < astructOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Astruct")
	for idx, astruct := range astructOrdered {

		id = generatesIdentifier("Astruct", idx, astruct.Name)
		map_Astruct_Identifiers[astruct] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Astruct")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", astruct.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Astruct %s values setup", astruct.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(astruct.Name))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, astruct := range astructOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Astruct", idx, astruct.Name)
		map_Astruct_Identifiers[astruct] = id

		// Initialisation of values
		for _, _astruct := range astruct.Anarrayofa {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Anarrayofa")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Astruct_Identifiers[_astruct])
			pointersInitializesStatements += setPointerField
		}

	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of enum utility functions
