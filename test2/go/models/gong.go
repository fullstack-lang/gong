// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Astructs           map[*Astruct]struct{}
	Astructs_mapString map[string]*Astruct

	Bstructs           map[*Bstruct]struct{}
	Bstructs_mapString map[string]*Bstruct

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitAstruct(astruct *Astruct)
	CheckoutAstruct(astruct *Astruct)
	CommitBstruct(bstruct *Bstruct)
	CheckoutBstruct(bstruct *Bstruct)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Astructs:           make(map[*Astruct]struct{}),
	Astructs_mapString: make(map[string]*Astruct),

	Bstructs:           make(map[*Bstruct]struct{}),
	Bstructs_mapString: make(map[string]*Bstruct),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getAstructOrderedStructWithNameField() []*Astruct {
	// have alphabetical order generation
	astructOrdered := []*Astruct{}
	for astruct := range stage.Astructs {
		astructOrdered = append(astructOrdered, astruct)
	}
	sort.Slice(astructOrdered[:], func(i, j int) bool {
		return astructOrdered[i].Name < astructOrdered[j].Name
	})
	return astructOrdered
}

// Stage puts astruct to the model stage
func (astruct *Astruct) Stage() *Astruct {
	Stage.Astructs[astruct] = __member
	Stage.Astructs_mapString[astruct.Name] = astruct

	return astruct
}

// Unstage removes astruct off the model stage
func (astruct *Astruct) Unstage() *Astruct {
	delete(Stage.Astructs, astruct)
	delete(Stage.Astructs_mapString, astruct.Name)
	return astruct
}

// commit astruct to the back repo (if it is already staged)
func (astruct *Astruct) Commit() *Astruct {
	if _, ok := Stage.Astructs[astruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAstruct(astruct)
		}
	}
	return astruct
}

// Checkout astruct to the back repo (if it is already staged)
func (astruct *Astruct) Checkout() *Astruct {
	if _, ok := Stage.Astructs[astruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAstruct(astruct)
		}
	}
	return astruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of astruct to the model stage
func (astruct *Astruct) StageCopy() *Astruct {
	_astruct := new(Astruct)
	*_astruct = *astruct
	_astruct.Stage()
	return _astruct
}

// StageAndCommit appends astruct to the model stage and commit to the orm repo
func (astruct *Astruct) StageAndCommit() *Astruct {
	astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
	return astruct
}

// DeleteStageAndCommit appends astruct to the model stage and commit to the orm repo
func (astruct *Astruct) DeleteStageAndCommit() *Astruct {
	astruct.Unstage()
	DeleteORMAstruct(astruct)
	return astruct
}

// StageCopyAndCommit appends a copy of astruct to the model stage and commit to the orm repo
func (astruct *Astruct) StageCopyAndCommit() *Astruct {
	_astruct := new(Astruct)
	*_astruct = *astruct
	_astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
	return _astruct
}

// CreateORMAstruct enables dynamic staging of a Astruct instance
func CreateORMAstruct(astruct *Astruct) {
	astruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAstruct(astruct)
	}
}

// DeleteORMAstruct enables dynamic staging of a Astruct instance
func DeleteORMAstruct(astruct *Astruct) {
	astruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAstruct(astruct)
	}
}

func (stage *StageStruct) getBstructOrderedStructWithNameField() []*Bstruct {
	// have alphabetical order generation
	bstructOrdered := []*Bstruct{}
	for bstruct := range stage.Bstructs {
		bstructOrdered = append(bstructOrdered, bstruct)
	}
	sort.Slice(bstructOrdered[:], func(i, j int) bool {
		return bstructOrdered[i].Name < bstructOrdered[j].Name
	})
	return bstructOrdered
}

// Stage puts bstruct to the model stage
func (bstruct *Bstruct) Stage() *Bstruct {
	Stage.Bstructs[bstruct] = __member
	Stage.Bstructs_mapString[bstruct.Name] = bstruct

	return bstruct
}

// Unstage removes bstruct off the model stage
func (bstruct *Bstruct) Unstage() *Bstruct {
	delete(Stage.Bstructs, bstruct)
	delete(Stage.Bstructs_mapString, bstruct.Name)
	return bstruct
}

// commit bstruct to the back repo (if it is already staged)
func (bstruct *Bstruct) Commit() *Bstruct {
	if _, ok := Stage.Bstructs[bstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitBstruct(bstruct)
		}
	}
	return bstruct
}

// Checkout bstruct to the back repo (if it is already staged)
func (bstruct *Bstruct) Checkout() *Bstruct {
	if _, ok := Stage.Bstructs[bstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutBstruct(bstruct)
		}
	}
	return bstruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of bstruct to the model stage
func (bstruct *Bstruct) StageCopy() *Bstruct {
	_bstruct := new(Bstruct)
	*_bstruct = *bstruct
	_bstruct.Stage()
	return _bstruct
}

// StageAndCommit appends bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) StageAndCommit() *Bstruct {
	bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
	return bstruct
}

// DeleteStageAndCommit appends bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) DeleteStageAndCommit() *Bstruct {
	bstruct.Unstage()
	DeleteORMBstruct(bstruct)
	return bstruct
}

// StageCopyAndCommit appends a copy of bstruct to the model stage and commit to the orm repo
func (bstruct *Bstruct) StageCopyAndCommit() *Bstruct {
	_bstruct := new(Bstruct)
	*_bstruct = *bstruct
	_bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
	return _bstruct
}

// CreateORMBstruct enables dynamic staging of a Bstruct instance
func CreateORMBstruct(bstruct *Bstruct) {
	bstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBstruct(bstruct)
	}
}

// DeleteORMBstruct enables dynamic staging of a Bstruct instance
func DeleteORMBstruct(bstruct *Bstruct) {
	bstruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMBstruct(bstruct)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMAstruct(Astruct *Astruct)
	CreateORMBstruct(Bstruct *Bstruct)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMAstruct(Astruct *Astruct)
	DeleteORMBstruct(Bstruct *Bstruct)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Astructs = make(map[*Astruct]struct{})
	stage.Astructs_mapString = make(map[string]*Astruct)

	stage.Bstructs = make(map[*Bstruct]struct{})
	stage.Bstructs_mapString = make(map[string]*Bstruct)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Astructs = nil
	stage.Astructs_mapString = nil

	stage.Bstructs = nil
	stage.Bstructs_mapString = nil

}
