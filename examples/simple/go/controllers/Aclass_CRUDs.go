// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/examples/simple/go/models"
	"github.com/fullstack-lang/gong/examples/simple/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Aclass__dummysDeclaration__ models.Aclass

// An AclassID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAclass updateAclass deleteAclass
type AclassID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AclassInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAclass updateAclass
type AclassInput struct {
	// The Aclass to submit or modify
	// in: body
	Aclass *orm.AclassAPI
}

// GetAclasss
//
// swagger:route GET /aclasss aclasss getAclasss
//
// Get all aclasss
//
// Responses:
//    default: genericError
//        200: aclassDBsResponse
func GetAclasss(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var aclasss []orm.AclassDB
	query := db.Find(&aclasss)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each aclass, update fields from the database nullable fields
	for idx := range aclasss {
		aclass := &aclasss[idx]
		_ = aclass
		// insertion point for updating fields
		if aclass.Name_Data.Valid {
			aclass.Name = aclass.Name_Data.String
		}

		aclass.Booleanfield = aclass.Booleanfield_Data.Bool

		if aclass.Aenum_Data.Valid {
			aclass.Aenum = models.AEnumType(aclass.Aenum_Data.String)
		}

		if aclass.Aenum_2_Data.Valid {
			aclass.Aenum_2 = models.AEnumType(aclass.Aenum_2_Data.String)
		}

		if aclass.Benum_Data.Valid {
			aclass.Benum = models.BEnumType(aclass.Benum_Data.String)
		}

		if aclass.CName_Data.Valid {
			aclass.CName = aclass.CName_Data.String
		}

		if aclass.CFloatfield_Data.Valid {
			aclass.CFloatfield = aclass.CFloatfield_Data.Float64
		}

		if aclass.Floatfield_Data.Valid {
			aclass.Floatfield = aclass.Floatfield_Data.Float64
		}

		if aclass.Intfield_Data.Valid {
			aclass.Intfield = int(aclass.Intfield_Data.Int64)
		}

		aclass.Anotherbooleanfield = aclass.Anotherbooleanfield_Data.Bool

	}

	c.JSON(http.StatusOK, aclasss)
}

// PostAclass
//
// swagger:route POST /aclasss aclasss postAclass
//
// Creates a aclass
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: aclassDBResponse
func PostAclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.AclassAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create aclass
	aclassDB := orm.AclassDB{}
	aclassDB.AclassAPI = input
	// insertion point for nullable field set
	aclassDB.Name_Data.String = input.Name
	aclassDB.Name_Data.Valid = true

	aclassDB.Booleanfield_Data.Bool = input.Booleanfield
	aclassDB.Booleanfield_Data.Valid = true

	aclassDB.Aenum_Data.String = string(input.Aenum)
	aclassDB.Aenum_Data.Valid = true

	aclassDB.Aenum_2_Data.String = string(input.Aenum_2)
	aclassDB.Aenum_2_Data.Valid = true

	aclassDB.Benum_Data.String = string(input.Benum)
	aclassDB.Benum_Data.Valid = true

	aclassDB.CName_Data.String = input.CName
	aclassDB.CName_Data.Valid = true

	aclassDB.CFloatfield_Data.Float64 = input.CFloatfield
	aclassDB.CFloatfield_Data.Valid = true

	aclassDB.Floatfield_Data.Float64 = input.Floatfield
	aclassDB.Floatfield_Data.Valid = true

	aclassDB.Intfield_Data.Int64 = int64(input.Intfield)
	aclassDB.Intfield_Data.Valid = true

	aclassDB.Anotherbooleanfield_Data.Bool = input.Anotherbooleanfield
	aclassDB.Anotherbooleanfield_Data.Valid = true

	query := db.Create(&aclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, aclassDB)
}

// GetAclass
//
// swagger:route GET /aclasss/{ID} aclasss getAclass
//
// Gets the details for a aclass.
//
// Responses:
//    default: genericError
//        200: aclassDBResponse
func GetAclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get aclass in DB
	var aclass orm.AclassDB
	if err := db.First(&aclass, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if aclass.Name_Data.Valid {
		aclass.Name = aclass.Name_Data.String
	}

	aclass.Booleanfield = aclass.Booleanfield_Data.Bool

	if aclass.Aenum_Data.Valid {
		aclass.Aenum = models.AEnumType(aclass.Aenum_Data.String)
	}

	if aclass.Aenum_2_Data.Valid {
		aclass.Aenum_2 = models.AEnumType(aclass.Aenum_2_Data.String)
	}

	if aclass.Benum_Data.Valid {
		aclass.Benum = models.BEnumType(aclass.Benum_Data.String)
	}

	if aclass.CName_Data.Valid {
		aclass.CName = aclass.CName_Data.String
	}

	if aclass.CFloatfield_Data.Valid {
		aclass.CFloatfield = aclass.CFloatfield_Data.Float64
	}

	if aclass.Floatfield_Data.Valid {
		aclass.Floatfield = aclass.Floatfield_Data.Float64
	}

	if aclass.Intfield_Data.Valid {
		aclass.Intfield = int(aclass.Intfield_Data.Int64)
	}

	aclass.Anotherbooleanfield = aclass.Anotherbooleanfield_Data.Bool

	c.JSON(http.StatusOK, aclass)
}

// UpdateAclass
//
// swagger:route PATCH /aclasss/{ID} aclasss updateAclass
//
// Update a aclass
//
// Responses:
//    default: genericError
//        200: aclassDBResponse
func UpdateAclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var aclassDB orm.AclassDB

	// fetch the aclass
	query := db.First(&aclassDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.AclassAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Booleanfield_Data.Bool = input.Booleanfield
	input.Booleanfield_Data.Valid = true

	input.Aenum_Data.String = string(input.Aenum)
	input.Aenum_Data.Valid = true

	input.Aenum_2_Data.String = string(input.Aenum_2)
	input.Aenum_2_Data.Valid = true

	input.Benum_Data.String = string(input.Benum)
	input.Benum_Data.Valid = true

	input.CName_Data.String = input.CName
	input.CName_Data.Valid = true

	input.CFloatfield_Data.Float64 = input.CFloatfield
	input.CFloatfield_Data.Valid = true

	input.Floatfield_Data.Float64 = input.Floatfield
	input.Floatfield_Data.Valid = true

	input.Intfield_Data.Int64 = int64(input.Intfield)
	input.Intfield_Data.Valid = true

	input.Anotherbooleanfield_Data.Bool = input.Anotherbooleanfield
	input.Anotherbooleanfield_Data.Valid = true

	query = db.Model(&aclassDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the aclassDB
	c.JSON(http.StatusOK, aclassDB)
}

// DeleteAclass
//
// swagger:route DELETE /aclasss/{ID} aclasss deleteAclass
//
// Delete a aclass
//
// Responses:
//    default: genericError
func DeleteAclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var aclassDB orm.AclassDB
	if err := db.First(&aclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&aclassDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
