// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/examples/laundromat/go/models"
	"github.com/fullstack-lang/gong/examples/laundromat/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Washer__dummysDeclaration__ models.Washer

// An WasherID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getWasher updateWasher deleteWasher
type WasherID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// WasherInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postWasher updateWasher
type WasherInput struct {
	// The Washer to submit or modify
	// in: body
	Washer *orm.WasherAPI
}

// GetWashers
//
// swagger:route GET /washers washers getWashers
//
// Get all washers
//
// Responses:
//    default: genericError
//        200: washerDBsResponse
func GetWashers(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var washers []orm.WasherDB
	query := db.Find(&washers)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each washer, update fields from the database nullable fields
	for idx := range washers {
		washer := &washers[idx]
		_ = washer
		// insertion point for updating fields
		if washer.TechName_Data.Valid {
			washer.TechName = washer.TechName_Data.String
		}

		if washer.Name_Data.Valid {
			washer.Name = washer.Name_Data.String
		}

		if washer.DirtyLaundryWeight_Data.Valid {
			washer.DirtyLaundryWeight = washer.DirtyLaundryWeight_Data.Float64
		}

		if washer.State_Data.Valid {
			washer.State = models.WasherStateEnum(washer.State_Data.String)
		}

		if washer.CleanedLaundryWeight_Data.Valid {
			washer.CleanedLaundryWeight = washer.CleanedLaundryWeight_Data.Float64
		}

	}

	c.JSON(http.StatusOK, washers)
}

// PostWasher
//
// swagger:route POST /washers washers postWasher
//
// Creates a washer
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: washerDBResponse
func PostWasher(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.WasherAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create washer
	washerDB := orm.WasherDB{}
	washerDB.WasherAPI = input
	// insertion point for nullable field set
	washerDB.TechName_Data.String = input.TechName
	washerDB.TechName_Data.Valid = true

	washerDB.Name_Data.String = input.Name
	washerDB.Name_Data.Valid = true

	washerDB.DirtyLaundryWeight_Data.Float64 = input.DirtyLaundryWeight
	washerDB.DirtyLaundryWeight_Data.Valid = true

	washerDB.State_Data.String = string(input.State)
	washerDB.State_Data.Valid = true

	washerDB.CleanedLaundryWeight_Data.Float64 = input.CleanedLaundryWeight
	washerDB.CleanedLaundryWeight_Data.Valid = true

	query := db.Create(&washerDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, washerDB)
}

// GetWasher
//
// swagger:route GET /washers/{ID} washers getWasher
//
// Gets the details for a washer.
//
// Responses:
//    default: genericError
//        200: washerDBResponse
func GetWasher(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get washer in DB
	var washer orm.WasherDB
	if err := db.First(&washer, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if washer.TechName_Data.Valid {
		washer.TechName = washer.TechName_Data.String
	}

	if washer.Name_Data.Valid {
		washer.Name = washer.Name_Data.String
	}

	if washer.DirtyLaundryWeight_Data.Valid {
		washer.DirtyLaundryWeight = washer.DirtyLaundryWeight_Data.Float64
	}

	if washer.State_Data.Valid {
		washer.State = models.WasherStateEnum(washer.State_Data.String)
	}

	if washer.CleanedLaundryWeight_Data.Valid {
		washer.CleanedLaundryWeight = washer.CleanedLaundryWeight_Data.Float64
	}

	c.JSON(http.StatusOK, washer)
}

// UpdateWasher
//
// swagger:route PATCH /washers/{ID} washers updateWasher
//
// Update a washer
//
// Responses:
//    default: genericError
//        200: washerDBResponse
func UpdateWasher(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var washerDB orm.WasherDB

	// fetch the washer
	query := db.First(&washerDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.WasherAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.TechName_Data.String = input.TechName
	input.TechName_Data.Valid = true

	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.DirtyLaundryWeight_Data.Float64 = input.DirtyLaundryWeight
	input.DirtyLaundryWeight_Data.Valid = true

	input.State_Data.String = string(input.State)
	input.State_Data.Valid = true

	input.CleanedLaundryWeight_Data.Float64 = input.CleanedLaundryWeight
	input.CleanedLaundryWeight_Data.Valid = true

	query = db.Model(&washerDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the washerDB
	c.JSON(http.StatusOK, washerDB)
}

// DeleteWasher
//
// swagger:route DELETE /washers/{ID} washers deleteWasher
//
// Delete a washer
//
// Responses:
//    default: genericError
func DeleteWasher(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var washerDB orm.WasherDB
	if err := db.First(&washerDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&washerDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
