// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/examples/laundromat/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Simulation sql.NullBool

// SimulationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model simulationAPI
type SimulationAPI struct {
	models.Simulation

	// insertion for fields declaration
	// Declation for basic field simulationDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// field Machine is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MachineID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	MachineName string

	// field Washer is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	WasherID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	WasherName string

	// Declation for basic field simulationDB.LastCommitNb {{BasicKind}} (to be completed)
	LastCommitNb_Data sql.NullInt64

	// end of insertion
}

// SimulationDB describes a simulation in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model simulationDB
type SimulationDB struct {
	gorm.Model

	SimulationAPI
}

// SimulationDBs arrays simulationDBs
// swagger:response simulationDBsResponse
type SimulationDBs []SimulationDB

// SimulationDBResponse provides response
// swagger:response simulationDBResponse
type SimulationDBResponse struct {
	SimulationDB
}

type BackRepoSimulationStruct struct {
	// stores SimulationDB according to their gorm ID
	Map_SimulationDBID_SimulationDB *map[uint]*SimulationDB

	// stores SimulationDB ID according to Simulation address
	Map_SimulationPtr_SimulationDBID *map[*models.Simulation]uint

	// stores Simulation according to their gorm ID
	Map_SimulationDBID_SimulationPtr *map[uint]*models.Simulation

	db *gorm.DB
}

// BackRepoSimulation.Init set up the BackRepo of the Simulation
func (backRepoSimulation *BackRepoSimulationStruct) Init(db *gorm.DB) (Error error) {

	if backRepoSimulation.Map_SimulationDBID_SimulationPtr != nil {
		err := errors.New("In Init, backRepoSimulation.Map_SimulationDBID_SimulationPtr should be nil")
		return err
	}

	if backRepoSimulation.Map_SimulationDBID_SimulationDB != nil {
		err := errors.New("In Init, backRepoSimulation.Map_SimulationDBID_SimulationDB should be nil")
		return err
	}

	if backRepoSimulation.Map_SimulationPtr_SimulationDBID != nil {
		err := errors.New("In Init, backRepoSimulation.Map_SimulationPtr_SimulationDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Simulation, 0)
	backRepoSimulation.Map_SimulationDBID_SimulationPtr = &tmp

	tmpDB := make(map[uint]*SimulationDB, 0)
	backRepoSimulation.Map_SimulationDBID_SimulationDB = &tmpDB

	tmpID := make(map[*models.Simulation]uint, 0)
	backRepoSimulation.Map_SimulationPtr_SimulationDBID = &tmpID

	backRepoSimulation.db = db
	return
}

// BackRepoSimulation.CommitPhaseOne commits all staged instances of Simulation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSimulation *BackRepoSimulationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for simulation := range stage.Simulations {
		backRepoSimulation.CommitPhaseOneInstance(simulation)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, simulation := range *backRepoSimulation.Map_SimulationDBID_SimulationPtr {
		if _, ok := stage.Simulations[simulation]; !ok {
			backRepoSimulation.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSimulation.CommitDeleteInstance commits deletion of Simulation to the BackRepo
func (backRepoSimulation *BackRepoSimulationStruct) CommitDeleteInstance(id uint) (Error error) {

	simulation := (*backRepoSimulation.Map_SimulationDBID_SimulationPtr)[id]

	// simulation is not staged anymore, remove simulationDB
	simulationDB := (*backRepoSimulation.Map_SimulationDBID_SimulationDB)[id]
	query := backRepoSimulation.db.Unscoped().Delete(&simulationDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoSimulation.Map_SimulationPtr_SimulationDBID), simulation)
	delete((*backRepoSimulation.Map_SimulationDBID_SimulationPtr), id)
	delete((*backRepoSimulation.Map_SimulationDBID_SimulationDB), id)

	return
}

// BackRepoSimulation.CommitPhaseOneInstance commits simulation staged instances of Simulation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSimulation *BackRepoSimulationStruct) CommitPhaseOneInstance(simulation *models.Simulation) (Error error) {

	// check if the simulation is not commited yet
	if _, ok := (*backRepoSimulation.Map_SimulationPtr_SimulationDBID)[simulation]; ok {
		return
	}

	// initiate simulation
	var simulationDB SimulationDB
	simulationDB.Simulation = *simulation

	query := backRepoSimulation.db.Create(&simulationDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoSimulation.Map_SimulationPtr_SimulationDBID)[simulation] = simulationDB.ID
	(*backRepoSimulation.Map_SimulationDBID_SimulationPtr)[simulationDB.ID] = simulation
	(*backRepoSimulation.Map_SimulationDBID_SimulationDB)[simulationDB.ID] = &simulationDB

	return
}

// BackRepoSimulation.CommitPhaseTwo commits all staged instances of Simulation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimulation *BackRepoSimulationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, simulation := range *backRepoSimulation.Map_SimulationDBID_SimulationPtr {
		backRepoSimulation.CommitPhaseTwoInstance(backRepo, idx, simulation)
	}

	return
}

// BackRepoSimulation.CommitPhaseTwoInstance commits {{structname }} of models.Simulation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimulation *BackRepoSimulationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, simulation *models.Simulation) (Error error) {

	// fetch matching simulationDB
	if simulationDB, ok := (*backRepoSimulation.Map_SimulationDBID_SimulationDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				simulationDB.Name_Data.String = simulation.Name
				simulationDB.Name_Data.Valid = true

				// commit pointer value simulation.Machine translates to updating the simulation.MachineID
				simulationDB.MachineID.Valid = true // allow for a 0 value (nil association)
				if simulation.Machine != nil {
					if MachineId, ok := (*backRepo.BackRepoMachine.Map_MachinePtr_MachineDBID)[simulation.Machine]; ok {
						simulationDB.MachineID.Int64 = int64(MachineId)
					}
				}

				// commit pointer value simulation.Washer translates to updating the simulation.WasherID
				simulationDB.WasherID.Valid = true // allow for a 0 value (nil association)
				if simulation.Washer != nil {
					if WasherId, ok := (*backRepo.BackRepoWasher.Map_WasherPtr_WasherDBID)[simulation.Washer]; ok {
						simulationDB.WasherID.Int64 = int64(WasherId)
					}
				}

				simulationDB.LastCommitNb_Data.Int64 = int64(simulation.LastCommitNb)
				simulationDB.LastCommitNb_Data.Valid = true

			}
		}
		query := backRepoSimulation.db.Save(&simulationDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Simulation intance %s", simulation.Name))
		return err
	}

	return
}

// BackRepoSimulation.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoSimulation *BackRepoSimulationStruct) CheckoutPhaseOne() (Error error) {

	simulationDBArray := make([]SimulationDB, 0)
	query := backRepoSimulation.db.Find(&simulationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, simulationDB := range simulationDBArray {
		backRepoSimulation.CheckoutPhaseOneInstance(&simulationDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a simulationDB that has been found in the DB, updates the backRepo and stages the
// models version of the simulationDB
func (backRepoSimulation *BackRepoSimulationStruct) CheckoutPhaseOneInstance(simulationDB *SimulationDB) (Error error) {

	// if absent, create entries in the backRepoSimulation maps.
	simulationWithNewFieldValues := simulationDB.Simulation
	if _, ok := (*backRepoSimulation.Map_SimulationDBID_SimulationPtr)[simulationDB.ID]; !ok {

		(*backRepoSimulation.Map_SimulationDBID_SimulationPtr)[simulationDB.ID] = &simulationWithNewFieldValues
		(*backRepoSimulation.Map_SimulationPtr_SimulationDBID)[&simulationWithNewFieldValues] = simulationDB.ID

		// append model store with the new element
		simulationWithNewFieldValues.Stage()
	}
	simulationDBWithNewFieldValues := *simulationDB
	(*backRepoSimulation.Map_SimulationDBID_SimulationDB)[simulationDB.ID] = &simulationDBWithNewFieldValues

	return
}

// BackRepoSimulation.CheckoutPhaseTwo Checkouts all staged instances of Simulation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimulation *BackRepoSimulationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, simulationDB := range *backRepoSimulation.Map_SimulationDBID_SimulationDB {
		backRepoSimulation.CheckoutPhaseTwoInstance(backRepo, simulationDB)
	}
	return
}

// BackRepoSimulation.CheckoutPhaseTwoInstance Checkouts staged instances of Simulation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimulation *BackRepoSimulationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, simulationDB *SimulationDB) (Error error) {

	simulation := (*backRepoSimulation.Map_SimulationDBID_SimulationPtr)[simulationDB.ID]
	_ = simulation // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			simulation.Name = simulationDB.Name_Data.String

			// Machine field
			if simulationDB.MachineID.Int64 != 0 {
				simulation.Machine = (*backRepo.BackRepoMachine.Map_MachineDBID_MachinePtr)[uint(simulationDB.MachineID.Int64)]
			}

			// Washer field
			if simulationDB.WasherID.Int64 != 0 {
				simulation.Washer = (*backRepo.BackRepoWasher.Map_WasherDBID_WasherPtr)[uint(simulationDB.WasherID.Int64)]
			}

			simulation.LastCommitNb = int(simulationDB.LastCommitNb_Data.Int64)

		}
	}
	return
}

// CommitSimulation allows commit of a single simulation (if already staged)
func (backRepo *BackRepoStruct) CommitSimulation(simulation *models.Simulation) {
	backRepo.BackRepoSimulation.CommitPhaseOneInstance(simulation)
	if id, ok := (*backRepo.BackRepoSimulation.Map_SimulationPtr_SimulationDBID)[simulation]; ok {
		backRepo.BackRepoSimulation.CommitPhaseTwoInstance(backRepo, id, simulation)
	}
}

// CommitSimulation allows checkout of a single simulation (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSimulation(simulation *models.Simulation) {
	// check if the simulation is staged
	if _, ok := (*backRepo.BackRepoSimulation.Map_SimulationPtr_SimulationDBID)[simulation]; ok {

		if id, ok := (*backRepo.BackRepoSimulation.Map_SimulationPtr_SimulationDBID)[simulation]; ok {
			var simulationDB SimulationDB
			simulationDB.ID = id

			if err := backRepo.BackRepoSimulation.db.First(&simulationDB, id).Error; err != nil {
				log.Panicln("CheckoutSimulation : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSimulation.CheckoutPhaseOneInstance(&simulationDB)
			backRepo.BackRepoSimulation.CheckoutPhaseTwoInstance(backRepo, &simulationDB)
		}
	}
}
