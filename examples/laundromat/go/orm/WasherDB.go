// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/examples/laundromat/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Washer sql.NullBool

// WasherAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model washerAPI
type WasherAPI struct {
	models.Washer

	// insertion for fields declaration
	// Declation for basic field washerDB.TechName {{BasicKind}} (to be completed)
	TechName_Data sql.NullString

	// Declation for basic field washerDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field washerDB.DirtyLaundryWeight {{BasicKind}} (to be completed)
	DirtyLaundryWeight_Data sql.NullFloat64

	// Declation for basic field washerDB.State {{BasicKind}} (to be completed)
	State_Data sql.NullString

	// field Machine is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MachineID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	MachineName string

	// Declation for basic field washerDB.CleanedLaundryWeight {{BasicKind}} (to be completed)
	CleanedLaundryWeight_Data sql.NullFloat64

	// end of insertion
}

// WasherDB describes a washer in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model washerDB
type WasherDB struct {
	gorm.Model

	WasherAPI
}

// WasherDBs arrays washerDBs
// swagger:response washerDBsResponse
type WasherDBs []WasherDB

// WasherDBResponse provides response
// swagger:response washerDBResponse
type WasherDBResponse struct {
	WasherDB
}

type BackRepoWasherStruct struct {
	// stores WasherDB according to their gorm ID
	Map_WasherDBID_WasherDB *map[uint]*WasherDB

	// stores WasherDB ID according to Washer address
	Map_WasherPtr_WasherDBID *map[*models.Washer]uint

	// stores Washer according to their gorm ID
	Map_WasherDBID_WasherPtr *map[uint]*models.Washer

	db *gorm.DB
}

// BackRepoWasher.Init set up the BackRepo of the Washer
func (backRepoWasher *BackRepoWasherStruct) Init(db *gorm.DB) (Error error) {

	if backRepoWasher.Map_WasherDBID_WasherPtr != nil {
		err := errors.New("In Init, backRepoWasher.Map_WasherDBID_WasherPtr should be nil")
		return err
	}

	if backRepoWasher.Map_WasherDBID_WasherDB != nil {
		err := errors.New("In Init, backRepoWasher.Map_WasherDBID_WasherDB should be nil")
		return err
	}

	if backRepoWasher.Map_WasherPtr_WasherDBID != nil {
		err := errors.New("In Init, backRepoWasher.Map_WasherPtr_WasherDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Washer, 0)
	backRepoWasher.Map_WasherDBID_WasherPtr = &tmp

	tmpDB := make(map[uint]*WasherDB, 0)
	backRepoWasher.Map_WasherDBID_WasherDB = &tmpDB

	tmpID := make(map[*models.Washer]uint, 0)
	backRepoWasher.Map_WasherPtr_WasherDBID = &tmpID

	backRepoWasher.db = db
	return
}

// BackRepoWasher.CommitPhaseOne commits all staged instances of Washer to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWasher *BackRepoWasherStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for washer := range stage.Washers {
		backRepoWasher.CommitPhaseOneInstance(washer)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, washer := range *backRepoWasher.Map_WasherDBID_WasherPtr {
		if _, ok := stage.Washers[washer]; !ok {
			backRepoWasher.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoWasher.CommitDeleteInstance commits deletion of Washer to the BackRepo
func (backRepoWasher *BackRepoWasherStruct) CommitDeleteInstance(id uint) (Error error) {

	washer := (*backRepoWasher.Map_WasherDBID_WasherPtr)[id]

	// washer is not staged anymore, remove washerDB
	washerDB := (*backRepoWasher.Map_WasherDBID_WasherDB)[id]
	query := backRepoWasher.db.Unscoped().Delete(&washerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoWasher.Map_WasherPtr_WasherDBID), washer)
	delete((*backRepoWasher.Map_WasherDBID_WasherPtr), id)
	delete((*backRepoWasher.Map_WasherDBID_WasherDB), id)

	return
}

// BackRepoWasher.CommitPhaseOneInstance commits washer staged instances of Washer to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWasher *BackRepoWasherStruct) CommitPhaseOneInstance(washer *models.Washer) (Error error) {

	// check if the washer is not commited yet
	if _, ok := (*backRepoWasher.Map_WasherPtr_WasherDBID)[washer]; ok {
		return
	}

	// initiate washer
	var washerDB WasherDB
	washerDB.Washer = *washer

	query := backRepoWasher.db.Create(&washerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoWasher.Map_WasherPtr_WasherDBID)[washer] = washerDB.ID
	(*backRepoWasher.Map_WasherDBID_WasherPtr)[washerDB.ID] = washer
	(*backRepoWasher.Map_WasherDBID_WasherDB)[washerDB.ID] = &washerDB

	return
}

// BackRepoWasher.CommitPhaseTwo commits all staged instances of Washer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWasher *BackRepoWasherStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, washer := range *backRepoWasher.Map_WasherDBID_WasherPtr {
		backRepoWasher.CommitPhaseTwoInstance(backRepo, idx, washer)
	}

	return
}

// BackRepoWasher.CommitPhaseTwoInstance commits {{structname }} of models.Washer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWasher *BackRepoWasherStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, washer *models.Washer) (Error error) {

	// fetch matching washerDB
	if washerDB, ok := (*backRepoWasher.Map_WasherDBID_WasherDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				washerDB.TechName_Data.String = washer.TechName
				washerDB.TechName_Data.Valid = true

				washerDB.Name_Data.String = washer.Name
				washerDB.Name_Data.Valid = true

				washerDB.DirtyLaundryWeight_Data.Float64 = washer.DirtyLaundryWeight
				washerDB.DirtyLaundryWeight_Data.Valid = true

				washerDB.State_Data.String = string(washer.State)
				washerDB.State_Data.Valid = true

				// commit pointer value washer.Machine translates to updating the washer.MachineID
				washerDB.MachineID.Valid = true // allow for a 0 value (nil association)
				if washer.Machine != nil {
					if MachineId, ok := (*backRepo.BackRepoMachine.Map_MachinePtr_MachineDBID)[washer.Machine]; ok {
						washerDB.MachineID.Int64 = int64(MachineId)
					}
				}

				washerDB.CleanedLaundryWeight_Data.Float64 = washer.CleanedLaundryWeight
				washerDB.CleanedLaundryWeight_Data.Valid = true

			}
		}
		query := backRepoWasher.db.Save(&washerDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Washer intance %s", washer.Name))
		return err
	}

	return
}

// BackRepoWasher.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoWasher *BackRepoWasherStruct) CheckoutPhaseOne() (Error error) {

	washerDBArray := make([]WasherDB, 0)
	query := backRepoWasher.db.Find(&washerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, washerDB := range washerDBArray {
		backRepoWasher.CheckoutPhaseOneInstance(&washerDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a washerDB that has been found in the DB, updates the backRepo and stages the
// models version of the washerDB
func (backRepoWasher *BackRepoWasherStruct) CheckoutPhaseOneInstance(washerDB *WasherDB) (Error error) {

	// if absent, create entries in the backRepoWasher maps.
	washerWithNewFieldValues := washerDB.Washer
	if _, ok := (*backRepoWasher.Map_WasherDBID_WasherPtr)[washerDB.ID]; !ok {

		(*backRepoWasher.Map_WasherDBID_WasherPtr)[washerDB.ID] = &washerWithNewFieldValues
		(*backRepoWasher.Map_WasherPtr_WasherDBID)[&washerWithNewFieldValues] = washerDB.ID

		// append model store with the new element
		washerWithNewFieldValues.Stage()
	}
	washerDBWithNewFieldValues := *washerDB
	(*backRepoWasher.Map_WasherDBID_WasherDB)[washerDB.ID] = &washerDBWithNewFieldValues

	return
}

// BackRepoWasher.CheckoutPhaseTwo Checkouts all staged instances of Washer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWasher *BackRepoWasherStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, washerDB := range *backRepoWasher.Map_WasherDBID_WasherDB {
		backRepoWasher.CheckoutPhaseTwoInstance(backRepo, washerDB)
	}
	return
}

// BackRepoWasher.CheckoutPhaseTwoInstance Checkouts staged instances of Washer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWasher *BackRepoWasherStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, washerDB *WasherDB) (Error error) {

	washer := (*backRepoWasher.Map_WasherDBID_WasherPtr)[washerDB.ID]
	_ = washer // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			washer.TechName = washerDB.TechName_Data.String

			washer.Name = washerDB.Name_Data.String

			washer.DirtyLaundryWeight = washerDB.DirtyLaundryWeight_Data.Float64

			washer.State = models.WasherStateEnum(washerDB.State_Data.String)

			// Machine field
			if washerDB.MachineID.Int64 != 0 {
				washer.Machine = (*backRepo.BackRepoMachine.Map_MachineDBID_MachinePtr)[uint(washerDB.MachineID.Int64)]
			}

			washer.CleanedLaundryWeight = washerDB.CleanedLaundryWeight_Data.Float64

		}
	}
	return
}

// CommitWasher allows commit of a single washer (if already staged)
func (backRepo *BackRepoStruct) CommitWasher(washer *models.Washer) {
	backRepo.BackRepoWasher.CommitPhaseOneInstance(washer)
	if id, ok := (*backRepo.BackRepoWasher.Map_WasherPtr_WasherDBID)[washer]; ok {
		backRepo.BackRepoWasher.CommitPhaseTwoInstance(backRepo, id, washer)
	}
}

// CommitWasher allows checkout of a single washer (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutWasher(washer *models.Washer) {
	// check if the washer is staged
	if _, ok := (*backRepo.BackRepoWasher.Map_WasherPtr_WasherDBID)[washer]; ok {

		if id, ok := (*backRepo.BackRepoWasher.Map_WasherPtr_WasherDBID)[washer]; ok {
			var washerDB WasherDB
			washerDB.ID = id

			if err := backRepo.BackRepoWasher.db.First(&washerDB, id).Error; err != nil {
				log.Panicln("CheckoutWasher : Problem with getting object with id:", id)
			}
			backRepo.BackRepoWasher.CheckoutPhaseOneInstance(&washerDB)
			backRepo.BackRepoWasher.CheckoutPhaseTwoInstance(backRepo, &washerDB)
		}
	}
}
