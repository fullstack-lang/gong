// generated by MultiCodeGeneratorNgService
import { Injectable } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { MachineAPI } from './machine-api';
import { MachineDB } from './machine-db';

@Injectable({
  providedIn: 'root'
})
export class MachineService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  MachineServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private machinesUrl = 'http://localhost:8080/api/github.com/fullstack-lang/gong/examples/laundromat/go/v1/machines';

  constructor(
    private http: HttpClient
  ) { }

  /** GET machines from the server */
  getMachines(): Observable<MachineDB[]> {
    return this.http.get<MachineDB[]>(this.machinesUrl)
      .pipe(
        tap(_ => this.log('fetched machines')),
        catchError(this.handleError<MachineDB[]>('getMachines', []))
      );
  }

  /** GET machine by id. Will 404 if id not found */
  getMachine(id: number): Observable<MachineDB> {
    const url = `${this.machinesUrl}/${id}`;
    return this.http.get<MachineDB>(url).pipe(
      tap(_ => this.log(`fetched machine id=${id}`)),
      catchError(this.handleError<MachineDB>(`getMachine id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new machine to the server */
  postMachine(machineAPI: MachineAPI): Observable<MachineDB> {
    return this.http.post<MachineDB>(this.machinesUrl, machineAPI, this.httpOptions).pipe(
      tap((newMachine: MachineDB) => {})
    );
  }

  /** DELETE: delete the machinedb from the server */
  deleteMachine(machinedb: MachineDB | number): Observable<MachineDB> {
    const id = typeof machinedb === 'number' ? machinedb : machinedb.ID;
    const url = `${this.machinesUrl}/${id}`;

    return this.http.delete<MachineDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted machinedb id=${id}`)),
      catchError(this.handleError<MachineDB>('deleteMachine'))
    );
  }

  /** PUT: update the machinedb on the server */
  updateMachine(machinedb: MachineDB): Observable<MachineDB> {
    const id = typeof machinedb === 'number' ? machinedb : machinedb.ID;
    const url = `${this.machinesUrl}/${id}`;

    // insertion point for reset of reverse pointers (to avoid circular JSON)

    return this.http.put(url, machinedb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        this.log(`updated machinedb id=${machinedb.ID}`)
      }),
      catchError(this.handleError<MachineDB>('updateMachine'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
