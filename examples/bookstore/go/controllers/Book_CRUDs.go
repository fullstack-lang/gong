// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/examples/bookstore/go/models"
	"github.com/fullstack-lang/gong/examples/bookstore/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Book__dummysDeclaration__ models.Book

// An BookID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getBook updateBook deleteBook
type BookID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// BookInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postBook updateBook
type BookInput struct {
	// The Book to submit or modify
	// in: body
	Book *orm.BookAPI
}

// GetBooks
//
// swagger:route GET /books books getBooks
//
// Get all books
//
// Responses:
//    default: genericError
//        200: bookDBsResponse
func GetBooks(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var books []orm.BookDB
	query := db.Find(&books)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each book, update fields from the database nullable fields
	for idx := range books {
		book := &books[idx]
		_ = book
		// insertion point for updating fields
		if book.Name_Data.Valid {
			book.Name = book.Name_Data.String
		}

		if book.Author_Data.Valid {
			book.Author = book.Author_Data.String
		}

		if book.City_Data.Valid {
			book.City = book.City_Data.String
		}

		if book.Year_Data.Valid {
			book.Year = int(book.Year_Data.Int64)
		}

		if book.Price_Data.Valid {
			book.Price = book.Price_Data.Float64
		}

		book.Recommanded = book.Recommanded_Data.Bool

	}

	c.JSON(http.StatusOK, books)
}

// PostBook
//
// swagger:route POST /books books postBook
//
// Creates a book
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: bookDBResponse
func PostBook(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.BookAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create book
	bookDB := orm.BookDB{}
	bookDB.BookAPI = input
	// insertion point for nullable field set
	bookDB.Name_Data.String = input.Name
	bookDB.Name_Data.Valid = true

	bookDB.Author_Data.String = input.Author
	bookDB.Author_Data.Valid = true

	bookDB.City_Data.String = input.City
	bookDB.City_Data.Valid = true

	bookDB.Year_Data.Int64 = int64(input.Year)
	bookDB.Year_Data.Valid = true

	bookDB.Price_Data.Float64 = input.Price
	bookDB.Price_Data.Valid = true

	bookDB.Recommanded_Data.Bool = input.Recommanded
	bookDB.Recommanded_Data.Valid = true

	query := db.Create(&bookDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, bookDB)
}

// GetBook
//
// swagger:route GET /books/{ID} books getBook
//
// Gets the details for a book.
//
// Responses:
//    default: genericError
//        200: bookDBResponse
func GetBook(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get book in DB
	var book orm.BookDB
	if err := db.First(&book, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if book.Name_Data.Valid {
		book.Name = book.Name_Data.String
	}

	if book.Author_Data.Valid {
		book.Author = book.Author_Data.String
	}

	if book.City_Data.Valid {
		book.City = book.City_Data.String
	}

	if book.Year_Data.Valid {
		book.Year = int(book.Year_Data.Int64)
	}

	if book.Price_Data.Valid {
		book.Price = book.Price_Data.Float64
	}

	book.Recommanded = book.Recommanded_Data.Bool

	c.JSON(http.StatusOK, book)
}

// UpdateBook
//
// swagger:route PATCH /books/{ID} books updateBook
//
// Update a book
//
// Responses:
//    default: genericError
//        200: bookDBResponse
func UpdateBook(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var bookDB orm.BookDB

	// fetch the book
	query := db.First(&bookDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.BookAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Author_Data.String = input.Author
	input.Author_Data.Valid = true

	input.City_Data.String = input.City
	input.City_Data.Valid = true

	input.Year_Data.Int64 = int64(input.Year)
	input.Year_Data.Valid = true

	input.Price_Data.Float64 = input.Price
	input.Price_Data.Valid = true

	input.Recommanded_Data.Bool = input.Recommanded
	input.Recommanded_Data.Valid = true

	query = db.Model(&bookDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the bookDB
	c.JSON(http.StatusOK, bookDB)
}

// DeleteBook
//
// swagger:route DELETE /books/{ID} books deleteBook
//
// Delete a book
//
// Responses:
//    default: genericError
func DeleteBook(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var bookDB orm.BookDB
	if err := db.First(&bookDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&bookDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
