// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/examples/bookstore/go/models"
	"github.com/fullstack-lang/gong/examples/bookstore/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Area__dummysDeclaration__ models.Area

// An AreaID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getArea updateArea deleteArea
type AreaID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AreaInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postArea updateArea
type AreaInput struct {
	// The Area to submit or modify
	// in: body
	Area *orm.AreaAPI
}

// GetAreas
//
// swagger:route GET /areas areas getAreas
//
// Get all areas
//
// Responses:
//    default: genericError
//        200: areaDBsResponse
func GetAreas(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var areas []orm.AreaDB
	query := db.Find(&areas)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each area, update fields from the database nullable fields
	for idx := range areas {
		area := &areas[idx]
		_ = area
		// insertion point for updating fields
		if area.Name_Data.Valid {
			area.Name = area.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, areas)
}

// PostArea
//
// swagger:route POST /areas areas postArea
//
// Creates a area
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: areaDBResponse
func PostArea(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.AreaAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create area
	areaDB := orm.AreaDB{}
	areaDB.AreaAPI = input
	// insertion point for nullable field set
	areaDB.Name_Data.String = input.Name
	areaDB.Name_Data.Valid = true

	query := db.Create(&areaDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, areaDB)
}

// GetArea
//
// swagger:route GET /areas/{ID} areas getArea
//
// Gets the details for a area.
//
// Responses:
//    default: genericError
//        200: areaDBResponse
func GetArea(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get area in DB
	var area orm.AreaDB
	if err := db.First(&area, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if area.Name_Data.Valid {
		area.Name = area.Name_Data.String
	}

	c.JSON(http.StatusOK, area)
}

// UpdateArea
//
// swagger:route PATCH /areas/{ID} areas updateArea
//
// Update a area
//
// Responses:
//    default: genericError
//        200: areaDBResponse
func UpdateArea(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var areaDB orm.AreaDB

	// fetch the area
	query := db.First(&areaDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.AreaAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&areaDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the areaDB
	c.JSON(http.StatusOK, areaDB)
}

// DeleteArea
//
// swagger:route DELETE /areas/{ID} areas deleteArea
//
// Delete a area
//
// Responses:
//    default: genericError
func DeleteArea(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var areaDB orm.AreaDB
	if err := db.First(&areaDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&areaDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
