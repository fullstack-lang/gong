basePath: /api/github.com/fullstack-lang/examples/bookstore/go/v1
consumes:
- application/json
definitions:
  Area:
    description: Area describes an editor
    properties:
      Name:
        type: string
      Subarea:
        $ref: '#/definitions/Area'
    type: object
    x-go-package: github.com/fullstack-lang/examples/bookstore/go/models
  Book:
    description: Book describes a book
    properties:
      Area:
        $ref: '#/definitions/Area'
      Author:
        description: The Author of the book
        type: string
      City:
        description: The City of the publisheer
        type: string
      Name:
        description: The Name of the book
        type: string
      Price:
        description: Price of the Book
        format: double
        type: number
      Recommanded:
        description: Recommanded
        type: boolean
      Year:
        description: The Year of publication
        format: int64
        type: integer
    type: object
    x-go-package: github.com/fullstack-lang/examples/bookstore/go/models
  NullBool:
    description: |-
      NullBool implements the Scanner interface so
      it can be used as a scan destination, similar to NullString.
    properties:
      Bool:
        type: boolean
      Valid:
        type: boolean
    title: NullBool represents a bool that may be null.
    type: object
    x-go-package: database/sql
  NullFloat64:
    description: |-
      NullFloat64 implements the Scanner interface so
      it can be used as a scan destination, similar to NullString.
    properties:
      Float64:
        format: double
        type: number
      Valid:
        type: boolean
    title: NullFloat64 represents a float64 that may be null.
    type: object
    x-go-package: database/sql
  NullInt64:
    description: |-
      NullInt64 implements the Scanner interface so
      it can be used as a scan destination, similar to NullString.
    properties:
      Int64:
        format: int64
        type: integer
      Valid:
        type: boolean
    title: NullInt64 represents an int64 that may be null.
    type: object
    x-go-package: database/sql
  NullString:
    description: |-
      var s NullString
      err := db.QueryRow("SELECT name FROM foo WHERE id=?", id).Scan(&s)
      ...
      if s.Valid {
      use s.String
      } else {
      NULL value
      }
    properties:
      String:
        type: string
      Valid:
        type: boolean
    title: |-
      NullString represents a string that may be null.
      NullString implements the Scanner interface so
      it can be used as a scan destination:
    type: object
    x-go-package: database/sql
  areaAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Name:
        type: string
      Name_Data:
        $ref: '#/definitions/NullString'
      Subarea:
        $ref: '#/definitions/Area'
      SubareaID:
        $ref: '#/definitions/NullInt64'
      SubareaName:
        description: all gong Struct has a Name field, this enables this data to object
          field
        type: string
    title: AreaAPI is the input in POST API
    type: object
    x-go-name: AreaAPI
    x-go-package: github.com/fullstack-lang/examples/bookstore/go/orm
  areaDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Name_Data:
        $ref: '#/definitions/NullString'
      Subarea:
        $ref: '#/definitions/Area'
      SubareaID:
        $ref: '#/definitions/NullInt64'
      SubareaName:
        description: all gong Struct has a Name field, this enables this data to object
          field
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: AreaDB describes a area in the database
    type: object
    x-go-name: AreaDB
    x-go-package: github.com/fullstack-lang/examples/bookstore/go/orm
  bookAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Area:
        $ref: '#/definitions/Area'
      AreaID:
        $ref: '#/definitions/NullInt64'
      AreaName:
        description: all gong Struct has a Name field, this enables this data to object
          field
        type: string
      Author:
        description: The Author of the book
        type: string
      Author_Data:
        $ref: '#/definitions/NullString'
      City:
        description: The City of the publisheer
        type: string
      City_Data:
        $ref: '#/definitions/NullString'
      Editor_BooksDBID:
        $ref: '#/definitions/NullInt64'
      Name:
        description: The Name of the book
        type: string
      Name_Data:
        $ref: '#/definitions/NullString'
      Price:
        description: Price of the Book
        format: double
        type: number
      Price_Data:
        $ref: '#/definitions/NullFloat64'
      Recommanded:
        description: Recommanded
        type: boolean
      Recommanded_Data:
        $ref: '#/definitions/NullBool'
      Year:
        description: The Year of publication
        format: int64
        type: integer
      Year_Data:
        $ref: '#/definitions/NullInt64'
    title: BookAPI is the input in POST API
    type: object
    x-go-name: BookAPI
    x-go-package: github.com/fullstack-lang/examples/bookstore/go/orm
  bookDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Area:
        $ref: '#/definitions/Area'
      AreaID:
        $ref: '#/definitions/NullInt64'
      AreaName:
        description: all gong Struct has a Name field, this enables this data to object
          field
        type: string
      Author:
        description: The Author of the book
        type: string
      Author_Data:
        $ref: '#/definitions/NullString'
      City:
        description: The City of the publisheer
        type: string
      City_Data:
        $ref: '#/definitions/NullString'
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Editor_BooksDBID:
        $ref: '#/definitions/NullInt64'
      ID:
        format: uint64
        type: integer
      Name:
        description: The Name of the book
        type: string
      Name_Data:
        $ref: '#/definitions/NullString'
      Price:
        description: Price of the Book
        format: double
        type: number
      Price_Data:
        $ref: '#/definitions/NullFloat64'
      Recommanded:
        description: Recommanded
        type: boolean
      Recommanded_Data:
        $ref: '#/definitions/NullBool'
      UpdatedAt:
        format: date-time
        type: string
      Year:
        description: The Year of publication
        format: int64
        type: integer
      Year_Data:
        $ref: '#/definitions/NullInt64'
    title: BookDB describes a book in the database
    type: object
    x-go-name: BookDB
    x-go-package: github.com/fullstack-lang/examples/bookstore/go/orm
  editorAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Books:
        items:
          $ref: '#/definitions/Book'
        type: array
      Name:
        type: string
      Name_Data:
        $ref: '#/definitions/NullString'
    title: EditorAPI is the input in POST API
    type: object
    x-go-name: EditorAPI
    x-go-package: github.com/fullstack-lang/examples/bookstore/go/orm
  editorDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Books:
        items:
          $ref: '#/definitions/Book'
        type: array
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Name_Data:
        $ref: '#/definitions/NullString'
      UpdatedAt:
        format: date-time
        type: string
    title: EditorDB describes a editor in the database
    type: object
    x-go-name: EditorDB
    x-go-package: github.com/fullstack-lang/examples/bookstore/go/orm
host: localhost:8080
info:
  description: bookstore exposes types of a package.
  title: bookstore backend API
  version: "0.1"
paths:
  /areas:
    get:
      description: Get all areas
      operationId: getAreas
      responses:
        "200":
          $ref: '#/responses/areaDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - areas
    post:
      consumes:
      - application/json
      description: Creates a area
      operationId: postArea
      parameters:
      - description: The Area to submit or modify
        in: body
        name: Area
        schema:
          $ref: '#/definitions/areaAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/areaDBResponse'
      tags:
      - areas
  /areas/{ID}:
    delete:
      description: Delete a area
      operationId: deleteArea
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - areas
    get:
      operationId: getArea
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/areaDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a area.
      tags:
      - areas
    patch:
      description: Update a area
      operationId: updateArea
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Area to submit or modify
        in: body
        name: Area
        schema:
          $ref: '#/definitions/areaAPI'
      responses:
        "200":
          $ref: '#/responses/areaDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - areas
  /books:
    get:
      description: Get all books
      operationId: getBooks
      responses:
        "200":
          $ref: '#/responses/bookDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Creates a book
      operationId: postBook
      parameters:
      - description: The Book to submit or modify
        in: body
        name: Book
        schema:
          $ref: '#/definitions/bookAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/bookDBResponse'
      tags:
      - books
  /books/{ID}:
    delete:
      description: Delete a book
      operationId: deleteBook
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - books
    get:
      operationId: getBook
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/bookDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a book.
      tags:
      - books
    patch:
      description: Update a book
      operationId: updateBook
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Book to submit or modify
        in: body
        name: Book
        schema:
          $ref: '#/definitions/bookAPI'
      responses:
        "200":
          $ref: '#/responses/bookDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - books
  /commitnb:
    get:
      operationId: GetLastCommitNb
      tags:
      - backrepo
  /editors:
    get:
      description: Get all editors
      operationId: getEditors
      responses:
        "200":
          $ref: '#/responses/editorDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - editors
    post:
      consumes:
      - application/json
      description: Creates a editor
      operationId: postEditor
      parameters:
      - description: The Editor to submit or modify
        in: body
        name: Editor
        schema:
          $ref: '#/definitions/editorAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/editorDBResponse'
      tags:
      - editors
  /editors/{ID}:
    delete:
      description: Delete a editor
      operationId: deleteEditor
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - editors
    get:
      operationId: getEditor
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/editorDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a editor.
      tags:
      - editors
    patch:
      description: Update a editor
      operationId: updateEditor
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Editor to submit or modify
        in: body
        name: Editor
        schema:
          $ref: '#/definitions/editorAPI'
      responses:
        "200":
          $ref: '#/responses/editorDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - editors
produces:
- application/json
responses:
  areaDBResponse:
    description: AreaDBResponse provides response
    headers:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Name_Data:
        description: |-
          insertion for fields declaration
          Declation for basic field areaDB.Name {{BasicKind}} (to be completed)
      Subarea: {}
      SubareaID:
        description: |-
          field Subarea is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable AS ONE association
      SubareaName:
        description: all gong Struct has a Name field, this enables this data to object
          field
        type: string
      UpdatedAt:
        format: date-time
        type: string
    schema:
      $ref: '#/definitions/NullInt64'
  areaDBsResponse:
    description: AreaDBs arrays areaDBs
    schema:
      items:
        $ref: '#/definitions/areaDB'
      type: array
  bookDBResponse:
    description: BookDBResponse provides response
    headers:
      Area: {}
      AreaID:
        description: |-
          field Area is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable AS ONE association
      AreaName:
        description: all gong Struct has a Name field, this enables this data to object
          field
        type: string
      Author:
        description: The Author of the book
        type: string
      Author_Data:
        description: Declation for basic field bookDB.Author {{BasicKind}} (to be
          completed)
      City:
        description: The City of the publisheer
        type: string
      City_Data:
        description: Declation for basic field bookDB.City {{BasicKind}} (to be completed)
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Editor_BooksDBID:
        description: Implementation of a reverse ID for field Editor{}.Books []*Book
      ID:
        format: uint64
        type: integer
      Name:
        description: The Name of the book
        type: string
      Name_Data:
        description: |-
          insertion for fields declaration
          Declation for basic field bookDB.Name {{BasicKind}} (to be completed)
      Price:
        description: Price of the Book
        format: double
        type: number
      Price_Data:
        description: Declation for basic field bookDB.Price {{BasicKind}} (to be completed)
      Recommanded:
        description: Recommanded
        type: boolean
      Recommanded_Data:
        description: |-
          Declation for basic field bookDB.Recommanded bool (to be completed)
          provide the sql storage for the boolan
      UpdatedAt:
        format: date-time
        type: string
      Year:
        description: The Year of publication
        format: int64
        type: integer
      Year_Data:
        description: Declation for basic field bookDB.Year {{BasicKind}} (to be completed)
    schema:
      $ref: '#/definitions/NullInt64'
  bookDBsResponse:
    description: BookDBs arrays bookDBs
    schema:
      items:
        $ref: '#/definitions/bookDB'
      type: array
  editorDBResponse:
    description: EditorDBResponse provides response
    headers:
      Books:
        items:
          $ref: '#/definitions/Book'
        type: array
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Name_Data:
        description: |-
          insertion for fields declaration
          Declation for basic field editorDB.Name {{BasicKind}} (to be completed)
      UpdatedAt:
        format: date-time
        type: string
    schema:
      $ref: '#/definitions/NullString'
  editorDBsResponse:
    description: EditorDBs arrays editorDBs
    schema:
      items:
        $ref: '#/definitions/editorDB'
      type: array
  genericError:
    description: |-
      A GenericError is the default error message that is generated.
      For certain status codes there are more appropriate error structures.
    schema:
      properties:
        code:
          format: int32
          type: integer
          x-go-name: Code
        message:
          type: string
          x-go-name: Message
      type: object
  validationError:
    description: |-
      A ValidationError is an that is generated for validation failures.
      It has the same fields as a generic error but adds a Field property.
    schema:
      properties:
        code:
          format: int32
          type: integer
          x-go-name: Code
        field:
          type: string
          x-go-name: Field
        message:
          type: string
          x-go-name: Message
      type: object
schemes:
- http
securityDefinitions:
  basic:
    type: basic
swagger: "2.0"
