// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/examples/bookstore/go/models"
	"github.com/fullstack-lang/gong/examples/bookstore/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Editor__dummysDeclaration__ models.Editor

// An EditorID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getEditor updateEditor deleteEditor
type EditorID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// EditorInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postEditor updateEditor
type EditorInput struct {
	// The Editor to submit or modify
	// in: body
	Editor *orm.EditorAPI
}

// GetEditors
//
// swagger:route GET /editors editors getEditors
//
// Get all editors
//
// Responses:
//    default: genericError
//        200: editorDBsResponse
func GetEditors(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var editors []orm.EditorDB
	query := db.Find(&editors)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each editor, update fields from the database nullable fields
	for idx := range editors {
		editor := &editors[idx]
		_ = editor
		// insertion point for updating fields
		if editor.Name_Data.Valid {
			editor.Name = editor.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, editors)
}

// PostEditor
//
// swagger:route POST /editors editors postEditor
//
// Creates a editor
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: editorDBResponse
func PostEditor(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.EditorAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create editor
	editorDB := orm.EditorDB{}
	editorDB.EditorAPI = input
	// insertion point for nullable field set
	editorDB.Name_Data.String = input.Name
	editorDB.Name_Data.Valid = true

	query := db.Create(&editorDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, editorDB)
}

// GetEditor
//
// swagger:route GET /editors/{ID} editors getEditor
//
// Gets the details for a editor.
//
// Responses:
//    default: genericError
//        200: editorDBResponse
func GetEditor(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get editor in DB
	var editor orm.EditorDB
	if err := db.First(&editor, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if editor.Name_Data.Valid {
		editor.Name = editor.Name_Data.String
	}

	c.JSON(http.StatusOK, editor)
}

// UpdateEditor
//
// swagger:route PATCH /editors/{ID} editors updateEditor
//
// Update a editor
//
// Responses:
//    default: genericError
//        200: editorDBResponse
func UpdateEditor(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var editorDB orm.EditorDB

	// fetch the editor
	query := db.First(&editorDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.EditorAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&editorDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the editorDB
	c.JSON(http.StatusOK, editorDB)
}

// DeleteEditor
//
// swagger:route DELETE /editors/{ID} editors deleteEditor
//
// Delete a editor
//
// Responses:
//    default: genericError
func DeleteEditor(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var editorDB orm.EditorDB
	if err := db.First(&editorDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&editorDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
