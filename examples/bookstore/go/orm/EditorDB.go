// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/examples/bookstore/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Editor sql.NullBool

// EditorAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model editorAPI
type EditorAPI struct {
	models.Editor

	// insertion for fields declaration
	// Declation for basic field editorDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// EditorDB describes a editor in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model editorDB
type EditorDB struct {
	gorm.Model

	EditorAPI
}

// EditorDBs arrays editorDBs
// swagger:response editorDBsResponse
type EditorDBs []EditorDB

// EditorDBResponse provides response
// swagger:response editorDBResponse
type EditorDBResponse struct {
	EditorDB
}

type BackRepoEditorStruct struct {
	// stores EditorDB according to their gorm ID
	Map_EditorDBID_EditorDB *map[uint]*EditorDB

	// stores EditorDB ID according to Editor address
	Map_EditorPtr_EditorDBID *map[*models.Editor]uint

	// stores Editor according to their gorm ID
	Map_EditorDBID_EditorPtr *map[uint]*models.Editor

	db *gorm.DB
}

// BackRepoEditor.Init set up the BackRepo of the Editor
func (backRepoEditor *BackRepoEditorStruct) Init(db *gorm.DB) (Error error) {

	if backRepoEditor.Map_EditorDBID_EditorPtr != nil {
		err := errors.New("In Init, backRepoEditor.Map_EditorDBID_EditorPtr should be nil")
		return err
	}

	if backRepoEditor.Map_EditorDBID_EditorDB != nil {
		err := errors.New("In Init, backRepoEditor.Map_EditorDBID_EditorDB should be nil")
		return err
	}

	if backRepoEditor.Map_EditorPtr_EditorDBID != nil {
		err := errors.New("In Init, backRepoEditor.Map_EditorPtr_EditorDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Editor, 0)
	backRepoEditor.Map_EditorDBID_EditorPtr = &tmp

	tmpDB := make(map[uint]*EditorDB, 0)
	backRepoEditor.Map_EditorDBID_EditorDB = &tmpDB

	tmpID := make(map[*models.Editor]uint, 0)
	backRepoEditor.Map_EditorPtr_EditorDBID = &tmpID

	backRepoEditor.db = db
	return
}

// BackRepoEditor.CommitPhaseOne commits all staged instances of Editor to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEditor *BackRepoEditorStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for editor := range stage.Editors {
		backRepoEditor.CommitPhaseOneInstance(editor)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, editor := range *backRepoEditor.Map_EditorDBID_EditorPtr {
		if _, ok := stage.Editors[editor]; !ok {
			backRepoEditor.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEditor.CommitDeleteInstance commits deletion of Editor to the BackRepo
func (backRepoEditor *BackRepoEditorStruct) CommitDeleteInstance(id uint) (Error error) {

	editor := (*backRepoEditor.Map_EditorDBID_EditorPtr)[id]

	// editor is not staged anymore, remove editorDB
	editorDB := (*backRepoEditor.Map_EditorDBID_EditorDB)[id]
	query := backRepoEditor.db.Unscoped().Delete(&editorDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoEditor.Map_EditorPtr_EditorDBID), editor)
	delete((*backRepoEditor.Map_EditorDBID_EditorPtr), id)
	delete((*backRepoEditor.Map_EditorDBID_EditorDB), id)

	return
}

// BackRepoEditor.CommitPhaseOneInstance commits editor staged instances of Editor to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEditor *BackRepoEditorStruct) CommitPhaseOneInstance(editor *models.Editor) (Error error) {

	// check if the editor is not commited yet
	if _, ok := (*backRepoEditor.Map_EditorPtr_EditorDBID)[editor]; ok {
		return
	}

	// initiate editor
	var editorDB EditorDB
	editorDB.Editor = *editor

	query := backRepoEditor.db.Create(&editorDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoEditor.Map_EditorPtr_EditorDBID)[editor] = editorDB.ID
	(*backRepoEditor.Map_EditorDBID_EditorPtr)[editorDB.ID] = editor
	(*backRepoEditor.Map_EditorDBID_EditorDB)[editorDB.ID] = &editorDB

	return
}

// BackRepoEditor.CommitPhaseTwo commits all staged instances of Editor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEditor *BackRepoEditorStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, editor := range *backRepoEditor.Map_EditorDBID_EditorPtr {
		backRepoEditor.CommitPhaseTwoInstance(backRepo, idx, editor)
	}

	return
}

// BackRepoEditor.CommitPhaseTwoInstance commits {{structname }} of models.Editor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEditor *BackRepoEditorStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, editor *models.Editor) (Error error) {

	// fetch matching editorDB
	if editorDB, ok := (*backRepoEditor.Map_EditorDBID_EditorDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				editorDB.Name_Data.String = editor.Name
				editorDB.Name_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Book, i.e.
				for _, book := range editor.Books {
					if bookDBID, ok := (*backRepo.BackRepoBook.Map_BookPtr_BookDBID)[book]; ok {
						if bookDB, ok := (*backRepo.BackRepoBook.Map_BookDBID_BookDB)[bookDBID]; ok {
							bookDB.Editor_BooksDBID.Int64 = int64(editorDB.ID)
							bookDB.Editor_BooksDBID.Valid = true
							if q := backRepoEditor.db.Save(&bookDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoEditor.db.Save(&editorDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Editor intance %s", editor.Name))
		return err
	}

	return
}

// BackRepoEditor.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoEditor *BackRepoEditorStruct) CheckoutPhaseOne() (Error error) {

	editorDBArray := make([]EditorDB, 0)
	query := backRepoEditor.db.Find(&editorDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, editorDB := range editorDBArray {
		backRepoEditor.CheckoutPhaseOneInstance(&editorDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a editorDB that has been found in the DB, updates the backRepo and stages the
// models version of the editorDB
func (backRepoEditor *BackRepoEditorStruct) CheckoutPhaseOneInstance(editorDB *EditorDB) (Error error) {

	// if absent, create entries in the backRepoEditor maps.
	editorWithNewFieldValues := editorDB.Editor
	if _, ok := (*backRepoEditor.Map_EditorDBID_EditorPtr)[editorDB.ID]; !ok {

		(*backRepoEditor.Map_EditorDBID_EditorPtr)[editorDB.ID] = &editorWithNewFieldValues
		(*backRepoEditor.Map_EditorPtr_EditorDBID)[&editorWithNewFieldValues] = editorDB.ID

		// append model store with the new element
		editorWithNewFieldValues.Stage()
	}
	editorDBWithNewFieldValues := *editorDB
	(*backRepoEditor.Map_EditorDBID_EditorDB)[editorDB.ID] = &editorDBWithNewFieldValues

	return
}

// BackRepoEditor.CheckoutPhaseTwo Checkouts all staged instances of Editor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEditor *BackRepoEditorStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, editorDB := range *backRepoEditor.Map_EditorDBID_EditorDB {
		backRepoEditor.CheckoutPhaseTwoInstance(backRepo, editorDB)
	}
	return
}

// BackRepoEditor.CheckoutPhaseTwoInstance Checkouts staged instances of Editor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEditor *BackRepoEditorStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, editorDB *EditorDB) (Error error) {

	editor := (*backRepoEditor.Map_EditorDBID_EditorPtr)[editorDB.ID]
	_ = editor // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			editor.Name = editorDB.Name_Data.String

			// parse all BookDB and redeem the array of poiners to Editor
			// first reset the slice
			editor.Books = editor.Books[:0]
			for _, BookDB := range *backRepo.BackRepoBook.Map_BookDBID_BookDB {
				if BookDB.Editor_BooksDBID.Int64 == int64(editorDB.ID) {
					Book := (*backRepo.BackRepoBook.Map_BookDBID_BookPtr)[BookDB.ID]
					editor.Books = append(editor.Books, Book)
				}
			}

		}
	}
	return
}

// CommitEditor allows commit of a single editor (if already staged)
func (backRepo *BackRepoStruct) CommitEditor(editor *models.Editor) {
	backRepo.BackRepoEditor.CommitPhaseOneInstance(editor)
	if id, ok := (*backRepo.BackRepoEditor.Map_EditorPtr_EditorDBID)[editor]; ok {
		backRepo.BackRepoEditor.CommitPhaseTwoInstance(backRepo, id, editor)
	}
}

// CommitEditor allows checkout of a single editor (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEditor(editor *models.Editor) {
	// check if the editor is staged
	if _, ok := (*backRepo.BackRepoEditor.Map_EditorPtr_EditorDBID)[editor]; ok {

		if id, ok := (*backRepo.BackRepoEditor.Map_EditorPtr_EditorDBID)[editor]; ok {
			var editorDB EditorDB
			editorDB.ID = id

			if err := backRepo.BackRepoEditor.db.First(&editorDB, id).Error; err != nil {
				log.Panicln("CheckoutEditor : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEditor.CheckoutPhaseOneInstance(&editorDB)
			backRepo.BackRepoEditor.CheckoutPhaseTwoInstance(backRepo, &editorDB)
		}
	}
}
