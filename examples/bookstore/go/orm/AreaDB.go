// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong-example/examples/bookstore/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Area sql.NullBool

// AreaAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model areaAPI
type AreaAPI struct {
	models.Area

	// insertion for fields declaration
	// Declation for basic field areaDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// field Subarea is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SubareaID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	SubareaName string

	// end of insertion
}

// AreaDB describes a area in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model areaDB
type AreaDB struct {
	gorm.Model

	AreaAPI
}

// AreaDBs arrays areaDBs
// swagger:response areaDBsResponse
type AreaDBs []AreaDB

// AreaDBResponse provides response
// swagger:response areaDBResponse
type AreaDBResponse struct {
	AreaDB
}

type BackRepoAreaStruct struct {
	// stores AreaDB according to their gorm ID
	Map_AreaDBID_AreaDB *map[uint]*AreaDB

	// stores AreaDB ID according to Area address
	Map_AreaPtr_AreaDBID *map[*models.Area]uint

	// stores Area according to their gorm ID
	Map_AreaDBID_AreaPtr *map[uint]*models.Area

	db *gorm.DB
}

// BackRepoArea.Init set up the BackRepo of the Area
func (backRepoArea *BackRepoAreaStruct) Init(db *gorm.DB) (Error error) {

	if backRepoArea.Map_AreaDBID_AreaPtr != nil {
		err := errors.New("In Init, backRepoArea.Map_AreaDBID_AreaPtr should be nil")
		return err
	}

	if backRepoArea.Map_AreaDBID_AreaDB != nil {
		err := errors.New("In Init, backRepoArea.Map_AreaDBID_AreaDB should be nil")
		return err
	}

	if backRepoArea.Map_AreaPtr_AreaDBID != nil {
		err := errors.New("In Init, backRepoArea.Map_AreaPtr_AreaDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Area, 0)
	backRepoArea.Map_AreaDBID_AreaPtr = &tmp

	tmpDB := make(map[uint]*AreaDB, 0)
	backRepoArea.Map_AreaDBID_AreaDB = &tmpDB

	tmpID := make(map[*models.Area]uint, 0)
	backRepoArea.Map_AreaPtr_AreaDBID = &tmpID

	backRepoArea.db = db
	return
}

// BackRepoArea.CommitPhaseOne commits all staged instances of Area to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoArea *BackRepoAreaStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for area := range stage.Areas {
		backRepoArea.CommitPhaseOneInstance(area)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, area := range *backRepoArea.Map_AreaDBID_AreaPtr {
		if _, ok := stage.Areas[area]; !ok {
			backRepoArea.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoArea.CommitDeleteInstance commits deletion of Area to the BackRepo
func (backRepoArea *BackRepoAreaStruct) CommitDeleteInstance(id uint) (Error error) {

	area := (*backRepoArea.Map_AreaDBID_AreaPtr)[id]

	// area is not staged anymore, remove areaDB
	areaDB := (*backRepoArea.Map_AreaDBID_AreaDB)[id]
	query := backRepoArea.db.Unscoped().Delete(&areaDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoArea.Map_AreaPtr_AreaDBID), area)
	delete((*backRepoArea.Map_AreaDBID_AreaPtr), id)
	delete((*backRepoArea.Map_AreaDBID_AreaDB), id)

	return
}

// BackRepoArea.CommitPhaseOneInstance commits area staged instances of Area to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoArea *BackRepoAreaStruct) CommitPhaseOneInstance(area *models.Area) (Error error) {

	// check if the area is not commited yet
	if _, ok := (*backRepoArea.Map_AreaPtr_AreaDBID)[area]; ok {
		return
	}

	// initiate area
	var areaDB AreaDB
	areaDB.Area = *area

	query := backRepoArea.db.Create(&areaDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoArea.Map_AreaPtr_AreaDBID)[area] = areaDB.ID
	(*backRepoArea.Map_AreaDBID_AreaPtr)[areaDB.ID] = area
	(*backRepoArea.Map_AreaDBID_AreaDB)[areaDB.ID] = &areaDB

	return
}

// BackRepoArea.CommitPhaseTwo commits all staged instances of Area to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArea *BackRepoAreaStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, area := range *backRepoArea.Map_AreaDBID_AreaPtr {
		backRepoArea.CommitPhaseTwoInstance(backRepo, idx, area)
	}

	return
}

// BackRepoArea.CommitPhaseTwoInstance commits {{structname }} of models.Area to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArea *BackRepoAreaStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, area *models.Area) (Error error) {

	// fetch matching areaDB
	if areaDB, ok := (*backRepoArea.Map_AreaDBID_AreaDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				areaDB.Name_Data.String = area.Name
				areaDB.Name_Data.Valid = true

				// commit pointer value area.Subarea translates to updating the area.SubareaID
				areaDB.SubareaID.Valid = true // allow for a 0 value (nil association)
				if area.Subarea != nil {
					if SubareaId, ok := (*backRepo.BackRepoArea.Map_AreaPtr_AreaDBID)[area.Subarea]; ok {
						areaDB.SubareaID.Int64 = int64(SubareaId)
					}
				}

			}
		}
		query := backRepoArea.db.Save(&areaDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Area intance %s", area.Name))
		return err
	}

	return
}

// BackRepoArea.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoArea *BackRepoAreaStruct) CheckoutPhaseOne() (Error error) {

	areaDBArray := make([]AreaDB, 0)
	query := backRepoArea.db.Find(&areaDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, areaDB := range areaDBArray {
		backRepoArea.CheckoutPhaseOneInstance(&areaDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a areaDB that has been found in the DB, updates the backRepo and stages the
// models version of the areaDB
func (backRepoArea *BackRepoAreaStruct) CheckoutPhaseOneInstance(areaDB *AreaDB) (Error error) {

	// if absent, create entries in the backRepoArea maps.
	areaWithNewFieldValues := areaDB.Area
	if _, ok := (*backRepoArea.Map_AreaDBID_AreaPtr)[areaDB.ID]; !ok {

		(*backRepoArea.Map_AreaDBID_AreaPtr)[areaDB.ID] = &areaWithNewFieldValues
		(*backRepoArea.Map_AreaPtr_AreaDBID)[&areaWithNewFieldValues] = areaDB.ID

		// append model store with the new element
		areaWithNewFieldValues.Stage()
	}
	areaDBWithNewFieldValues := *areaDB
	(*backRepoArea.Map_AreaDBID_AreaDB)[areaDB.ID] = &areaDBWithNewFieldValues

	return
}

// BackRepoArea.CheckoutPhaseTwo Checkouts all staged instances of Area to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArea *BackRepoAreaStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, areaDB := range *backRepoArea.Map_AreaDBID_AreaDB {
		backRepoArea.CheckoutPhaseTwoInstance(backRepo, areaDB)
	}
	return
}

// BackRepoArea.CheckoutPhaseTwoInstance Checkouts staged instances of Area to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArea *BackRepoAreaStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, areaDB *AreaDB) (Error error) {

	area := (*backRepoArea.Map_AreaDBID_AreaPtr)[areaDB.ID]
	_ = area // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			area.Name = areaDB.Name_Data.String

			// Subarea field
			if areaDB.SubareaID.Int64 != 0 {
				area.Subarea = (*backRepo.BackRepoArea.Map_AreaDBID_AreaPtr)[uint(areaDB.SubareaID.Int64)]
			}

		}
	}
	return
}

// CommitArea allows commit of a single area (if already staged)
func (backRepo *BackRepoStruct) CommitArea(area *models.Area) {
	backRepo.BackRepoArea.CommitPhaseOneInstance(area)
	if id, ok := (*backRepo.BackRepoArea.Map_AreaPtr_AreaDBID)[area]; ok {
		backRepo.BackRepoArea.CommitPhaseTwoInstance(backRepo, id, area)
	}
}

// CommitArea allows checkout of a single area (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutArea(area *models.Area) {
	// check if the area is staged
	if _, ok := (*backRepo.BackRepoArea.Map_AreaPtr_AreaDBID)[area]; ok {

		if id, ok := (*backRepo.BackRepoArea.Map_AreaPtr_AreaDBID)[area]; ok {
			var areaDB AreaDB
			areaDB.ID = id

			if err := backRepo.BackRepoArea.db.First(&areaDB, id).Error; err != nil {
				log.Panicln("CheckoutArea : Problem with getting object with id:", id)
			}
			backRepo.BackRepoArea.CheckoutPhaseOneInstance(&areaDB)
			backRepo.BackRepoArea.CheckoutPhaseTwoInstance(backRepo, &areaDB)
		}
	}
}
