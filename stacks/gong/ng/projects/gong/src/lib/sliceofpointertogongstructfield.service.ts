// generated by MultiCodeGeneratorNgService
import { Injectable } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { SliceOfPointerToGongStructFieldAPI } from './sliceofpointertogongstructfield-api';
import { SliceOfPointerToGongStructFieldDB } from './sliceofpointertogongstructfield-db';

@Injectable({
  providedIn: 'root'
})
export class SliceOfPointerToGongStructFieldService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  SliceOfPointerToGongStructFieldServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private sliceofpointertogongstructfieldsUrl = 'http://localhost:8080/api/github.com/fullstack-lang/gong/stacks/gong/go/v1/sliceofpointertogongstructfields';

  constructor(
    private http: HttpClient
  ) { }

  /** GET sliceofpointertogongstructfields from the server */
  getSliceOfPointerToGongStructFields(): Observable<SliceOfPointerToGongStructFieldDB[]> {
    return this.http.get<SliceOfPointerToGongStructFieldDB[]>(this.sliceofpointertogongstructfieldsUrl)
      .pipe(
        tap(_ => this.log('fetched sliceofpointertogongstructfields')),
        catchError(this.handleError<SliceOfPointerToGongStructFieldDB[]>('getSliceOfPointerToGongStructFields', []))
      );
  }

  /** GET sliceofpointertogongstructfield by id. Will 404 if id not found */
  getSliceOfPointerToGongStructField(id: number): Observable<SliceOfPointerToGongStructFieldDB> {
    const url = `${this.sliceofpointertogongstructfieldsUrl}/${id}`;
    return this.http.get<SliceOfPointerToGongStructFieldDB>(url).pipe(
      tap(_ => this.log(`fetched sliceofpointertogongstructfield id=${id}`)),
      catchError(this.handleError<SliceOfPointerToGongStructFieldDB>(`getSliceOfPointerToGongStructField id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new sliceofpointertogongstructfield to the server */
  postSliceOfPointerToGongStructField(sliceofpointertogongstructfieldAPI: SliceOfPointerToGongStructFieldAPI): Observable<SliceOfPointerToGongStructFieldDB> {
    return this.http.post<SliceOfPointerToGongStructFieldDB>(this.sliceofpointertogongstructfieldsUrl, sliceofpointertogongstructfieldAPI, this.httpOptions).pipe(
      tap((newSliceOfPointerToGongStructField: SliceOfPointerToGongStructFieldDB) => {})
    );
  }

  /** DELETE: delete the sliceofpointertogongstructfielddb from the server */
  deleteSliceOfPointerToGongStructField(sliceofpointertogongstructfielddb: SliceOfPointerToGongStructFieldDB | number): Observable<SliceOfPointerToGongStructFieldDB> {
    const id = typeof sliceofpointertogongstructfielddb === 'number' ? sliceofpointertogongstructfielddb : sliceofpointertogongstructfielddb.ID;
    const url = `${this.sliceofpointertogongstructfieldsUrl}/${id}`;

    return this.http.delete<SliceOfPointerToGongStructFieldDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted sliceofpointertogongstructfielddb id=${id}`)),
      catchError(this.handleError<SliceOfPointerToGongStructFieldDB>('deleteSliceOfPointerToGongStructField'))
    );
  }

  /** PUT: update the sliceofpointertogongstructfielddb on the server */
  updateSliceOfPointerToGongStructField(sliceofpointertogongstructfielddb: SliceOfPointerToGongStructFieldDB): Observable<SliceOfPointerToGongStructFieldDB> {
    const id = typeof sliceofpointertogongstructfielddb === 'number' ? sliceofpointertogongstructfielddb : sliceofpointertogongstructfielddb.ID;
    const url = `${this.sliceofpointertogongstructfieldsUrl}/${id}`;

    // insertion point for reset of reverse pointers (to avoid circular JSON)
    sliceofpointertogongstructfielddb.GongStruct = {}
    let _GongStruct_SliceOfPointerToGongStructFields_reverse = sliceofpointertogongstructfielddb.GongStruct_SliceOfPointerToGongStructFields_reverse
    sliceofpointertogongstructfielddb.GongStruct_SliceOfPointerToGongStructFields_reverse = {}

    return this.http.put(url, sliceofpointertogongstructfielddb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        sliceofpointertogongstructfielddb.GongStruct_SliceOfPointerToGongStructFields_reverse = _GongStruct_SliceOfPointerToGongStructFields_reverse
        this.log(`updated sliceofpointertogongstructfielddb id=${sliceofpointertogongstructfielddb.ID}`)
      }),
      catchError(this.handleError<SliceOfPointerToGongStructFieldDB>('updateSliceOfPointerToGongStructField'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
