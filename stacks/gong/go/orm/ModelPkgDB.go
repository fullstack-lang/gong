// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gong/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_ModelPkg sql.NullBool

// ModelPkgAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model modelpkgAPI
type ModelPkgAPI struct {
	models.ModelPkg

	// insertion for fields declaration
	// Declation for basic field modelpkgDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field modelpkgDB.PkgPath {{BasicKind}} (to be completed)
	PkgPath_Data sql.NullString

	// end of insertion
}

// ModelPkgDB describes a modelpkg in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model modelpkgDB
type ModelPkgDB struct {
	gorm.Model

	ModelPkgAPI
}

// ModelPkgDBs arrays modelpkgDBs
// swagger:response modelpkgDBsResponse
type ModelPkgDBs []ModelPkgDB

// ModelPkgDBResponse provides response
// swagger:response modelpkgDBResponse
type ModelPkgDBResponse struct {
	ModelPkgDB
}

type BackRepoModelPkgStruct struct {
	// stores ModelPkgDB according to their gorm ID
	Map_ModelPkgDBID_ModelPkgDB *map[uint]*ModelPkgDB

	// stores ModelPkgDB ID according to ModelPkg address
	Map_ModelPkgPtr_ModelPkgDBID *map[*models.ModelPkg]uint

	// stores ModelPkg according to their gorm ID
	Map_ModelPkgDBID_ModelPkgPtr *map[uint]*models.ModelPkg

	db *gorm.DB
}

// BackRepoModelPkg.Init set up the BackRepo of the ModelPkg
func (backRepoModelPkg *BackRepoModelPkgStruct) Init(db *gorm.DB) (Error error) {

	if backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr != nil {
		err := errors.New("In Init, backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr should be nil")
		return err
	}

	if backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB != nil {
		err := errors.New("In Init, backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB should be nil")
		return err
	}

	if backRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID != nil {
		err := errors.New("In Init, backRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.ModelPkg, 0)
	backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr = &tmp

	tmpDB := make(map[uint]*ModelPkgDB, 0)
	backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB = &tmpDB

	tmpID := make(map[*models.ModelPkg]uint, 0)
	backRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID = &tmpID

	backRepoModelPkg.db = db
	return
}

// BackRepoModelPkg.CommitPhaseOne commits all staged instances of ModelPkg to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoModelPkg *BackRepoModelPkgStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for modelpkg := range stage.ModelPkgs {
		backRepoModelPkg.CommitPhaseOneInstance(modelpkg)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, modelpkg := range *backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr {
		if _, ok := stage.ModelPkgs[modelpkg]; !ok {
			backRepoModelPkg.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoModelPkg.CommitDeleteInstance commits deletion of ModelPkg to the BackRepo
func (backRepoModelPkg *BackRepoModelPkgStruct) CommitDeleteInstance(id uint) (Error error) {

	modelpkg := (*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr)[id]

	// modelpkg is not staged anymore, remove modelpkgDB
	modelpkgDB := (*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB)[id]
	query := backRepoModelPkg.db.Unscoped().Delete(&modelpkgDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID), modelpkg)
	delete((*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr), id)
	delete((*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB), id)

	return
}

// BackRepoModelPkg.CommitPhaseOneInstance commits modelpkg staged instances of ModelPkg to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoModelPkg *BackRepoModelPkgStruct) CommitPhaseOneInstance(modelpkg *models.ModelPkg) (Error error) {

	// check if the modelpkg is not commited yet
	if _, ok := (*backRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID)[modelpkg]; ok {
		return
	}

	// initiate modelpkg
	var modelpkgDB ModelPkgDB
	modelpkgDB.ModelPkg = *modelpkg

	query := backRepoModelPkg.db.Create(&modelpkgDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID)[modelpkg] = modelpkgDB.ID
	(*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr)[modelpkgDB.ID] = modelpkg
	(*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB)[modelpkgDB.ID] = &modelpkgDB

	return
}

// BackRepoModelPkg.CommitPhaseTwo commits all staged instances of ModelPkg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelPkg *BackRepoModelPkgStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, modelpkg := range *backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr {
		backRepoModelPkg.CommitPhaseTwoInstance(backRepo, idx, modelpkg)
	}

	return
}

// BackRepoModelPkg.CommitPhaseTwoInstance commits {{structname }} of models.ModelPkg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelPkg *BackRepoModelPkgStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, modelpkg *models.ModelPkg) (Error error) {

	// fetch matching modelpkgDB
	if modelpkgDB, ok := (*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				modelpkgDB.Name_Data.String = modelpkg.Name
				modelpkgDB.Name_Data.Valid = true

				modelpkgDB.PkgPath_Data.String = modelpkg.PkgPath
				modelpkgDB.PkgPath_Data.Valid = true

			}
		}
		query := backRepoModelPkg.db.Save(&modelpkgDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ModelPkg intance %s", modelpkg.Name))
		return err
	}

	return
}

// BackRepoModelPkg.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoModelPkg *BackRepoModelPkgStruct) CheckoutPhaseOne() (Error error) {

	modelpkgDBArray := make([]ModelPkgDB, 0)
	query := backRepoModelPkg.db.Find(&modelpkgDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, modelpkgDB := range modelpkgDBArray {
		backRepoModelPkg.CheckoutPhaseOneInstance(&modelpkgDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a modelpkgDB that has been found in the DB, updates the backRepo and stages the
// models version of the modelpkgDB
func (backRepoModelPkg *BackRepoModelPkgStruct) CheckoutPhaseOneInstance(modelpkgDB *ModelPkgDB) (Error error) {

	// if absent, create entries in the backRepoModelPkg maps.
	modelpkgWithNewFieldValues := modelpkgDB.ModelPkg
	if _, ok := (*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr)[modelpkgDB.ID]; !ok {

		(*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr)[modelpkgDB.ID] = &modelpkgWithNewFieldValues
		(*backRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID)[&modelpkgWithNewFieldValues] = modelpkgDB.ID

		// append model store with the new element
		modelpkgWithNewFieldValues.Stage()
	}
	modelpkgDBWithNewFieldValues := *modelpkgDB
	(*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB)[modelpkgDB.ID] = &modelpkgDBWithNewFieldValues

	return
}

// BackRepoModelPkg.CheckoutPhaseTwo Checkouts all staged instances of ModelPkg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelPkg *BackRepoModelPkgStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, modelpkgDB := range *backRepoModelPkg.Map_ModelPkgDBID_ModelPkgDB {
		backRepoModelPkg.CheckoutPhaseTwoInstance(backRepo, modelpkgDB)
	}
	return
}

// BackRepoModelPkg.CheckoutPhaseTwoInstance Checkouts staged instances of ModelPkg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelPkg *BackRepoModelPkgStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, modelpkgDB *ModelPkgDB) (Error error) {

	modelpkg := (*backRepoModelPkg.Map_ModelPkgDBID_ModelPkgPtr)[modelpkgDB.ID]
	_ = modelpkg // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			modelpkg.Name = modelpkgDB.Name_Data.String

			modelpkg.PkgPath = modelpkgDB.PkgPath_Data.String

		}
	}
	return
}

// CommitModelPkg allows commit of a single modelpkg (if already staged)
func (backRepo *BackRepoStruct) CommitModelPkg(modelpkg *models.ModelPkg) {
	backRepo.BackRepoModelPkg.CommitPhaseOneInstance(modelpkg)
	if id, ok := (*backRepo.BackRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID)[modelpkg]; ok {
		backRepo.BackRepoModelPkg.CommitPhaseTwoInstance(backRepo, id, modelpkg)
	}
}

// CommitModelPkg allows checkout of a single modelpkg (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutModelPkg(modelpkg *models.ModelPkg) {
	// check if the modelpkg is staged
	if _, ok := (*backRepo.BackRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID)[modelpkg]; ok {

		if id, ok := (*backRepo.BackRepoModelPkg.Map_ModelPkgPtr_ModelPkgDBID)[modelpkg]; ok {
			var modelpkgDB ModelPkgDB
			modelpkgDB.ID = id

			if err := backRepo.BackRepoModelPkg.db.First(&modelpkgDB, id).Error; err != nil {
				log.Panicln("CheckoutModelPkg : Problem with getting object with id:", id)
			}
			backRepo.BackRepoModelPkg.CheckoutPhaseOneInstance(&modelpkgDB)
			backRepo.BackRepoModelPkg.CheckoutPhaseTwoInstance(backRepo, &modelpkgDB)
		}
	}
}
