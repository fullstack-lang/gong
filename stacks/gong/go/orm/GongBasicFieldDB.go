// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gong/stacks/gong/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_GongBasicField sql.NullBool
var __GongBasicField_time__dummyDeclaration time.Duration

// GongBasicFieldAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongbasicfieldAPI
type GongBasicFieldAPI struct {
	models.GongBasicField

	// insertion for fields declaration
	// Declation for basic field gongbasicfieldDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field gongbasicfieldDB.BasicKindName {{BasicKind}} (to be completed)
	BasicKindName_Data sql.NullString

	// field GongEnum is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GongEnumID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	GongEnumName string

	// Declation for basic field gongbasicfieldDB.DeclaredType {{BasicKind}} (to be completed)
	DeclaredType_Data sql.NullString

	// Implementation of a reverse ID for field GongStruct{}.GongBasicFields []*GongBasicField
	GongStruct_GongBasicFieldsDBID sql.NullInt64

	// end of insertion
}

// GongBasicFieldDB describes a gongbasicfield in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model gongbasicfieldDB
type GongBasicFieldDB struct {
	gorm.Model

	GongBasicFieldAPI
}

// GongBasicFieldDBs arrays gongbasicfieldDBs
// swagger:response gongbasicfieldDBsResponse
type GongBasicFieldDBs []GongBasicFieldDB

// GongBasicFieldDBResponse provides response
// swagger:response gongbasicfieldDBResponse
type GongBasicFieldDBResponse struct {
	GongBasicFieldDB
}

type BackRepoGongBasicFieldStruct struct {
	// stores GongBasicFieldDB according to their gorm ID
	Map_GongBasicFieldDBID_GongBasicFieldDB *map[uint]*GongBasicFieldDB

	// stores GongBasicFieldDB ID according to GongBasicField address
	Map_GongBasicFieldPtr_GongBasicFieldDBID *map[*models.GongBasicField]uint

	// stores GongBasicField according to their gorm ID
	Map_GongBasicFieldDBID_GongBasicFieldPtr *map[uint]*models.GongBasicField

	db *gorm.DB
}

// BackRepoGongBasicField.Init set up the BackRepo of the GongBasicField
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr != nil {
		err := errors.New("In Init, backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr should be nil")
		return err
	}

	if backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB != nil {
		err := errors.New("In Init, backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB should be nil")
		return err
	}

	if backRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID != nil {
		err := errors.New("In Init, backRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongBasicField, 0)
	backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr = &tmp

	tmpDB := make(map[uint]*GongBasicFieldDB, 0)
	backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB = &tmpDB

	tmpID := make(map[*models.GongBasicField]uint, 0)
	backRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID = &tmpID

	backRepoGongBasicField.db = db
	return
}

// BackRepoGongBasicField.CommitPhaseOne commits all staged instances of GongBasicField to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongbasicfield := range stage.GongBasicFields {
		backRepoGongBasicField.CommitPhaseOneInstance(gongbasicfield)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongbasicfield := range *backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr {
		if _, ok := stage.GongBasicFields[gongbasicfield]; !ok {
			backRepoGongBasicField.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongBasicField.CommitDeleteInstance commits deletion of GongBasicField to the BackRepo
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CommitDeleteInstance(id uint) (Error error) {

	gongbasicfield := (*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr)[id]

	// gongbasicfield is not staged anymore, remove gongbasicfieldDB
	gongbasicfieldDB := (*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB)[id]
	query := backRepoGongBasicField.db.Unscoped().Delete(&gongbasicfieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID), gongbasicfield)
	delete((*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr), id)
	delete((*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB), id)

	return
}

// BackRepoGongBasicField.CommitPhaseOneInstance commits gongbasicfield staged instances of GongBasicField to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CommitPhaseOneInstance(gongbasicfield *models.GongBasicField) (Error error) {

	// check if the gongbasicfield is not commited yet
	if _, ok := (*backRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[gongbasicfield]; ok {
		return
	}

	// initiate gongbasicfield
	var gongbasicfieldDB GongBasicFieldDB
	gongbasicfieldDB.GongBasicField = *gongbasicfield

	query := backRepoGongBasicField.db.Create(&gongbasicfieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[gongbasicfield] = gongbasicfieldDB.ID
	(*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr)[gongbasicfieldDB.ID] = gongbasicfield
	(*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB)[gongbasicfieldDB.ID] = &gongbasicfieldDB

	return
}

// BackRepoGongBasicField.CommitPhaseTwo commits all staged instances of GongBasicField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongbasicfield := range *backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr {
		backRepoGongBasicField.CommitPhaseTwoInstance(backRepo, idx, gongbasicfield)
	}

	return
}

// BackRepoGongBasicField.CommitPhaseTwoInstance commits {{structname }} of models.GongBasicField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongbasicfield *models.GongBasicField) (Error error) {

	// fetch matching gongbasicfieldDB
	if gongbasicfieldDB, ok := (*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				gongbasicfieldDB.Name_Data.String = gongbasicfield.Name
				gongbasicfieldDB.Name_Data.Valid = true

				gongbasicfieldDB.BasicKindName_Data.String = gongbasicfield.BasicKindName
				gongbasicfieldDB.BasicKindName_Data.Valid = true

				// commit pointer value gongbasicfield.GongEnum translates to updating the gongbasicfield.GongEnumID
				gongbasicfieldDB.GongEnumID.Valid = true // allow for a 0 value (nil association)
				if gongbasicfield.GongEnum != nil {
					if GongEnumId, ok := (*backRepo.BackRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongbasicfield.GongEnum]; ok {
						gongbasicfieldDB.GongEnumID.Int64 = int64(GongEnumId)
					}
				}

				gongbasicfieldDB.DeclaredType_Data.String = gongbasicfield.DeclaredType
				gongbasicfieldDB.DeclaredType_Data.Valid = true

			}
		}
		query := backRepoGongBasicField.db.Save(&gongbasicfieldDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongBasicField intance %s", gongbasicfield.Name))
		return err
	}

	return
}

// BackRepoGongBasicField.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CheckoutPhaseOne() (Error error) {

	gongbasicfieldDBArray := make([]GongBasicFieldDB, 0)
	query := backRepoGongBasicField.db.Find(&gongbasicfieldDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, gongbasicfieldDB := range gongbasicfieldDBArray {
		backRepoGongBasicField.CheckoutPhaseOneInstance(&gongbasicfieldDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongbasicfieldDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongbasicfieldDB
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CheckoutPhaseOneInstance(gongbasicfieldDB *GongBasicFieldDB) (Error error) {

	// if absent, create entries in the backRepoGongBasicField maps.
	gongbasicfieldWithNewFieldValues := gongbasicfieldDB.GongBasicField
	if _, ok := (*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr)[gongbasicfieldDB.ID]; !ok {

		(*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr)[gongbasicfieldDB.ID] = &gongbasicfieldWithNewFieldValues
		(*backRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[&gongbasicfieldWithNewFieldValues] = gongbasicfieldDB.ID

		// append model store with the new element
		gongbasicfieldWithNewFieldValues.Stage()
	}
	gongbasicfieldDBWithNewFieldValues := *gongbasicfieldDB
	(*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB)[gongbasicfieldDB.ID] = &gongbasicfieldDBWithNewFieldValues

	return
}

// BackRepoGongBasicField.CheckoutPhaseTwo Checkouts all staged instances of GongBasicField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongbasicfieldDB := range *backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB {
		backRepoGongBasicField.CheckoutPhaseTwoInstance(backRepo, gongbasicfieldDB)
	}
	return
}

// BackRepoGongBasicField.CheckoutPhaseTwoInstance Checkouts staged instances of GongBasicField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongBasicField *BackRepoGongBasicFieldStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongbasicfieldDB *GongBasicFieldDB) (Error error) {

	gongbasicfield := (*backRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr)[gongbasicfieldDB.ID]
	_ = gongbasicfield // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			gongbasicfield.Name = gongbasicfieldDB.Name_Data.String

			gongbasicfield.BasicKindName = gongbasicfieldDB.BasicKindName_Data.String

			// GongEnum field
			if gongbasicfieldDB.GongEnumID.Int64 != 0 {
				gongbasicfield.GongEnum = (*backRepo.BackRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[uint(gongbasicfieldDB.GongEnumID.Int64)]
			}

			gongbasicfield.DeclaredType = gongbasicfieldDB.DeclaredType_Data.String

		}
	}
	return
}

// CommitGongBasicField allows commit of a single gongbasicfield (if already staged)
func (backRepo *BackRepoStruct) CommitGongBasicField(gongbasicfield *models.GongBasicField) {
	backRepo.BackRepoGongBasicField.CommitPhaseOneInstance(gongbasicfield)
	if id, ok := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[gongbasicfield]; ok {
		backRepo.BackRepoGongBasicField.CommitPhaseTwoInstance(backRepo, id, gongbasicfield)
	}
}

// CommitGongBasicField allows checkout of a single gongbasicfield (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongBasicField(gongbasicfield *models.GongBasicField) {
	// check if the gongbasicfield is staged
	if _, ok := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[gongbasicfield]; ok {

		if id, ok := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[gongbasicfield]; ok {
			var gongbasicfieldDB GongBasicFieldDB
			gongbasicfieldDB.ID = id

			if err := backRepo.BackRepoGongBasicField.db.First(&gongbasicfieldDB, id).Error; err != nil {
				log.Panicln("CheckoutGongBasicField : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongBasicField.CheckoutPhaseOneInstance(&gongbasicfieldDB)
			backRepo.BackRepoGongBasicField.CheckoutPhaseTwoInstance(backRepo, &gongbasicfieldDB)
		}
	}
}
