// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gong/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_GongStruct sql.NullBool

// GongStructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongstructAPI
type GongStructAPI struct {
	models.GongStruct

	// insertion for fields declaration
	// Declation for basic field gongstructDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// GongStructDB describes a gongstruct in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model gongstructDB
type GongStructDB struct {
	gorm.Model

	GongStructAPI
}

// GongStructDBs arrays gongstructDBs
// swagger:response gongstructDBsResponse
type GongStructDBs []GongStructDB

// GongStructDBResponse provides response
// swagger:response gongstructDBResponse
type GongStructDBResponse struct {
	GongStructDB
}

type BackRepoGongStructStruct struct {
	// stores GongStructDB according to their gorm ID
	Map_GongStructDBID_GongStructDB *map[uint]*GongStructDB

	// stores GongStructDB ID according to GongStruct address
	Map_GongStructPtr_GongStructDBID *map[*models.GongStruct]uint

	// stores GongStruct according to their gorm ID
	Map_GongStructDBID_GongStructPtr *map[uint]*models.GongStruct

	db *gorm.DB
}

// BackRepoGongStruct.Init set up the BackRepo of the GongStruct
func (backRepoGongStruct *BackRepoGongStructStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongStruct.Map_GongStructDBID_GongStructPtr != nil {
		err := errors.New("In Init, backRepoGongStruct.Map_GongStructDBID_GongStructPtr should be nil")
		return err
	}

	if backRepoGongStruct.Map_GongStructDBID_GongStructDB != nil {
		err := errors.New("In Init, backRepoGongStruct.Map_GongStructDBID_GongStructDB should be nil")
		return err
	}

	if backRepoGongStruct.Map_GongStructPtr_GongStructDBID != nil {
		err := errors.New("In Init, backRepoGongStruct.Map_GongStructPtr_GongStructDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongStruct, 0)
	backRepoGongStruct.Map_GongStructDBID_GongStructPtr = &tmp

	tmpDB := make(map[uint]*GongStructDB, 0)
	backRepoGongStruct.Map_GongStructDBID_GongStructDB = &tmpDB

	tmpID := make(map[*models.GongStruct]uint, 0)
	backRepoGongStruct.Map_GongStructPtr_GongStructDBID = &tmpID

	backRepoGongStruct.db = db
	return
}

// BackRepoGongStruct.CommitPhaseOne commits all staged instances of GongStruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongStruct *BackRepoGongStructStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongstruct := range stage.GongStructs {
		backRepoGongStruct.CommitPhaseOneInstance(gongstruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongstruct := range *backRepoGongStruct.Map_GongStructDBID_GongStructPtr {
		if _, ok := stage.GongStructs[gongstruct]; !ok {
			backRepoGongStruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongStruct.CommitDeleteInstance commits deletion of GongStruct to the BackRepo
func (backRepoGongStruct *BackRepoGongStructStruct) CommitDeleteInstance(id uint) (Error error) {

	gongstruct := (*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[id]

	// gongstruct is not staged anymore, remove gongstructDB
	gongstructDB := (*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[id]
	query := backRepoGongStruct.db.Unscoped().Delete(&gongstructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongStruct.Map_GongStructPtr_GongStructDBID), gongstruct)
	delete((*backRepoGongStruct.Map_GongStructDBID_GongStructPtr), id)
	delete((*backRepoGongStruct.Map_GongStructDBID_GongStructDB), id)

	return
}

// BackRepoGongStruct.CommitPhaseOneInstance commits gongstruct staged instances of GongStruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongStruct *BackRepoGongStructStruct) CommitPhaseOneInstance(gongstruct *models.GongStruct) (Error error) {

	// check if the gongstruct is not commited yet
	if _, ok := (*backRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]; ok {
		return
	}

	// initiate gongstruct
	var gongstructDB GongStructDB
	gongstructDB.GongStruct = *gongstruct

	query := backRepoGongStruct.db.Create(&gongstructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct] = gongstructDB.ID
	(*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID] = gongstruct
	(*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[gongstructDB.ID] = &gongstructDB

	return
}

// BackRepoGongStruct.CommitPhaseTwo commits all staged instances of GongStruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongStruct *BackRepoGongStructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongstruct := range *backRepoGongStruct.Map_GongStructDBID_GongStructPtr {
		backRepoGongStruct.CommitPhaseTwoInstance(backRepo, idx, gongstruct)
	}

	return
}

// BackRepoGongStruct.CommitPhaseTwoInstance commits {{structname }} of models.GongStruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongStruct *BackRepoGongStructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongstruct *models.GongStruct) (Error error) {

	// fetch matching gongstructDB
	if gongstructDB, ok := (*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				gongstructDB.Name_Data.String = gongstruct.Name
				gongstructDB.Name_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to GongBasicField, i.e.
				for _, gongbasicfield := range gongstruct.GongBasicFields {
					if gongbasicfieldDBID, ok := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[gongbasicfield]; ok {
						if gongbasicfieldDB, ok := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB)[gongbasicfieldDBID]; ok {
							gongbasicfieldDB.GongStruct_GongBasicFieldsDBID.Int64 = int64(gongstructDB.ID)
							gongbasicfieldDB.GongStruct_GongBasicFieldsDBID.Valid = true
							if q := backRepoGongStruct.db.Save(&gongbasicfieldDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to PointerToGongStructField, i.e.
				for _, pointertogongstructfield := range gongstruct.PointerToGongStructFields {
					if pointertogongstructfieldDBID, ok := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[pointertogongstructfield]; ok {
						if pointertogongstructfieldDB, ok := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB)[pointertogongstructfieldDBID]; ok {
							pointertogongstructfieldDB.GongStruct_PointerToGongStructFieldsDBID.Int64 = int64(gongstructDB.ID)
							pointertogongstructfieldDB.GongStruct_PointerToGongStructFieldsDBID.Valid = true
							if q := backRepoGongStruct.db.Save(&pointertogongstructfieldDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to SliceOfPointerToGongStructField, i.e.
				for _, sliceofpointertogongstructfield := range gongstruct.SliceOfPointerToGongStructFields {
					if sliceofpointertogongstructfieldDBID, ok := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[sliceofpointertogongstructfield]; ok {
						if sliceofpointertogongstructfieldDB, ok := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB)[sliceofpointertogongstructfieldDBID]; ok {
							sliceofpointertogongstructfieldDB.GongStruct_SliceOfPointerToGongStructFieldsDBID.Int64 = int64(gongstructDB.ID)
							sliceofpointertogongstructfieldDB.GongStruct_SliceOfPointerToGongStructFieldsDBID.Valid = true
							if q := backRepoGongStruct.db.Save(&sliceofpointertogongstructfieldDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoGongStruct.db.Save(&gongstructDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongStruct intance %s", gongstruct.Name))
		return err
	}

	return
}

// BackRepoGongStruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGongStruct *BackRepoGongStructStruct) CheckoutPhaseOne() (Error error) {

	gongstructDBArray := make([]GongStructDB, 0)
	query := backRepoGongStruct.db.Find(&gongstructDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, gongstructDB := range gongstructDBArray {
		backRepoGongStruct.CheckoutPhaseOneInstance(&gongstructDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongstructDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongstructDB
func (backRepoGongStruct *BackRepoGongStructStruct) CheckoutPhaseOneInstance(gongstructDB *GongStructDB) (Error error) {

	// if absent, create entries in the backRepoGongStruct maps.
	gongstructWithNewFieldValues := gongstructDB.GongStruct
	if _, ok := (*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID]; !ok {

		(*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID] = &gongstructWithNewFieldValues
		(*backRepoGongStruct.Map_GongStructPtr_GongStructDBID)[&gongstructWithNewFieldValues] = gongstructDB.ID

		// append model store with the new element
		gongstructWithNewFieldValues.Stage()
	}
	gongstructDBWithNewFieldValues := *gongstructDB
	(*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[gongstructDB.ID] = &gongstructDBWithNewFieldValues

	return
}

// BackRepoGongStruct.CheckoutPhaseTwo Checkouts all staged instances of GongStruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongStruct *BackRepoGongStructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongstructDB := range *backRepoGongStruct.Map_GongStructDBID_GongStructDB {
		backRepoGongStruct.CheckoutPhaseTwoInstance(backRepo, gongstructDB)
	}
	return
}

// BackRepoGongStruct.CheckoutPhaseTwoInstance Checkouts staged instances of GongStruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongStruct *BackRepoGongStructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongstructDB *GongStructDB) (Error error) {

	gongstruct := (*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID]
	_ = gongstruct // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			gongstruct.Name = gongstructDB.Name_Data.String

			// parse all GongBasicFieldDB and redeem the array of poiners to GongStruct
			// first reset the slice
			gongstruct.GongBasicFields = gongstruct.GongBasicFields[:0]
			for _, GongBasicFieldDB := range *backRepo.BackRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB {
				if GongBasicFieldDB.GongStruct_GongBasicFieldsDBID.Int64 == int64(gongstructDB.ID) {
					GongBasicField := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr)[GongBasicFieldDB.ID]
					gongstruct.GongBasicFields = append(gongstruct.GongBasicFields, GongBasicField)
				}
			}

			// parse all PointerToGongStructFieldDB and redeem the array of poiners to GongStruct
			// first reset the slice
			gongstruct.PointerToGongStructFields = gongstruct.PointerToGongStructFields[:0]
			for _, PointerToGongStructFieldDB := range *backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB {
				if PointerToGongStructFieldDB.GongStruct_PointerToGongStructFieldsDBID.Int64 == int64(gongstructDB.ID) {
					PointerToGongStructField := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr)[PointerToGongStructFieldDB.ID]
					gongstruct.PointerToGongStructFields = append(gongstruct.PointerToGongStructFields, PointerToGongStructField)
				}
			}

			// parse all SliceOfPointerToGongStructFieldDB and redeem the array of poiners to GongStruct
			// first reset the slice
			gongstruct.SliceOfPointerToGongStructFields = gongstruct.SliceOfPointerToGongStructFields[:0]
			for _, SliceOfPointerToGongStructFieldDB := range *backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB {
				if SliceOfPointerToGongStructFieldDB.GongStruct_SliceOfPointerToGongStructFieldsDBID.Int64 == int64(gongstructDB.ID) {
					SliceOfPointerToGongStructField := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[SliceOfPointerToGongStructFieldDB.ID]
					gongstruct.SliceOfPointerToGongStructFields = append(gongstruct.SliceOfPointerToGongStructFields, SliceOfPointerToGongStructField)
				}
			}

		}
	}
	return
}

// CommitGongStruct allows commit of a single gongstruct (if already staged)
func (backRepo *BackRepoStruct) CommitGongStruct(gongstruct *models.GongStruct) {
	backRepo.BackRepoGongStruct.CommitPhaseOneInstance(gongstruct)
	if id, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]; ok {
		backRepo.BackRepoGongStruct.CommitPhaseTwoInstance(backRepo, id, gongstruct)
	}
}

// CommitGongStruct allows checkout of a single gongstruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongStruct(gongstruct *models.GongStruct) {
	// check if the gongstruct is staged
	if _, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]; ok {

		if id, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]; ok {
			var gongstructDB GongStructDB
			gongstructDB.ID = id

			if err := backRepo.BackRepoGongStruct.db.First(&gongstructDB, id).Error; err != nil {
				log.Panicln("CheckoutGongStruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongStruct.CheckoutPhaseOneInstance(&gongstructDB)
			backRepo.BackRepoGongStruct.CheckoutPhaseTwoInstance(backRepo, &gongstructDB)
		}
	}
}
