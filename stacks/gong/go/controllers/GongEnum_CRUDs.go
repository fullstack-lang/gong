// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gong/go/models"
	"github.com/fullstack-lang/gong/stacks/gong/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __GongEnum__dummysDeclaration__ models.GongEnum

// An GongEnumID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongEnum updateGongEnum deleteGongEnum
type GongEnumID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongEnumInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongEnum updateGongEnum
type GongEnumInput struct {
	// The GongEnum to submit or modify
	// in: body
	GongEnum *orm.GongEnumAPI
}

// GetGongEnums
//
// swagger:route GET /gongenums gongenums getGongEnums
//
// Get all gongenums
//
// Responses:
//    default: genericError
//        200: gongenumDBsResponse
func GetGongEnums(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gongenums []orm.GongEnumDB
	query := db.Find(&gongenums)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gongenum, update fields from the database nullable fields
	for idx := range gongenums {
		gongenum := &gongenums[idx]
		_ = gongenum
		// insertion point for updating fields
		if gongenum.Name_Data.Valid {
			gongenum.Name = gongenum.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, gongenums)
}

// PostGongEnum
//
// swagger:route POST /gongenums gongenums postGongEnum
//
// Creates a gongenum
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongenumDBResponse
func PostGongEnum(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GongEnumAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongenum
	gongenumDB := orm.GongEnumDB{}
	gongenumDB.GongEnumAPI = input
	// insertion point for nullable field set
	gongenumDB.Name_Data.String = input.Name
	gongenumDB.Name_Data.Valid = true

	query := db.Create(&gongenumDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gongenumDB)
}

// GetGongEnum
//
// swagger:route GET /gongenums/{ID} gongenums getGongEnum
//
// Gets the details for a gongenum.
//
// Responses:
//    default: genericError
//        200: gongenumDBResponse
func GetGongEnum(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gongenum in DB
	var gongenum orm.GongEnumDB
	if err := db.First(&gongenum, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gongenum.Name_Data.Valid {
		gongenum.Name = gongenum.Name_Data.String
	}

	c.JSON(http.StatusOK, gongenum)
}

// UpdateGongEnum
//
// swagger:route PATCH /gongenums/{ID} gongenums updateGongEnum
//
// Update a gongenum
//
// Responses:
//    default: genericError
//        200: gongenumDBResponse
func UpdateGongEnum(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongenumDB orm.GongEnumDB

	// fetch the gongenum
	query := db.First(&gongenumDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongEnumAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&gongenumDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the gongenumDB
	c.JSON(http.StatusOK, gongenumDB)
}

// DeleteGongEnum
//
// swagger:route DELETE /gongenums/{ID} gongenums deleteGongEnum
//
// Delete a gongenum
//
// Responses:
//    default: genericError
func DeleteGongEnum(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongenumDB orm.GongEnumDB
	if err := db.First(&gongenumDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongenumDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
