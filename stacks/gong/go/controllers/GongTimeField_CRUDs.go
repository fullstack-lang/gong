// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/stacks/gong/go/models"
	"github.com/fullstack-lang/gong/stacks/gong/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __GongTimeField__dummysDeclaration__ models.GongTimeField
var __GongTimeField_time__dummyDeclaration time.Duration

// An GongTimeFieldID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongTimeField updateGongTimeField deleteGongTimeField
type GongTimeFieldID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongTimeFieldInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongTimeField updateGongTimeField
type GongTimeFieldInput struct {
	// The GongTimeField to submit or modify
	// in: body
	GongTimeField *orm.GongTimeFieldAPI
}

// GetGongTimeFields
//
// swagger:route GET /gongtimefields gongtimefields getGongTimeFields
//
// Get all gongtimefields
//
// Responses:
//    default: genericError
//        200: gongtimefieldDBsResponse
func GetGongTimeFields(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gongtimefields []orm.GongTimeFieldDB
	query := db.Find(&gongtimefields)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gongtimefield, update fields from the database nullable fields
	for idx := range gongtimefields {
		gongtimefield := &gongtimefields[idx]
		_ = gongtimefield
		// insertion point for updating fields
		if gongtimefield.Name_Data.Valid {
			gongtimefield.Name = gongtimefield.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, gongtimefields)
}

// PostGongTimeField
//
// swagger:route POST /gongtimefields gongtimefields postGongTimeField
//
// Creates a gongtimefield
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongtimefieldDBResponse
func PostGongTimeField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GongTimeFieldAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongtimefield
	gongtimefieldDB := orm.GongTimeFieldDB{}
	gongtimefieldDB.GongTimeFieldAPI = input
	// insertion point for nullable field set
	gongtimefieldDB.Name_Data.String = input.Name
	gongtimefieldDB.Name_Data.Valid = true

	query := db.Create(&gongtimefieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gongtimefieldDB)
}

// GetGongTimeField
//
// swagger:route GET /gongtimefields/{ID} gongtimefields getGongTimeField
//
// Gets the details for a gongtimefield.
//
// Responses:
//    default: genericError
//        200: gongtimefieldDBResponse
func GetGongTimeField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gongtimefield in DB
	var gongtimefield orm.GongTimeFieldDB
	if err := db.First(&gongtimefield, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gongtimefield.Name_Data.Valid {
		gongtimefield.Name = gongtimefield.Name_Data.String
	}

	c.JSON(http.StatusOK, gongtimefield)
}

// UpdateGongTimeField
//
// swagger:route PATCH /gongtimefields/{ID} gongtimefields updateGongTimeField
//
// Update a gongtimefield
//
// Responses:
//    default: genericError
//        200: gongtimefieldDBResponse
func UpdateGongTimeField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongtimefieldDB orm.GongTimeFieldDB

	// fetch the gongtimefield
	query := db.First(&gongtimefieldDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongTimeFieldAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&gongtimefieldDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the gongtimefieldDB
	c.JSON(http.StatusOK, gongtimefieldDB)
}

// DeleteGongTimeField
//
// swagger:route DELETE /gongtimefields/{ID} gongtimefields deleteGongTimeField
//
// Delete a gongtimefield
//
// Responses:
//    default: genericError
func DeleteGongTimeField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongtimefieldDB orm.GongTimeFieldDB
	if err := db.First(&gongtimefieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongtimefieldDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
