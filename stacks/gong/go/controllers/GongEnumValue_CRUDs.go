// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gong/go/models"
	"github.com/fullstack-lang/gong/stacks/gong/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __GongEnumValue__dummysDeclaration__ models.GongEnumValue

// An GongEnumValueID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongEnumValue updateGongEnumValue deleteGongEnumValue
type GongEnumValueID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongEnumValueInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongEnumValue updateGongEnumValue
type GongEnumValueInput struct {
	// The GongEnumValue to submit or modify
	// in: body
	GongEnumValue *orm.GongEnumValueAPI
}

// GetGongEnumValues
//
// swagger:route GET /gongenumvalues gongenumvalues getGongEnumValues
//
// Get all gongenumvalues
//
// Responses:
//    default: genericError
//        200: gongenumvalueDBsResponse
func GetGongEnumValues(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gongenumvalues []orm.GongEnumValueDB
	query := db.Find(&gongenumvalues)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gongenumvalue, update fields from the database nullable fields
	for idx := range gongenumvalues {
		gongenumvalue := &gongenumvalues[idx]
		_ = gongenumvalue
		// insertion point for updating fields
		if gongenumvalue.Name_Data.Valid {
			gongenumvalue.Name = gongenumvalue.Name_Data.String
		}

		if gongenumvalue.Value_Data.Valid {
			gongenumvalue.Value = gongenumvalue.Value_Data.String
		}

	}

	c.JSON(http.StatusOK, gongenumvalues)
}

// PostGongEnumValue
//
// swagger:route POST /gongenumvalues gongenumvalues postGongEnumValue
//
// Creates a gongenumvalue
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongenumvalueDBResponse
func PostGongEnumValue(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GongEnumValueAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongenumvalue
	gongenumvalueDB := orm.GongEnumValueDB{}
	gongenumvalueDB.GongEnumValueAPI = input
	// insertion point for nullable field set
	gongenumvalueDB.Name_Data.String = input.Name
	gongenumvalueDB.Name_Data.Valid = true

	gongenumvalueDB.Value_Data.String = input.Value
	gongenumvalueDB.Value_Data.Valid = true

	query := db.Create(&gongenumvalueDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gongenumvalueDB)
}

// GetGongEnumValue
//
// swagger:route GET /gongenumvalues/{ID} gongenumvalues getGongEnumValue
//
// Gets the details for a gongenumvalue.
//
// Responses:
//    default: genericError
//        200: gongenumvalueDBResponse
func GetGongEnumValue(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gongenumvalue in DB
	var gongenumvalue orm.GongEnumValueDB
	if err := db.First(&gongenumvalue, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gongenumvalue.Name_Data.Valid {
		gongenumvalue.Name = gongenumvalue.Name_Data.String
	}

	if gongenumvalue.Value_Data.Valid {
		gongenumvalue.Value = gongenumvalue.Value_Data.String
	}

	c.JSON(http.StatusOK, gongenumvalue)
}

// UpdateGongEnumValue
//
// swagger:route PATCH /gongenumvalues/{ID} gongenumvalues updateGongEnumValue
//
// Update a gongenumvalue
//
// Responses:
//    default: genericError
//        200: gongenumvalueDBResponse
func UpdateGongEnumValue(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongenumvalueDB orm.GongEnumValueDB

	// fetch the gongenumvalue
	query := db.First(&gongenumvalueDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongEnumValueAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Value_Data.String = input.Value
	input.Value_Data.Valid = true

	query = db.Model(&gongenumvalueDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the gongenumvalueDB
	c.JSON(http.StatusOK, gongenumvalueDB)
}

// DeleteGongEnumValue
//
// swagger:route DELETE /gongenumvalues/{ID} gongenumvalues deleteGongEnumValue
//
// Delete a gongenumvalue
//
// Responses:
//    default: genericError
func DeleteGongEnumValue(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongenumvalueDB orm.GongEnumValueDB
	if err := db.First(&gongenumvalueDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongenumvalueDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
