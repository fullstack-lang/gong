// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/stacks/gong/go/models"
	"github.com/fullstack-lang/gong/stacks/gong/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __SliceOfPointerToGongStructField__dummysDeclaration__ models.SliceOfPointerToGongStructField
var __SliceOfPointerToGongStructField_time__dummyDeclaration time.Duration

// An SliceOfPointerToGongStructFieldID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getSliceOfPointerToGongStructField updateSliceOfPointerToGongStructField deleteSliceOfPointerToGongStructField
type SliceOfPointerToGongStructFieldID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// SliceOfPointerToGongStructFieldInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postSliceOfPointerToGongStructField updateSliceOfPointerToGongStructField
type SliceOfPointerToGongStructFieldInput struct {
	// The SliceOfPointerToGongStructField to submit or modify
	// in: body
	SliceOfPointerToGongStructField *orm.SliceOfPointerToGongStructFieldAPI
}

// GetSliceOfPointerToGongStructFields
//
// swagger:route GET /sliceofpointertogongstructfields sliceofpointertogongstructfields getSliceOfPointerToGongStructFields
//
// Get all sliceofpointertogongstructfields
//
// Responses:
//    default: genericError
//        200: sliceofpointertogongstructfieldDBsResponse
func GetSliceOfPointerToGongStructFields(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var sliceofpointertogongstructfields []orm.SliceOfPointerToGongStructFieldDB
	query := db.Find(&sliceofpointertogongstructfields)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each sliceofpointertogongstructfield, update fields from the database nullable fields
	for idx := range sliceofpointertogongstructfields {
		sliceofpointertogongstructfield := &sliceofpointertogongstructfields[idx]
		_ = sliceofpointertogongstructfield
		// insertion point for updating fields
		if sliceofpointertogongstructfield.Name_Data.Valid {
			sliceofpointertogongstructfield.Name = sliceofpointertogongstructfield.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, sliceofpointertogongstructfields)
}

// PostSliceOfPointerToGongStructField
//
// swagger:route POST /sliceofpointertogongstructfields sliceofpointertogongstructfields postSliceOfPointerToGongStructField
//
// Creates a sliceofpointertogongstructfield
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: sliceofpointertogongstructfieldDBResponse
func PostSliceOfPointerToGongStructField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.SliceOfPointerToGongStructFieldAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create sliceofpointertogongstructfield
	sliceofpointertogongstructfieldDB := orm.SliceOfPointerToGongStructFieldDB{}
	sliceofpointertogongstructfieldDB.SliceOfPointerToGongStructFieldAPI = input
	// insertion point for nullable field set
	sliceofpointertogongstructfieldDB.Name_Data.String = input.Name
	sliceofpointertogongstructfieldDB.Name_Data.Valid = true

	query := db.Create(&sliceofpointertogongstructfieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, sliceofpointertogongstructfieldDB)
}

// GetSliceOfPointerToGongStructField
//
// swagger:route GET /sliceofpointertogongstructfields/{ID} sliceofpointertogongstructfields getSliceOfPointerToGongStructField
//
// Gets the details for a sliceofpointertogongstructfield.
//
// Responses:
//    default: genericError
//        200: sliceofpointertogongstructfieldDBResponse
func GetSliceOfPointerToGongStructField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get sliceofpointertogongstructfield in DB
	var sliceofpointertogongstructfield orm.SliceOfPointerToGongStructFieldDB
	if err := db.First(&sliceofpointertogongstructfield, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if sliceofpointertogongstructfield.Name_Data.Valid {
		sliceofpointertogongstructfield.Name = sliceofpointertogongstructfield.Name_Data.String
	}

	c.JSON(http.StatusOK, sliceofpointertogongstructfield)
}

// UpdateSliceOfPointerToGongStructField
//
// swagger:route PATCH /sliceofpointertogongstructfields/{ID} sliceofpointertogongstructfields updateSliceOfPointerToGongStructField
//
// Update a sliceofpointertogongstructfield
//
// Responses:
//    default: genericError
//        200: sliceofpointertogongstructfieldDBResponse
func UpdateSliceOfPointerToGongStructField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var sliceofpointertogongstructfieldDB orm.SliceOfPointerToGongStructFieldDB

	// fetch the sliceofpointertogongstructfield
	query := db.First(&sliceofpointertogongstructfieldDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.SliceOfPointerToGongStructFieldAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&sliceofpointertogongstructfieldDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the sliceofpointertogongstructfieldDB
	c.JSON(http.StatusOK, sliceofpointertogongstructfieldDB)
}

// DeleteSliceOfPointerToGongStructField
//
// swagger:route DELETE /sliceofpointertogongstructfields/{ID} sliceofpointertogongstructfields deleteSliceOfPointerToGongStructField
//
// Delete a sliceofpointertogongstructfield
//
// Responses:
//    default: genericError
func DeleteSliceOfPointerToGongStructField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var sliceofpointertogongstructfieldDB orm.SliceOfPointerToGongStructFieldDB
	if err := db.First(&sliceofpointertogongstructfieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&sliceofpointertogongstructfieldDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
