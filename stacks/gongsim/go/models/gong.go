// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Engines map[*Engine]struct{}

	Events map[*Event]struct{}

	GongsimCommands map[*GongsimCommand]struct{}

	GongsimStatuss map[*GongsimStatus]struct{}

	UpdateStates map[*UpdateState]struct{}

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	// insertion point for Commit and Checkout signatures
	CommitEngine(engine *Engine)
	CheckoutEngine(engine *Engine)
	CommitEvent(event *Event)
	CheckoutEvent(event *Event)
	CommitGongsimCommand(gongsimcommand *GongsimCommand)
	CheckoutGongsimCommand(gongsimcommand *GongsimCommand)
	CommitGongsimStatus(gongsimstatus *GongsimStatus)
	CheckoutGongsimStatus(gongsimstatus *GongsimStatus)
	CommitUpdateState(updatestate *UpdateState)
	CheckoutUpdateState(updatestate *UpdateState)
	GetLastCommitNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Engines: make(map[*Engine]struct{}, 0),

	Events: make(map[*Event]struct{}, 0),

	GongsimCommands: make(map[*GongsimCommand]struct{}, 0),

	GongsimStatuss: make(map[*GongsimStatus]struct{}, 0),

	UpdateStates: make(map[*UpdateState]struct{}, 0),

}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getEngineOrderedStructWithNameField() []*Engine {
	// have alphabetical order generation
	engineOrdered := []*Engine{}
	for engine := range stage.Engines {
		engineOrdered = append(engineOrdered, engine)
	}
	sort.Slice(engineOrdered[:], func(i, j int) bool {
		return engineOrdered[i].Name < engineOrdered[j].Name
	})
	return engineOrdered
}

// Stage puts engine to the model stage
func (engine *Engine) Stage() *Engine {
	Stage.Engines[engine] = __member
	return engine
}

// Unstage removes engine off the model stage
func (engine *Engine) Unstage() *Engine {
	delete(Stage.Engines, engine)
	return engine
}

// commit engine to the back repo (if it is already staged)
func (engine *Engine) Commit() *Engine {
	if _, ok := Stage.Engines[engine]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitEngine(engine)
		}
	}
	return engine
}

// Checkout engine to the back repo (if it is already staged)
func (engine *Engine) Checkout() *Engine {
	if _, ok := Stage.Engines[engine]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutEngine(engine)
		}
	}
	return engine
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of engine to the model stage
func (engine *Engine) StageCopy() *Engine {
	_engine := new(Engine)
	*_engine = *engine
	_engine.Stage()
	return _engine
}

// StageAndCommit appends engine to the model stage and commit to the orm repo
func (engine *Engine) StageAndCommit() *Engine {
	engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
	return engine
}

// DeleteStageAndCommit appends engine to the model stage and commit to the orm repo
func (engine *Engine) DeleteStageAndCommit() *Engine {
	engine.Unstage()
	DeleteORMEngine(engine)
	return engine
}

// StageCopyAndCommit appends a copy of engine to the model stage and commit to the orm repo
func (engine *Engine) StageCopyAndCommit() *Engine {
	_engine := new(Engine)
	*_engine = *engine
	_engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
	return _engine
}

// CreateORMEngine enables dynamic staging of a Engine instance
func CreateORMEngine(engine *Engine) {
	engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
}

// DeleteORMEngine enables dynamic staging of a Engine instance
func DeleteORMEngine(engine *Engine) {
	engine.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMEngine(engine)
	}
}

func (stage *StageStruct) getEventOrderedStructWithNameField() []*Event {
	// have alphabetical order generation
	eventOrdered := []*Event{}
	for event := range stage.Events {
		eventOrdered = append(eventOrdered, event)
	}
	sort.Slice(eventOrdered[:], func(i, j int) bool {
		return eventOrdered[i].Name < eventOrdered[j].Name
	})
	return eventOrdered
}

// Stage puts event to the model stage
func (event *Event) Stage() *Event {
	Stage.Events[event] = __member
	return event
}

// Unstage removes event off the model stage
func (event *Event) Unstage() *Event {
	delete(Stage.Events, event)
	return event
}

// commit event to the back repo (if it is already staged)
func (event *Event) Commit() *Event {
	if _, ok := Stage.Events[event]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitEvent(event)
		}
	}
	return event
}

// Checkout event to the back repo (if it is already staged)
func (event *Event) Checkout() *Event {
	if _, ok := Stage.Events[event]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutEvent(event)
		}
	}
	return event
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of event to the model stage
func (event *Event) StageCopy() *Event {
	_event := new(Event)
	*_event = *event
	_event.Stage()
	return _event
}

// StageAndCommit appends event to the model stage and commit to the orm repo
func (event *Event) StageAndCommit() *Event {
	event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
	return event
}

// DeleteStageAndCommit appends event to the model stage and commit to the orm repo
func (event *Event) DeleteStageAndCommit() *Event {
	event.Unstage()
	DeleteORMEvent(event)
	return event
}

// StageCopyAndCommit appends a copy of event to the model stage and commit to the orm repo
func (event *Event) StageCopyAndCommit() *Event {
	_event := new(Event)
	*_event = *event
	_event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
	return _event
}

// CreateORMEvent enables dynamic staging of a Event instance
func CreateORMEvent(event *Event) {
	event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
}

// DeleteORMEvent enables dynamic staging of a Event instance
func DeleteORMEvent(event *Event) {
	event.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMEvent(event)
	}
}

func (stage *StageStruct) getGongsimCommandOrderedStructWithNameField() []*GongsimCommand {
	// have alphabetical order generation
	gongsimcommandOrdered := []*GongsimCommand{}
	for gongsimcommand := range stage.GongsimCommands {
		gongsimcommandOrdered = append(gongsimcommandOrdered, gongsimcommand)
	}
	sort.Slice(gongsimcommandOrdered[:], func(i, j int) bool {
		return gongsimcommandOrdered[i].Name < gongsimcommandOrdered[j].Name
	})
	return gongsimcommandOrdered
}

// Stage puts gongsimcommand to the model stage
func (gongsimcommand *GongsimCommand) Stage() *GongsimCommand {
	Stage.GongsimCommands[gongsimcommand] = __member
	return gongsimcommand
}

// Unstage removes gongsimcommand off the model stage
func (gongsimcommand *GongsimCommand) Unstage() *GongsimCommand {
	delete(Stage.GongsimCommands, gongsimcommand)
	return gongsimcommand
}

// commit gongsimcommand to the back repo (if it is already staged)
func (gongsimcommand *GongsimCommand) Commit() *GongsimCommand {
	if _, ok := Stage.GongsimCommands[gongsimcommand]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongsimCommand(gongsimcommand)
		}
	}
	return gongsimcommand
}

// Checkout gongsimcommand to the back repo (if it is already staged)
func (gongsimcommand *GongsimCommand) Checkout() *GongsimCommand {
	if _, ok := Stage.GongsimCommands[gongsimcommand]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongsimCommand(gongsimcommand)
		}
	}
	return gongsimcommand
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongsimcommand to the model stage
func (gongsimcommand *GongsimCommand) StageCopy() *GongsimCommand {
	_gongsimcommand := new(GongsimCommand)
	*_gongsimcommand = *gongsimcommand
	_gongsimcommand.Stage()
	return _gongsimcommand
}

// StageAndCommit appends gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) StageAndCommit() *GongsimCommand {
	gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
	return gongsimcommand
}

// DeleteStageAndCommit appends gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) DeleteStageAndCommit() *GongsimCommand {
	gongsimcommand.Unstage()
	DeleteORMGongsimCommand(gongsimcommand)
	return gongsimcommand
}

// StageCopyAndCommit appends a copy of gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) StageCopyAndCommit() *GongsimCommand {
	_gongsimcommand := new(GongsimCommand)
	*_gongsimcommand = *gongsimcommand
	_gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
	return _gongsimcommand
}

// CreateORMGongsimCommand enables dynamic staging of a GongsimCommand instance
func CreateORMGongsimCommand(gongsimcommand *GongsimCommand) {
	gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
}

// DeleteORMGongsimCommand enables dynamic staging of a GongsimCommand instance
func DeleteORMGongsimCommand(gongsimcommand *GongsimCommand) {
	gongsimcommand.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongsimCommand(gongsimcommand)
	}
}

func (stage *StageStruct) getGongsimStatusOrderedStructWithNameField() []*GongsimStatus {
	// have alphabetical order generation
	gongsimstatusOrdered := []*GongsimStatus{}
	for gongsimstatus := range stage.GongsimStatuss {
		gongsimstatusOrdered = append(gongsimstatusOrdered, gongsimstatus)
	}
	sort.Slice(gongsimstatusOrdered[:], func(i, j int) bool {
		return gongsimstatusOrdered[i].Name < gongsimstatusOrdered[j].Name
	})
	return gongsimstatusOrdered
}

// Stage puts gongsimstatus to the model stage
func (gongsimstatus *GongsimStatus) Stage() *GongsimStatus {
	Stage.GongsimStatuss[gongsimstatus] = __member
	return gongsimstatus
}

// Unstage removes gongsimstatus off the model stage
func (gongsimstatus *GongsimStatus) Unstage() *GongsimStatus {
	delete(Stage.GongsimStatuss, gongsimstatus)
	return gongsimstatus
}

// commit gongsimstatus to the back repo (if it is already staged)
func (gongsimstatus *GongsimStatus) Commit() *GongsimStatus {
	if _, ok := Stage.GongsimStatuss[gongsimstatus]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongsimStatus(gongsimstatus)
		}
	}
	return gongsimstatus
}

// Checkout gongsimstatus to the back repo (if it is already staged)
func (gongsimstatus *GongsimStatus) Checkout() *GongsimStatus {
	if _, ok := Stage.GongsimStatuss[gongsimstatus]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongsimStatus(gongsimstatus)
		}
	}
	return gongsimstatus
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongsimstatus to the model stage
func (gongsimstatus *GongsimStatus) StageCopy() *GongsimStatus {
	_gongsimstatus := new(GongsimStatus)
	*_gongsimstatus = *gongsimstatus
	_gongsimstatus.Stage()
	return _gongsimstatus
}

// StageAndCommit appends gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) StageAndCommit() *GongsimStatus {
	gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
	return gongsimstatus
}

// DeleteStageAndCommit appends gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) DeleteStageAndCommit() *GongsimStatus {
	gongsimstatus.Unstage()
	DeleteORMGongsimStatus(gongsimstatus)
	return gongsimstatus
}

// StageCopyAndCommit appends a copy of gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) StageCopyAndCommit() *GongsimStatus {
	_gongsimstatus := new(GongsimStatus)
	*_gongsimstatus = *gongsimstatus
	_gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
	return _gongsimstatus
}

// CreateORMGongsimStatus enables dynamic staging of a GongsimStatus instance
func CreateORMGongsimStatus(gongsimstatus *GongsimStatus) {
	gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
}

// DeleteORMGongsimStatus enables dynamic staging of a GongsimStatus instance
func DeleteORMGongsimStatus(gongsimstatus *GongsimStatus) {
	gongsimstatus.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongsimStatus(gongsimstatus)
	}
}

func (stage *StageStruct) getUpdateStateOrderedStructWithNameField() []*UpdateState {
	// have alphabetical order generation
	updatestateOrdered := []*UpdateState{}
	for updatestate := range stage.UpdateStates {
		updatestateOrdered = append(updatestateOrdered, updatestate)
	}
	sort.Slice(updatestateOrdered[:], func(i, j int) bool {
		return updatestateOrdered[i].Name < updatestateOrdered[j].Name
	})
	return updatestateOrdered
}

// Stage puts updatestate to the model stage
func (updatestate *UpdateState) Stage() *UpdateState {
	Stage.UpdateStates[updatestate] = __member
	return updatestate
}

// Unstage removes updatestate off the model stage
func (updatestate *UpdateState) Unstage() *UpdateState {
	delete(Stage.UpdateStates, updatestate)
	return updatestate
}

// commit updatestate to the back repo (if it is already staged)
func (updatestate *UpdateState) Commit() *UpdateState {
	if _, ok := Stage.UpdateStates[updatestate]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitUpdateState(updatestate)
		}
	}
	return updatestate
}

// Checkout updatestate to the back repo (if it is already staged)
func (updatestate *UpdateState) Checkout() *UpdateState {
	if _, ok := Stage.UpdateStates[updatestate]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutUpdateState(updatestate)
		}
	}
	return updatestate
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of updatestate to the model stage
func (updatestate *UpdateState) StageCopy() *UpdateState {
	_updatestate := new(UpdateState)
	*_updatestate = *updatestate
	_updatestate.Stage()
	return _updatestate
}

// StageAndCommit appends updatestate to the model stage and commit to the orm repo
func (updatestate *UpdateState) StageAndCommit() *UpdateState {
	updatestate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateState(updatestate)
	}
	return updatestate
}

// DeleteStageAndCommit appends updatestate to the model stage and commit to the orm repo
func (updatestate *UpdateState) DeleteStageAndCommit() *UpdateState {
	updatestate.Unstage()
	DeleteORMUpdateState(updatestate)
	return updatestate
}

// StageCopyAndCommit appends a copy of updatestate to the model stage and commit to the orm repo
func (updatestate *UpdateState) StageCopyAndCommit() *UpdateState {
	_updatestate := new(UpdateState)
	*_updatestate = *updatestate
	_updatestate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateState(updatestate)
	}
	return _updatestate
}

// CreateORMUpdateState enables dynamic staging of a UpdateState instance
func CreateORMUpdateState(updatestate *UpdateState) {
	updatestate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateState(updatestate)
	}
}

// DeleteORMUpdateState enables dynamic staging of a UpdateState instance
func DeleteORMUpdateState(updatestate *UpdateState) {
	updatestate.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMUpdateState(updatestate)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMEngine(Engine *Engine)
	CreateORMEvent(Event *Event)
	CreateORMGongsimCommand(GongsimCommand *GongsimCommand)
	CreateORMGongsimStatus(GongsimStatus *GongsimStatus)
	CreateORMUpdateState(UpdateState *UpdateState)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMEngine(Engine *Engine)
	DeleteORMEvent(Event *Event)
	DeleteORMGongsimCommand(GongsimCommand *GongsimCommand)
	DeleteORMGongsimStatus(GongsimStatus *GongsimStatus)
	DeleteORMUpdateState(UpdateState *UpdateState)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Engines = make(map[*Engine]struct{}, 0)
	stage.Events = make(map[*Event]struct{}, 0)
	stage.GongsimCommands = make(map[*GongsimCommand]struct{}, 0)
	stage.GongsimStatuss = make(map[*GongsimStatus]struct{}, 0)
	stage.UpdateStates = make(map[*UpdateState]struct{}, 0)
}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Engines = nil
	stage.Events = nil
	stage.GongsimCommands = nil
	stage.GongsimStatuss = nil
	stage.UpdateStates = nil
}
