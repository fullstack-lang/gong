// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongsim/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_GongsimStatus sql.NullBool

// GongsimStatusAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongsimstatusAPI
type GongsimStatusAPI struct {
	models.GongsimStatus

	// insertion for fields declaration
	// Declation for basic field gongsimstatusDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field gongsimstatusDB.CurrentCommand {{BasicKind}} (to be completed)
	CurrentCommand_Data sql.NullString

	// Declation for basic field gongsimstatusDB.CompletionDate {{BasicKind}} (to be completed)
	CompletionDate_Data sql.NullString

	// Declation for basic field gongsimstatusDB.CurrentSpeedCommand {{BasicKind}} (to be completed)
	CurrentSpeedCommand_Data sql.NullString

	// Declation for basic field gongsimstatusDB.SpeedCommandCompletionDate {{BasicKind}} (to be completed)
	SpeedCommandCompletionDate_Data sql.NullString

	// end of insertion
}

// GongsimStatusDB describes a gongsimstatus in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model gongsimstatusDB
type GongsimStatusDB struct {
	gorm.Model

	GongsimStatusAPI
}

// GongsimStatusDBs arrays gongsimstatusDBs
// swagger:response gongsimstatusDBsResponse
type GongsimStatusDBs []GongsimStatusDB

// GongsimStatusDBResponse provides response
// swagger:response gongsimstatusDBResponse
type GongsimStatusDBResponse struct {
	GongsimStatusDB
}

type BackRepoGongsimStatusStruct struct {
	// stores GongsimStatusDB according to their gorm ID
	Map_GongsimStatusDBID_GongsimStatusDB *map[uint]*GongsimStatusDB

	// stores GongsimStatusDB ID according to GongsimStatus address
	Map_GongsimStatusPtr_GongsimStatusDBID *map[*models.GongsimStatus]uint

	// stores GongsimStatus according to their gorm ID
	Map_GongsimStatusDBID_GongsimStatusPtr *map[uint]*models.GongsimStatus

	db *gorm.DB
}

// BackRepoGongsimStatus.Init set up the BackRepo of the GongsimStatus
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr != nil {
		err := errors.New("In Init, backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr should be nil")
		return err
	}

	if backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB != nil {
		err := errors.New("In Init, backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB should be nil")
		return err
	}

	if backRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID != nil {
		err := errors.New("In Init, backRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongsimStatus, 0)
	backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr = &tmp

	tmpDB := make(map[uint]*GongsimStatusDB, 0)
	backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB = &tmpDB

	tmpID := make(map[*models.GongsimStatus]uint, 0)
	backRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID = &tmpID

	backRepoGongsimStatus.db = db
	return
}

// BackRepoGongsimStatus.CommitPhaseOne commits all staged instances of GongsimStatus to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongsimstatus := range stage.GongsimStatuss {
		backRepoGongsimStatus.CommitPhaseOneInstance(gongsimstatus)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongsimstatus := range *backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr {
		if _, ok := stage.GongsimStatuss[gongsimstatus]; !ok {
			backRepoGongsimStatus.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongsimStatus.CommitDeleteInstance commits deletion of GongsimStatus to the BackRepo
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CommitDeleteInstance(id uint) (Error error) {

	gongsimstatus := (*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr)[id]

	// gongsimstatus is not staged anymore, remove gongsimstatusDB
	gongsimstatusDB := (*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB)[id]
	query := backRepoGongsimStatus.db.Unscoped().Delete(&gongsimstatusDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID), gongsimstatus)
	delete((*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr), id)
	delete((*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB), id)

	return
}

// BackRepoGongsimStatus.CommitPhaseOneInstance commits gongsimstatus staged instances of GongsimStatus to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CommitPhaseOneInstance(gongsimstatus *models.GongsimStatus) (Error error) {

	// check if the gongsimstatus is not commited yet
	if _, ok := (*backRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID)[gongsimstatus]; ok {
		return
	}

	// initiate gongsimstatus
	var gongsimstatusDB GongsimStatusDB
	gongsimstatusDB.GongsimStatus = *gongsimstatus

	query := backRepoGongsimStatus.db.Create(&gongsimstatusDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID)[gongsimstatus] = gongsimstatusDB.ID
	(*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr)[gongsimstatusDB.ID] = gongsimstatus
	(*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB)[gongsimstatusDB.ID] = &gongsimstatusDB

	return
}

// BackRepoGongsimStatus.CommitPhaseTwo commits all staged instances of GongsimStatus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongsimstatus := range *backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr {
		backRepoGongsimStatus.CommitPhaseTwoInstance(backRepo, idx, gongsimstatus)
	}

	return
}

// BackRepoGongsimStatus.CommitPhaseTwoInstance commits {{structname }} of models.GongsimStatus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongsimstatus *models.GongsimStatus) (Error error) {

	// fetch matching gongsimstatusDB
	if gongsimstatusDB, ok := (*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				gongsimstatusDB.Name_Data.String = gongsimstatus.Name
				gongsimstatusDB.Name_Data.Valid = true

				gongsimstatusDB.CurrentCommand_Data.String = string(gongsimstatus.CurrentCommand)
				gongsimstatusDB.CurrentCommand_Data.Valid = true

				gongsimstatusDB.CompletionDate_Data.String = gongsimstatus.CompletionDate
				gongsimstatusDB.CompletionDate_Data.Valid = true

				gongsimstatusDB.CurrentSpeedCommand_Data.String = string(gongsimstatus.CurrentSpeedCommand)
				gongsimstatusDB.CurrentSpeedCommand_Data.Valid = true

				gongsimstatusDB.SpeedCommandCompletionDate_Data.String = gongsimstatus.SpeedCommandCompletionDate
				gongsimstatusDB.SpeedCommandCompletionDate_Data.Valid = true

			}
		}
		query := backRepoGongsimStatus.db.Save(&gongsimstatusDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongsimStatus intance %s", gongsimstatus.Name))
		return err
	}

	return
}

// BackRepoGongsimStatus.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CheckoutPhaseOne() (Error error) {

	gongsimstatusDBArray := make([]GongsimStatusDB, 0)
	query := backRepoGongsimStatus.db.Find(&gongsimstatusDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, gongsimstatusDB := range gongsimstatusDBArray {
		backRepoGongsimStatus.CheckoutPhaseOneInstance(&gongsimstatusDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongsimstatusDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongsimstatusDB
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CheckoutPhaseOneInstance(gongsimstatusDB *GongsimStatusDB) (Error error) {

	// if absent, create entries in the backRepoGongsimStatus maps.
	gongsimstatusWithNewFieldValues := gongsimstatusDB.GongsimStatus
	if _, ok := (*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr)[gongsimstatusDB.ID]; !ok {

		(*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr)[gongsimstatusDB.ID] = &gongsimstatusWithNewFieldValues
		(*backRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID)[&gongsimstatusWithNewFieldValues] = gongsimstatusDB.ID

		// append model store with the new element
		gongsimstatusWithNewFieldValues.Stage()
	}
	gongsimstatusDBWithNewFieldValues := *gongsimstatusDB
	(*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB)[gongsimstatusDB.ID] = &gongsimstatusDBWithNewFieldValues

	return
}

// BackRepoGongsimStatus.CheckoutPhaseTwo Checkouts all staged instances of GongsimStatus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongsimstatusDB := range *backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusDB {
		backRepoGongsimStatus.CheckoutPhaseTwoInstance(backRepo, gongsimstatusDB)
	}
	return
}

// BackRepoGongsimStatus.CheckoutPhaseTwoInstance Checkouts staged instances of GongsimStatus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongsimStatus *BackRepoGongsimStatusStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongsimstatusDB *GongsimStatusDB) (Error error) {

	gongsimstatus := (*backRepoGongsimStatus.Map_GongsimStatusDBID_GongsimStatusPtr)[gongsimstatusDB.ID]
	_ = gongsimstatus // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			gongsimstatus.Name = gongsimstatusDB.Name_Data.String

			gongsimstatus.CurrentCommand = models.GongsimCommandType(gongsimstatusDB.CurrentCommand_Data.String)

			gongsimstatus.CompletionDate = gongsimstatusDB.CompletionDate_Data.String

			gongsimstatus.CurrentSpeedCommand = models.SpeedCommandType(gongsimstatusDB.CurrentSpeedCommand_Data.String)

			gongsimstatus.SpeedCommandCompletionDate = gongsimstatusDB.SpeedCommandCompletionDate_Data.String

		}
	}
	return
}

// CommitGongsimStatus allows commit of a single gongsimstatus (if already staged)
func (backRepo *BackRepoStruct) CommitGongsimStatus(gongsimstatus *models.GongsimStatus) {
	backRepo.BackRepoGongsimStatus.CommitPhaseOneInstance(gongsimstatus)
	if id, ok := (*backRepo.BackRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID)[gongsimstatus]; ok {
		backRepo.BackRepoGongsimStatus.CommitPhaseTwoInstance(backRepo, id, gongsimstatus)
	}
}

// CommitGongsimStatus allows checkout of a single gongsimstatus (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongsimStatus(gongsimstatus *models.GongsimStatus) {
	// check if the gongsimstatus is staged
	if _, ok := (*backRepo.BackRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID)[gongsimstatus]; ok {

		if id, ok := (*backRepo.BackRepoGongsimStatus.Map_GongsimStatusPtr_GongsimStatusDBID)[gongsimstatus]; ok {
			var gongsimstatusDB GongsimStatusDB
			gongsimstatusDB.ID = id

			if err := backRepo.BackRepoGongsimStatus.db.First(&gongsimstatusDB, id).Error; err != nil {
				log.Panicln("CheckoutGongsimStatus : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongsimStatus.CheckoutPhaseOneInstance(&gongsimstatusDB)
			backRepo.BackRepoGongsimStatus.CheckoutPhaseTwoInstance(backRepo, &gongsimstatusDB)
		}
	}
}
