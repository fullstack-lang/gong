// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongsim/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_GongsimCommand sql.NullBool

// GongsimCommandAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongsimcommandAPI
type GongsimCommandAPI struct {
	models.GongsimCommand

	// insertion for fields declaration
	// Declation for basic field gongsimcommandDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field gongsimcommandDB.Command {{BasicKind}} (to be completed)
	Command_Data sql.NullString

	// Declation for basic field gongsimcommandDB.CommandDate {{BasicKind}} (to be completed)
	CommandDate_Data sql.NullString

	// Declation for basic field gongsimcommandDB.SpeedCommandType {{BasicKind}} (to be completed)
	SpeedCommandType_Data sql.NullString

	// Declation for basic field gongsimcommandDB.DateSpeedCommand {{BasicKind}} (to be completed)
	DateSpeedCommand_Data sql.NullString

	// end of insertion
}

// GongsimCommandDB describes a gongsimcommand in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model gongsimcommandDB
type GongsimCommandDB struct {
	gorm.Model

	GongsimCommandAPI
}

// GongsimCommandDBs arrays gongsimcommandDBs
// swagger:response gongsimcommandDBsResponse
type GongsimCommandDBs []GongsimCommandDB

// GongsimCommandDBResponse provides response
// swagger:response gongsimcommandDBResponse
type GongsimCommandDBResponse struct {
	GongsimCommandDB
}

type BackRepoGongsimCommandStruct struct {
	// stores GongsimCommandDB according to their gorm ID
	Map_GongsimCommandDBID_GongsimCommandDB *map[uint]*GongsimCommandDB

	// stores GongsimCommandDB ID according to GongsimCommand address
	Map_GongsimCommandPtr_GongsimCommandDBID *map[*models.GongsimCommand]uint

	// stores GongsimCommand according to their gorm ID
	Map_GongsimCommandDBID_GongsimCommandPtr *map[uint]*models.GongsimCommand

	db *gorm.DB
}

// BackRepoGongsimCommand.Init set up the BackRepo of the GongsimCommand
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr != nil {
		err := errors.New("In Init, backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr should be nil")
		return err
	}

	if backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB != nil {
		err := errors.New("In Init, backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB should be nil")
		return err
	}

	if backRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID != nil {
		err := errors.New("In Init, backRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongsimCommand, 0)
	backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr = &tmp

	tmpDB := make(map[uint]*GongsimCommandDB, 0)
	backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB = &tmpDB

	tmpID := make(map[*models.GongsimCommand]uint, 0)
	backRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID = &tmpID

	backRepoGongsimCommand.db = db
	return
}

// BackRepoGongsimCommand.CommitPhaseOne commits all staged instances of GongsimCommand to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongsimcommand := range stage.GongsimCommands {
		backRepoGongsimCommand.CommitPhaseOneInstance(gongsimcommand)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongsimcommand := range *backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr {
		if _, ok := stage.GongsimCommands[gongsimcommand]; !ok {
			backRepoGongsimCommand.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongsimCommand.CommitDeleteInstance commits deletion of GongsimCommand to the BackRepo
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CommitDeleteInstance(id uint) (Error error) {

	gongsimcommand := (*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr)[id]

	// gongsimcommand is not staged anymore, remove gongsimcommandDB
	gongsimcommandDB := (*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB)[id]
	query := backRepoGongsimCommand.db.Unscoped().Delete(&gongsimcommandDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID), gongsimcommand)
	delete((*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr), id)
	delete((*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB), id)

	return
}

// BackRepoGongsimCommand.CommitPhaseOneInstance commits gongsimcommand staged instances of GongsimCommand to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CommitPhaseOneInstance(gongsimcommand *models.GongsimCommand) (Error error) {

	// check if the gongsimcommand is not commited yet
	if _, ok := (*backRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID)[gongsimcommand]; ok {
		return
	}

	// initiate gongsimcommand
	var gongsimcommandDB GongsimCommandDB
	gongsimcommandDB.GongsimCommand = *gongsimcommand

	query := backRepoGongsimCommand.db.Create(&gongsimcommandDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID)[gongsimcommand] = gongsimcommandDB.ID
	(*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr)[gongsimcommandDB.ID] = gongsimcommand
	(*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB)[gongsimcommandDB.ID] = &gongsimcommandDB

	return
}

// BackRepoGongsimCommand.CommitPhaseTwo commits all staged instances of GongsimCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongsimcommand := range *backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr {
		backRepoGongsimCommand.CommitPhaseTwoInstance(backRepo, idx, gongsimcommand)
	}

	return
}

// BackRepoGongsimCommand.CommitPhaseTwoInstance commits {{structname }} of models.GongsimCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongsimcommand *models.GongsimCommand) (Error error) {

	// fetch matching gongsimcommandDB
	if gongsimcommandDB, ok := (*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				gongsimcommandDB.Name_Data.String = gongsimcommand.Name
				gongsimcommandDB.Name_Data.Valid = true

				gongsimcommandDB.Command_Data.String = string(gongsimcommand.Command)
				gongsimcommandDB.Command_Data.Valid = true

				gongsimcommandDB.CommandDate_Data.String = gongsimcommand.CommandDate
				gongsimcommandDB.CommandDate_Data.Valid = true

				gongsimcommandDB.SpeedCommandType_Data.String = string(gongsimcommand.SpeedCommandType)
				gongsimcommandDB.SpeedCommandType_Data.Valid = true

				gongsimcommandDB.DateSpeedCommand_Data.String = gongsimcommand.DateSpeedCommand
				gongsimcommandDB.DateSpeedCommand_Data.Valid = true

			}
		}
		query := backRepoGongsimCommand.db.Save(&gongsimcommandDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongsimCommand intance %s", gongsimcommand.Name))
		return err
	}

	return
}

// BackRepoGongsimCommand.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CheckoutPhaseOne() (Error error) {

	gongsimcommandDBArray := make([]GongsimCommandDB, 0)
	query := backRepoGongsimCommand.db.Find(&gongsimcommandDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, gongsimcommandDB := range gongsimcommandDBArray {
		backRepoGongsimCommand.CheckoutPhaseOneInstance(&gongsimcommandDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongsimcommandDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongsimcommandDB
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CheckoutPhaseOneInstance(gongsimcommandDB *GongsimCommandDB) (Error error) {

	// if absent, create entries in the backRepoGongsimCommand maps.
	gongsimcommandWithNewFieldValues := gongsimcommandDB.GongsimCommand
	if _, ok := (*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr)[gongsimcommandDB.ID]; !ok {

		(*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr)[gongsimcommandDB.ID] = &gongsimcommandWithNewFieldValues
		(*backRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID)[&gongsimcommandWithNewFieldValues] = gongsimcommandDB.ID

		// append model store with the new element
		gongsimcommandWithNewFieldValues.Stage()
	}
	gongsimcommandDBWithNewFieldValues := *gongsimcommandDB
	(*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB)[gongsimcommandDB.ID] = &gongsimcommandDBWithNewFieldValues

	return
}

// BackRepoGongsimCommand.CheckoutPhaseTwo Checkouts all staged instances of GongsimCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongsimcommandDB := range *backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandDB {
		backRepoGongsimCommand.CheckoutPhaseTwoInstance(backRepo, gongsimcommandDB)
	}
	return
}

// BackRepoGongsimCommand.CheckoutPhaseTwoInstance Checkouts staged instances of GongsimCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongsimCommand *BackRepoGongsimCommandStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongsimcommandDB *GongsimCommandDB) (Error error) {

	gongsimcommand := (*backRepoGongsimCommand.Map_GongsimCommandDBID_GongsimCommandPtr)[gongsimcommandDB.ID]
	_ = gongsimcommand // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			gongsimcommand.Name = gongsimcommandDB.Name_Data.String

			gongsimcommand.Command = models.GongsimCommandType(gongsimcommandDB.Command_Data.String)

			gongsimcommand.CommandDate = gongsimcommandDB.CommandDate_Data.String

			gongsimcommand.SpeedCommandType = models.SpeedCommandType(gongsimcommandDB.SpeedCommandType_Data.String)

			gongsimcommand.DateSpeedCommand = gongsimcommandDB.DateSpeedCommand_Data.String

		}
	}
	return
}

// CommitGongsimCommand allows commit of a single gongsimcommand (if already staged)
func (backRepo *BackRepoStruct) CommitGongsimCommand(gongsimcommand *models.GongsimCommand) {
	backRepo.BackRepoGongsimCommand.CommitPhaseOneInstance(gongsimcommand)
	if id, ok := (*backRepo.BackRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID)[gongsimcommand]; ok {
		backRepo.BackRepoGongsimCommand.CommitPhaseTwoInstance(backRepo, id, gongsimcommand)
	}
}

// CommitGongsimCommand allows checkout of a single gongsimcommand (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongsimCommand(gongsimcommand *models.GongsimCommand) {
	// check if the gongsimcommand is staged
	if _, ok := (*backRepo.BackRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID)[gongsimcommand]; ok {

		if id, ok := (*backRepo.BackRepoGongsimCommand.Map_GongsimCommandPtr_GongsimCommandDBID)[gongsimcommand]; ok {
			var gongsimcommandDB GongsimCommandDB
			gongsimcommandDB.ID = id

			if err := backRepo.BackRepoGongsimCommand.db.First(&gongsimcommandDB, id).Error; err != nil {
				log.Panicln("CheckoutGongsimCommand : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongsimCommand.CheckoutPhaseOneInstance(&gongsimcommandDB)
			backRepo.BackRepoGongsimCommand.CheckoutPhaseTwoInstance(backRepo, &gongsimcommandDB)
		}
	}
}
