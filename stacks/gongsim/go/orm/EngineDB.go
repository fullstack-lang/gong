// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongsim/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Engine sql.NullBool

// EngineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model engineAPI
type EngineAPI struct {
	models.Engine

	// insertion for fields declaration
	// Declation for basic field engineDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field engineDB.EndTime {{BasicKind}} (to be completed)
	EndTime_Data sql.NullString

	// Declation for basic field engineDB.CurrentTime {{BasicKind}} (to be completed)
	CurrentTime_Data sql.NullString

	// Declation for basic field engineDB.SecondsSinceStart {{BasicKind}} (to be completed)
	SecondsSinceStart_Data sql.NullFloat64

	// Declation for basic field engineDB.Fired {{BasicKind}} (to be completed)
	Fired_Data sql.NullInt64

	// Declation for basic field engineDB.ControlMode {{BasicKind}} (to be completed)
	ControlMode_Data sql.NullString

	// Declation for basic field engineDB.State {{BasicKind}} (to be completed)
	State_Data sql.NullString

	// Declation for basic field engineDB.Speed {{BasicKind}} (to be completed)
	Speed_Data sql.NullFloat64

	// end of insertion
}

// EngineDB describes a engine in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model engineDB
type EngineDB struct {
	gorm.Model

	EngineAPI
}

// EngineDBs arrays engineDBs
// swagger:response engineDBsResponse
type EngineDBs []EngineDB

// EngineDBResponse provides response
// swagger:response engineDBResponse
type EngineDBResponse struct {
	EngineDB
}

type BackRepoEngineStruct struct {
	// stores EngineDB according to their gorm ID
	Map_EngineDBID_EngineDB *map[uint]*EngineDB

	// stores EngineDB ID according to Engine address
	Map_EnginePtr_EngineDBID *map[*models.Engine]uint

	// stores Engine according to their gorm ID
	Map_EngineDBID_EnginePtr *map[uint]*models.Engine

	db *gorm.DB
}

// BackRepoEngine.Init set up the BackRepo of the Engine
func (backRepoEngine *BackRepoEngineStruct) Init(db *gorm.DB) (Error error) {

	if backRepoEngine.Map_EngineDBID_EnginePtr != nil {
		err := errors.New("In Init, backRepoEngine.Map_EngineDBID_EnginePtr should be nil")
		return err
	}

	if backRepoEngine.Map_EngineDBID_EngineDB != nil {
		err := errors.New("In Init, backRepoEngine.Map_EngineDBID_EngineDB should be nil")
		return err
	}

	if backRepoEngine.Map_EnginePtr_EngineDBID != nil {
		err := errors.New("In Init, backRepoEngine.Map_EnginePtr_EngineDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Engine, 0)
	backRepoEngine.Map_EngineDBID_EnginePtr = &tmp

	tmpDB := make(map[uint]*EngineDB, 0)
	backRepoEngine.Map_EngineDBID_EngineDB = &tmpDB

	tmpID := make(map[*models.Engine]uint, 0)
	backRepoEngine.Map_EnginePtr_EngineDBID = &tmpID

	backRepoEngine.db = db
	return
}

// BackRepoEngine.CommitPhaseOne commits all staged instances of Engine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEngine *BackRepoEngineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for engine := range stage.Engines {
		backRepoEngine.CommitPhaseOneInstance(engine)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, engine := range *backRepoEngine.Map_EngineDBID_EnginePtr {
		if _, ok := stage.Engines[engine]; !ok {
			backRepoEngine.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEngine.CommitDeleteInstance commits deletion of Engine to the BackRepo
func (backRepoEngine *BackRepoEngineStruct) CommitDeleteInstance(id uint) (Error error) {

	engine := (*backRepoEngine.Map_EngineDBID_EnginePtr)[id]

	// engine is not staged anymore, remove engineDB
	engineDB := (*backRepoEngine.Map_EngineDBID_EngineDB)[id]
	query := backRepoEngine.db.Unscoped().Delete(&engineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoEngine.Map_EnginePtr_EngineDBID), engine)
	delete((*backRepoEngine.Map_EngineDBID_EnginePtr), id)
	delete((*backRepoEngine.Map_EngineDBID_EngineDB), id)

	return
}

// BackRepoEngine.CommitPhaseOneInstance commits engine staged instances of Engine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEngine *BackRepoEngineStruct) CommitPhaseOneInstance(engine *models.Engine) (Error error) {

	// check if the engine is not commited yet
	if _, ok := (*backRepoEngine.Map_EnginePtr_EngineDBID)[engine]; ok {
		return
	}

	// initiate engine
	var engineDB EngineDB
	engineDB.Engine = *engine

	query := backRepoEngine.db.Create(&engineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoEngine.Map_EnginePtr_EngineDBID)[engine] = engineDB.ID
	(*backRepoEngine.Map_EngineDBID_EnginePtr)[engineDB.ID] = engine
	(*backRepoEngine.Map_EngineDBID_EngineDB)[engineDB.ID] = &engineDB

	return
}

// BackRepoEngine.CommitPhaseTwo commits all staged instances of Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, engine := range *backRepoEngine.Map_EngineDBID_EnginePtr {
		backRepoEngine.CommitPhaseTwoInstance(backRepo, idx, engine)
	}

	return
}

// BackRepoEngine.CommitPhaseTwoInstance commits {{structname }} of models.Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, engine *models.Engine) (Error error) {

	// fetch matching engineDB
	if engineDB, ok := (*backRepoEngine.Map_EngineDBID_EngineDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				engineDB.Name_Data.String = engine.Name
				engineDB.Name_Data.Valid = true

				engineDB.EndTime_Data.String = engine.EndTime
				engineDB.EndTime_Data.Valid = true

				engineDB.CurrentTime_Data.String = engine.CurrentTime
				engineDB.CurrentTime_Data.Valid = true

				engineDB.SecondsSinceStart_Data.Float64 = engine.SecondsSinceStart
				engineDB.SecondsSinceStart_Data.Valid = true

				engineDB.Fired_Data.Int64 = int64(engine.Fired)
				engineDB.Fired_Data.Valid = true

				engineDB.ControlMode_Data.String = string(engine.ControlMode)
				engineDB.ControlMode_Data.Valid = true

				engineDB.State_Data.String = string(engine.State)
				engineDB.State_Data.Valid = true

				engineDB.Speed_Data.Float64 = engine.Speed
				engineDB.Speed_Data.Valid = true

			}
		}
		query := backRepoEngine.db.Save(&engineDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Engine intance %s", engine.Name))
		return err
	}

	return
}

// BackRepoEngine.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoEngine *BackRepoEngineStruct) CheckoutPhaseOne() (Error error) {

	engineDBArray := make([]EngineDB, 0)
	query := backRepoEngine.db.Find(&engineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, engineDB := range engineDBArray {
		backRepoEngine.CheckoutPhaseOneInstance(&engineDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a engineDB that has been found in the DB, updates the backRepo and stages the
// models version of the engineDB
func (backRepoEngine *BackRepoEngineStruct) CheckoutPhaseOneInstance(engineDB *EngineDB) (Error error) {

	// if absent, create entries in the backRepoEngine maps.
	engineWithNewFieldValues := engineDB.Engine
	if _, ok := (*backRepoEngine.Map_EngineDBID_EnginePtr)[engineDB.ID]; !ok {

		(*backRepoEngine.Map_EngineDBID_EnginePtr)[engineDB.ID] = &engineWithNewFieldValues
		(*backRepoEngine.Map_EnginePtr_EngineDBID)[&engineWithNewFieldValues] = engineDB.ID

		// append model store with the new element
		engineWithNewFieldValues.Stage()
	}
	engineDBWithNewFieldValues := *engineDB
	(*backRepoEngine.Map_EngineDBID_EngineDB)[engineDB.ID] = &engineDBWithNewFieldValues

	return
}

// BackRepoEngine.CheckoutPhaseTwo Checkouts all staged instances of Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, engineDB := range *backRepoEngine.Map_EngineDBID_EngineDB {
		backRepoEngine.CheckoutPhaseTwoInstance(backRepo, engineDB)
	}
	return
}

// BackRepoEngine.CheckoutPhaseTwoInstance Checkouts staged instances of Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, engineDB *EngineDB) (Error error) {

	engine := (*backRepoEngine.Map_EngineDBID_EnginePtr)[engineDB.ID]
	_ = engine // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			engine.Name = engineDB.Name_Data.String

			engine.EndTime = engineDB.EndTime_Data.String

			engine.CurrentTime = engineDB.CurrentTime_Data.String

			engine.SecondsSinceStart = engineDB.SecondsSinceStart_Data.Float64

			engine.Fired = int(engineDB.Fired_Data.Int64)

			engine.ControlMode = models.ControlMode(engineDB.ControlMode_Data.String)

			engine.State = models.EngineState(engineDB.State_Data.String)

			engine.Speed = engineDB.Speed_Data.Float64

		}
	}
	return
}

// CommitEngine allows commit of a single engine (if already staged)
func (backRepo *BackRepoStruct) CommitEngine(engine *models.Engine) {
	backRepo.BackRepoEngine.CommitPhaseOneInstance(engine)
	if id, ok := (*backRepo.BackRepoEngine.Map_EnginePtr_EngineDBID)[engine]; ok {
		backRepo.BackRepoEngine.CommitPhaseTwoInstance(backRepo, id, engine)
	}
}

// CommitEngine allows checkout of a single engine (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEngine(engine *models.Engine) {
	// check if the engine is staged
	if _, ok := (*backRepo.BackRepoEngine.Map_EnginePtr_EngineDBID)[engine]; ok {

		if id, ok := (*backRepo.BackRepoEngine.Map_EnginePtr_EngineDBID)[engine]; ok {
			var engineDB EngineDB
			engineDB.ID = id

			if err := backRepo.BackRepoEngine.db.First(&engineDB, id).Error; err != nil {
				log.Panicln("CheckoutEngine : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEngine.CheckoutPhaseOneInstance(&engineDB)
			backRepo.BackRepoEngine.CheckoutPhaseTwoInstance(backRepo, &engineDB)
		}
	}
}
