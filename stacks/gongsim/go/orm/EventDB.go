// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongsim/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Event sql.NullBool

// EventAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model eventAPI
type EventAPI struct {
	models.Event

	// insertion for fields declaration
	// Declation for basic field eventDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// EventDB describes a event in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model eventDB
type EventDB struct {
	gorm.Model

	EventAPI
}

// EventDBs arrays eventDBs
// swagger:response eventDBsResponse
type EventDBs []EventDB

// EventDBResponse provides response
// swagger:response eventDBResponse
type EventDBResponse struct {
	EventDB
}

type BackRepoEventStruct struct {
	// stores EventDB according to their gorm ID
	Map_EventDBID_EventDB *map[uint]*EventDB

	// stores EventDB ID according to Event address
	Map_EventPtr_EventDBID *map[*models.Event]uint

	// stores Event according to their gorm ID
	Map_EventDBID_EventPtr *map[uint]*models.Event

	db *gorm.DB
}

// BackRepoEvent.Init set up the BackRepo of the Event
func (backRepoEvent *BackRepoEventStruct) Init(db *gorm.DB) (Error error) {

	if backRepoEvent.Map_EventDBID_EventPtr != nil {
		err := errors.New("In Init, backRepoEvent.Map_EventDBID_EventPtr should be nil")
		return err
	}

	if backRepoEvent.Map_EventDBID_EventDB != nil {
		err := errors.New("In Init, backRepoEvent.Map_EventDBID_EventDB should be nil")
		return err
	}

	if backRepoEvent.Map_EventPtr_EventDBID != nil {
		err := errors.New("In Init, backRepoEvent.Map_EventPtr_EventDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Event, 0)
	backRepoEvent.Map_EventDBID_EventPtr = &tmp

	tmpDB := make(map[uint]*EventDB, 0)
	backRepoEvent.Map_EventDBID_EventDB = &tmpDB

	tmpID := make(map[*models.Event]uint, 0)
	backRepoEvent.Map_EventPtr_EventDBID = &tmpID

	backRepoEvent.db = db
	return
}

// BackRepoEvent.CommitPhaseOne commits all staged instances of Event to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEvent *BackRepoEventStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for event := range stage.Events {
		backRepoEvent.CommitPhaseOneInstance(event)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, event := range *backRepoEvent.Map_EventDBID_EventPtr {
		if _, ok := stage.Events[event]; !ok {
			backRepoEvent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEvent.CommitDeleteInstance commits deletion of Event to the BackRepo
func (backRepoEvent *BackRepoEventStruct) CommitDeleteInstance(id uint) (Error error) {

	event := (*backRepoEvent.Map_EventDBID_EventPtr)[id]

	// event is not staged anymore, remove eventDB
	eventDB := (*backRepoEvent.Map_EventDBID_EventDB)[id]
	query := backRepoEvent.db.Unscoped().Delete(&eventDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoEvent.Map_EventPtr_EventDBID), event)
	delete((*backRepoEvent.Map_EventDBID_EventPtr), id)
	delete((*backRepoEvent.Map_EventDBID_EventDB), id)

	return
}

// BackRepoEvent.CommitPhaseOneInstance commits event staged instances of Event to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEvent *BackRepoEventStruct) CommitPhaseOneInstance(event *models.Event) (Error error) {

	// check if the event is not commited yet
	if _, ok := (*backRepoEvent.Map_EventPtr_EventDBID)[event]; ok {
		return
	}

	// initiate event
	var eventDB EventDB
	eventDB.Event = *event

	query := backRepoEvent.db.Create(&eventDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoEvent.Map_EventPtr_EventDBID)[event] = eventDB.ID
	(*backRepoEvent.Map_EventDBID_EventPtr)[eventDB.ID] = event
	(*backRepoEvent.Map_EventDBID_EventDB)[eventDB.ID] = &eventDB

	return
}

// BackRepoEvent.CommitPhaseTwo commits all staged instances of Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, event := range *backRepoEvent.Map_EventDBID_EventPtr {
		backRepoEvent.CommitPhaseTwoInstance(backRepo, idx, event)
	}

	return
}

// BackRepoEvent.CommitPhaseTwoInstance commits {{structname }} of models.Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, event *models.Event) (Error error) {

	// fetch matching eventDB
	if eventDB, ok := (*backRepoEvent.Map_EventDBID_EventDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				eventDB.Name_Data.String = event.Name
				eventDB.Name_Data.Valid = true

			}
		}
		query := backRepoEvent.db.Save(&eventDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Event intance %s", event.Name))
		return err
	}

	return
}

// BackRepoEvent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoEvent *BackRepoEventStruct) CheckoutPhaseOne() (Error error) {

	eventDBArray := make([]EventDB, 0)
	query := backRepoEvent.db.Find(&eventDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, eventDB := range eventDBArray {
		backRepoEvent.CheckoutPhaseOneInstance(&eventDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a eventDB that has been found in the DB, updates the backRepo and stages the
// models version of the eventDB
func (backRepoEvent *BackRepoEventStruct) CheckoutPhaseOneInstance(eventDB *EventDB) (Error error) {

	// if absent, create entries in the backRepoEvent maps.
	eventWithNewFieldValues := eventDB.Event
	if _, ok := (*backRepoEvent.Map_EventDBID_EventPtr)[eventDB.ID]; !ok {

		(*backRepoEvent.Map_EventDBID_EventPtr)[eventDB.ID] = &eventWithNewFieldValues
		(*backRepoEvent.Map_EventPtr_EventDBID)[&eventWithNewFieldValues] = eventDB.ID

		// append model store with the new element
		eventWithNewFieldValues.Stage()
	}
	eventDBWithNewFieldValues := *eventDB
	(*backRepoEvent.Map_EventDBID_EventDB)[eventDB.ID] = &eventDBWithNewFieldValues

	return
}

// BackRepoEvent.CheckoutPhaseTwo Checkouts all staged instances of Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, eventDB := range *backRepoEvent.Map_EventDBID_EventDB {
		backRepoEvent.CheckoutPhaseTwoInstance(backRepo, eventDB)
	}
	return
}

// BackRepoEvent.CheckoutPhaseTwoInstance Checkouts staged instances of Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, eventDB *EventDB) (Error error) {

	event := (*backRepoEvent.Map_EventDBID_EventPtr)[eventDB.ID]
	_ = event // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			event.Name = eventDB.Name_Data.String

		}
	}
	return
}

// CommitEvent allows commit of a single event (if already staged)
func (backRepo *BackRepoStruct) CommitEvent(event *models.Event) {
	backRepo.BackRepoEvent.CommitPhaseOneInstance(event)
	if id, ok := (*backRepo.BackRepoEvent.Map_EventPtr_EventDBID)[event]; ok {
		backRepo.BackRepoEvent.CommitPhaseTwoInstance(backRepo, id, event)
	}
}

// CommitEvent allows checkout of a single event (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEvent(event *models.Event) {
	// check if the event is staged
	if _, ok := (*backRepo.BackRepoEvent.Map_EventPtr_EventDBID)[event]; ok {

		if id, ok := (*backRepo.BackRepoEvent.Map_EventPtr_EventDBID)[event]; ok {
			var eventDB EventDB
			eventDB.ID = id

			if err := backRepo.BackRepoEvent.db.First(&eventDB, id).Error; err != nil {
				log.Panicln("CheckoutEvent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEvent.CheckoutPhaseOneInstance(&eventDB)
			backRepo.BackRepoEvent.CheckoutPhaseTwoInstance(backRepo, &eventDB)
		}
	}
}
