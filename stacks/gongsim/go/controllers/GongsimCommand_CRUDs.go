// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongsim/go/models"
	"github.com/fullstack-lang/gong/stacks/gongsim/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __GongsimCommand__dummysDeclaration__ models.GongsimCommand

// An GongsimCommandID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongsimCommand updateGongsimCommand deleteGongsimCommand
type GongsimCommandID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongsimCommandInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongsimCommand updateGongsimCommand
type GongsimCommandInput struct {
	// The GongsimCommand to submit or modify
	// in: body
	GongsimCommand *orm.GongsimCommandAPI
}

// GetGongsimCommands
//
// swagger:route GET /gongsimcommands gongsimcommands getGongsimCommands
//
// Get all gongsimcommands
//
// Responses:
//    default: genericError
//        200: gongsimcommandDBsResponse
func GetGongsimCommands(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gongsimcommands []orm.GongsimCommandDB
	query := db.Find(&gongsimcommands)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gongsimcommand, update fields from the database nullable fields
	for idx := range gongsimcommands {
		gongsimcommand := &gongsimcommands[idx]
		_ = gongsimcommand
		// insertion point for updating fields
		if gongsimcommand.Name_Data.Valid {
			gongsimcommand.Name = gongsimcommand.Name_Data.String
		}

		if gongsimcommand.Command_Data.Valid {
			gongsimcommand.Command = models.GongsimCommandType(gongsimcommand.Command_Data.String)
		}

		if gongsimcommand.CommandDate_Data.Valid {
			gongsimcommand.CommandDate = gongsimcommand.CommandDate_Data.String
		}

		if gongsimcommand.SpeedCommandType_Data.Valid {
			gongsimcommand.SpeedCommandType = models.SpeedCommandType(gongsimcommand.SpeedCommandType_Data.String)
		}

		if gongsimcommand.DateSpeedCommand_Data.Valid {
			gongsimcommand.DateSpeedCommand = gongsimcommand.DateSpeedCommand_Data.String
		}

	}

	c.JSON(http.StatusOK, gongsimcommands)
}

// PostGongsimCommand
//
// swagger:route POST /gongsimcommands gongsimcommands postGongsimCommand
//
// Creates a gongsimcommand
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongsimcommandDBResponse
func PostGongsimCommand(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GongsimCommandAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongsimcommand
	gongsimcommandDB := orm.GongsimCommandDB{}
	gongsimcommandDB.GongsimCommandAPI = input
	// insertion point for nullable field set
	gongsimcommandDB.Name_Data.String = input.Name
	gongsimcommandDB.Name_Data.Valid = true

	gongsimcommandDB.Command_Data.String = string(input.Command)
	gongsimcommandDB.Command_Data.Valid = true

	gongsimcommandDB.CommandDate_Data.String = input.CommandDate
	gongsimcommandDB.CommandDate_Data.Valid = true

	gongsimcommandDB.SpeedCommandType_Data.String = string(input.SpeedCommandType)
	gongsimcommandDB.SpeedCommandType_Data.Valid = true

	gongsimcommandDB.DateSpeedCommand_Data.String = input.DateSpeedCommand
	gongsimcommandDB.DateSpeedCommand_Data.Valid = true

	query := db.Create(&gongsimcommandDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gongsimcommandDB)
}

// GetGongsimCommand
//
// swagger:route GET /gongsimcommands/{ID} gongsimcommands getGongsimCommand
//
// Gets the details for a gongsimcommand.
//
// Responses:
//    default: genericError
//        200: gongsimcommandDBResponse
func GetGongsimCommand(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gongsimcommand in DB
	var gongsimcommand orm.GongsimCommandDB
	if err := db.First(&gongsimcommand, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gongsimcommand.Name_Data.Valid {
		gongsimcommand.Name = gongsimcommand.Name_Data.String
	}

	if gongsimcommand.Command_Data.Valid {
		gongsimcommand.Command = models.GongsimCommandType(gongsimcommand.Command_Data.String)
	}

	if gongsimcommand.CommandDate_Data.Valid {
		gongsimcommand.CommandDate = gongsimcommand.CommandDate_Data.String
	}

	if gongsimcommand.SpeedCommandType_Data.Valid {
		gongsimcommand.SpeedCommandType = models.SpeedCommandType(gongsimcommand.SpeedCommandType_Data.String)
	}

	if gongsimcommand.DateSpeedCommand_Data.Valid {
		gongsimcommand.DateSpeedCommand = gongsimcommand.DateSpeedCommand_Data.String
	}

	c.JSON(http.StatusOK, gongsimcommand)
}

// UpdateGongsimCommand
//
// swagger:route PATCH /gongsimcommands/{ID} gongsimcommands updateGongsimCommand
//
// Update a gongsimcommand
//
// Responses:
//    default: genericError
//        200: gongsimcommandDBResponse
func UpdateGongsimCommand(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongsimcommandDB orm.GongsimCommandDB

	// fetch the gongsimcommand
	query := db.First(&gongsimcommandDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongsimCommandAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Command_Data.String = string(input.Command)
	input.Command_Data.Valid = true

	input.CommandDate_Data.String = input.CommandDate
	input.CommandDate_Data.Valid = true

	input.SpeedCommandType_Data.String = string(input.SpeedCommandType)
	input.SpeedCommandType_Data.Valid = true

	input.DateSpeedCommand_Data.String = input.DateSpeedCommand
	input.DateSpeedCommand_Data.Valid = true

	query = db.Model(&gongsimcommandDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the gongsimcommandDB
	c.JSON(http.StatusOK, gongsimcommandDB)
}

// DeleteGongsimCommand
//
// swagger:route DELETE /gongsimcommands/{ID} gongsimcommands deleteGongsimCommand
//
// Delete a gongsimcommand
//
// Responses:
//    default: genericError
func DeleteGongsimCommand(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongsimcommandDB orm.GongsimCommandDB
	if err := db.First(&gongsimcommandDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongsimcommandDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
