// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongsim/go/models"
	"github.com/fullstack-lang/gong/stacks/gongsim/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __GongsimStatus__dummysDeclaration__ models.GongsimStatus

// An GongsimStatusID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongsimStatus updateGongsimStatus deleteGongsimStatus
type GongsimStatusID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongsimStatusInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongsimStatus updateGongsimStatus
type GongsimStatusInput struct {
	// The GongsimStatus to submit or modify
	// in: body
	GongsimStatus *orm.GongsimStatusAPI
}

// GetGongsimStatuss
//
// swagger:route GET /gongsimstatuss gongsimstatuss getGongsimStatuss
//
// Get all gongsimstatuss
//
// Responses:
//    default: genericError
//        200: gongsimstatusDBsResponse
func GetGongsimStatuss(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gongsimstatuss []orm.GongsimStatusDB
	query := db.Find(&gongsimstatuss)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gongsimstatus, update fields from the database nullable fields
	for idx := range gongsimstatuss {
		gongsimstatus := &gongsimstatuss[idx]
		_ = gongsimstatus
		// insertion point for updating fields
		if gongsimstatus.Name_Data.Valid {
			gongsimstatus.Name = gongsimstatus.Name_Data.String
		}

		if gongsimstatus.CurrentCommand_Data.Valid {
			gongsimstatus.CurrentCommand = models.GongsimCommandType(gongsimstatus.CurrentCommand_Data.String)
		}

		if gongsimstatus.CompletionDate_Data.Valid {
			gongsimstatus.CompletionDate = gongsimstatus.CompletionDate_Data.String
		}

		if gongsimstatus.CurrentSpeedCommand_Data.Valid {
			gongsimstatus.CurrentSpeedCommand = models.SpeedCommandType(gongsimstatus.CurrentSpeedCommand_Data.String)
		}

		if gongsimstatus.SpeedCommandCompletionDate_Data.Valid {
			gongsimstatus.SpeedCommandCompletionDate = gongsimstatus.SpeedCommandCompletionDate_Data.String
		}

	}

	c.JSON(http.StatusOK, gongsimstatuss)
}

// PostGongsimStatus
//
// swagger:route POST /gongsimstatuss gongsimstatuss postGongsimStatus
//
// Creates a gongsimstatus
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongsimstatusDBResponse
func PostGongsimStatus(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GongsimStatusAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongsimstatus
	gongsimstatusDB := orm.GongsimStatusDB{}
	gongsimstatusDB.GongsimStatusAPI = input
	// insertion point for nullable field set
	gongsimstatusDB.Name_Data.String = input.Name
	gongsimstatusDB.Name_Data.Valid = true

	gongsimstatusDB.CurrentCommand_Data.String = string(input.CurrentCommand)
	gongsimstatusDB.CurrentCommand_Data.Valid = true

	gongsimstatusDB.CompletionDate_Data.String = input.CompletionDate
	gongsimstatusDB.CompletionDate_Data.Valid = true

	gongsimstatusDB.CurrentSpeedCommand_Data.String = string(input.CurrentSpeedCommand)
	gongsimstatusDB.CurrentSpeedCommand_Data.Valid = true

	gongsimstatusDB.SpeedCommandCompletionDate_Data.String = input.SpeedCommandCompletionDate
	gongsimstatusDB.SpeedCommandCompletionDate_Data.Valid = true

	query := db.Create(&gongsimstatusDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gongsimstatusDB)
}

// GetGongsimStatus
//
// swagger:route GET /gongsimstatuss/{ID} gongsimstatuss getGongsimStatus
//
// Gets the details for a gongsimstatus.
//
// Responses:
//    default: genericError
//        200: gongsimstatusDBResponse
func GetGongsimStatus(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gongsimstatus in DB
	var gongsimstatus orm.GongsimStatusDB
	if err := db.First(&gongsimstatus, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gongsimstatus.Name_Data.Valid {
		gongsimstatus.Name = gongsimstatus.Name_Data.String
	}

	if gongsimstatus.CurrentCommand_Data.Valid {
		gongsimstatus.CurrentCommand = models.GongsimCommandType(gongsimstatus.CurrentCommand_Data.String)
	}

	if gongsimstatus.CompletionDate_Data.Valid {
		gongsimstatus.CompletionDate = gongsimstatus.CompletionDate_Data.String
	}

	if gongsimstatus.CurrentSpeedCommand_Data.Valid {
		gongsimstatus.CurrentSpeedCommand = models.SpeedCommandType(gongsimstatus.CurrentSpeedCommand_Data.String)
	}

	if gongsimstatus.SpeedCommandCompletionDate_Data.Valid {
		gongsimstatus.SpeedCommandCompletionDate = gongsimstatus.SpeedCommandCompletionDate_Data.String
	}

	c.JSON(http.StatusOK, gongsimstatus)
}

// UpdateGongsimStatus
//
// swagger:route PATCH /gongsimstatuss/{ID} gongsimstatuss updateGongsimStatus
//
// Update a gongsimstatus
//
// Responses:
//    default: genericError
//        200: gongsimstatusDBResponse
func UpdateGongsimStatus(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongsimstatusDB orm.GongsimStatusDB

	// fetch the gongsimstatus
	query := db.First(&gongsimstatusDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongsimStatusAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.CurrentCommand_Data.String = string(input.CurrentCommand)
	input.CurrentCommand_Data.Valid = true

	input.CompletionDate_Data.String = input.CompletionDate
	input.CompletionDate_Data.Valid = true

	input.CurrentSpeedCommand_Data.String = string(input.CurrentSpeedCommand)
	input.CurrentSpeedCommand_Data.Valid = true

	input.SpeedCommandCompletionDate_Data.String = input.SpeedCommandCompletionDate
	input.SpeedCommandCompletionDate_Data.Valid = true

	query = db.Model(&gongsimstatusDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the gongsimstatusDB
	c.JSON(http.StatusOK, gongsimstatusDB)
}

// DeleteGongsimStatus
//
// swagger:route DELETE /gongsimstatuss/{ID} gongsimstatuss deleteGongsimStatus
//
// Delete a gongsimstatus
//
// Responses:
//    default: genericError
func DeleteGongsimStatus(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongsimstatusDB orm.GongsimStatusDB
	if err := db.First(&gongsimstatusDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongsimstatusDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
