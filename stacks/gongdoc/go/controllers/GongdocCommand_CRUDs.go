// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __GongdocCommand__dummysDeclaration__ models.GongdocCommand

// An GongdocCommandID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongdocCommand updateGongdocCommand deleteGongdocCommand
type GongdocCommandID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongdocCommandInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongdocCommand updateGongdocCommand
type GongdocCommandInput struct {
	// The GongdocCommand to submit or modify
	// in: body
	GongdocCommand *orm.GongdocCommandAPI
}

// GetGongdocCommands
//
// swagger:route GET /gongdoccommands gongdoccommands getGongdocCommands
//
// Get all gongdoccommands
//
// Responses:
//    default: genericError
//        200: gongdoccommandDBsResponse
func GetGongdocCommands(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gongdoccommands []orm.GongdocCommandDB
	query := db.Find(&gongdoccommands)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gongdoccommand, update fields from the database nullable fields
	for idx := range gongdoccommands {
		gongdoccommand := &gongdoccommands[idx]
		_ = gongdoccommand
		// insertion point for updating fields
		if gongdoccommand.Name_Data.Valid {
			gongdoccommand.Name = gongdoccommand.Name_Data.String
		}

		if gongdoccommand.Command_Data.Valid {
			gongdoccommand.Command = models.GongdocCommandType(gongdoccommand.Command_Data.String)
		}

		if gongdoccommand.DiagramName_Data.Valid {
			gongdoccommand.DiagramName = gongdoccommand.DiagramName_Data.String
		}

		if gongdoccommand.Date_Data.Valid {
			gongdoccommand.Date = gongdoccommand.Date_Data.String
		}

		if gongdoccommand.GongdocNodeType_Data.Valid {
			gongdoccommand.GongdocNodeType = models.GongdocNodeType(gongdoccommand.GongdocNodeType_Data.String)
		}

		if gongdoccommand.StructName_Data.Valid {
			gongdoccommand.StructName = gongdoccommand.StructName_Data.String
		}

		if gongdoccommand.FieldName_Data.Valid {
			gongdoccommand.FieldName = gongdoccommand.FieldName_Data.String
		}

		if gongdoccommand.FieldTypeName_Data.Valid {
			gongdoccommand.FieldTypeName = gongdoccommand.FieldTypeName_Data.String
		}

		if gongdoccommand.PositionX_Data.Valid {
			gongdoccommand.PositionX = int(gongdoccommand.PositionX_Data.Int64)
		}

		if gongdoccommand.PositionY_Data.Valid {
			gongdoccommand.PositionY = int(gongdoccommand.PositionY_Data.Int64)
		}

	}

	c.JSON(http.StatusOK, gongdoccommands)
}

// PostGongdocCommand
//
// swagger:route POST /gongdoccommands gongdoccommands postGongdocCommand
//
// Creates a gongdoccommand
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongdoccommandDBResponse
func PostGongdocCommand(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GongdocCommandAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongdoccommand
	gongdoccommandDB := orm.GongdocCommandDB{}
	gongdoccommandDB.GongdocCommandAPI = input
	// insertion point for nullable field set
	gongdoccommandDB.Name_Data.String = input.Name
	gongdoccommandDB.Name_Data.Valid = true

	gongdoccommandDB.Command_Data.String = string(input.Command)
	gongdoccommandDB.Command_Data.Valid = true

	gongdoccommandDB.DiagramName_Data.String = input.DiagramName
	gongdoccommandDB.DiagramName_Data.Valid = true

	gongdoccommandDB.Date_Data.String = input.Date
	gongdoccommandDB.Date_Data.Valid = true

	gongdoccommandDB.GongdocNodeType_Data.String = string(input.GongdocNodeType)
	gongdoccommandDB.GongdocNodeType_Data.Valid = true

	gongdoccommandDB.StructName_Data.String = input.StructName
	gongdoccommandDB.StructName_Data.Valid = true

	gongdoccommandDB.FieldName_Data.String = input.FieldName
	gongdoccommandDB.FieldName_Data.Valid = true

	gongdoccommandDB.FieldTypeName_Data.String = input.FieldTypeName
	gongdoccommandDB.FieldTypeName_Data.Valid = true

	gongdoccommandDB.PositionX_Data.Int64 = int64(input.PositionX)
	gongdoccommandDB.PositionX_Data.Valid = true

	gongdoccommandDB.PositionY_Data.Int64 = int64(input.PositionY)
	gongdoccommandDB.PositionY_Data.Valid = true

	query := db.Create(&gongdoccommandDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gongdoccommandDB)
}

// GetGongdocCommand
//
// swagger:route GET /gongdoccommands/{ID} gongdoccommands getGongdocCommand
//
// Gets the details for a gongdoccommand.
//
// Responses:
//    default: genericError
//        200: gongdoccommandDBResponse
func GetGongdocCommand(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gongdoccommand in DB
	var gongdoccommand orm.GongdocCommandDB
	if err := db.First(&gongdoccommand, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gongdoccommand.Name_Data.Valid {
		gongdoccommand.Name = gongdoccommand.Name_Data.String
	}

	if gongdoccommand.Command_Data.Valid {
		gongdoccommand.Command = models.GongdocCommandType(gongdoccommand.Command_Data.String)
	}

	if gongdoccommand.DiagramName_Data.Valid {
		gongdoccommand.DiagramName = gongdoccommand.DiagramName_Data.String
	}

	if gongdoccommand.Date_Data.Valid {
		gongdoccommand.Date = gongdoccommand.Date_Data.String
	}

	if gongdoccommand.GongdocNodeType_Data.Valid {
		gongdoccommand.GongdocNodeType = models.GongdocNodeType(gongdoccommand.GongdocNodeType_Data.String)
	}

	if gongdoccommand.StructName_Data.Valid {
		gongdoccommand.StructName = gongdoccommand.StructName_Data.String
	}

	if gongdoccommand.FieldName_Data.Valid {
		gongdoccommand.FieldName = gongdoccommand.FieldName_Data.String
	}

	if gongdoccommand.FieldTypeName_Data.Valid {
		gongdoccommand.FieldTypeName = gongdoccommand.FieldTypeName_Data.String
	}

	if gongdoccommand.PositionX_Data.Valid {
		gongdoccommand.PositionX = int(gongdoccommand.PositionX_Data.Int64)
	}

	if gongdoccommand.PositionY_Data.Valid {
		gongdoccommand.PositionY = int(gongdoccommand.PositionY_Data.Int64)
	}

	c.JSON(http.StatusOK, gongdoccommand)
}

// UpdateGongdocCommand
//
// swagger:route PATCH /gongdoccommands/{ID} gongdoccommands updateGongdocCommand
//
// Update a gongdoccommand
//
// Responses:
//    default: genericError
//        200: gongdoccommandDBResponse
func UpdateGongdocCommand(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongdoccommandDB orm.GongdocCommandDB

	// fetch the gongdoccommand
	query := db.First(&gongdoccommandDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongdocCommandAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Command_Data.String = string(input.Command)
	input.Command_Data.Valid = true

	input.DiagramName_Data.String = input.DiagramName
	input.DiagramName_Data.Valid = true

	input.Date_Data.String = input.Date
	input.Date_Data.Valid = true

	input.GongdocNodeType_Data.String = string(input.GongdocNodeType)
	input.GongdocNodeType_Data.Valid = true

	input.StructName_Data.String = input.StructName
	input.StructName_Data.Valid = true

	input.FieldName_Data.String = input.FieldName
	input.FieldName_Data.Valid = true

	input.FieldTypeName_Data.String = input.FieldTypeName
	input.FieldTypeName_Data.Valid = true

	input.PositionX_Data.Int64 = int64(input.PositionX)
	input.PositionX_Data.Valid = true

	input.PositionY_Data.Int64 = int64(input.PositionY)
	input.PositionY_Data.Valid = true

	query = db.Model(&gongdoccommandDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the gongdoccommandDB
	c.JSON(http.StatusOK, gongdoccommandDB)
}

// DeleteGongdocCommand
//
// swagger:route DELETE /gongdoccommands/{ID} gongdoccommands deleteGongdocCommand
//
// Delete a gongdoccommand
//
// Responses:
//    default: genericError
func DeleteGongdocCommand(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongdoccommandDB orm.GongdocCommandDB
	if err := db.First(&gongdoccommandDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongdoccommandDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
