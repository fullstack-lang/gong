// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Pkgelt__dummysDeclaration__ models.Pkgelt

// An PkgeltID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPkgelt updatePkgelt deletePkgelt
type PkgeltID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PkgeltInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPkgelt updatePkgelt
type PkgeltInput struct {
	// The Pkgelt to submit or modify
	// in: body
	Pkgelt *orm.PkgeltAPI
}

// GetPkgelts
//
// swagger:route GET /pkgelts pkgelts getPkgelts
//
// Get all pkgelts
//
// Responses:
//    default: genericError
//        200: pkgeltDBsResponse
func GetPkgelts(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var pkgelts []orm.PkgeltDB
	query := db.Find(&pkgelts)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each pkgelt, update fields from the database nullable fields
	for idx := range pkgelts {
		pkgelt := &pkgelts[idx]
		_ = pkgelt
		// insertion point for updating fields
		if pkgelt.Name_Data.Valid {
			pkgelt.Name = pkgelt.Name_Data.String
		}

		if pkgelt.Path_Data.Valid {
			pkgelt.Path = pkgelt.Path_Data.String
		}

	}

	c.JSON(http.StatusOK, pkgelts)
}

// PostPkgelt
//
// swagger:route POST /pkgelts pkgelts postPkgelt
//
// Creates a pkgelt
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: pkgeltDBResponse
func PostPkgelt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.PkgeltAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create pkgelt
	pkgeltDB := orm.PkgeltDB{}
	pkgeltDB.PkgeltAPI = input
	// insertion point for nullable field set
	pkgeltDB.Name_Data.String = input.Name
	pkgeltDB.Name_Data.Valid = true

	pkgeltDB.Path_Data.String = input.Path
	pkgeltDB.Path_Data.Valid = true

	query := db.Create(&pkgeltDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, pkgeltDB)
}

// GetPkgelt
//
// swagger:route GET /pkgelts/{ID} pkgelts getPkgelt
//
// Gets the details for a pkgelt.
//
// Responses:
//    default: genericError
//        200: pkgeltDBResponse
func GetPkgelt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get pkgelt in DB
	var pkgelt orm.PkgeltDB
	if err := db.First(&pkgelt, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if pkgelt.Name_Data.Valid {
		pkgelt.Name = pkgelt.Name_Data.String
	}

	if pkgelt.Path_Data.Valid {
		pkgelt.Path = pkgelt.Path_Data.String
	}

	c.JSON(http.StatusOK, pkgelt)
}

// UpdatePkgelt
//
// swagger:route PATCH /pkgelts/{ID} pkgelts updatePkgelt
//
// Update a pkgelt
//
// Responses:
//    default: genericError
//        200: pkgeltDBResponse
func UpdatePkgelt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var pkgeltDB orm.PkgeltDB

	// fetch the pkgelt
	query := db.First(&pkgeltDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.PkgeltAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Path_Data.String = input.Path
	input.Path_Data.Valid = true

	query = db.Model(&pkgeltDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the pkgeltDB
	c.JSON(http.StatusOK, pkgeltDB)
}

// DeletePkgelt
//
// swagger:route DELETE /pkgelts/{ID} pkgelts deletePkgelt
//
// Delete a pkgelt
//
// Responses:
//    default: genericError
func DeletePkgelt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var pkgeltDB orm.PkgeltDB
	if err := db.First(&pkgeltDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&pkgeltDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
