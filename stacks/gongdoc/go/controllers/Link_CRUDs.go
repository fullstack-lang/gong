// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Link__dummysDeclaration__ models.Link

// An LinkID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getLink updateLink deleteLink
type LinkID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// LinkInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postLink updateLink
type LinkInput struct {
	// The Link to submit or modify
	// in: body
	Link *orm.LinkAPI
}

// GetLinks
//
// swagger:route GET /links links getLinks
//
// Get all links
//
// Responses:
//    default: genericError
//        200: linkDBsResponse
func GetLinks(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var links []orm.LinkDB
	query := db.Find(&links)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each link, update fields from the database nullable fields
	for idx := range links {
		link := &links[idx]
		_ = link
		// insertion point for updating fields
		if link.Name_Data.Valid {
			link.Name = link.Name_Data.String
		}

		if link.Fieldname_Data.Valid {
			link.Fieldname = link.Fieldname_Data.String
		}

		if link.Structname_Data.Valid {
			link.Structname = link.Structname_Data.String
		}

		if link.Fieldtypename_Data.Valid {
			link.Fieldtypename = link.Fieldtypename_Data.String
		}

		if link.Multiplicity_Data.Valid {
			link.Multiplicity = models.MultiplicityType(link.Multiplicity_Data.String)
		}

	}

	c.JSON(http.StatusOK, links)
}

// PostLink
//
// swagger:route POST /links links postLink
//
// Creates a link
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: linkDBResponse
func PostLink(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.LinkAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create link
	linkDB := orm.LinkDB{}
	linkDB.LinkAPI = input
	// insertion point for nullable field set
	linkDB.Name_Data.String = input.Name
	linkDB.Name_Data.Valid = true

	linkDB.Fieldname_Data.String = input.Fieldname
	linkDB.Fieldname_Data.Valid = true

	linkDB.Structname_Data.String = input.Structname
	linkDB.Structname_Data.Valid = true

	linkDB.Fieldtypename_Data.String = input.Fieldtypename
	linkDB.Fieldtypename_Data.Valid = true

	linkDB.Multiplicity_Data.String = string(input.Multiplicity)
	linkDB.Multiplicity_Data.Valid = true

	query := db.Create(&linkDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, linkDB)
}

// GetLink
//
// swagger:route GET /links/{ID} links getLink
//
// Gets the details for a link.
//
// Responses:
//    default: genericError
//        200: linkDBResponse
func GetLink(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get link in DB
	var link orm.LinkDB
	if err := db.First(&link, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if link.Name_Data.Valid {
		link.Name = link.Name_Data.String
	}

	if link.Fieldname_Data.Valid {
		link.Fieldname = link.Fieldname_Data.String
	}

	if link.Structname_Data.Valid {
		link.Structname = link.Structname_Data.String
	}

	if link.Fieldtypename_Data.Valid {
		link.Fieldtypename = link.Fieldtypename_Data.String
	}

	if link.Multiplicity_Data.Valid {
		link.Multiplicity = models.MultiplicityType(link.Multiplicity_Data.String)
	}

	c.JSON(http.StatusOK, link)
}

// UpdateLink
//
// swagger:route PATCH /links/{ID} links updateLink
//
// Update a link
//
// Responses:
//    default: genericError
//        200: linkDBResponse
func UpdateLink(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var linkDB orm.LinkDB

	// fetch the link
	query := db.First(&linkDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.LinkAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Fieldname_Data.String = input.Fieldname
	input.Fieldname_Data.Valid = true

	input.Structname_Data.String = input.Structname
	input.Structname_Data.Valid = true

	input.Fieldtypename_Data.String = input.Fieldtypename
	input.Fieldtypename_Data.Valid = true

	input.Multiplicity_Data.String = string(input.Multiplicity)
	input.Multiplicity_Data.Valid = true

	query = db.Model(&linkDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the linkDB
	c.JSON(http.StatusOK, linkDB)
}

// DeleteLink
//
// swagger:route DELETE /links/{ID} links deleteLink
//
// Delete a link
//
// Responses:
//    default: genericError
func DeleteLink(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var linkDB orm.LinkDB
	if err := db.First(&linkDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&linkDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
