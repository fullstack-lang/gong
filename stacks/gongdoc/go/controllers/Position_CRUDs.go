// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Position__dummysDeclaration__ models.Position

// An PositionID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPosition updatePosition deletePosition
type PositionID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PositionInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPosition updatePosition
type PositionInput struct {
	// The Position to submit or modify
	// in: body
	Position *orm.PositionAPI
}

// GetPositions
//
// swagger:route GET /positions positions getPositions
//
// Get all positions
//
// Responses:
//    default: genericError
//        200: positionDBsResponse
func GetPositions(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var positions []orm.PositionDB
	query := db.Find(&positions)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each position, update fields from the database nullable fields
	for idx := range positions {
		position := &positions[idx]
		_ = position
		// insertion point for updating fields
		if position.X_Data.Valid {
			position.X = position.X_Data.Float64
		}

		if position.Y_Data.Valid {
			position.Y = position.Y_Data.Float64
		}

		if position.Name_Data.Valid {
			position.Name = position.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, positions)
}

// PostPosition
//
// swagger:route POST /positions positions postPosition
//
// Creates a position
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: positionDBResponse
func PostPosition(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.PositionAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create position
	positionDB := orm.PositionDB{}
	positionDB.PositionAPI = input
	// insertion point for nullable field set
	positionDB.X_Data.Float64 = input.X
	positionDB.X_Data.Valid = true

	positionDB.Y_Data.Float64 = input.Y
	positionDB.Y_Data.Valid = true

	positionDB.Name_Data.String = input.Name
	positionDB.Name_Data.Valid = true

	query := db.Create(&positionDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, positionDB)
}

// GetPosition
//
// swagger:route GET /positions/{ID} positions getPosition
//
// Gets the details for a position.
//
// Responses:
//    default: genericError
//        200: positionDBResponse
func GetPosition(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get position in DB
	var position orm.PositionDB
	if err := db.First(&position, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if position.X_Data.Valid {
		position.X = position.X_Data.Float64
	}

	if position.Y_Data.Valid {
		position.Y = position.Y_Data.Float64
	}

	if position.Name_Data.Valid {
		position.Name = position.Name_Data.String
	}

	c.JSON(http.StatusOK, position)
}

// UpdatePosition
//
// swagger:route PATCH /positions/{ID} positions updatePosition
//
// Update a position
//
// Responses:
//    default: genericError
//        200: positionDBResponse
func UpdatePosition(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var positionDB orm.PositionDB

	// fetch the position
	query := db.First(&positionDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.PositionAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.X_Data.Float64 = input.X
	input.X_Data.Valid = true

	input.Y_Data.Float64 = input.Y
	input.Y_Data.Valid = true

	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&positionDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the positionDB
	c.JSON(http.StatusOK, positionDB)
}

// DeletePosition
//
// swagger:route DELETE /positions/{ID} positions deletePosition
//
// Delete a position
//
// Responses:
//    default: genericError
func DeletePosition(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var positionDB orm.PositionDB
	if err := db.First(&positionDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&positionDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
