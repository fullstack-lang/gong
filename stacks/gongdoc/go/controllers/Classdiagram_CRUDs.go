// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Classdiagram__dummysDeclaration__ models.Classdiagram

// An ClassdiagramID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getClassdiagram updateClassdiagram deleteClassdiagram
type ClassdiagramID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ClassdiagramInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postClassdiagram updateClassdiagram
type ClassdiagramInput struct {
	// The Classdiagram to submit or modify
	// in: body
	Classdiagram *orm.ClassdiagramAPI
}

// GetClassdiagrams
//
// swagger:route GET /classdiagrams classdiagrams getClassdiagrams
//
// Get all classdiagrams
//
// Responses:
//    default: genericError
//        200: classdiagramDBsResponse
func GetClassdiagrams(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var classdiagrams []orm.ClassdiagramDB
	query := db.Find(&classdiagrams)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each classdiagram, update fields from the database nullable fields
	for idx := range classdiagrams {
		classdiagram := &classdiagrams[idx]
		_ = classdiagram
		// insertion point for updating fields
		if classdiagram.Name_Data.Valid {
			classdiagram.Name = classdiagram.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, classdiagrams)
}

// PostClassdiagram
//
// swagger:route POST /classdiagrams classdiagrams postClassdiagram
//
// Creates a classdiagram
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: classdiagramDBResponse
func PostClassdiagram(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.ClassdiagramAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create classdiagram
	classdiagramDB := orm.ClassdiagramDB{}
	classdiagramDB.ClassdiagramAPI = input
	// insertion point for nullable field set
	classdiagramDB.Name_Data.String = input.Name
	classdiagramDB.Name_Data.Valid = true

	query := db.Create(&classdiagramDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, classdiagramDB)
}

// GetClassdiagram
//
// swagger:route GET /classdiagrams/{ID} classdiagrams getClassdiagram
//
// Gets the details for a classdiagram.
//
// Responses:
//    default: genericError
//        200: classdiagramDBResponse
func GetClassdiagram(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get classdiagram in DB
	var classdiagram orm.ClassdiagramDB
	if err := db.First(&classdiagram, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if classdiagram.Name_Data.Valid {
		classdiagram.Name = classdiagram.Name_Data.String
	}

	c.JSON(http.StatusOK, classdiagram)
}

// UpdateClassdiagram
//
// swagger:route PATCH /classdiagrams/{ID} classdiagrams updateClassdiagram
//
// Update a classdiagram
//
// Responses:
//    default: genericError
//        200: classdiagramDBResponse
func UpdateClassdiagram(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var classdiagramDB orm.ClassdiagramDB

	// fetch the classdiagram
	query := db.First(&classdiagramDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ClassdiagramAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&classdiagramDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the classdiagramDB
	c.JSON(http.StatusOK, classdiagramDB)
}

// DeleteClassdiagram
//
// swagger:route DELETE /classdiagrams/{ID} classdiagrams deleteClassdiagram
//
// Delete a classdiagram
//
// Responses:
//    default: genericError
func DeleteClassdiagram(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var classdiagramDB orm.ClassdiagramDB
	if err := db.First(&classdiagramDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&classdiagramDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
