// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Field__dummysDeclaration__ models.Field

// An FieldID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getField updateField deleteField
type FieldID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// FieldInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postField updateField
type FieldInput struct {
	// The Field to submit or modify
	// in: body
	Field *orm.FieldAPI
}

// GetFields
//
// swagger:route GET /fields fields getFields
//
// Get all fields
//
// Responses:
//    default: genericError
//        200: fieldDBsResponse
func GetFields(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var fields []orm.FieldDB
	query := db.Find(&fields)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each field, update fields from the database nullable fields
	for idx := range fields {
		field := &fields[idx]
		_ = field
		// insertion point for updating fields
		if field.Name_Data.Valid {
			field.Name = field.Name_Data.String
		}

		if field.Fieldname_Data.Valid {
			field.Fieldname = field.Fieldname_Data.String
		}

		if field.FieldTypeAsString_Data.Valid {
			field.FieldTypeAsString = field.FieldTypeAsString_Data.String
		}

		if field.Structname_Data.Valid {
			field.Structname = field.Structname_Data.String
		}

		if field.Fieldtypename_Data.Valid {
			field.Fieldtypename = field.Fieldtypename_Data.String
		}

	}

	c.JSON(http.StatusOK, fields)
}

// PostField
//
// swagger:route POST /fields fields postField
//
// Creates a field
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: fieldDBResponse
func PostField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.FieldAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create field
	fieldDB := orm.FieldDB{}
	fieldDB.FieldAPI = input
	// insertion point for nullable field set
	fieldDB.Name_Data.String = input.Name
	fieldDB.Name_Data.Valid = true

	fieldDB.Fieldname_Data.String = input.Fieldname
	fieldDB.Fieldname_Data.Valid = true

	fieldDB.FieldTypeAsString_Data.String = input.FieldTypeAsString
	fieldDB.FieldTypeAsString_Data.Valid = true

	fieldDB.Structname_Data.String = input.Structname
	fieldDB.Structname_Data.Valid = true

	fieldDB.Fieldtypename_Data.String = input.Fieldtypename
	fieldDB.Fieldtypename_Data.Valid = true

	query := db.Create(&fieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, fieldDB)
}

// GetField
//
// swagger:route GET /fields/{ID} fields getField
//
// Gets the details for a field.
//
// Responses:
//    default: genericError
//        200: fieldDBResponse
func GetField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get field in DB
	var field orm.FieldDB
	if err := db.First(&field, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if field.Name_Data.Valid {
		field.Name = field.Name_Data.String
	}

	if field.Fieldname_Data.Valid {
		field.Fieldname = field.Fieldname_Data.String
	}

	if field.FieldTypeAsString_Data.Valid {
		field.FieldTypeAsString = field.FieldTypeAsString_Data.String
	}

	if field.Structname_Data.Valid {
		field.Structname = field.Structname_Data.String
	}

	if field.Fieldtypename_Data.Valid {
		field.Fieldtypename = field.Fieldtypename_Data.String
	}

	c.JSON(http.StatusOK, field)
}

// UpdateField
//
// swagger:route PATCH /fields/{ID} fields updateField
//
// Update a field
//
// Responses:
//    default: genericError
//        200: fieldDBResponse
func UpdateField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var fieldDB orm.FieldDB

	// fetch the field
	query := db.First(&fieldDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.FieldAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Fieldname_Data.String = input.Fieldname
	input.Fieldname_Data.Valid = true

	input.FieldTypeAsString_Data.String = input.FieldTypeAsString
	input.FieldTypeAsString_Data.Valid = true

	input.Structname_Data.String = input.Structname
	input.Structname_Data.Valid = true

	input.Fieldtypename_Data.String = input.Fieldtypename
	input.Fieldtypename_Data.Valid = true

	query = db.Model(&fieldDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the fieldDB
	c.JSON(http.StatusOK, fieldDB)
}

// DeleteField
//
// swagger:route DELETE /fields/{ID} fields deleteField
//
// Delete a field
//
// Responses:
//    default: genericError
func DeleteField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var fieldDB orm.FieldDB
	if err := db.First(&fieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&fieldDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
