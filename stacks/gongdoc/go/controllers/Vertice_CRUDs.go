// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Vertice__dummysDeclaration__ models.Vertice

// An VerticeID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVertice updateVertice deleteVertice
type VerticeID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VerticeInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVertice updateVertice
type VerticeInput struct {
	// The Vertice to submit or modify
	// in: body
	Vertice *orm.VerticeAPI
}

// GetVertices
//
// swagger:route GET /vertices vertices getVertices
//
// Get all vertices
//
// Responses:
//    default: genericError
//        200: verticeDBsResponse
func GetVertices(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var vertices []orm.VerticeDB
	query := db.Find(&vertices)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each vertice, update fields from the database nullable fields
	for idx := range vertices {
		vertice := &vertices[idx]
		_ = vertice
		// insertion point for updating fields
		if vertice.X_Data.Valid {
			vertice.X = vertice.X_Data.Float64
		}

		if vertice.Y_Data.Valid {
			vertice.Y = vertice.Y_Data.Float64
		}

		if vertice.Name_Data.Valid {
			vertice.Name = vertice.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, vertices)
}

// PostVertice
//
// swagger:route POST /vertices vertices postVertice
//
// Creates a vertice
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: verticeDBResponse
func PostVertice(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.VerticeAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create vertice
	verticeDB := orm.VerticeDB{}
	verticeDB.VerticeAPI = input
	// insertion point for nullable field set
	verticeDB.X_Data.Float64 = input.X
	verticeDB.X_Data.Valid = true

	verticeDB.Y_Data.Float64 = input.Y
	verticeDB.Y_Data.Valid = true

	verticeDB.Name_Data.String = input.Name
	verticeDB.Name_Data.Valid = true

	query := db.Create(&verticeDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, verticeDB)
}

// GetVertice
//
// swagger:route GET /vertices/{ID} vertices getVertice
//
// Gets the details for a vertice.
//
// Responses:
//    default: genericError
//        200: verticeDBResponse
func GetVertice(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get vertice in DB
	var vertice orm.VerticeDB
	if err := db.First(&vertice, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if vertice.X_Data.Valid {
		vertice.X = vertice.X_Data.Float64
	}

	if vertice.Y_Data.Valid {
		vertice.Y = vertice.Y_Data.Float64
	}

	if vertice.Name_Data.Valid {
		vertice.Name = vertice.Name_Data.String
	}

	c.JSON(http.StatusOK, vertice)
}

// UpdateVertice
//
// swagger:route PATCH /vertices/{ID} vertices updateVertice
//
// Update a vertice
//
// Responses:
//    default: genericError
//        200: verticeDBResponse
func UpdateVertice(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var verticeDB orm.VerticeDB

	// fetch the vertice
	query := db.First(&verticeDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VerticeAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.X_Data.Float64 = input.X
	input.X_Data.Valid = true

	input.Y_Data.Float64 = input.Y
	input.Y_Data.Valid = true

	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&verticeDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the verticeDB
	c.JSON(http.StatusOK, verticeDB)
}

// DeleteVertice
//
// swagger:route DELETE /vertices/{ID} vertices deleteVertice
//
// Delete a vertice
//
// Responses:
//    default: genericError
func DeleteVertice(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var verticeDB orm.VerticeDB
	if err := db.First(&verticeDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&verticeDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
