// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Classshape__dummysDeclaration__ models.Classshape

// An ClassshapeID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getClassshape updateClassshape deleteClassshape
type ClassshapeID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ClassshapeInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postClassshape updateClassshape
type ClassshapeInput struct {
	// The Classshape to submit or modify
	// in: body
	Classshape *orm.ClassshapeAPI
}

// GetClassshapes
//
// swagger:route GET /classshapes classshapes getClassshapes
//
// Get all classshapes
//
// Responses:
//    default: genericError
//        200: classshapeDBsResponse
func GetClassshapes(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var classshapes []orm.ClassshapeDB
	query := db.Find(&classshapes)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each classshape, update fields from the database nullable fields
	for idx := range classshapes {
		classshape := &classshapes[idx]
		_ = classshape
		// insertion point for updating fields
		if classshape.Name_Data.Valid {
			classshape.Name = classshape.Name_Data.String
		}

		if classshape.Structname_Data.Valid {
			classshape.Structname = classshape.Structname_Data.String
		}

		if classshape.Width_Data.Valid {
			classshape.Width = classshape.Width_Data.Float64
		}

		if classshape.Heigth_Data.Valid {
			classshape.Heigth = classshape.Heigth_Data.Float64
		}

		if classshape.ClassshapeTargetType_Data.Valid {
			classshape.ClassshapeTargetType = models.ClassshapeTargetType(classshape.ClassshapeTargetType_Data.String)
		}

	}

	c.JSON(http.StatusOK, classshapes)
}

// PostClassshape
//
// swagger:route POST /classshapes classshapes postClassshape
//
// Creates a classshape
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: classshapeDBResponse
func PostClassshape(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.ClassshapeAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create classshape
	classshapeDB := orm.ClassshapeDB{}
	classshapeDB.ClassshapeAPI = input
	// insertion point for nullable field set
	classshapeDB.Name_Data.String = input.Name
	classshapeDB.Name_Data.Valid = true

	classshapeDB.Structname_Data.String = input.Structname
	classshapeDB.Structname_Data.Valid = true

	classshapeDB.Width_Data.Float64 = input.Width
	classshapeDB.Width_Data.Valid = true

	classshapeDB.Heigth_Data.Float64 = input.Heigth
	classshapeDB.Heigth_Data.Valid = true

	classshapeDB.ClassshapeTargetType_Data.String = string(input.ClassshapeTargetType)
	classshapeDB.ClassshapeTargetType_Data.Valid = true

	query := db.Create(&classshapeDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, classshapeDB)
}

// GetClassshape
//
// swagger:route GET /classshapes/{ID} classshapes getClassshape
//
// Gets the details for a classshape.
//
// Responses:
//    default: genericError
//        200: classshapeDBResponse
func GetClassshape(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get classshape in DB
	var classshape orm.ClassshapeDB
	if err := db.First(&classshape, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if classshape.Name_Data.Valid {
		classshape.Name = classshape.Name_Data.String
	}

	if classshape.Structname_Data.Valid {
		classshape.Structname = classshape.Structname_Data.String
	}

	if classshape.Width_Data.Valid {
		classshape.Width = classshape.Width_Data.Float64
	}

	if classshape.Heigth_Data.Valid {
		classshape.Heigth = classshape.Heigth_Data.Float64
	}

	if classshape.ClassshapeTargetType_Data.Valid {
		classshape.ClassshapeTargetType = models.ClassshapeTargetType(classshape.ClassshapeTargetType_Data.String)
	}

	c.JSON(http.StatusOK, classshape)
}

// UpdateClassshape
//
// swagger:route PATCH /classshapes/{ID} classshapes updateClassshape
//
// Update a classshape
//
// Responses:
//    default: genericError
//        200: classshapeDBResponse
func UpdateClassshape(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var classshapeDB orm.ClassshapeDB

	// fetch the classshape
	query := db.First(&classshapeDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ClassshapeAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Structname_Data.String = input.Structname
	input.Structname_Data.Valid = true

	input.Width_Data.Float64 = input.Width
	input.Width_Data.Valid = true

	input.Heigth_Data.Float64 = input.Heigth
	input.Heigth_Data.Valid = true

	input.ClassshapeTargetType_Data.String = string(input.ClassshapeTargetType)
	input.ClassshapeTargetType_Data.Valid = true

	query = db.Model(&classshapeDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the classshapeDB
	c.JSON(http.StatusOK, classshapeDB)
}

// DeleteClassshape
//
// swagger:route DELETE /classshapes/{ID} classshapes deleteClassshape
//
// Delete a classshape
//
// Responses:
//    default: genericError
func DeleteClassshape(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var classshapeDB orm.ClassshapeDB
	if err := db.First(&classshapeDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&classshapeDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
