// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/fullstack-lang/gong/stacks/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Umlsc__dummysDeclaration__ models.Umlsc

// An UmlscID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getUmlsc updateUmlsc deleteUmlsc
type UmlscID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// UmlscInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postUmlsc updateUmlsc
type UmlscInput struct {
	// The Umlsc to submit or modify
	// in: body
	Umlsc *orm.UmlscAPI
}

// GetUmlscs
//
// swagger:route GET /umlscs umlscs getUmlscs
//
// Get all umlscs
//
// Responses:
//    default: genericError
//        200: umlscDBsResponse
func GetUmlscs(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var umlscs []orm.UmlscDB
	query := db.Find(&umlscs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each umlsc, update fields from the database nullable fields
	for idx := range umlscs {
		umlsc := &umlscs[idx]
		_ = umlsc
		// insertion point for updating fields
		if umlsc.Name_Data.Valid {
			umlsc.Name = umlsc.Name_Data.String
		}

		if umlsc.Activestate_Data.Valid {
			umlsc.Activestate = umlsc.Activestate_Data.String
		}

	}

	c.JSON(http.StatusOK, umlscs)
}

// PostUmlsc
//
// swagger:route POST /umlscs umlscs postUmlsc
//
// Creates a umlsc
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: umlscDBResponse
func PostUmlsc(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.UmlscAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create umlsc
	umlscDB := orm.UmlscDB{}
	umlscDB.UmlscAPI = input
	// insertion point for nullable field set
	umlscDB.Name_Data.String = input.Name
	umlscDB.Name_Data.Valid = true

	umlscDB.Activestate_Data.String = input.Activestate
	umlscDB.Activestate_Data.Valid = true

	query := db.Create(&umlscDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, umlscDB)
}

// GetUmlsc
//
// swagger:route GET /umlscs/{ID} umlscs getUmlsc
//
// Gets the details for a umlsc.
//
// Responses:
//    default: genericError
//        200: umlscDBResponse
func GetUmlsc(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get umlsc in DB
	var umlsc orm.UmlscDB
	if err := db.First(&umlsc, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if umlsc.Name_Data.Valid {
		umlsc.Name = umlsc.Name_Data.String
	}

	if umlsc.Activestate_Data.Valid {
		umlsc.Activestate = umlsc.Activestate_Data.String
	}

	c.JSON(http.StatusOK, umlsc)
}

// UpdateUmlsc
//
// swagger:route PATCH /umlscs/{ID} umlscs updateUmlsc
//
// Update a umlsc
//
// Responses:
//    default: genericError
//        200: umlscDBResponse
func UpdateUmlsc(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var umlscDB orm.UmlscDB

	// fetch the umlsc
	query := db.First(&umlscDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.UmlscAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Activestate_Data.String = input.Activestate
	input.Activestate_Data.Valid = true

	query = db.Model(&umlscDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the umlscDB
	c.JSON(http.StatusOK, umlscDB)
}

// DeleteUmlsc
//
// swagger:route DELETE /umlscs/{ID} umlscs deleteUmlsc
//
// Delete a umlsc
//
// Responses:
//    default: genericError
func DeleteUmlsc(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var umlscDB orm.UmlscDB
	if err := db.First(&umlscDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&umlscDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
