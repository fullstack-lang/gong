// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Vertice sql.NullBool

// VerticeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model verticeAPI
type VerticeAPI struct {
	models.Vertice

	// insertion for fields declaration
	// Declation for basic field verticeDB.X {{BasicKind}} (to be completed)
	X_Data sql.NullFloat64

	// Declation for basic field verticeDB.Y {{BasicKind}} (to be completed)
	Y_Data sql.NullFloat64

	// Declation for basic field verticeDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// VerticeDB describes a vertice in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model verticeDB
type VerticeDB struct {
	gorm.Model

	VerticeAPI
}

// VerticeDBs arrays verticeDBs
// swagger:response verticeDBsResponse
type VerticeDBs []VerticeDB

// VerticeDBResponse provides response
// swagger:response verticeDBResponse
type VerticeDBResponse struct {
	VerticeDB
}

type BackRepoVerticeStruct struct {
	// stores VerticeDB according to their gorm ID
	Map_VerticeDBID_VerticeDB *map[uint]*VerticeDB

	// stores VerticeDB ID according to Vertice address
	Map_VerticePtr_VerticeDBID *map[*models.Vertice]uint

	// stores Vertice according to their gorm ID
	Map_VerticeDBID_VerticePtr *map[uint]*models.Vertice

	db *gorm.DB
}

// BackRepoVertice.Init set up the BackRepo of the Vertice
func (backRepoVertice *BackRepoVerticeStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVertice.Map_VerticeDBID_VerticePtr != nil {
		err := errors.New("In Init, backRepoVertice.Map_VerticeDBID_VerticePtr should be nil")
		return err
	}

	if backRepoVertice.Map_VerticeDBID_VerticeDB != nil {
		err := errors.New("In Init, backRepoVertice.Map_VerticeDBID_VerticeDB should be nil")
		return err
	}

	if backRepoVertice.Map_VerticePtr_VerticeDBID != nil {
		err := errors.New("In Init, backRepoVertice.Map_VerticePtr_VerticeDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Vertice, 0)
	backRepoVertice.Map_VerticeDBID_VerticePtr = &tmp

	tmpDB := make(map[uint]*VerticeDB, 0)
	backRepoVertice.Map_VerticeDBID_VerticeDB = &tmpDB

	tmpID := make(map[*models.Vertice]uint, 0)
	backRepoVertice.Map_VerticePtr_VerticeDBID = &tmpID

	backRepoVertice.db = db
	return
}

// BackRepoVertice.CommitPhaseOne commits all staged instances of Vertice to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVertice *BackRepoVerticeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for vertice := range stage.Vertices {
		backRepoVertice.CommitPhaseOneInstance(vertice)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, vertice := range *backRepoVertice.Map_VerticeDBID_VerticePtr {
		if _, ok := stage.Vertices[vertice]; !ok {
			backRepoVertice.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVertice.CommitDeleteInstance commits deletion of Vertice to the BackRepo
func (backRepoVertice *BackRepoVerticeStruct) CommitDeleteInstance(id uint) (Error error) {

	vertice := (*backRepoVertice.Map_VerticeDBID_VerticePtr)[id]

	// vertice is not staged anymore, remove verticeDB
	verticeDB := (*backRepoVertice.Map_VerticeDBID_VerticeDB)[id]
	query := backRepoVertice.db.Unscoped().Delete(&verticeDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVertice.Map_VerticePtr_VerticeDBID), vertice)
	delete((*backRepoVertice.Map_VerticeDBID_VerticePtr), id)
	delete((*backRepoVertice.Map_VerticeDBID_VerticeDB), id)

	return
}

// BackRepoVertice.CommitPhaseOneInstance commits vertice staged instances of Vertice to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVertice *BackRepoVerticeStruct) CommitPhaseOneInstance(vertice *models.Vertice) (Error error) {

	// check if the vertice is not commited yet
	if _, ok := (*backRepoVertice.Map_VerticePtr_VerticeDBID)[vertice]; ok {
		return
	}

	// initiate vertice
	var verticeDB VerticeDB
	verticeDB.Vertice = *vertice

	query := backRepoVertice.db.Create(&verticeDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVertice.Map_VerticePtr_VerticeDBID)[vertice] = verticeDB.ID
	(*backRepoVertice.Map_VerticeDBID_VerticePtr)[verticeDB.ID] = vertice
	(*backRepoVertice.Map_VerticeDBID_VerticeDB)[verticeDB.ID] = &verticeDB

	return
}

// BackRepoVertice.CommitPhaseTwo commits all staged instances of Vertice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVertice *BackRepoVerticeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, vertice := range *backRepoVertice.Map_VerticeDBID_VerticePtr {
		backRepoVertice.CommitPhaseTwoInstance(backRepo, idx, vertice)
	}

	return
}

// BackRepoVertice.CommitPhaseTwoInstance commits {{structname }} of models.Vertice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVertice *BackRepoVerticeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, vertice *models.Vertice) (Error error) {

	// fetch matching verticeDB
	if verticeDB, ok := (*backRepoVertice.Map_VerticeDBID_VerticeDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				verticeDB.X_Data.Float64 = vertice.X
				verticeDB.X_Data.Valid = true

				verticeDB.Y_Data.Float64 = vertice.Y
				verticeDB.Y_Data.Valid = true

				verticeDB.Name_Data.String = vertice.Name
				verticeDB.Name_Data.Valid = true

			}
		}
		query := backRepoVertice.db.Save(&verticeDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Vertice intance %s", vertice.Name))
		return err
	}

	return
}

// BackRepoVertice.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoVertice *BackRepoVerticeStruct) CheckoutPhaseOne() (Error error) {

	verticeDBArray := make([]VerticeDB, 0)
	query := backRepoVertice.db.Find(&verticeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, verticeDB := range verticeDBArray {
		backRepoVertice.CheckoutPhaseOneInstance(&verticeDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a verticeDB that has been found in the DB, updates the backRepo and stages the
// models version of the verticeDB
func (backRepoVertice *BackRepoVerticeStruct) CheckoutPhaseOneInstance(verticeDB *VerticeDB) (Error error) {

	// if absent, create entries in the backRepoVertice maps.
	verticeWithNewFieldValues := verticeDB.Vertice
	if _, ok := (*backRepoVertice.Map_VerticeDBID_VerticePtr)[verticeDB.ID]; !ok {

		(*backRepoVertice.Map_VerticeDBID_VerticePtr)[verticeDB.ID] = &verticeWithNewFieldValues
		(*backRepoVertice.Map_VerticePtr_VerticeDBID)[&verticeWithNewFieldValues] = verticeDB.ID

		// append model store with the new element
		verticeWithNewFieldValues.Stage()
	}
	verticeDBWithNewFieldValues := *verticeDB
	(*backRepoVertice.Map_VerticeDBID_VerticeDB)[verticeDB.ID] = &verticeDBWithNewFieldValues

	return
}

// BackRepoVertice.CheckoutPhaseTwo Checkouts all staged instances of Vertice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVertice *BackRepoVerticeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, verticeDB := range *backRepoVertice.Map_VerticeDBID_VerticeDB {
		backRepoVertice.CheckoutPhaseTwoInstance(backRepo, verticeDB)
	}
	return
}

// BackRepoVertice.CheckoutPhaseTwoInstance Checkouts staged instances of Vertice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVertice *BackRepoVerticeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, verticeDB *VerticeDB) (Error error) {

	vertice := (*backRepoVertice.Map_VerticeDBID_VerticePtr)[verticeDB.ID]
	_ = vertice // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			vertice.X = verticeDB.X_Data.Float64

			vertice.Y = verticeDB.Y_Data.Float64

			vertice.Name = verticeDB.Name_Data.String

		}
	}
	return
}

// CommitVertice allows commit of a single vertice (if already staged)
func (backRepo *BackRepoStruct) CommitVertice(vertice *models.Vertice) {
	backRepo.BackRepoVertice.CommitPhaseOneInstance(vertice)
	if id, ok := (*backRepo.BackRepoVertice.Map_VerticePtr_VerticeDBID)[vertice]; ok {
		backRepo.BackRepoVertice.CommitPhaseTwoInstance(backRepo, id, vertice)
	}
}

// CommitVertice allows checkout of a single vertice (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVertice(vertice *models.Vertice) {
	// check if the vertice is staged
	if _, ok := (*backRepo.BackRepoVertice.Map_VerticePtr_VerticeDBID)[vertice]; ok {

		if id, ok := (*backRepo.BackRepoVertice.Map_VerticePtr_VerticeDBID)[vertice]; ok {
			var verticeDB VerticeDB
			verticeDB.ID = id

			if err := backRepo.BackRepoVertice.db.First(&verticeDB, id).Error; err != nil {
				log.Panicln("CheckoutVertice : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVertice.CheckoutPhaseOneInstance(&verticeDB)
			backRepo.BackRepoVertice.CheckoutPhaseTwoInstance(backRepo, &verticeDB)
		}
	}
}
