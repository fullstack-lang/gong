// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Link sql.NullBool

// LinkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model linkAPI
type LinkAPI struct {
	models.Link

	// insertion for fields declaration
	// Declation for basic field linkDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field linkDB.Fieldname {{BasicKind}} (to be completed)
	Fieldname_Data sql.NullString

	// Declation for basic field linkDB.Structname {{BasicKind}} (to be completed)
	Structname_Data sql.NullString

	// Declation for basic field linkDB.Fieldtypename {{BasicKind}} (to be completed)
	Fieldtypename_Data sql.NullString

	// Declation for basic field linkDB.Multiplicity {{BasicKind}} (to be completed)
	Multiplicity_Data sql.NullString

	// field Middlevertice is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MiddleverticeID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	MiddleverticeName string

	// Implementation of a reverse ID for field Classshape{}.Links []*Link
	Classshape_LinksDBID sql.NullInt64

	// end of insertion
}

// LinkDB describes a link in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model linkDB
type LinkDB struct {
	gorm.Model

	LinkAPI
}

// LinkDBs arrays linkDBs
// swagger:response linkDBsResponse
type LinkDBs []LinkDB

// LinkDBResponse provides response
// swagger:response linkDBResponse
type LinkDBResponse struct {
	LinkDB
}

type BackRepoLinkStruct struct {
	// stores LinkDB according to their gorm ID
	Map_LinkDBID_LinkDB *map[uint]*LinkDB

	// stores LinkDB ID according to Link address
	Map_LinkPtr_LinkDBID *map[*models.Link]uint

	// stores Link according to their gorm ID
	Map_LinkDBID_LinkPtr *map[uint]*models.Link

	db *gorm.DB
}

// BackRepoLink.Init set up the BackRepo of the Link
func (backRepoLink *BackRepoLinkStruct) Init(db *gorm.DB) (Error error) {

	if backRepoLink.Map_LinkDBID_LinkPtr != nil {
		err := errors.New("In Init, backRepoLink.Map_LinkDBID_LinkPtr should be nil")
		return err
	}

	if backRepoLink.Map_LinkDBID_LinkDB != nil {
		err := errors.New("In Init, backRepoLink.Map_LinkDBID_LinkDB should be nil")
		return err
	}

	if backRepoLink.Map_LinkPtr_LinkDBID != nil {
		err := errors.New("In Init, backRepoLink.Map_LinkPtr_LinkDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Link, 0)
	backRepoLink.Map_LinkDBID_LinkPtr = &tmp

	tmpDB := make(map[uint]*LinkDB, 0)
	backRepoLink.Map_LinkDBID_LinkDB = &tmpDB

	tmpID := make(map[*models.Link]uint, 0)
	backRepoLink.Map_LinkPtr_LinkDBID = &tmpID

	backRepoLink.db = db
	return
}

// BackRepoLink.CommitPhaseOne commits all staged instances of Link to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLink *BackRepoLinkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for link := range stage.Links {
		backRepoLink.CommitPhaseOneInstance(link)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, link := range *backRepoLink.Map_LinkDBID_LinkPtr {
		if _, ok := stage.Links[link]; !ok {
			backRepoLink.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLink.CommitDeleteInstance commits deletion of Link to the BackRepo
func (backRepoLink *BackRepoLinkStruct) CommitDeleteInstance(id uint) (Error error) {

	link := (*backRepoLink.Map_LinkDBID_LinkPtr)[id]

	// link is not staged anymore, remove linkDB
	linkDB := (*backRepoLink.Map_LinkDBID_LinkDB)[id]
	query := backRepoLink.db.Unscoped().Delete(&linkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoLink.Map_LinkPtr_LinkDBID), link)
	delete((*backRepoLink.Map_LinkDBID_LinkPtr), id)
	delete((*backRepoLink.Map_LinkDBID_LinkDB), id)

	return
}

// BackRepoLink.CommitPhaseOneInstance commits link staged instances of Link to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLink *BackRepoLinkStruct) CommitPhaseOneInstance(link *models.Link) (Error error) {

	// check if the link is not commited yet
	if _, ok := (*backRepoLink.Map_LinkPtr_LinkDBID)[link]; ok {
		return
	}

	// initiate link
	var linkDB LinkDB
	linkDB.Link = *link

	query := backRepoLink.db.Create(&linkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoLink.Map_LinkPtr_LinkDBID)[link] = linkDB.ID
	(*backRepoLink.Map_LinkDBID_LinkPtr)[linkDB.ID] = link
	(*backRepoLink.Map_LinkDBID_LinkDB)[linkDB.ID] = &linkDB

	return
}

// BackRepoLink.CommitPhaseTwo commits all staged instances of Link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLink *BackRepoLinkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, link := range *backRepoLink.Map_LinkDBID_LinkPtr {
		backRepoLink.CommitPhaseTwoInstance(backRepo, idx, link)
	}

	return
}

// BackRepoLink.CommitPhaseTwoInstance commits {{structname }} of models.Link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLink *BackRepoLinkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, link *models.Link) (Error error) {

	// fetch matching linkDB
	if linkDB, ok := (*backRepoLink.Map_LinkDBID_LinkDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				linkDB.Name_Data.String = link.Name
				linkDB.Name_Data.Valid = true

				linkDB.Fieldname_Data.String = link.Fieldname
				linkDB.Fieldname_Data.Valid = true

				linkDB.Structname_Data.String = link.Structname
				linkDB.Structname_Data.Valid = true

				linkDB.Fieldtypename_Data.String = link.Fieldtypename
				linkDB.Fieldtypename_Data.Valid = true

				linkDB.Multiplicity_Data.String = string(link.Multiplicity)
				linkDB.Multiplicity_Data.Valid = true

				// commit pointer value link.Middlevertice translates to updating the link.MiddleverticeID
				linkDB.MiddleverticeID.Valid = true // allow for a 0 value (nil association)
				if link.Middlevertice != nil {
					if MiddleverticeId, ok := (*backRepo.BackRepoVertice.Map_VerticePtr_VerticeDBID)[link.Middlevertice]; ok {
						linkDB.MiddleverticeID.Int64 = int64(MiddleverticeId)
					}
				}

			}
		}
		query := backRepoLink.db.Save(&linkDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Link intance %s", link.Name))
		return err
	}

	return
}

// BackRepoLink.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoLink *BackRepoLinkStruct) CheckoutPhaseOne() (Error error) {

	linkDBArray := make([]LinkDB, 0)
	query := backRepoLink.db.Find(&linkDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, linkDB := range linkDBArray {
		backRepoLink.CheckoutPhaseOneInstance(&linkDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a linkDB that has been found in the DB, updates the backRepo and stages the
// models version of the linkDB
func (backRepoLink *BackRepoLinkStruct) CheckoutPhaseOneInstance(linkDB *LinkDB) (Error error) {

	// if absent, create entries in the backRepoLink maps.
	linkWithNewFieldValues := linkDB.Link
	if _, ok := (*backRepoLink.Map_LinkDBID_LinkPtr)[linkDB.ID]; !ok {

		(*backRepoLink.Map_LinkDBID_LinkPtr)[linkDB.ID] = &linkWithNewFieldValues
		(*backRepoLink.Map_LinkPtr_LinkDBID)[&linkWithNewFieldValues] = linkDB.ID

		// append model store with the new element
		linkWithNewFieldValues.Stage()
	}
	linkDBWithNewFieldValues := *linkDB
	(*backRepoLink.Map_LinkDBID_LinkDB)[linkDB.ID] = &linkDBWithNewFieldValues

	return
}

// BackRepoLink.CheckoutPhaseTwo Checkouts all staged instances of Link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLink *BackRepoLinkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, linkDB := range *backRepoLink.Map_LinkDBID_LinkDB {
		backRepoLink.CheckoutPhaseTwoInstance(backRepo, linkDB)
	}
	return
}

// BackRepoLink.CheckoutPhaseTwoInstance Checkouts staged instances of Link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLink *BackRepoLinkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, linkDB *LinkDB) (Error error) {

	link := (*backRepoLink.Map_LinkDBID_LinkPtr)[linkDB.ID]
	_ = link // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			link.Name = linkDB.Name_Data.String

			link.Fieldname = linkDB.Fieldname_Data.String

			link.Structname = linkDB.Structname_Data.String

			link.Fieldtypename = linkDB.Fieldtypename_Data.String

			link.Multiplicity = models.MultiplicityType(linkDB.Multiplicity_Data.String)

			// Middlevertice field
			if linkDB.MiddleverticeID.Int64 != 0 {
				link.Middlevertice = (*backRepo.BackRepoVertice.Map_VerticeDBID_VerticePtr)[uint(linkDB.MiddleverticeID.Int64)]
			}

		}
	}
	return
}

// CommitLink allows commit of a single link (if already staged)
func (backRepo *BackRepoStruct) CommitLink(link *models.Link) {
	backRepo.BackRepoLink.CommitPhaseOneInstance(link)
	if id, ok := (*backRepo.BackRepoLink.Map_LinkPtr_LinkDBID)[link]; ok {
		backRepo.BackRepoLink.CommitPhaseTwoInstance(backRepo, id, link)
	}
}

// CommitLink allows checkout of a single link (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLink(link *models.Link) {
	// check if the link is staged
	if _, ok := (*backRepo.BackRepoLink.Map_LinkPtr_LinkDBID)[link]; ok {

		if id, ok := (*backRepo.BackRepoLink.Map_LinkPtr_LinkDBID)[link]; ok {
			var linkDB LinkDB
			linkDB.ID = id

			if err := backRepo.BackRepoLink.db.First(&linkDB, id).Error; err != nil {
				log.Panicln("CheckoutLink : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLink.CheckoutPhaseOneInstance(&linkDB)
			backRepo.BackRepoLink.CheckoutPhaseTwoInstance(backRepo, &linkDB)
		}
	}
}
