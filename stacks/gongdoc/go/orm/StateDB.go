// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_State sql.NullBool

// StateAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model stateAPI
type StateAPI struct {
	models.State

	// insertion for fields declaration
	// Declation for basic field stateDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field stateDB.X {{BasicKind}} (to be completed)
	X_Data sql.NullFloat64

	// Declation for basic field stateDB.Y {{BasicKind}} (to be completed)
	Y_Data sql.NullFloat64

	// Implementation of a reverse ID for field Umlsc{}.States []*State
	Umlsc_StatesDBID sql.NullInt64

	// end of insertion
}

// StateDB describes a state in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model stateDB
type StateDB struct {
	gorm.Model

	StateAPI
}

// StateDBs arrays stateDBs
// swagger:response stateDBsResponse
type StateDBs []StateDB

// StateDBResponse provides response
// swagger:response stateDBResponse
type StateDBResponse struct {
	StateDB
}

type BackRepoStateStruct struct {
	// stores StateDB according to their gorm ID
	Map_StateDBID_StateDB *map[uint]*StateDB

	// stores StateDB ID according to State address
	Map_StatePtr_StateDBID *map[*models.State]uint

	// stores State according to their gorm ID
	Map_StateDBID_StatePtr *map[uint]*models.State

	db *gorm.DB
}

// BackRepoState.Init set up the BackRepo of the State
func (backRepoState *BackRepoStateStruct) Init(db *gorm.DB) (Error error) {

	if backRepoState.Map_StateDBID_StatePtr != nil {
		err := errors.New("In Init, backRepoState.Map_StateDBID_StatePtr should be nil")
		return err
	}

	if backRepoState.Map_StateDBID_StateDB != nil {
		err := errors.New("In Init, backRepoState.Map_StateDBID_StateDB should be nil")
		return err
	}

	if backRepoState.Map_StatePtr_StateDBID != nil {
		err := errors.New("In Init, backRepoState.Map_StatePtr_StateDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.State, 0)
	backRepoState.Map_StateDBID_StatePtr = &tmp

	tmpDB := make(map[uint]*StateDB, 0)
	backRepoState.Map_StateDBID_StateDB = &tmpDB

	tmpID := make(map[*models.State]uint, 0)
	backRepoState.Map_StatePtr_StateDBID = &tmpID

	backRepoState.db = db
	return
}

// BackRepoState.CommitPhaseOne commits all staged instances of State to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoState *BackRepoStateStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for state := range stage.States {
		backRepoState.CommitPhaseOneInstance(state)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, state := range *backRepoState.Map_StateDBID_StatePtr {
		if _, ok := stage.States[state]; !ok {
			backRepoState.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoState.CommitDeleteInstance commits deletion of State to the BackRepo
func (backRepoState *BackRepoStateStruct) CommitDeleteInstance(id uint) (Error error) {

	state := (*backRepoState.Map_StateDBID_StatePtr)[id]

	// state is not staged anymore, remove stateDB
	stateDB := (*backRepoState.Map_StateDBID_StateDB)[id]
	query := backRepoState.db.Unscoped().Delete(&stateDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoState.Map_StatePtr_StateDBID), state)
	delete((*backRepoState.Map_StateDBID_StatePtr), id)
	delete((*backRepoState.Map_StateDBID_StateDB), id)

	return
}

// BackRepoState.CommitPhaseOneInstance commits state staged instances of State to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoState *BackRepoStateStruct) CommitPhaseOneInstance(state *models.State) (Error error) {

	// check if the state is not commited yet
	if _, ok := (*backRepoState.Map_StatePtr_StateDBID)[state]; ok {
		return
	}

	// initiate state
	var stateDB StateDB
	stateDB.State = *state

	query := backRepoState.db.Create(&stateDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoState.Map_StatePtr_StateDBID)[state] = stateDB.ID
	(*backRepoState.Map_StateDBID_StatePtr)[stateDB.ID] = state
	(*backRepoState.Map_StateDBID_StateDB)[stateDB.ID] = &stateDB

	return
}

// BackRepoState.CommitPhaseTwo commits all staged instances of State to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoState *BackRepoStateStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, state := range *backRepoState.Map_StateDBID_StatePtr {
		backRepoState.CommitPhaseTwoInstance(backRepo, idx, state)
	}

	return
}

// BackRepoState.CommitPhaseTwoInstance commits {{structname }} of models.State to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoState *BackRepoStateStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, state *models.State) (Error error) {

	// fetch matching stateDB
	if stateDB, ok := (*backRepoState.Map_StateDBID_StateDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				stateDB.Name_Data.String = state.Name
				stateDB.Name_Data.Valid = true

				stateDB.X_Data.Float64 = state.X
				stateDB.X_Data.Valid = true

				stateDB.Y_Data.Float64 = state.Y
				stateDB.Y_Data.Valid = true

			}
		}
		query := backRepoState.db.Save(&stateDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown State intance %s", state.Name))
		return err
	}

	return
}

// BackRepoState.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoState *BackRepoStateStruct) CheckoutPhaseOne() (Error error) {

	stateDBArray := make([]StateDB, 0)
	query := backRepoState.db.Find(&stateDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, stateDB := range stateDBArray {
		backRepoState.CheckoutPhaseOneInstance(&stateDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a stateDB that has been found in the DB, updates the backRepo and stages the
// models version of the stateDB
func (backRepoState *BackRepoStateStruct) CheckoutPhaseOneInstance(stateDB *StateDB) (Error error) {

	// if absent, create entries in the backRepoState maps.
	stateWithNewFieldValues := stateDB.State
	if _, ok := (*backRepoState.Map_StateDBID_StatePtr)[stateDB.ID]; !ok {

		(*backRepoState.Map_StateDBID_StatePtr)[stateDB.ID] = &stateWithNewFieldValues
		(*backRepoState.Map_StatePtr_StateDBID)[&stateWithNewFieldValues] = stateDB.ID

		// append model store with the new element
		stateWithNewFieldValues.Stage()
	}
	stateDBWithNewFieldValues := *stateDB
	(*backRepoState.Map_StateDBID_StateDB)[stateDB.ID] = &stateDBWithNewFieldValues

	return
}

// BackRepoState.CheckoutPhaseTwo Checkouts all staged instances of State to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoState *BackRepoStateStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, stateDB := range *backRepoState.Map_StateDBID_StateDB {
		backRepoState.CheckoutPhaseTwoInstance(backRepo, stateDB)
	}
	return
}

// BackRepoState.CheckoutPhaseTwoInstance Checkouts staged instances of State to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoState *BackRepoStateStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, stateDB *StateDB) (Error error) {

	state := (*backRepoState.Map_StateDBID_StatePtr)[stateDB.ID]
	_ = state // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			state.Name = stateDB.Name_Data.String

			state.X = stateDB.X_Data.Float64

			state.Y = stateDB.Y_Data.Float64

		}
	}
	return
}

// CommitState allows commit of a single state (if already staged)
func (backRepo *BackRepoStruct) CommitState(state *models.State) {
	backRepo.BackRepoState.CommitPhaseOneInstance(state)
	if id, ok := (*backRepo.BackRepoState.Map_StatePtr_StateDBID)[state]; ok {
		backRepo.BackRepoState.CommitPhaseTwoInstance(backRepo, id, state)
	}
}

// CommitState allows checkout of a single state (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutState(state *models.State) {
	// check if the state is staged
	if _, ok := (*backRepo.BackRepoState.Map_StatePtr_StateDBID)[state]; ok {

		if id, ok := (*backRepo.BackRepoState.Map_StatePtr_StateDBID)[state]; ok {
			var stateDB StateDB
			stateDB.ID = id

			if err := backRepo.BackRepoState.db.First(&stateDB, id).Error; err != nil {
				log.Panicln("CheckoutState : Problem with getting object with id:", id)
			}
			backRepo.BackRepoState.CheckoutPhaseOneInstance(&stateDB)
			backRepo.BackRepoState.CheckoutPhaseTwoInstance(backRepo, &stateDB)
		}
	}
}
