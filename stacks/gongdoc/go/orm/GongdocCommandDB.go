// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_GongdocCommand sql.NullBool

// GongdocCommandAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongdoccommandAPI
type GongdocCommandAPI struct {
	models.GongdocCommand

	// insertion for fields declaration
	// Declation for basic field gongdoccommandDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field gongdoccommandDB.Command {{BasicKind}} (to be completed)
	Command_Data sql.NullString

	// Declation for basic field gongdoccommandDB.DiagramName {{BasicKind}} (to be completed)
	DiagramName_Data sql.NullString

	// Declation for basic field gongdoccommandDB.Date {{BasicKind}} (to be completed)
	Date_Data sql.NullString

	// Declation for basic field gongdoccommandDB.GongdocNodeType {{BasicKind}} (to be completed)
	GongdocNodeType_Data sql.NullString

	// Declation for basic field gongdoccommandDB.StructName {{BasicKind}} (to be completed)
	StructName_Data sql.NullString

	// Declation for basic field gongdoccommandDB.FieldName {{BasicKind}} (to be completed)
	FieldName_Data sql.NullString

	// Declation for basic field gongdoccommandDB.FieldTypeName {{BasicKind}} (to be completed)
	FieldTypeName_Data sql.NullString

	// Declation for basic field gongdoccommandDB.PositionX {{BasicKind}} (to be completed)
	PositionX_Data sql.NullInt64

	// Declation for basic field gongdoccommandDB.PositionY {{BasicKind}} (to be completed)
	PositionY_Data sql.NullInt64

	// end of insertion
}

// GongdocCommandDB describes a gongdoccommand in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model gongdoccommandDB
type GongdocCommandDB struct {
	gorm.Model

	GongdocCommandAPI
}

// GongdocCommandDBs arrays gongdoccommandDBs
// swagger:response gongdoccommandDBsResponse
type GongdocCommandDBs []GongdocCommandDB

// GongdocCommandDBResponse provides response
// swagger:response gongdoccommandDBResponse
type GongdocCommandDBResponse struct {
	GongdocCommandDB
}

type BackRepoGongdocCommandStruct struct {
	// stores GongdocCommandDB according to their gorm ID
	Map_GongdocCommandDBID_GongdocCommandDB *map[uint]*GongdocCommandDB

	// stores GongdocCommandDB ID according to GongdocCommand address
	Map_GongdocCommandPtr_GongdocCommandDBID *map[*models.GongdocCommand]uint

	// stores GongdocCommand according to their gorm ID
	Map_GongdocCommandDBID_GongdocCommandPtr *map[uint]*models.GongdocCommand

	db *gorm.DB
}

// BackRepoGongdocCommand.Init set up the BackRepo of the GongdocCommand
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr != nil {
		err := errors.New("In Init, backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr should be nil")
		return err
	}

	if backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB != nil {
		err := errors.New("In Init, backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB should be nil")
		return err
	}

	if backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID != nil {
		err := errors.New("In Init, backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongdocCommand, 0)
	backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr = &tmp

	tmpDB := make(map[uint]*GongdocCommandDB, 0)
	backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB = &tmpDB

	tmpID := make(map[*models.GongdocCommand]uint, 0)
	backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID = &tmpID

	backRepoGongdocCommand.db = db
	return
}

// BackRepoGongdocCommand.CommitPhaseOne commits all staged instances of GongdocCommand to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongdoccommand := range stage.GongdocCommands {
		backRepoGongdocCommand.CommitPhaseOneInstance(gongdoccommand)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongdoccommand := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr {
		if _, ok := stage.GongdocCommands[gongdoccommand]; !ok {
			backRepoGongdocCommand.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongdocCommand.CommitDeleteInstance commits deletion of GongdocCommand to the BackRepo
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitDeleteInstance(id uint) (Error error) {

	gongdoccommand := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[id]

	// gongdoccommand is not staged anymore, remove gongdoccommandDB
	gongdoccommandDB := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[id]
	query := backRepoGongdocCommand.db.Unscoped().Delete(&gongdoccommandDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID), gongdoccommand)
	delete((*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr), id)
	delete((*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB), id)

	return
}

// BackRepoGongdocCommand.CommitPhaseOneInstance commits gongdoccommand staged instances of GongdocCommand to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitPhaseOneInstance(gongdoccommand *models.GongdocCommand) (Error error) {

	// check if the gongdoccommand is not commited yet
	if _, ok := (*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]; ok {
		return
	}

	// initiate gongdoccommand
	var gongdoccommandDB GongdocCommandDB
	gongdoccommandDB.GongdocCommand = *gongdoccommand

	query := backRepoGongdocCommand.db.Create(&gongdoccommandDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand] = gongdoccommandDB.ID
	(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID] = gongdoccommand
	(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[gongdoccommandDB.ID] = &gongdoccommandDB

	return
}

// BackRepoGongdocCommand.CommitPhaseTwo commits all staged instances of GongdocCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongdoccommand := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr {
		backRepoGongdocCommand.CommitPhaseTwoInstance(backRepo, idx, gongdoccommand)
	}

	return
}

// BackRepoGongdocCommand.CommitPhaseTwoInstance commits {{structname }} of models.GongdocCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongdoccommand *models.GongdocCommand) (Error error) {

	// fetch matching gongdoccommandDB
	if gongdoccommandDB, ok := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				gongdoccommandDB.Name_Data.String = gongdoccommand.Name
				gongdoccommandDB.Name_Data.Valid = true

				gongdoccommandDB.Command_Data.String = string(gongdoccommand.Command)
				gongdoccommandDB.Command_Data.Valid = true

				gongdoccommandDB.DiagramName_Data.String = gongdoccommand.DiagramName
				gongdoccommandDB.DiagramName_Data.Valid = true

				gongdoccommandDB.Date_Data.String = gongdoccommand.Date
				gongdoccommandDB.Date_Data.Valid = true

				gongdoccommandDB.GongdocNodeType_Data.String = string(gongdoccommand.GongdocNodeType)
				gongdoccommandDB.GongdocNodeType_Data.Valid = true

				gongdoccommandDB.StructName_Data.String = gongdoccommand.StructName
				gongdoccommandDB.StructName_Data.Valid = true

				gongdoccommandDB.FieldName_Data.String = gongdoccommand.FieldName
				gongdoccommandDB.FieldName_Data.Valid = true

				gongdoccommandDB.FieldTypeName_Data.String = gongdoccommand.FieldTypeName
				gongdoccommandDB.FieldTypeName_Data.Valid = true

				gongdoccommandDB.PositionX_Data.Int64 = int64(gongdoccommand.PositionX)
				gongdoccommandDB.PositionX_Data.Valid = true

				gongdoccommandDB.PositionY_Data.Int64 = int64(gongdoccommand.PositionY)
				gongdoccommandDB.PositionY_Data.Valid = true

			}
		}
		query := backRepoGongdocCommand.db.Save(&gongdoccommandDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongdocCommand intance %s", gongdoccommand.Name))
		return err
	}

	return
}

// BackRepoGongdocCommand.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CheckoutPhaseOne() (Error error) {

	gongdoccommandDBArray := make([]GongdocCommandDB, 0)
	query := backRepoGongdocCommand.db.Find(&gongdoccommandDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, gongdoccommandDB := range gongdoccommandDBArray {
		backRepoGongdocCommand.CheckoutPhaseOneInstance(&gongdoccommandDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongdoccommandDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongdoccommandDB
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CheckoutPhaseOneInstance(gongdoccommandDB *GongdocCommandDB) (Error error) {

	// if absent, create entries in the backRepoGongdocCommand maps.
	gongdoccommandWithNewFieldValues := gongdoccommandDB.GongdocCommand
	if _, ok := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID]; !ok {

		(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID] = &gongdoccommandWithNewFieldValues
		(*backRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[&gongdoccommandWithNewFieldValues] = gongdoccommandDB.ID

		// append model store with the new element
		gongdoccommandWithNewFieldValues.Stage()
	}
	gongdoccommandDBWithNewFieldValues := *gongdoccommandDB
	(*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB)[gongdoccommandDB.ID] = &gongdoccommandDBWithNewFieldValues

	return
}

// BackRepoGongdocCommand.CheckoutPhaseTwo Checkouts all staged instances of GongdocCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongdoccommandDB := range *backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandDB {
		backRepoGongdocCommand.CheckoutPhaseTwoInstance(backRepo, gongdoccommandDB)
	}
	return
}

// BackRepoGongdocCommand.CheckoutPhaseTwoInstance Checkouts staged instances of GongdocCommand to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongdocCommand *BackRepoGongdocCommandStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongdoccommandDB *GongdocCommandDB) (Error error) {

	gongdoccommand := (*backRepoGongdocCommand.Map_GongdocCommandDBID_GongdocCommandPtr)[gongdoccommandDB.ID]
	_ = gongdoccommand // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			gongdoccommand.Name = gongdoccommandDB.Name_Data.String

			gongdoccommand.Command = models.GongdocCommandType(gongdoccommandDB.Command_Data.String)

			gongdoccommand.DiagramName = gongdoccommandDB.DiagramName_Data.String

			gongdoccommand.Date = gongdoccommandDB.Date_Data.String

			gongdoccommand.GongdocNodeType = models.GongdocNodeType(gongdoccommandDB.GongdocNodeType_Data.String)

			gongdoccommand.StructName = gongdoccommandDB.StructName_Data.String

			gongdoccommand.FieldName = gongdoccommandDB.FieldName_Data.String

			gongdoccommand.FieldTypeName = gongdoccommandDB.FieldTypeName_Data.String

			gongdoccommand.PositionX = int(gongdoccommandDB.PositionX_Data.Int64)

			gongdoccommand.PositionY = int(gongdoccommandDB.PositionY_Data.Int64)

		}
	}
	return
}

// CommitGongdocCommand allows commit of a single gongdoccommand (if already staged)
func (backRepo *BackRepoStruct) CommitGongdocCommand(gongdoccommand *models.GongdocCommand) {
	backRepo.BackRepoGongdocCommand.CommitPhaseOneInstance(gongdoccommand)
	if id, ok := (*backRepo.BackRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]; ok {
		backRepo.BackRepoGongdocCommand.CommitPhaseTwoInstance(backRepo, id, gongdoccommand)
	}
}

// CommitGongdocCommand allows checkout of a single gongdoccommand (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongdocCommand(gongdoccommand *models.GongdocCommand) {
	// check if the gongdoccommand is staged
	if _, ok := (*backRepo.BackRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]; ok {

		if id, ok := (*backRepo.BackRepoGongdocCommand.Map_GongdocCommandPtr_GongdocCommandDBID)[gongdoccommand]; ok {
			var gongdoccommandDB GongdocCommandDB
			gongdoccommandDB.ID = id

			if err := backRepo.BackRepoGongdocCommand.db.First(&gongdoccommandDB, id).Error; err != nil {
				log.Panicln("CheckoutGongdocCommand : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongdocCommand.CheckoutPhaseOneInstance(&gongdoccommandDB)
			backRepo.BackRepoGongdocCommand.CheckoutPhaseTwoInstance(backRepo, &gongdoccommandDB)
		}
	}
}
