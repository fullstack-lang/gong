// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Classshape sql.NullBool

// ClassshapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model classshapeAPI
type ClassshapeAPI struct {
	models.Classshape

	// insertion for fields declaration
	// Declation for basic field classshapeDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// field Position is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PositionID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	PositionName string

	// Declation for basic field classshapeDB.Structname {{BasicKind}} (to be completed)
	Structname_Data sql.NullString

	// Declation for basic field classshapeDB.Width {{BasicKind}} (to be completed)
	Width_Data sql.NullFloat64

	// Declation for basic field classshapeDB.Heigth {{BasicKind}} (to be completed)
	Heigth_Data sql.NullFloat64

	// Declation for basic field classshapeDB.ClassshapeTargetType {{BasicKind}} (to be completed)
	ClassshapeTargetType_Data sql.NullString

	// Implementation of a reverse ID for field Classdiagram{}.Classshapes []*Classshape
	Classdiagram_ClassshapesDBID sql.NullInt64

	// end of insertion
}

// ClassshapeDB describes a classshape in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model classshapeDB
type ClassshapeDB struct {
	gorm.Model

	ClassshapeAPI
}

// ClassshapeDBs arrays classshapeDBs
// swagger:response classshapeDBsResponse
type ClassshapeDBs []ClassshapeDB

// ClassshapeDBResponse provides response
// swagger:response classshapeDBResponse
type ClassshapeDBResponse struct {
	ClassshapeDB
}

type BackRepoClassshapeStruct struct {
	// stores ClassshapeDB according to their gorm ID
	Map_ClassshapeDBID_ClassshapeDB *map[uint]*ClassshapeDB

	// stores ClassshapeDB ID according to Classshape address
	Map_ClassshapePtr_ClassshapeDBID *map[*models.Classshape]uint

	// stores Classshape according to their gorm ID
	Map_ClassshapeDBID_ClassshapePtr *map[uint]*models.Classshape

	db *gorm.DB
}

// BackRepoClassshape.Init set up the BackRepo of the Classshape
func (backRepoClassshape *BackRepoClassshapeStruct) Init(db *gorm.DB) (Error error) {

	if backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr != nil {
		err := errors.New("In Init, backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr should be nil")
		return err
	}

	if backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB != nil {
		err := errors.New("In Init, backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB should be nil")
		return err
	}

	if backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID != nil {
		err := errors.New("In Init, backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Classshape, 0)
	backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr = &tmp

	tmpDB := make(map[uint]*ClassshapeDB, 0)
	backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB = &tmpDB

	tmpID := make(map[*models.Classshape]uint, 0)
	backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID = &tmpID

	backRepoClassshape.db = db
	return
}

// BackRepoClassshape.CommitPhaseOne commits all staged instances of Classshape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoClassshape *BackRepoClassshapeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for classshape := range stage.Classshapes {
		backRepoClassshape.CommitPhaseOneInstance(classshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, classshape := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr {
		if _, ok := stage.Classshapes[classshape]; !ok {
			backRepoClassshape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoClassshape.CommitDeleteInstance commits deletion of Classshape to the BackRepo
func (backRepoClassshape *BackRepoClassshapeStruct) CommitDeleteInstance(id uint) (Error error) {

	classshape := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[id]

	// classshape is not staged anymore, remove classshapeDB
	classshapeDB := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[id]
	query := backRepoClassshape.db.Unscoped().Delete(&classshapeDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID), classshape)
	delete((*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr), id)
	delete((*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB), id)

	return
}

// BackRepoClassshape.CommitPhaseOneInstance commits classshape staged instances of Classshape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoClassshape *BackRepoClassshapeStruct) CommitPhaseOneInstance(classshape *models.Classshape) (Error error) {

	// check if the classshape is not commited yet
	if _, ok := (*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {
		return
	}

	// initiate classshape
	var classshapeDB ClassshapeDB
	classshapeDB.Classshape = *classshape

	query := backRepoClassshape.db.Create(&classshapeDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape] = classshapeDB.ID
	(*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID] = classshape
	(*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[classshapeDB.ID] = &classshapeDB

	return
}

// BackRepoClassshape.CommitPhaseTwo commits all staged instances of Classshape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassshape *BackRepoClassshapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, classshape := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr {
		backRepoClassshape.CommitPhaseTwoInstance(backRepo, idx, classshape)
	}

	return
}

// BackRepoClassshape.CommitPhaseTwoInstance commits {{structname }} of models.Classshape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassshape *BackRepoClassshapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, classshape *models.Classshape) (Error error) {

	// fetch matching classshapeDB
	if classshapeDB, ok := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				classshapeDB.Name_Data.String = classshape.Name
				classshapeDB.Name_Data.Valid = true

				// commit pointer value classshape.Position translates to updating the classshape.PositionID
				classshapeDB.PositionID.Valid = true // allow for a 0 value (nil association)
				if classshape.Position != nil {
					if PositionId, ok := (*backRepo.BackRepoPosition.Map_PositionPtr_PositionDBID)[classshape.Position]; ok {
						classshapeDB.PositionID.Int64 = int64(PositionId)
					}
				}

				classshapeDB.Structname_Data.String = classshape.Structname
				classshapeDB.Structname_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Field, i.e.
				for _, field := range classshape.Fields {
					if fieldDBID, ok := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[field]; ok {
						if fieldDB, ok := (*backRepo.BackRepoField.Map_FieldDBID_FieldDB)[fieldDBID]; ok {
							fieldDB.Classshape_FieldsDBID.Int64 = int64(classshapeDB.ID)
							fieldDB.Classshape_FieldsDBID.Valid = true
							if q := backRepoClassshape.db.Save(&fieldDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Link, i.e.
				for _, link := range classshape.Links {
					if linkDBID, ok := (*backRepo.BackRepoLink.Map_LinkPtr_LinkDBID)[link]; ok {
						if linkDB, ok := (*backRepo.BackRepoLink.Map_LinkDBID_LinkDB)[linkDBID]; ok {
							linkDB.Classshape_LinksDBID.Int64 = int64(classshapeDB.ID)
							linkDB.Classshape_LinksDBID.Valid = true
							if q := backRepoClassshape.db.Save(&linkDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				classshapeDB.Width_Data.Float64 = classshape.Width
				classshapeDB.Width_Data.Valid = true

				classshapeDB.Heigth_Data.Float64 = classshape.Heigth
				classshapeDB.Heigth_Data.Valid = true

				classshapeDB.ClassshapeTargetType_Data.String = string(classshape.ClassshapeTargetType)
				classshapeDB.ClassshapeTargetType_Data.Valid = true

			}
		}
		query := backRepoClassshape.db.Save(&classshapeDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Classshape intance %s", classshape.Name))
		return err
	}

	return
}

// BackRepoClassshape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoClassshape *BackRepoClassshapeStruct) CheckoutPhaseOne() (Error error) {

	classshapeDBArray := make([]ClassshapeDB, 0)
	query := backRepoClassshape.db.Find(&classshapeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, classshapeDB := range classshapeDBArray {
		backRepoClassshape.CheckoutPhaseOneInstance(&classshapeDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a classshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the classshapeDB
func (backRepoClassshape *BackRepoClassshapeStruct) CheckoutPhaseOneInstance(classshapeDB *ClassshapeDB) (Error error) {

	// if absent, create entries in the backRepoClassshape maps.
	classshapeWithNewFieldValues := classshapeDB.Classshape
	if _, ok := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID]; !ok {

		(*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID] = &classshapeWithNewFieldValues
		(*backRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[&classshapeWithNewFieldValues] = classshapeDB.ID

		// append model store with the new element
		classshapeWithNewFieldValues.Stage()
	}
	classshapeDBWithNewFieldValues := *classshapeDB
	(*backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[classshapeDB.ID] = &classshapeDBWithNewFieldValues

	return
}

// BackRepoClassshape.CheckoutPhaseTwo Checkouts all staged instances of Classshape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassshape *BackRepoClassshapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, classshapeDB := range *backRepoClassshape.Map_ClassshapeDBID_ClassshapeDB {
		backRepoClassshape.CheckoutPhaseTwoInstance(backRepo, classshapeDB)
	}
	return
}

// BackRepoClassshape.CheckoutPhaseTwoInstance Checkouts staged instances of Classshape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassshape *BackRepoClassshapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, classshapeDB *ClassshapeDB) (Error error) {

	classshape := (*backRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[classshapeDB.ID]
	_ = classshape // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			classshape.Name = classshapeDB.Name_Data.String

			// Position field
			if classshapeDB.PositionID.Int64 != 0 {
				classshape.Position = (*backRepo.BackRepoPosition.Map_PositionDBID_PositionPtr)[uint(classshapeDB.PositionID.Int64)]
			}

			classshape.Structname = classshapeDB.Structname_Data.String

			// parse all FieldDB and redeem the array of poiners to Classshape
			// first reset the slice
			classshape.Fields = classshape.Fields[:0]
			for _, FieldDB := range *backRepo.BackRepoField.Map_FieldDBID_FieldDB {
				if FieldDB.Classshape_FieldsDBID.Int64 == int64(classshapeDB.ID) {
					Field := (*backRepo.BackRepoField.Map_FieldDBID_FieldPtr)[FieldDB.ID]
					classshape.Fields = append(classshape.Fields, Field)
				}
			}

			// parse all LinkDB and redeem the array of poiners to Classshape
			// first reset the slice
			classshape.Links = classshape.Links[:0]
			for _, LinkDB := range *backRepo.BackRepoLink.Map_LinkDBID_LinkDB {
				if LinkDB.Classshape_LinksDBID.Int64 == int64(classshapeDB.ID) {
					Link := (*backRepo.BackRepoLink.Map_LinkDBID_LinkPtr)[LinkDB.ID]
					classshape.Links = append(classshape.Links, Link)
				}
			}

			classshape.Width = classshapeDB.Width_Data.Float64

			classshape.Heigth = classshapeDB.Heigth_Data.Float64

			classshape.ClassshapeTargetType = models.ClassshapeTargetType(classshapeDB.ClassshapeTargetType_Data.String)

		}
	}
	return
}

// CommitClassshape allows commit of a single classshape (if already staged)
func (backRepo *BackRepoStruct) CommitClassshape(classshape *models.Classshape) {
	backRepo.BackRepoClassshape.CommitPhaseOneInstance(classshape)
	if id, ok := (*backRepo.BackRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {
		backRepo.BackRepoClassshape.CommitPhaseTwoInstance(backRepo, id, classshape)
	}
}

// CommitClassshape allows checkout of a single classshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutClassshape(classshape *models.Classshape) {
	// check if the classshape is staged
	if _, ok := (*backRepo.BackRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {

		if id, ok := (*backRepo.BackRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {
			var classshapeDB ClassshapeDB
			classshapeDB.ID = id

			if err := backRepo.BackRepoClassshape.db.First(&classshapeDB, id).Error; err != nil {
				log.Panicln("CheckoutClassshape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoClassshape.CheckoutPhaseOneInstance(&classshapeDB)
			backRepo.BackRepoClassshape.CheckoutPhaseTwoInstance(backRepo, &classshapeDB)
		}
	}
}
