// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Field sql.NullBool

// FieldAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fieldAPI
type FieldAPI struct {
	models.Field

	// insertion for fields declaration
	// Declation for basic field fieldDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field fieldDB.Fieldname {{BasicKind}} (to be completed)
	Fieldname_Data sql.NullString

	// Declation for basic field fieldDB.FieldTypeAsString {{BasicKind}} (to be completed)
	FieldTypeAsString_Data sql.NullString

	// Declation for basic field fieldDB.Structname {{BasicKind}} (to be completed)
	Structname_Data sql.NullString

	// Declation for basic field fieldDB.Fieldtypename {{BasicKind}} (to be completed)
	Fieldtypename_Data sql.NullString

	// Implementation of a reverse ID for field Classshape{}.Fields []*Field
	Classshape_FieldsDBID sql.NullInt64

	// end of insertion
}

// FieldDB describes a field in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model fieldDB
type FieldDB struct {
	gorm.Model

	FieldAPI
}

// FieldDBs arrays fieldDBs
// swagger:response fieldDBsResponse
type FieldDBs []FieldDB

// FieldDBResponse provides response
// swagger:response fieldDBResponse
type FieldDBResponse struct {
	FieldDB
}

type BackRepoFieldStruct struct {
	// stores FieldDB according to their gorm ID
	Map_FieldDBID_FieldDB *map[uint]*FieldDB

	// stores FieldDB ID according to Field address
	Map_FieldPtr_FieldDBID *map[*models.Field]uint

	// stores Field according to their gorm ID
	Map_FieldDBID_FieldPtr *map[uint]*models.Field

	db *gorm.DB
}

// BackRepoField.Init set up the BackRepo of the Field
func (backRepoField *BackRepoFieldStruct) Init(db *gorm.DB) (Error error) {

	if backRepoField.Map_FieldDBID_FieldPtr != nil {
		err := errors.New("In Init, backRepoField.Map_FieldDBID_FieldPtr should be nil")
		return err
	}

	if backRepoField.Map_FieldDBID_FieldDB != nil {
		err := errors.New("In Init, backRepoField.Map_FieldDBID_FieldDB should be nil")
		return err
	}

	if backRepoField.Map_FieldPtr_FieldDBID != nil {
		err := errors.New("In Init, backRepoField.Map_FieldPtr_FieldDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Field, 0)
	backRepoField.Map_FieldDBID_FieldPtr = &tmp

	tmpDB := make(map[uint]*FieldDB, 0)
	backRepoField.Map_FieldDBID_FieldDB = &tmpDB

	tmpID := make(map[*models.Field]uint, 0)
	backRepoField.Map_FieldPtr_FieldDBID = &tmpID

	backRepoField.db = db
	return
}

// BackRepoField.CommitPhaseOne commits all staged instances of Field to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoField *BackRepoFieldStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for field := range stage.Fields {
		backRepoField.CommitPhaseOneInstance(field)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, field := range *backRepoField.Map_FieldDBID_FieldPtr {
		if _, ok := stage.Fields[field]; !ok {
			backRepoField.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoField.CommitDeleteInstance commits deletion of Field to the BackRepo
func (backRepoField *BackRepoFieldStruct) CommitDeleteInstance(id uint) (Error error) {

	field := (*backRepoField.Map_FieldDBID_FieldPtr)[id]

	// field is not staged anymore, remove fieldDB
	fieldDB := (*backRepoField.Map_FieldDBID_FieldDB)[id]
	query := backRepoField.db.Unscoped().Delete(&fieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoField.Map_FieldPtr_FieldDBID), field)
	delete((*backRepoField.Map_FieldDBID_FieldPtr), id)
	delete((*backRepoField.Map_FieldDBID_FieldDB), id)

	return
}

// BackRepoField.CommitPhaseOneInstance commits field staged instances of Field to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoField *BackRepoFieldStruct) CommitPhaseOneInstance(field *models.Field) (Error error) {

	// check if the field is not commited yet
	if _, ok := (*backRepoField.Map_FieldPtr_FieldDBID)[field]; ok {
		return
	}

	// initiate field
	var fieldDB FieldDB
	fieldDB.Field = *field

	query := backRepoField.db.Create(&fieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoField.Map_FieldPtr_FieldDBID)[field] = fieldDB.ID
	(*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID] = field
	(*backRepoField.Map_FieldDBID_FieldDB)[fieldDB.ID] = &fieldDB

	return
}

// BackRepoField.CommitPhaseTwo commits all staged instances of Field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoField *BackRepoFieldStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, field := range *backRepoField.Map_FieldDBID_FieldPtr {
		backRepoField.CommitPhaseTwoInstance(backRepo, idx, field)
	}

	return
}

// BackRepoField.CommitPhaseTwoInstance commits {{structname }} of models.Field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoField *BackRepoFieldStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, field *models.Field) (Error error) {

	// fetch matching fieldDB
	if fieldDB, ok := (*backRepoField.Map_FieldDBID_FieldDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				fieldDB.Name_Data.String = field.Name
				fieldDB.Name_Data.Valid = true

				fieldDB.Fieldname_Data.String = field.Fieldname
				fieldDB.Fieldname_Data.Valid = true

				fieldDB.FieldTypeAsString_Data.String = field.FieldTypeAsString
				fieldDB.FieldTypeAsString_Data.Valid = true

				fieldDB.Structname_Data.String = field.Structname
				fieldDB.Structname_Data.Valid = true

				fieldDB.Fieldtypename_Data.String = field.Fieldtypename
				fieldDB.Fieldtypename_Data.Valid = true

			}
		}
		query := backRepoField.db.Save(&fieldDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Field intance %s", field.Name))
		return err
	}

	return
}

// BackRepoField.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoField *BackRepoFieldStruct) CheckoutPhaseOne() (Error error) {

	fieldDBArray := make([]FieldDB, 0)
	query := backRepoField.db.Find(&fieldDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, fieldDB := range fieldDBArray {
		backRepoField.CheckoutPhaseOneInstance(&fieldDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a fieldDB that has been found in the DB, updates the backRepo and stages the
// models version of the fieldDB
func (backRepoField *BackRepoFieldStruct) CheckoutPhaseOneInstance(fieldDB *FieldDB) (Error error) {

	// if absent, create entries in the backRepoField maps.
	fieldWithNewFieldValues := fieldDB.Field
	if _, ok := (*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID]; !ok {

		(*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID] = &fieldWithNewFieldValues
		(*backRepoField.Map_FieldPtr_FieldDBID)[&fieldWithNewFieldValues] = fieldDB.ID

		// append model store with the new element
		fieldWithNewFieldValues.Stage()
	}
	fieldDBWithNewFieldValues := *fieldDB
	(*backRepoField.Map_FieldDBID_FieldDB)[fieldDB.ID] = &fieldDBWithNewFieldValues

	return
}

// BackRepoField.CheckoutPhaseTwo Checkouts all staged instances of Field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoField *BackRepoFieldStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fieldDB := range *backRepoField.Map_FieldDBID_FieldDB {
		backRepoField.CheckoutPhaseTwoInstance(backRepo, fieldDB)
	}
	return
}

// BackRepoField.CheckoutPhaseTwoInstance Checkouts staged instances of Field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoField *BackRepoFieldStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fieldDB *FieldDB) (Error error) {

	field := (*backRepoField.Map_FieldDBID_FieldPtr)[fieldDB.ID]
	_ = field // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			field.Name = fieldDB.Name_Data.String

			field.Fieldname = fieldDB.Fieldname_Data.String

			field.FieldTypeAsString = fieldDB.FieldTypeAsString_Data.String

			field.Structname = fieldDB.Structname_Data.String

			field.Fieldtypename = fieldDB.Fieldtypename_Data.String

		}
	}
	return
}

// CommitField allows commit of a single field (if already staged)
func (backRepo *BackRepoStruct) CommitField(field *models.Field) {
	backRepo.BackRepoField.CommitPhaseOneInstance(field)
	if id, ok := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[field]; ok {
		backRepo.BackRepoField.CommitPhaseTwoInstance(backRepo, id, field)
	}
}

// CommitField allows checkout of a single field (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutField(field *models.Field) {
	// check if the field is staged
	if _, ok := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[field]; ok {

		if id, ok := (*backRepo.BackRepoField.Map_FieldPtr_FieldDBID)[field]; ok {
			var fieldDB FieldDB
			fieldDB.ID = id

			if err := backRepo.BackRepoField.db.First(&fieldDB, id).Error; err != nil {
				log.Panicln("CheckoutField : Problem with getting object with id:", id)
			}
			backRepo.BackRepoField.CheckoutPhaseOneInstance(&fieldDB)
			backRepo.BackRepoField.CheckoutPhaseTwoInstance(backRepo, &fieldDB)
		}
	}
}
