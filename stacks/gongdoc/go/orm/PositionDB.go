// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Position sql.NullBool

// PositionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model positionAPI
type PositionAPI struct {
	models.Position

	// insertion for fields declaration
	// Declation for basic field positionDB.X {{BasicKind}} (to be completed)
	X_Data sql.NullFloat64

	// Declation for basic field positionDB.Y {{BasicKind}} (to be completed)
	Y_Data sql.NullFloat64

	// Declation for basic field positionDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// PositionDB describes a position in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model positionDB
type PositionDB struct {
	gorm.Model

	PositionAPI
}

// PositionDBs arrays positionDBs
// swagger:response positionDBsResponse
type PositionDBs []PositionDB

// PositionDBResponse provides response
// swagger:response positionDBResponse
type PositionDBResponse struct {
	PositionDB
}

type BackRepoPositionStruct struct {
	// stores PositionDB according to their gorm ID
	Map_PositionDBID_PositionDB *map[uint]*PositionDB

	// stores PositionDB ID according to Position address
	Map_PositionPtr_PositionDBID *map[*models.Position]uint

	// stores Position according to their gorm ID
	Map_PositionDBID_PositionPtr *map[uint]*models.Position

	db *gorm.DB
}

// BackRepoPosition.Init set up the BackRepo of the Position
func (backRepoPosition *BackRepoPositionStruct) Init(db *gorm.DB) (Error error) {

	if backRepoPosition.Map_PositionDBID_PositionPtr != nil {
		err := errors.New("In Init, backRepoPosition.Map_PositionDBID_PositionPtr should be nil")
		return err
	}

	if backRepoPosition.Map_PositionDBID_PositionDB != nil {
		err := errors.New("In Init, backRepoPosition.Map_PositionDBID_PositionDB should be nil")
		return err
	}

	if backRepoPosition.Map_PositionPtr_PositionDBID != nil {
		err := errors.New("In Init, backRepoPosition.Map_PositionPtr_PositionDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Position, 0)
	backRepoPosition.Map_PositionDBID_PositionPtr = &tmp

	tmpDB := make(map[uint]*PositionDB, 0)
	backRepoPosition.Map_PositionDBID_PositionDB = &tmpDB

	tmpID := make(map[*models.Position]uint, 0)
	backRepoPosition.Map_PositionPtr_PositionDBID = &tmpID

	backRepoPosition.db = db
	return
}

// BackRepoPosition.CommitPhaseOne commits all staged instances of Position to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPosition *BackRepoPositionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for position := range stage.Positions {
		backRepoPosition.CommitPhaseOneInstance(position)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, position := range *backRepoPosition.Map_PositionDBID_PositionPtr {
		if _, ok := stage.Positions[position]; !ok {
			backRepoPosition.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPosition.CommitDeleteInstance commits deletion of Position to the BackRepo
func (backRepoPosition *BackRepoPositionStruct) CommitDeleteInstance(id uint) (Error error) {

	position := (*backRepoPosition.Map_PositionDBID_PositionPtr)[id]

	// position is not staged anymore, remove positionDB
	positionDB := (*backRepoPosition.Map_PositionDBID_PositionDB)[id]
	query := backRepoPosition.db.Unscoped().Delete(&positionDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoPosition.Map_PositionPtr_PositionDBID), position)
	delete((*backRepoPosition.Map_PositionDBID_PositionPtr), id)
	delete((*backRepoPosition.Map_PositionDBID_PositionDB), id)

	return
}

// BackRepoPosition.CommitPhaseOneInstance commits position staged instances of Position to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPosition *BackRepoPositionStruct) CommitPhaseOneInstance(position *models.Position) (Error error) {

	// check if the position is not commited yet
	if _, ok := (*backRepoPosition.Map_PositionPtr_PositionDBID)[position]; ok {
		return
	}

	// initiate position
	var positionDB PositionDB
	positionDB.Position = *position

	query := backRepoPosition.db.Create(&positionDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoPosition.Map_PositionPtr_PositionDBID)[position] = positionDB.ID
	(*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID] = position
	(*backRepoPosition.Map_PositionDBID_PositionDB)[positionDB.ID] = &positionDB

	return
}

// BackRepoPosition.CommitPhaseTwo commits all staged instances of Position to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPosition *BackRepoPositionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, position := range *backRepoPosition.Map_PositionDBID_PositionPtr {
		backRepoPosition.CommitPhaseTwoInstance(backRepo, idx, position)
	}

	return
}

// BackRepoPosition.CommitPhaseTwoInstance commits {{structname }} of models.Position to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPosition *BackRepoPositionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, position *models.Position) (Error error) {

	// fetch matching positionDB
	if positionDB, ok := (*backRepoPosition.Map_PositionDBID_PositionDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				positionDB.X_Data.Float64 = position.X
				positionDB.X_Data.Valid = true

				positionDB.Y_Data.Float64 = position.Y
				positionDB.Y_Data.Valid = true

				positionDB.Name_Data.String = position.Name
				positionDB.Name_Data.Valid = true

			}
		}
		query := backRepoPosition.db.Save(&positionDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Position intance %s", position.Name))
		return err
	}

	return
}

// BackRepoPosition.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoPosition *BackRepoPositionStruct) CheckoutPhaseOne() (Error error) {

	positionDBArray := make([]PositionDB, 0)
	query := backRepoPosition.db.Find(&positionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, positionDB := range positionDBArray {
		backRepoPosition.CheckoutPhaseOneInstance(&positionDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a positionDB that has been found in the DB, updates the backRepo and stages the
// models version of the positionDB
func (backRepoPosition *BackRepoPositionStruct) CheckoutPhaseOneInstance(positionDB *PositionDB) (Error error) {

	// if absent, create entries in the backRepoPosition maps.
	positionWithNewFieldValues := positionDB.Position
	if _, ok := (*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID]; !ok {

		(*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID] = &positionWithNewFieldValues
		(*backRepoPosition.Map_PositionPtr_PositionDBID)[&positionWithNewFieldValues] = positionDB.ID

		// append model store with the new element
		positionWithNewFieldValues.Stage()
	}
	positionDBWithNewFieldValues := *positionDB
	(*backRepoPosition.Map_PositionDBID_PositionDB)[positionDB.ID] = &positionDBWithNewFieldValues

	return
}

// BackRepoPosition.CheckoutPhaseTwo Checkouts all staged instances of Position to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPosition *BackRepoPositionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, positionDB := range *backRepoPosition.Map_PositionDBID_PositionDB {
		backRepoPosition.CheckoutPhaseTwoInstance(backRepo, positionDB)
	}
	return
}

// BackRepoPosition.CheckoutPhaseTwoInstance Checkouts staged instances of Position to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPosition *BackRepoPositionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, positionDB *PositionDB) (Error error) {

	position := (*backRepoPosition.Map_PositionDBID_PositionPtr)[positionDB.ID]
	_ = position // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			position.X = positionDB.X_Data.Float64

			position.Y = positionDB.Y_Data.Float64

			position.Name = positionDB.Name_Data.String

		}
	}
	return
}

// CommitPosition allows commit of a single position (if already staged)
func (backRepo *BackRepoStruct) CommitPosition(position *models.Position) {
	backRepo.BackRepoPosition.CommitPhaseOneInstance(position)
	if id, ok := (*backRepo.BackRepoPosition.Map_PositionPtr_PositionDBID)[position]; ok {
		backRepo.BackRepoPosition.CommitPhaseTwoInstance(backRepo, id, position)
	}
}

// CommitPosition allows checkout of a single position (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPosition(position *models.Position) {
	// check if the position is staged
	if _, ok := (*backRepo.BackRepoPosition.Map_PositionPtr_PositionDBID)[position]; ok {

		if id, ok := (*backRepo.BackRepoPosition.Map_PositionPtr_PositionDBID)[position]; ok {
			var positionDB PositionDB
			positionDB.ID = id

			if err := backRepo.BackRepoPosition.db.First(&positionDB, id).Error; err != nil {
				log.Panicln("CheckoutPosition : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPosition.CheckoutPhaseOneInstance(&positionDB)
			backRepo.BackRepoPosition.CheckoutPhaseTwoInstance(backRepo, &positionDB)
		}
	}
}
