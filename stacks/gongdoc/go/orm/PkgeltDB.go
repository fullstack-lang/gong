// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Pkgelt sql.NullBool

// PkgeltAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pkgeltAPI
type PkgeltAPI struct {
	models.Pkgelt

	// insertion for fields declaration
	// Declation for basic field pkgeltDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field pkgeltDB.Path {{BasicKind}} (to be completed)
	Path_Data sql.NullString

	// end of insertion
}

// PkgeltDB describes a pkgelt in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model pkgeltDB
type PkgeltDB struct {
	gorm.Model

	PkgeltAPI
}

// PkgeltDBs arrays pkgeltDBs
// swagger:response pkgeltDBsResponse
type PkgeltDBs []PkgeltDB

// PkgeltDBResponse provides response
// swagger:response pkgeltDBResponse
type PkgeltDBResponse struct {
	PkgeltDB
}

type BackRepoPkgeltStruct struct {
	// stores PkgeltDB according to their gorm ID
	Map_PkgeltDBID_PkgeltDB *map[uint]*PkgeltDB

	// stores PkgeltDB ID according to Pkgelt address
	Map_PkgeltPtr_PkgeltDBID *map[*models.Pkgelt]uint

	// stores Pkgelt according to their gorm ID
	Map_PkgeltDBID_PkgeltPtr *map[uint]*models.Pkgelt

	db *gorm.DB
}

// BackRepoPkgelt.Init set up the BackRepo of the Pkgelt
func (backRepoPkgelt *BackRepoPkgeltStruct) Init(db *gorm.DB) (Error error) {

	if backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr != nil {
		err := errors.New("In Init, backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr should be nil")
		return err
	}

	if backRepoPkgelt.Map_PkgeltDBID_PkgeltDB != nil {
		err := errors.New("In Init, backRepoPkgelt.Map_PkgeltDBID_PkgeltDB should be nil")
		return err
	}

	if backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID != nil {
		err := errors.New("In Init, backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Pkgelt, 0)
	backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr = &tmp

	tmpDB := make(map[uint]*PkgeltDB, 0)
	backRepoPkgelt.Map_PkgeltDBID_PkgeltDB = &tmpDB

	tmpID := make(map[*models.Pkgelt]uint, 0)
	backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID = &tmpID

	backRepoPkgelt.db = db
	return
}

// BackRepoPkgelt.CommitPhaseOne commits all staged instances of Pkgelt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pkgelt := range stage.Pkgelts {
		backRepoPkgelt.CommitPhaseOneInstance(pkgelt)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pkgelt := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr {
		if _, ok := stage.Pkgelts[pkgelt]; !ok {
			backRepoPkgelt.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPkgelt.CommitDeleteInstance commits deletion of Pkgelt to the BackRepo
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitDeleteInstance(id uint) (Error error) {

	pkgelt := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[id]

	// pkgelt is not staged anymore, remove pkgeltDB
	pkgeltDB := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[id]
	query := backRepoPkgelt.db.Unscoped().Delete(&pkgeltDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID), pkgelt)
	delete((*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr), id)
	delete((*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB), id)

	return
}

// BackRepoPkgelt.CommitPhaseOneInstance commits pkgelt staged instances of Pkgelt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitPhaseOneInstance(pkgelt *models.Pkgelt) (Error error) {

	// check if the pkgelt is not commited yet
	if _, ok := (*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]; ok {
		return
	}

	// initiate pkgelt
	var pkgeltDB PkgeltDB
	pkgeltDB.Pkgelt = *pkgelt

	query := backRepoPkgelt.db.Create(&pkgeltDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt] = pkgeltDB.ID
	(*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID] = pkgelt
	(*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = &pkgeltDB

	return
}

// BackRepoPkgelt.CommitPhaseTwo commits all staged instances of Pkgelt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pkgelt := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr {
		backRepoPkgelt.CommitPhaseTwoInstance(backRepo, idx, pkgelt)
	}

	return
}

// BackRepoPkgelt.CommitPhaseTwoInstance commits {{structname }} of models.Pkgelt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPkgelt *BackRepoPkgeltStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pkgelt *models.Pkgelt) (Error error) {

	// fetch matching pkgeltDB
	if pkgeltDB, ok := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				pkgeltDB.Name_Data.String = pkgelt.Name
				pkgeltDB.Name_Data.Valid = true

				pkgeltDB.Path_Data.String = pkgelt.Path
				pkgeltDB.Path_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Classdiagram, i.e.
				for _, classdiagram := range pkgelt.Classdiagrams {
					if classdiagramDBID, ok := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[classdiagram]; ok {
						if classdiagramDB, ok := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[classdiagramDBID]; ok {
							classdiagramDB.Pkgelt_ClassdiagramsDBID.Int64 = int64(pkgeltDB.ID)
							classdiagramDB.Pkgelt_ClassdiagramsDBID.Valid = true
							if q := backRepoPkgelt.db.Save(&classdiagramDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Umlsc, i.e.
				for _, umlsc := range pkgelt.Umlscs {
					if umlscDBID, ok := (*backRepo.BackRepoUmlsc.Map_UmlscPtr_UmlscDBID)[umlsc]; ok {
						if umlscDB, ok := (*backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscDB)[umlscDBID]; ok {
							umlscDB.Pkgelt_UmlscsDBID.Int64 = int64(pkgeltDB.ID)
							umlscDB.Pkgelt_UmlscsDBID.Valid = true
							if q := backRepoPkgelt.db.Save(&umlscDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoPkgelt.db.Save(&pkgeltDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Pkgelt intance %s", pkgelt.Name))
		return err
	}

	return
}

// BackRepoPkgelt.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoPkgelt *BackRepoPkgeltStruct) CheckoutPhaseOne() (Error error) {

	pkgeltDBArray := make([]PkgeltDB, 0)
	query := backRepoPkgelt.db.Find(&pkgeltDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, pkgeltDB := range pkgeltDBArray {
		backRepoPkgelt.CheckoutPhaseOneInstance(&pkgeltDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a pkgeltDB that has been found in the DB, updates the backRepo and stages the
// models version of the pkgeltDB
func (backRepoPkgelt *BackRepoPkgeltStruct) CheckoutPhaseOneInstance(pkgeltDB *PkgeltDB) (Error error) {

	// if absent, create entries in the backRepoPkgelt maps.
	pkgeltWithNewFieldValues := pkgeltDB.Pkgelt
	if _, ok := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]; !ok {

		(*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID] = &pkgeltWithNewFieldValues
		(*backRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[&pkgeltWithNewFieldValues] = pkgeltDB.ID

		// append model store with the new element
		pkgeltWithNewFieldValues.Stage()
	}
	pkgeltDBWithNewFieldValues := *pkgeltDB
	(*backRepoPkgelt.Map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = &pkgeltDBWithNewFieldValues

	return
}

// BackRepoPkgelt.CheckoutPhaseTwo Checkouts all staged instances of Pkgelt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPkgelt *BackRepoPkgeltStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pkgeltDB := range *backRepoPkgelt.Map_PkgeltDBID_PkgeltDB {
		backRepoPkgelt.CheckoutPhaseTwoInstance(backRepo, pkgeltDB)
	}
	return
}

// BackRepoPkgelt.CheckoutPhaseTwoInstance Checkouts staged instances of Pkgelt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPkgelt *BackRepoPkgeltStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pkgeltDB *PkgeltDB) (Error error) {

	pkgelt := (*backRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]
	_ = pkgelt // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			pkgelt.Name = pkgeltDB.Name_Data.String

			pkgelt.Path = pkgeltDB.Path_Data.String

			// parse all ClassdiagramDB and redeem the array of poiners to Pkgelt
			// first reset the slice
			pkgelt.Classdiagrams = pkgelt.Classdiagrams[:0]
			for _, ClassdiagramDB := range *backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB {
				if ClassdiagramDB.Pkgelt_ClassdiagramsDBID.Int64 == int64(pkgeltDB.ID) {
					Classdiagram := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[ClassdiagramDB.ID]
					pkgelt.Classdiagrams = append(pkgelt.Classdiagrams, Classdiagram)
				}
			}

			// parse all UmlscDB and redeem the array of poiners to Pkgelt
			// first reset the slice
			pkgelt.Umlscs = pkgelt.Umlscs[:0]
			for _, UmlscDB := range *backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscDB {
				if UmlscDB.Pkgelt_UmlscsDBID.Int64 == int64(pkgeltDB.ID) {
					Umlsc := (*backRepo.BackRepoUmlsc.Map_UmlscDBID_UmlscPtr)[UmlscDB.ID]
					pkgelt.Umlscs = append(pkgelt.Umlscs, Umlsc)
				}
			}

		}
	}
	return
}

// CommitPkgelt allows commit of a single pkgelt (if already staged)
func (backRepo *BackRepoStruct) CommitPkgelt(pkgelt *models.Pkgelt) {
	backRepo.BackRepoPkgelt.CommitPhaseOneInstance(pkgelt)
	if id, ok := (*backRepo.BackRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]; ok {
		backRepo.BackRepoPkgelt.CommitPhaseTwoInstance(backRepo, id, pkgelt)
	}
}

// CommitPkgelt allows checkout of a single pkgelt (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPkgelt(pkgelt *models.Pkgelt) {
	// check if the pkgelt is staged
	if _, ok := (*backRepo.BackRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]; ok {

		if id, ok := (*backRepo.BackRepoPkgelt.Map_PkgeltPtr_PkgeltDBID)[pkgelt]; ok {
			var pkgeltDB PkgeltDB
			pkgeltDB.ID = id

			if err := backRepo.BackRepoPkgelt.db.First(&pkgeltDB, id).Error; err != nil {
				log.Panicln("CheckoutPkgelt : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPkgelt.CheckoutPhaseOneInstance(&pkgeltDB)
			backRepo.BackRepoPkgelt.CheckoutPhaseTwoInstance(backRepo, &pkgeltDB)
		}
	}
}
