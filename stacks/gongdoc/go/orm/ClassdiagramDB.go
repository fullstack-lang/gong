// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"

	"github.com/fullstack-lang/gong/stacks/gongdoc/go/models"
	"github.com/jinzhu/gorm"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Classdiagram sql.NullBool

// ClassdiagramAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model classdiagramAPI
type ClassdiagramAPI struct {
	models.Classdiagram

	// insertion for fields declaration
	// Declation for basic field classdiagramDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Implementation of a reverse ID for field Pkgelt{}.Classdiagrams []*Classdiagram
	Pkgelt_ClassdiagramsDBID sql.NullInt64

	// end of insertion
}

// ClassdiagramDB describes a classdiagram in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model classdiagramDB
type ClassdiagramDB struct {
	gorm.Model

	ClassdiagramAPI
}

// ClassdiagramDBs arrays classdiagramDBs
// swagger:response classdiagramDBsResponse
type ClassdiagramDBs []ClassdiagramDB

// ClassdiagramDBResponse provides response
// swagger:response classdiagramDBResponse
type ClassdiagramDBResponse struct {
	ClassdiagramDB
}

type BackRepoClassdiagramStruct struct {
	// stores ClassdiagramDB according to their gorm ID
	Map_ClassdiagramDBID_ClassdiagramDB *map[uint]*ClassdiagramDB

	// stores ClassdiagramDB ID according to Classdiagram address
	Map_ClassdiagramPtr_ClassdiagramDBID *map[*models.Classdiagram]uint

	// stores Classdiagram according to their gorm ID
	Map_ClassdiagramDBID_ClassdiagramPtr *map[uint]*models.Classdiagram

	db *gorm.DB
}

// BackRepoClassdiagram.Init set up the BackRepo of the Classdiagram
func (backRepoClassdiagram *BackRepoClassdiagramStruct) Init(db *gorm.DB) (Error error) {

	if backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr != nil {
		err := errors.New("In Init, backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr should be nil")
		return err
	}

	if backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB != nil {
		err := errors.New("In Init, backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB should be nil")
		return err
	}

	if backRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID != nil {
		err := errors.New("In Init, backRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Classdiagram, 0)
	backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr = &tmp

	tmpDB := make(map[uint]*ClassdiagramDB, 0)
	backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB = &tmpDB

	tmpID := make(map[*models.Classdiagram]uint, 0)
	backRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID = &tmpID

	backRepoClassdiagram.db = db
	return
}

// BackRepoClassdiagram.CommitPhaseOne commits all staged instances of Classdiagram to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for classdiagram := range stage.Classdiagrams {
		backRepoClassdiagram.CommitPhaseOneInstance(classdiagram)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, classdiagram := range *backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr {
		if _, ok := stage.Classdiagrams[classdiagram]; !ok {
			backRepoClassdiagram.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoClassdiagram.CommitDeleteInstance commits deletion of Classdiagram to the BackRepo
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CommitDeleteInstance(id uint) (Error error) {

	classdiagram := (*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[id]

	// classdiagram is not staged anymore, remove classdiagramDB
	classdiagramDB := (*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[id]
	query := backRepoClassdiagram.db.Unscoped().Delete(&classdiagramDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID), classdiagram)
	delete((*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr), id)
	delete((*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB), id)

	return
}

// BackRepoClassdiagram.CommitPhaseOneInstance commits classdiagram staged instances of Classdiagram to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CommitPhaseOneInstance(classdiagram *models.Classdiagram) (Error error) {

	// check if the classdiagram is not commited yet
	if _, ok := (*backRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[classdiagram]; ok {
		return
	}

	// initiate classdiagram
	var classdiagramDB ClassdiagramDB
	classdiagramDB.Classdiagram = *classdiagram

	query := backRepoClassdiagram.db.Create(&classdiagramDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[classdiagram] = classdiagramDB.ID
	(*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB.ID] = classdiagram
	(*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[classdiagramDB.ID] = &classdiagramDB

	return
}

// BackRepoClassdiagram.CommitPhaseTwo commits all staged instances of Classdiagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, classdiagram := range *backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr {
		backRepoClassdiagram.CommitPhaseTwoInstance(backRepo, idx, classdiagram)
	}

	return
}

// BackRepoClassdiagram.CommitPhaseTwoInstance commits {{structname }} of models.Classdiagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, classdiagram *models.Classdiagram) (Error error) {

	// fetch matching classdiagramDB
	if classdiagramDB, ok := (*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				classdiagramDB.Name_Data.String = classdiagram.Name
				classdiagramDB.Name_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Classshape, i.e.
				for _, classshape := range classdiagram.Classshapes {
					if classshapeDBID, ok := (*backRepo.BackRepoClassshape.Map_ClassshapePtr_ClassshapeDBID)[classshape]; ok {
						if classshapeDB, ok := (*backRepo.BackRepoClassshape.Map_ClassshapeDBID_ClassshapeDB)[classshapeDBID]; ok {
							classshapeDB.Classdiagram_ClassshapesDBID.Int64 = int64(classdiagramDB.ID)
							classshapeDB.Classdiagram_ClassshapesDBID.Valid = true
							if q := backRepoClassdiagram.db.Save(&classshapeDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoClassdiagram.db.Save(&classdiagramDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Classdiagram intance %s", classdiagram.Name))
		return err
	}

	return
}

// BackRepoClassdiagram.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CheckoutPhaseOne() (Error error) {

	classdiagramDBArray := make([]ClassdiagramDB, 0)
	query := backRepoClassdiagram.db.Find(&classdiagramDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, classdiagramDB := range classdiagramDBArray {
		backRepoClassdiagram.CheckoutPhaseOneInstance(&classdiagramDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a classdiagramDB that has been found in the DB, updates the backRepo and stages the
// models version of the classdiagramDB
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CheckoutPhaseOneInstance(classdiagramDB *ClassdiagramDB) (Error error) {

	// if absent, create entries in the backRepoClassdiagram maps.
	classdiagramWithNewFieldValues := classdiagramDB.Classdiagram
	if _, ok := (*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB.ID]; !ok {

		(*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB.ID] = &classdiagramWithNewFieldValues
		(*backRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[&classdiagramWithNewFieldValues] = classdiagramDB.ID

		// append model store with the new element
		classdiagramWithNewFieldValues.Stage()
	}
	classdiagramDBWithNewFieldValues := *classdiagramDB
	(*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB)[classdiagramDB.ID] = &classdiagramDBWithNewFieldValues

	return
}

// BackRepoClassdiagram.CheckoutPhaseTwo Checkouts all staged instances of Classdiagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, classdiagramDB := range *backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramDB {
		backRepoClassdiagram.CheckoutPhaseTwoInstance(backRepo, classdiagramDB)
	}
	return
}

// BackRepoClassdiagram.CheckoutPhaseTwoInstance Checkouts staged instances of Classdiagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClassdiagram *BackRepoClassdiagramStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, classdiagramDB *ClassdiagramDB) (Error error) {

	classdiagram := (*backRepoClassdiagram.Map_ClassdiagramDBID_ClassdiagramPtr)[classdiagramDB.ID]
	_ = classdiagram // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			classdiagram.Name = classdiagramDB.Name_Data.String

			// parse all ClassshapeDB and redeem the array of poiners to Classdiagram
			// first reset the slice
			classdiagram.Classshapes = classdiagram.Classshapes[:0]
			for _, ClassshapeDB := range *backRepo.BackRepoClassshape.Map_ClassshapeDBID_ClassshapeDB {
				if ClassshapeDB.Classdiagram_ClassshapesDBID.Int64 == int64(classdiagramDB.ID) {
					Classshape := (*backRepo.BackRepoClassshape.Map_ClassshapeDBID_ClassshapePtr)[ClassshapeDB.ID]
					classdiagram.Classshapes = append(classdiagram.Classshapes, Classshape)
				}
			}

		}
	}
	return
}

// CommitClassdiagram allows commit of a single classdiagram (if already staged)
func (backRepo *BackRepoStruct) CommitClassdiagram(classdiagram *models.Classdiagram) {
	backRepo.BackRepoClassdiagram.CommitPhaseOneInstance(classdiagram)
	if id, ok := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[classdiagram]; ok {
		backRepo.BackRepoClassdiagram.CommitPhaseTwoInstance(backRepo, id, classdiagram)
	}
}

// CommitClassdiagram allows checkout of a single classdiagram (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutClassdiagram(classdiagram *models.Classdiagram) {
	// check if the classdiagram is staged
	if _, ok := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[classdiagram]; ok {

		if id, ok := (*backRepo.BackRepoClassdiagram.Map_ClassdiagramPtr_ClassdiagramDBID)[classdiagram]; ok {
			var classdiagramDB ClassdiagramDB
			classdiagramDB.ID = id

			if err := backRepo.BackRepoClassdiagram.db.First(&classdiagramDB, id).Error; err != nil {
				log.Panicln("CheckoutClassdiagram : Problem with getting object with id:", id)
			}
			backRepo.BackRepoClassdiagram.CheckoutPhaseOneInstance(&classdiagramDB)
			backRepo.BackRepoClassdiagram.CheckoutPhaseTwoInstance(backRepo, &classdiagramDB)
		}
	}
}
