// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/probe/go/db"
	"github.com/fullstack-lang/gong/lib/probe/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Probe2_sql sql.NullBool
var dummy_Probe2_time time.Duration
var dummy_Probe2_sort sort.Float64Slice

// Probe2API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model probe2API
type Probe2API struct {
	gorm.Model

	models.Probe2_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Probe2PointersEncoding Probe2PointersEncoding
}

// Probe2PointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Probe2PointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Probe2DB describes a probe2 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model probe2DB
type Probe2DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field probe2DB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Probe2PointersEncoding
}

// Probe2DBs arrays probe2DBs
// swagger:response probe2DBsResponse
type Probe2DBs []Probe2DB

// Probe2DBResponse provides response
// swagger:response probe2DBResponse
type Probe2DBResponse struct {
	Probe2DB
}

// Probe2WOP is a Probe2 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Probe2WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Probe2_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoProbe2Struct struct {
	// stores Probe2DB according to their gorm ID
	Map_Probe2DBID_Probe2DB map[uint]*Probe2DB

	// stores Probe2DB ID according to Probe2 address
	Map_Probe2Ptr_Probe2DBID map[*models.Probe2]uint

	// stores Probe2 according to their gorm ID
	Map_Probe2DBID_Probe2Ptr map[uint]*models.Probe2

	db db.DBInterface

	stage *models.Stage
}

func (backRepoProbe2 *BackRepoProbe2Struct) GetStage() (stage *models.Stage) {
	stage = backRepoProbe2.stage
	return
}

func (backRepoProbe2 *BackRepoProbe2Struct) GetDB() db.DBInterface {
	return backRepoProbe2.db
}

// GetProbe2DBFromProbe2Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoProbe2 *BackRepoProbe2Struct) GetProbe2DBFromProbe2Ptr(probe2 *models.Probe2) (probe2DB *Probe2DB) {
	id := backRepoProbe2.Map_Probe2Ptr_Probe2DBID[probe2]
	probe2DB = backRepoProbe2.Map_Probe2DBID_Probe2DB[id]
	return
}

// BackRepoProbe2.CommitPhaseOne commits all staged instances of Probe2 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoProbe2 *BackRepoProbe2Struct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var probe2s []*models.Probe2
	for probe2 := range stage.Probe2s {
		probe2s = append(probe2s, probe2)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(probe2s, func(i, j int) bool {
		return stage.Probe2Map_Staged_Order[probe2s[i]] < stage.Probe2Map_Staged_Order[probe2s[j]]
	})

	for _, probe2 := range probe2s {
		backRepoProbe2.CommitPhaseOneInstance(probe2)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, probe2 := range backRepoProbe2.Map_Probe2DBID_Probe2Ptr {
		if _, ok := stage.Probe2s[probe2]; !ok {
			backRepoProbe2.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoProbe2.CommitDeleteInstance commits deletion of Probe2 to the BackRepo
func (backRepoProbe2 *BackRepoProbe2Struct) CommitDeleteInstance(id uint) (Error error) {

	probe2 := backRepoProbe2.Map_Probe2DBID_Probe2Ptr[id]

	// probe2 is not staged anymore, remove probe2DB
	probe2DB := backRepoProbe2.Map_Probe2DBID_Probe2DB[id]
	db, _ := backRepoProbe2.db.Unscoped()
	_, err := db.Delete(probe2DB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoProbe2.Map_Probe2Ptr_Probe2DBID, probe2)
	delete(backRepoProbe2.Map_Probe2DBID_Probe2Ptr, id)
	delete(backRepoProbe2.Map_Probe2DBID_Probe2DB, id)

	return
}

// BackRepoProbe2.CommitPhaseOneInstance commits probe2 staged instances of Probe2 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoProbe2 *BackRepoProbe2Struct) CommitPhaseOneInstance(probe2 *models.Probe2) (Error error) {

	// check if the probe2 is not commited yet
	if _, ok := backRepoProbe2.Map_Probe2Ptr_Probe2DBID[probe2]; ok {
		return
	}

	// initiate probe2
	var probe2DB Probe2DB
	probe2DB.CopyBasicFieldsFromProbe2(probe2)

	_, err := backRepoProbe2.db.Create(&probe2DB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoProbe2.Map_Probe2Ptr_Probe2DBID[probe2] = probe2DB.ID
	backRepoProbe2.Map_Probe2DBID_Probe2Ptr[probe2DB.ID] = probe2
	backRepoProbe2.Map_Probe2DBID_Probe2DB[probe2DB.ID] = &probe2DB

	return
}

// BackRepoProbe2.CommitPhaseTwo commits all staged instances of Probe2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProbe2 *BackRepoProbe2Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, probe2 := range backRepoProbe2.Map_Probe2DBID_Probe2Ptr {
		backRepoProbe2.CommitPhaseTwoInstance(backRepo, idx, probe2)
	}

	return
}

// BackRepoProbe2.CommitPhaseTwoInstance commits {{structname }} of models.Probe2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProbe2 *BackRepoProbe2Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, probe2 *models.Probe2) (Error error) {

	// fetch matching probe2DB
	if probe2DB, ok := backRepoProbe2.Map_Probe2DBID_Probe2DB[idx]; ok {

		probe2DB.CopyBasicFieldsFromProbe2(probe2)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoProbe2.db.Save(probe2DB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Probe2 intance %s", probe2.Name))
		return err
	}

	return
}

// BackRepoProbe2.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoProbe2 *BackRepoProbe2Struct) CheckoutPhaseOne() (Error error) {

	probe2DBArray := make([]Probe2DB, 0)
	_, err := backRepoProbe2.db.Find(&probe2DBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	probe2InstancesToBeRemovedFromTheStage := make(map[*models.Probe2]any)
	for key, value := range backRepoProbe2.stage.Probe2s {
		probe2InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, probe2DB := range probe2DBArray {
		backRepoProbe2.CheckoutPhaseOneInstance(&probe2DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		probe2, ok := backRepoProbe2.Map_Probe2DBID_Probe2Ptr[probe2DB.ID]
		if ok {
			delete(probe2InstancesToBeRemovedFromTheStage, probe2)
		}
	}

	// remove from stage and back repo's 3 maps all probe2s that are not in the checkout
	for probe2 := range probe2InstancesToBeRemovedFromTheStage {
		probe2.Unstage(backRepoProbe2.GetStage())

		// remove instance from the back repo 3 maps
		probe2ID := backRepoProbe2.Map_Probe2Ptr_Probe2DBID[probe2]
		delete(backRepoProbe2.Map_Probe2Ptr_Probe2DBID, probe2)
		delete(backRepoProbe2.Map_Probe2DBID_Probe2DB, probe2ID)
		delete(backRepoProbe2.Map_Probe2DBID_Probe2Ptr, probe2ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a probe2DB that has been found in the DB, updates the backRepo and stages the
// models version of the probe2DB
func (backRepoProbe2 *BackRepoProbe2Struct) CheckoutPhaseOneInstance(probe2DB *Probe2DB) (Error error) {

	probe2, ok := backRepoProbe2.Map_Probe2DBID_Probe2Ptr[probe2DB.ID]
	if !ok {
		probe2 = new(models.Probe2)

		backRepoProbe2.Map_Probe2DBID_Probe2Ptr[probe2DB.ID] = probe2
		backRepoProbe2.Map_Probe2Ptr_Probe2DBID[probe2] = probe2DB.ID

		// append model store with the new element
		probe2.Name = probe2DB.Name_Data.String
		probe2.Stage(backRepoProbe2.GetStage())
	}
	probe2DB.CopyBasicFieldsToProbe2(probe2)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	probe2.Stage(backRepoProbe2.GetStage())

	// preserve pointer to probe2DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Probe2DBID_Probe2DB)[probe2DB hold variable pointers
	probe2DB_Data := *probe2DB
	preservedPtrToProbe2 := &probe2DB_Data
	backRepoProbe2.Map_Probe2DBID_Probe2DB[probe2DB.ID] = preservedPtrToProbe2

	return
}

// BackRepoProbe2.CheckoutPhaseTwo Checkouts all staged instances of Probe2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProbe2 *BackRepoProbe2Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, probe2DB := range backRepoProbe2.Map_Probe2DBID_Probe2DB {
		backRepoProbe2.CheckoutPhaseTwoInstance(backRepo, probe2DB)
	}
	return
}

// BackRepoProbe2.CheckoutPhaseTwoInstance Checkouts staged instances of Probe2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProbe2 *BackRepoProbe2Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, probe2DB *Probe2DB) (Error error) {

	probe2 := backRepoProbe2.Map_Probe2DBID_Probe2Ptr[probe2DB.ID]

	probe2DB.DecodePointers(backRepo, probe2)

	return
}

func (probe2DB *Probe2DB) DecodePointers(backRepo *BackRepoStruct, probe2 *models.Probe2) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitProbe2 allows commit of a single probe2 (if already staged)
func (backRepo *BackRepoStruct) CommitProbe2(probe2 *models.Probe2) {
	backRepo.BackRepoProbe2.CommitPhaseOneInstance(probe2)
	if id, ok := backRepo.BackRepoProbe2.Map_Probe2Ptr_Probe2DBID[probe2]; ok {
		backRepo.BackRepoProbe2.CommitPhaseTwoInstance(backRepo, id, probe2)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitProbe2 allows checkout of a single probe2 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutProbe2(probe2 *models.Probe2) {
	// check if the probe2 is staged
	if _, ok := backRepo.BackRepoProbe2.Map_Probe2Ptr_Probe2DBID[probe2]; ok {

		if id, ok := backRepo.BackRepoProbe2.Map_Probe2Ptr_Probe2DBID[probe2]; ok {
			var probe2DB Probe2DB
			probe2DB.ID = id

			if _, err := backRepo.BackRepoProbe2.db.First(&probe2DB, id); err != nil {
				log.Fatalln("CheckoutProbe2 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoProbe2.CheckoutPhaseOneInstance(&probe2DB)
			backRepo.BackRepoProbe2.CheckoutPhaseTwoInstance(backRepo, &probe2DB)
		}
	}
}

// CopyBasicFieldsFromProbe2
func (probe2DB *Probe2DB) CopyBasicFieldsFromProbe2(probe2 *models.Probe2) {
	// insertion point for fields commit

	probe2DB.Name_Data.String = probe2.Name
	probe2DB.Name_Data.Valid = true
}

// CopyBasicFieldsFromProbe2_WOP
func (probe2DB *Probe2DB) CopyBasicFieldsFromProbe2_WOP(probe2 *models.Probe2_WOP) {
	// insertion point for fields commit

	probe2DB.Name_Data.String = probe2.Name
	probe2DB.Name_Data.Valid = true
}

// CopyBasicFieldsFromProbe2WOP
func (probe2DB *Probe2DB) CopyBasicFieldsFromProbe2WOP(probe2 *Probe2WOP) {
	// insertion point for fields commit

	probe2DB.Name_Data.String = probe2.Name
	probe2DB.Name_Data.Valid = true
}

// CopyBasicFieldsToProbe2
func (probe2DB *Probe2DB) CopyBasicFieldsToProbe2(probe2 *models.Probe2) {
	// insertion point for checkout of basic fields (back repo to stage)
	probe2.Name = probe2DB.Name_Data.String
}

// CopyBasicFieldsToProbe2_WOP
func (probe2DB *Probe2DB) CopyBasicFieldsToProbe2_WOP(probe2 *models.Probe2_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	probe2.Name = probe2DB.Name_Data.String
}

// CopyBasicFieldsToProbe2WOP
func (probe2DB *Probe2DB) CopyBasicFieldsToProbe2WOP(probe2 *Probe2WOP) {
	probe2.ID = int(probe2DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	probe2.Name = probe2DB.Name_Data.String
}

// Backup generates a json file from a slice of all Probe2DB instances in the backrepo
func (backRepoProbe2 *BackRepoProbe2Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Probe2DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Probe2DB, 0)
	for _, probe2DB := range backRepoProbe2.Map_Probe2DBID_Probe2DB {
		forBackup = append(forBackup, probe2DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Probe2 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Probe2 file", err.Error())
	}
}

// Backup generates a json file from a slice of all Probe2DB instances in the backrepo
func (backRepoProbe2 *BackRepoProbe2Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Probe2DB, 0)
	for _, probe2DB := range backRepoProbe2.Map_Probe2DBID_Probe2DB {
		forBackup = append(forBackup, probe2DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Probe2")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Probe2_Fields, -1)
	for _, probe2DB := range forBackup {

		var probe2WOP Probe2WOP
		probe2DB.CopyBasicFieldsToProbe2WOP(&probe2WOP)

		row := sh.AddRow()
		row.WriteStruct(&probe2WOP, -1)
	}
}

// RestoreXL from the "Probe2" sheet all Probe2DB instances
func (backRepoProbe2 *BackRepoProbe2Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoProbe2id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Probe2"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoProbe2.rowVisitorProbe2)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoProbe2 *BackRepoProbe2Struct) rowVisitorProbe2(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var probe2WOP Probe2WOP
		row.ReadStruct(&probe2WOP)

		// add the unmarshalled struct to the stage
		probe2DB := new(Probe2DB)
		probe2DB.CopyBasicFieldsFromProbe2WOP(&probe2WOP)

		probe2DB_ID_atBackupTime := probe2DB.ID
		probe2DB.ID = 0
		_, err := backRepoProbe2.db.Create(probe2DB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoProbe2.Map_Probe2DBID_Probe2DB[probe2DB.ID] = probe2DB
		BackRepoProbe2id_atBckpTime_newID[probe2DB_ID_atBackupTime] = probe2DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Probe2DB.json" in dirPath that stores an array
// of Probe2DB and stores it in the database
// the map BackRepoProbe2id_atBckpTime_newID is updated accordingly
func (backRepoProbe2 *BackRepoProbe2Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoProbe2id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Probe2DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Probe2 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Probe2DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Probe2DBID_Probe2DB
	for _, probe2DB := range forRestore {

		probe2DB_ID_atBackupTime := probe2DB.ID
		probe2DB.ID = 0
		_, err := backRepoProbe2.db.Create(probe2DB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoProbe2.Map_Probe2DBID_Probe2DB[probe2DB.ID] = probe2DB
		BackRepoProbe2id_atBckpTime_newID[probe2DB_ID_atBackupTime] = probe2DB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Probe2 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Probe2>id_atBckpTime_newID
// to compute new index
func (backRepoProbe2 *BackRepoProbe2Struct) RestorePhaseTwo() {

	for _, probe2DB := range backRepoProbe2.Map_Probe2DBID_Probe2DB {

		// next line of code is to avert unused variable compilation error
		_ = probe2DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoProbe2.db.Model(probe2DB)
		_, err := db.Updates(*probe2DB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoProbe2.ResetReversePointers commits all staged instances of Probe2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProbe2 *BackRepoProbe2Struct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, probe2 := range backRepoProbe2.Map_Probe2DBID_Probe2Ptr {
		backRepoProbe2.ResetReversePointersInstance(backRepo, idx, probe2)
	}

	return
}

func (backRepoProbe2 *BackRepoProbe2Struct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, probe2 *models.Probe2) (Error error) {

	// fetch matching probe2DB
	if probe2DB, ok := backRepoProbe2.Map_Probe2DBID_Probe2DB[idx]; ok {
		_ = probe2DB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoProbe2id_atBckpTime_newID map[uint]uint
