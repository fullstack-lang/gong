// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/doc2/go/db"
	"github.com/fullstack-lang/gong/lib/doc2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FieldShape_sql sql.NullBool
var dummy_FieldShape_time time.Duration
var dummy_FieldShape_sort sort.Float64Slice

// FieldShapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fieldshapeAPI
type FieldShapeAPI struct {
	gorm.Model

	models.FieldShape_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FieldShapePointersEncoding FieldShapePointersEncoding
}

// FieldShapePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FieldShapePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FieldShapeDB describes a fieldshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model fieldshapeDB
type FieldShapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field fieldshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field fieldshapeDB.Identifier
	Identifier_Data sql.NullString

	// Declation for basic field fieldshapeDB.FieldTypeAsString
	FieldTypeAsString_Data sql.NullString

	// Declation for basic field fieldshapeDB.Structname
	Structname_Data sql.NullString

	// Declation for basic field fieldshapeDB.Fieldtypename
	Fieldtypename_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FieldShapePointersEncoding
}

// FieldShapeDBs arrays fieldshapeDBs
// swagger:response fieldshapeDBsResponse
type FieldShapeDBs []FieldShapeDB

// FieldShapeDBResponse provides response
// swagger:response fieldshapeDBResponse
type FieldShapeDBResponse struct {
	FieldShapeDB
}

// FieldShapeWOP is a FieldShape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FieldShapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Identifier string `xlsx:"2"`

	FieldTypeAsString string `xlsx:"3"`

	Structname string `xlsx:"4"`

	Fieldtypename string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var FieldShape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Identifier",
	"FieldTypeAsString",
	"Structname",
	"Fieldtypename",
}

type BackRepoFieldShapeStruct struct {
	// stores FieldShapeDB according to their gorm ID
	Map_FieldShapeDBID_FieldShapeDB map[uint]*FieldShapeDB

	// stores FieldShapeDB ID according to FieldShape address
	Map_FieldShapePtr_FieldShapeDBID map[*models.AttributeShape]uint

	// stores FieldShape according to their gorm ID
	Map_FieldShapeDBID_FieldShapePtr map[uint]*models.AttributeShape

	db db.DBInterface

	stage *models.Stage
}

func (backRepoFieldShape *BackRepoFieldShapeStruct) GetStage() (stage *models.Stage) {
	stage = backRepoFieldShape.stage
	return
}

func (backRepoFieldShape *BackRepoFieldShapeStruct) GetDB() db.DBInterface {
	return backRepoFieldShape.db
}

// GetFieldShapeDBFromFieldShapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoFieldShape *BackRepoFieldShapeStruct) GetFieldShapeDBFromFieldShapePtr(fieldshape *models.AttributeShape) (fieldshapeDB *FieldShapeDB) {
	id := backRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID[fieldshape]
	fieldshapeDB = backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB[id]
	return
}

// BackRepoFieldShape.CommitPhaseOne commits all staged instances of FieldShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFieldShape *BackRepoFieldShapeStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var fieldshapes []*models.AttributeShape
	for fieldshape := range stage.FieldShapes {
		fieldshapes = append(fieldshapes, fieldshape)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(fieldshapes, func(i, j int) bool {
		return stage.FieldShapeMap_Staged_Order[fieldshapes[i]] < stage.FieldShapeMap_Staged_Order[fieldshapes[j]]
	})

	for _, fieldshape := range fieldshapes {
		backRepoFieldShape.CommitPhaseOneInstance(fieldshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, fieldshape := range backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr {
		if _, ok := stage.FieldShapes[fieldshape]; !ok {
			backRepoFieldShape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFieldShape.CommitDeleteInstance commits deletion of FieldShape to the BackRepo
func (backRepoFieldShape *BackRepoFieldShapeStruct) CommitDeleteInstance(id uint) (Error error) {

	fieldshape := backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr[id]

	// fieldshape is not staged anymore, remove fieldshapeDB
	fieldshapeDB := backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB[id]
	db, _ := backRepoFieldShape.db.Unscoped()
	_, err := db.Delete(fieldshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID, fieldshape)
	delete(backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr, id)
	delete(backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB, id)

	return
}

// BackRepoFieldShape.CommitPhaseOneInstance commits fieldshape staged instances of FieldShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFieldShape *BackRepoFieldShapeStruct) CommitPhaseOneInstance(fieldshape *models.AttributeShape) (Error error) {

	// check if the fieldshape is not commited yet
	if _, ok := backRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID[fieldshape]; ok {
		return
	}

	// initiate fieldshape
	var fieldshapeDB FieldShapeDB
	fieldshapeDB.CopyBasicFieldsFromFieldShape(fieldshape)

	_, err := backRepoFieldShape.db.Create(&fieldshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID[fieldshape] = fieldshapeDB.ID
	backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr[fieldshapeDB.ID] = fieldshape
	backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB[fieldshapeDB.ID] = &fieldshapeDB

	return
}

// BackRepoFieldShape.CommitPhaseTwo commits all staged instances of FieldShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFieldShape *BackRepoFieldShapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, fieldshape := range backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr {
		backRepoFieldShape.CommitPhaseTwoInstance(backRepo, idx, fieldshape)
	}

	return
}

// BackRepoFieldShape.CommitPhaseTwoInstance commits {{structname }} of models.FieldShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFieldShape *BackRepoFieldShapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, fieldshape *models.AttributeShape) (Error error) {

	// fetch matching fieldshapeDB
	if fieldshapeDB, ok := backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB[idx]; ok {

		fieldshapeDB.CopyBasicFieldsFromFieldShape(fieldshape)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoFieldShape.db.Save(fieldshapeDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FieldShape intance %s", fieldshape.Name))
		return err
	}

	return
}

// BackRepoFieldShape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFieldShape *BackRepoFieldShapeStruct) CheckoutPhaseOne() (Error error) {

	fieldshapeDBArray := make([]FieldShapeDB, 0)
	_, err := backRepoFieldShape.db.Find(&fieldshapeDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	fieldshapeInstancesToBeRemovedFromTheStage := make(map[*models.AttributeShape]any)
	for key, value := range backRepoFieldShape.stage.FieldShapes {
		fieldshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, fieldshapeDB := range fieldshapeDBArray {
		backRepoFieldShape.CheckoutPhaseOneInstance(&fieldshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		fieldshape, ok := backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr[fieldshapeDB.ID]
		if ok {
			delete(fieldshapeInstancesToBeRemovedFromTheStage, fieldshape)
		}
	}

	// remove from stage and back repo's 3 maps all fieldshapes that are not in the checkout
	for fieldshape := range fieldshapeInstancesToBeRemovedFromTheStage {
		fieldshape.Unstage(backRepoFieldShape.GetStage())

		// remove instance from the back repo 3 maps
		fieldshapeID := backRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID[fieldshape]
		delete(backRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID, fieldshape)
		delete(backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB, fieldshapeID)
		delete(backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr, fieldshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a fieldshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the fieldshapeDB
func (backRepoFieldShape *BackRepoFieldShapeStruct) CheckoutPhaseOneInstance(fieldshapeDB *FieldShapeDB) (Error error) {

	fieldshape, ok := backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr[fieldshapeDB.ID]
	if !ok {
		fieldshape = new(models.AttributeShape)

		backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr[fieldshapeDB.ID] = fieldshape
		backRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID[fieldshape] = fieldshapeDB.ID

		// append model store with the new element
		fieldshape.Name = fieldshapeDB.Name_Data.String
		fieldshape.Stage(backRepoFieldShape.GetStage())
	}
	fieldshapeDB.CopyBasicFieldsToFieldShape(fieldshape)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	fieldshape.Stage(backRepoFieldShape.GetStage())

	// preserve pointer to fieldshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FieldShapeDBID_FieldShapeDB)[fieldshapeDB hold variable pointers
	fieldshapeDB_Data := *fieldshapeDB
	preservedPtrToFieldShape := &fieldshapeDB_Data
	backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB[fieldshapeDB.ID] = preservedPtrToFieldShape

	return
}

// BackRepoFieldShape.CheckoutPhaseTwo Checkouts all staged instances of FieldShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFieldShape *BackRepoFieldShapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fieldshapeDB := range backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB {
		backRepoFieldShape.CheckoutPhaseTwoInstance(backRepo, fieldshapeDB)
	}
	return
}

// BackRepoFieldShape.CheckoutPhaseTwoInstance Checkouts staged instances of FieldShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFieldShape *BackRepoFieldShapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fieldshapeDB *FieldShapeDB) (Error error) {

	fieldshape := backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr[fieldshapeDB.ID]

	fieldshapeDB.DecodePointers(backRepo, fieldshape)

	return
}

func (fieldshapeDB *FieldShapeDB) DecodePointers(backRepo *BackRepoStruct, fieldshape *models.AttributeShape) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFieldShape allows commit of a single fieldshape (if already staged)
func (backRepo *BackRepoStruct) CommitFieldShape(fieldshape *models.AttributeShape) {
	backRepo.BackRepoFieldShape.CommitPhaseOneInstance(fieldshape)
	if id, ok := backRepo.BackRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID[fieldshape]; ok {
		backRepo.BackRepoFieldShape.CommitPhaseTwoInstance(backRepo, id, fieldshape)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFieldShape allows checkout of a single fieldshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFieldShape(fieldshape *models.AttributeShape) {
	// check if the fieldshape is staged
	if _, ok := backRepo.BackRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID[fieldshape]; ok {

		if id, ok := backRepo.BackRepoFieldShape.Map_FieldShapePtr_FieldShapeDBID[fieldshape]; ok {
			var fieldshapeDB FieldShapeDB
			fieldshapeDB.ID = id

			if _, err := backRepo.BackRepoFieldShape.db.First(&fieldshapeDB, id); err != nil {
				log.Fatalln("CheckoutFieldShape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFieldShape.CheckoutPhaseOneInstance(&fieldshapeDB)
			backRepo.BackRepoFieldShape.CheckoutPhaseTwoInstance(backRepo, &fieldshapeDB)
		}
	}
}

// CopyBasicFieldsFromFieldShape
func (fieldshapeDB *FieldShapeDB) CopyBasicFieldsFromFieldShape(fieldshape *models.AttributeShape) {
	// insertion point for fields commit

	fieldshapeDB.Name_Data.String = fieldshape.Name
	fieldshapeDB.Name_Data.Valid = true

	fieldshapeDB.Identifier_Data.String = fieldshape.Identifier
	fieldshapeDB.Identifier_Data.Valid = true

	fieldshapeDB.FieldTypeAsString_Data.String = fieldshape.FieldTypeAsString
	fieldshapeDB.FieldTypeAsString_Data.Valid = true

	fieldshapeDB.Structname_Data.String = fieldshape.Structname
	fieldshapeDB.Structname_Data.Valid = true

	fieldshapeDB.Fieldtypename_Data.String = fieldshape.Fieldtypename
	fieldshapeDB.Fieldtypename_Data.Valid = true
}

// CopyBasicFieldsFromFieldShape_WOP
func (fieldshapeDB *FieldShapeDB) CopyBasicFieldsFromFieldShape_WOP(fieldshape *models.FieldShape_WOP) {
	// insertion point for fields commit

	fieldshapeDB.Name_Data.String = fieldshape.Name
	fieldshapeDB.Name_Data.Valid = true

	fieldshapeDB.Identifier_Data.String = fieldshape.Identifier
	fieldshapeDB.Identifier_Data.Valid = true

	fieldshapeDB.FieldTypeAsString_Data.String = fieldshape.FieldTypeAsString
	fieldshapeDB.FieldTypeAsString_Data.Valid = true

	fieldshapeDB.Structname_Data.String = fieldshape.Structname
	fieldshapeDB.Structname_Data.Valid = true

	fieldshapeDB.Fieldtypename_Data.String = fieldshape.Fieldtypename
	fieldshapeDB.Fieldtypename_Data.Valid = true
}

// CopyBasicFieldsFromFieldShapeWOP
func (fieldshapeDB *FieldShapeDB) CopyBasicFieldsFromFieldShapeWOP(fieldshape *FieldShapeWOP) {
	// insertion point for fields commit

	fieldshapeDB.Name_Data.String = fieldshape.Name
	fieldshapeDB.Name_Data.Valid = true

	fieldshapeDB.Identifier_Data.String = fieldshape.Identifier
	fieldshapeDB.Identifier_Data.Valid = true

	fieldshapeDB.FieldTypeAsString_Data.String = fieldshape.FieldTypeAsString
	fieldshapeDB.FieldTypeAsString_Data.Valid = true

	fieldshapeDB.Structname_Data.String = fieldshape.Structname
	fieldshapeDB.Structname_Data.Valid = true

	fieldshapeDB.Fieldtypename_Data.String = fieldshape.Fieldtypename
	fieldshapeDB.Fieldtypename_Data.Valid = true
}

// CopyBasicFieldsToFieldShape
func (fieldshapeDB *FieldShapeDB) CopyBasicFieldsToFieldShape(fieldshape *models.AttributeShape) {
	// insertion point for checkout of basic fields (back repo to stage)
	fieldshape.Name = fieldshapeDB.Name_Data.String
	fieldshape.Identifier = fieldshapeDB.Identifier_Data.String
	fieldshape.FieldTypeAsString = fieldshapeDB.FieldTypeAsString_Data.String
	fieldshape.Structname = fieldshapeDB.Structname_Data.String
	fieldshape.Fieldtypename = fieldshapeDB.Fieldtypename_Data.String
}

// CopyBasicFieldsToFieldShape_WOP
func (fieldshapeDB *FieldShapeDB) CopyBasicFieldsToFieldShape_WOP(fieldshape *models.FieldShape_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	fieldshape.Name = fieldshapeDB.Name_Data.String
	fieldshape.Identifier = fieldshapeDB.Identifier_Data.String
	fieldshape.FieldTypeAsString = fieldshapeDB.FieldTypeAsString_Data.String
	fieldshape.Structname = fieldshapeDB.Structname_Data.String
	fieldshape.Fieldtypename = fieldshapeDB.Fieldtypename_Data.String
}

// CopyBasicFieldsToFieldShapeWOP
func (fieldshapeDB *FieldShapeDB) CopyBasicFieldsToFieldShapeWOP(fieldshape *FieldShapeWOP) {
	fieldshape.ID = int(fieldshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	fieldshape.Name = fieldshapeDB.Name_Data.String
	fieldshape.Identifier = fieldshapeDB.Identifier_Data.String
	fieldshape.FieldTypeAsString = fieldshapeDB.FieldTypeAsString_Data.String
	fieldshape.Structname = fieldshapeDB.Structname_Data.String
	fieldshape.Fieldtypename = fieldshapeDB.Fieldtypename_Data.String
}

// Backup generates a json file from a slice of all FieldShapeDB instances in the backrepo
func (backRepoFieldShape *BackRepoFieldShapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FieldShapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FieldShapeDB, 0)
	for _, fieldshapeDB := range backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB {
		forBackup = append(forBackup, fieldshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FieldShape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FieldShape file", err.Error())
	}
}

// Backup generates a json file from a slice of all FieldShapeDB instances in the backrepo
func (backRepoFieldShape *BackRepoFieldShapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FieldShapeDB, 0)
	for _, fieldshapeDB := range backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB {
		forBackup = append(forBackup, fieldshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FieldShape")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FieldShape_Fields, -1)
	for _, fieldshapeDB := range forBackup {

		var fieldshapeWOP FieldShapeWOP
		fieldshapeDB.CopyBasicFieldsToFieldShapeWOP(&fieldshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&fieldshapeWOP, -1)
	}
}

// RestoreXL from the "FieldShape" sheet all FieldShapeDB instances
func (backRepoFieldShape *BackRepoFieldShapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFieldShapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FieldShape"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFieldShape.rowVisitorFieldShape)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFieldShape *BackRepoFieldShapeStruct) rowVisitorFieldShape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var fieldshapeWOP FieldShapeWOP
		row.ReadStruct(&fieldshapeWOP)

		// add the unmarshalled struct to the stage
		fieldshapeDB := new(FieldShapeDB)
		fieldshapeDB.CopyBasicFieldsFromFieldShapeWOP(&fieldshapeWOP)

		fieldshapeDB_ID_atBackupTime := fieldshapeDB.ID
		fieldshapeDB.ID = 0
		_, err := backRepoFieldShape.db.Create(fieldshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB[fieldshapeDB.ID] = fieldshapeDB
		BackRepoFieldShapeid_atBckpTime_newID[fieldshapeDB_ID_atBackupTime] = fieldshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FieldShapeDB.json" in dirPath that stores an array
// of FieldShapeDB and stores it in the database
// the map BackRepoFieldShapeid_atBckpTime_newID is updated accordingly
func (backRepoFieldShape *BackRepoFieldShapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFieldShapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FieldShapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FieldShape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FieldShapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FieldShapeDBID_FieldShapeDB
	for _, fieldshapeDB := range forRestore {

		fieldshapeDB_ID_atBackupTime := fieldshapeDB.ID
		fieldshapeDB.ID = 0
		_, err := backRepoFieldShape.db.Create(fieldshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB[fieldshapeDB.ID] = fieldshapeDB
		BackRepoFieldShapeid_atBckpTime_newID[fieldshapeDB_ID_atBackupTime] = fieldshapeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FieldShape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FieldShape>id_atBckpTime_newID
// to compute new index
func (backRepoFieldShape *BackRepoFieldShapeStruct) RestorePhaseTwo() {

	for _, fieldshapeDB := range backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB {

		// next line of code is to avert unused variable compilation error
		_ = fieldshapeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoFieldShape.db.Model(fieldshapeDB)
		_, err := db.Updates(*fieldshapeDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoFieldShape.ResetReversePointers commits all staged instances of FieldShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFieldShape *BackRepoFieldShapeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, fieldshape := range backRepoFieldShape.Map_FieldShapeDBID_FieldShapePtr {
		backRepoFieldShape.ResetReversePointersInstance(backRepo, idx, fieldshape)
	}

	return
}

func (backRepoFieldShape *BackRepoFieldShapeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, fieldshape *models.AttributeShape) (Error error) {

	// fetch matching fieldshapeDB
	if fieldshapeDB, ok := backRepoFieldShape.Map_FieldShapeDBID_FieldShapeDB[idx]; ok {
		_ = fieldshapeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFieldShapeid_atBckpTime_newID map[uint]uint
