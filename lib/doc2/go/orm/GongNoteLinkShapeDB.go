// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/doc2/go/db"
	"github.com/fullstack-lang/gong/lib/doc2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GongNoteLinkShape_sql sql.NullBool
var dummy_GongNoteLinkShape_time time.Duration
var dummy_GongNoteLinkShape_sort sort.Float64Slice

// GongNoteLinkShapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongnotelinkshapeAPI
type GongNoteLinkShapeAPI struct {
	gorm.Model

	models.GongNoteLinkShape_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GongNoteLinkShapePointersEncoding GongNoteLinkShapePointersEncoding
}

// GongNoteLinkShapePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GongNoteLinkShapePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// GongNoteLinkShapeDB describes a gongnotelinkshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model gongnotelinkshapeDB
type GongNoteLinkShapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field gongnotelinkshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field gongnotelinkshapeDB.Identifier
	Identifier_Data sql.NullString

	// Declation for basic field gongnotelinkshapeDB.Type
	Type_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GongNoteLinkShapePointersEncoding
}

// GongNoteLinkShapeDBs arrays gongnotelinkshapeDBs
// swagger:response gongnotelinkshapeDBsResponse
type GongNoteLinkShapeDBs []GongNoteLinkShapeDB

// GongNoteLinkShapeDBResponse provides response
// swagger:response gongnotelinkshapeDBResponse
type GongNoteLinkShapeDBResponse struct {
	GongNoteLinkShapeDB
}

// GongNoteLinkShapeWOP is a GongNoteLinkShape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GongNoteLinkShapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Identifier string `xlsx:"2"`

	Type models.NoteShapeLinkType `xlsx:"3"`
	// insertion for WOP pointer fields
}

var GongNoteLinkShape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Identifier",
	"Type",
}

type BackRepoGongNoteLinkShapeStruct struct {
	// stores GongNoteLinkShapeDB according to their gorm ID
	Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB map[uint]*GongNoteLinkShapeDB

	// stores GongNoteLinkShapeDB ID according to GongNoteLinkShape address
	Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID map[*models.GongNoteLinkShape]uint

	// stores GongNoteLinkShape according to their gorm ID
	Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr map[uint]*models.GongNoteLinkShape

	db db.DBInterface

	stage *models.Stage
}

func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) GetStage() (stage *models.Stage) {
	stage = backRepoGongNoteLinkShape.stage
	return
}

func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) GetDB() db.DBInterface {
	return backRepoGongNoteLinkShape.db
}

// GetGongNoteLinkShapeDBFromGongNoteLinkShapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) GetGongNoteLinkShapeDBFromGongNoteLinkShapePtr(gongnotelinkshape *models.GongNoteLinkShape) (gongnotelinkshapeDB *GongNoteLinkShapeDB) {
	id := backRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID[gongnotelinkshape]
	gongnotelinkshapeDB = backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB[id]
	return
}

// BackRepoGongNoteLinkShape.CommitPhaseOne commits all staged instances of GongNoteLinkShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var gongnotelinkshapes []*models.GongNoteLinkShape
	for gongnotelinkshape := range stage.GongNoteLinkShapes {
		gongnotelinkshapes = append(gongnotelinkshapes, gongnotelinkshape)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(gongnotelinkshapes, func(i, j int) bool {
		return stage.GongNoteLinkShapeMap_Staged_Order[gongnotelinkshapes[i]] < stage.GongNoteLinkShapeMap_Staged_Order[gongnotelinkshapes[j]]
	})

	for _, gongnotelinkshape := range gongnotelinkshapes {
		backRepoGongNoteLinkShape.CommitPhaseOneInstance(gongnotelinkshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongnotelinkshape := range backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr {
		if _, ok := stage.GongNoteLinkShapes[gongnotelinkshape]; !ok {
			backRepoGongNoteLinkShape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongNoteLinkShape.CommitDeleteInstance commits deletion of GongNoteLinkShape to the BackRepo
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CommitDeleteInstance(id uint) (Error error) {

	gongnotelinkshape := backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr[id]

	// gongnotelinkshape is not staged anymore, remove gongnotelinkshapeDB
	gongnotelinkshapeDB := backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB[id]
	db, _ := backRepoGongNoteLinkShape.db.Unscoped()
	_, err := db.Delete(gongnotelinkshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID, gongnotelinkshape)
	delete(backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr, id)
	delete(backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB, id)

	return
}

// BackRepoGongNoteLinkShape.CommitPhaseOneInstance commits gongnotelinkshape staged instances of GongNoteLinkShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CommitPhaseOneInstance(gongnotelinkshape *models.GongNoteLinkShape) (Error error) {

	// check if the gongnotelinkshape is not commited yet
	if _, ok := backRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID[gongnotelinkshape]; ok {
		return
	}

	// initiate gongnotelinkshape
	var gongnotelinkshapeDB GongNoteLinkShapeDB
	gongnotelinkshapeDB.CopyBasicFieldsFromGongNoteLinkShape(gongnotelinkshape)

	_, err := backRepoGongNoteLinkShape.db.Create(&gongnotelinkshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID[gongnotelinkshape] = gongnotelinkshapeDB.ID
	backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr[gongnotelinkshapeDB.ID] = gongnotelinkshape
	backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB[gongnotelinkshapeDB.ID] = &gongnotelinkshapeDB

	return
}

// BackRepoGongNoteLinkShape.CommitPhaseTwo commits all staged instances of GongNoteLinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongnotelinkshape := range backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr {
		backRepoGongNoteLinkShape.CommitPhaseTwoInstance(backRepo, idx, gongnotelinkshape)
	}

	return
}

// BackRepoGongNoteLinkShape.CommitPhaseTwoInstance commits {{structname }} of models.GongNoteLinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongnotelinkshape *models.GongNoteLinkShape) (Error error) {

	// fetch matching gongnotelinkshapeDB
	if gongnotelinkshapeDB, ok := backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB[idx]; ok {

		gongnotelinkshapeDB.CopyBasicFieldsFromGongNoteLinkShape(gongnotelinkshape)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoGongNoteLinkShape.db.Save(gongnotelinkshapeDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongNoteLinkShape intance %s", gongnotelinkshape.Name))
		return err
	}

	return
}

// BackRepoGongNoteLinkShape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CheckoutPhaseOne() (Error error) {

	gongnotelinkshapeDBArray := make([]GongNoteLinkShapeDB, 0)
	_, err := backRepoGongNoteLinkShape.db.Find(&gongnotelinkshapeDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	gongnotelinkshapeInstancesToBeRemovedFromTheStage := make(map[*models.GongNoteLinkShape]any)
	for key, value := range backRepoGongNoteLinkShape.stage.GongNoteLinkShapes {
		gongnotelinkshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, gongnotelinkshapeDB := range gongnotelinkshapeDBArray {
		backRepoGongNoteLinkShape.CheckoutPhaseOneInstance(&gongnotelinkshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		gongnotelinkshape, ok := backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr[gongnotelinkshapeDB.ID]
		if ok {
			delete(gongnotelinkshapeInstancesToBeRemovedFromTheStage, gongnotelinkshape)
		}
	}

	// remove from stage and back repo's 3 maps all gongnotelinkshapes that are not in the checkout
	for gongnotelinkshape := range gongnotelinkshapeInstancesToBeRemovedFromTheStage {
		gongnotelinkshape.Unstage(backRepoGongNoteLinkShape.GetStage())

		// remove instance from the back repo 3 maps
		gongnotelinkshapeID := backRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID[gongnotelinkshape]
		delete(backRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID, gongnotelinkshape)
		delete(backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB, gongnotelinkshapeID)
		delete(backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr, gongnotelinkshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongnotelinkshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongnotelinkshapeDB
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CheckoutPhaseOneInstance(gongnotelinkshapeDB *GongNoteLinkShapeDB) (Error error) {

	gongnotelinkshape, ok := backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr[gongnotelinkshapeDB.ID]
	if !ok {
		gongnotelinkshape = new(models.GongNoteLinkShape)

		backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr[gongnotelinkshapeDB.ID] = gongnotelinkshape
		backRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID[gongnotelinkshape] = gongnotelinkshapeDB.ID

		// append model store with the new element
		gongnotelinkshape.Name = gongnotelinkshapeDB.Name_Data.String
		gongnotelinkshape.Stage(backRepoGongNoteLinkShape.GetStage())
	}
	gongnotelinkshapeDB.CopyBasicFieldsToGongNoteLinkShape(gongnotelinkshape)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	gongnotelinkshape.Stage(backRepoGongNoteLinkShape.GetStage())

	// preserve pointer to gongnotelinkshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB)[gongnotelinkshapeDB hold variable pointers
	gongnotelinkshapeDB_Data := *gongnotelinkshapeDB
	preservedPtrToGongNoteLinkShape := &gongnotelinkshapeDB_Data
	backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB[gongnotelinkshapeDB.ID] = preservedPtrToGongNoteLinkShape

	return
}

// BackRepoGongNoteLinkShape.CheckoutPhaseTwo Checkouts all staged instances of GongNoteLinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongnotelinkshapeDB := range backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB {
		backRepoGongNoteLinkShape.CheckoutPhaseTwoInstance(backRepo, gongnotelinkshapeDB)
	}
	return
}

// BackRepoGongNoteLinkShape.CheckoutPhaseTwoInstance Checkouts staged instances of GongNoteLinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongnotelinkshapeDB *GongNoteLinkShapeDB) (Error error) {

	gongnotelinkshape := backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr[gongnotelinkshapeDB.ID]

	gongnotelinkshapeDB.DecodePointers(backRepo, gongnotelinkshape)

	return
}

func (gongnotelinkshapeDB *GongNoteLinkShapeDB) DecodePointers(backRepo *BackRepoStruct, gongnotelinkshape *models.GongNoteLinkShape) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGongNoteLinkShape allows commit of a single gongnotelinkshape (if already staged)
func (backRepo *BackRepoStruct) CommitGongNoteLinkShape(gongnotelinkshape *models.GongNoteLinkShape) {
	backRepo.BackRepoGongNoteLinkShape.CommitPhaseOneInstance(gongnotelinkshape)
	if id, ok := backRepo.BackRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID[gongnotelinkshape]; ok {
		backRepo.BackRepoGongNoteLinkShape.CommitPhaseTwoInstance(backRepo, id, gongnotelinkshape)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGongNoteLinkShape allows checkout of a single gongnotelinkshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongNoteLinkShape(gongnotelinkshape *models.GongNoteLinkShape) {
	// check if the gongnotelinkshape is staged
	if _, ok := backRepo.BackRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID[gongnotelinkshape]; ok {

		if id, ok := backRepo.BackRepoGongNoteLinkShape.Map_GongNoteLinkShapePtr_GongNoteLinkShapeDBID[gongnotelinkshape]; ok {
			var gongnotelinkshapeDB GongNoteLinkShapeDB
			gongnotelinkshapeDB.ID = id

			if _, err := backRepo.BackRepoGongNoteLinkShape.db.First(&gongnotelinkshapeDB, id); err != nil {
				log.Fatalln("CheckoutGongNoteLinkShape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongNoteLinkShape.CheckoutPhaseOneInstance(&gongnotelinkshapeDB)
			backRepo.BackRepoGongNoteLinkShape.CheckoutPhaseTwoInstance(backRepo, &gongnotelinkshapeDB)
		}
	}
}

// CopyBasicFieldsFromGongNoteLinkShape
func (gongnotelinkshapeDB *GongNoteLinkShapeDB) CopyBasicFieldsFromGongNoteLinkShape(gongnotelinkshape *models.GongNoteLinkShape) {
	// insertion point for fields commit

	gongnotelinkshapeDB.Name_Data.String = gongnotelinkshape.Name
	gongnotelinkshapeDB.Name_Data.Valid = true

	gongnotelinkshapeDB.Identifier_Data.String = gongnotelinkshape.Identifier
	gongnotelinkshapeDB.Identifier_Data.Valid = true

	gongnotelinkshapeDB.Type_Data.String = gongnotelinkshape.Type.ToString()
	gongnotelinkshapeDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromGongNoteLinkShape_WOP
func (gongnotelinkshapeDB *GongNoteLinkShapeDB) CopyBasicFieldsFromGongNoteLinkShape_WOP(gongnotelinkshape *models.GongNoteLinkShape_WOP) {
	// insertion point for fields commit

	gongnotelinkshapeDB.Name_Data.String = gongnotelinkshape.Name
	gongnotelinkshapeDB.Name_Data.Valid = true

	gongnotelinkshapeDB.Identifier_Data.String = gongnotelinkshape.Identifier
	gongnotelinkshapeDB.Identifier_Data.Valid = true

	gongnotelinkshapeDB.Type_Data.String = gongnotelinkshape.Type.ToString()
	gongnotelinkshapeDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromGongNoteLinkShapeWOP
func (gongnotelinkshapeDB *GongNoteLinkShapeDB) CopyBasicFieldsFromGongNoteLinkShapeWOP(gongnotelinkshape *GongNoteLinkShapeWOP) {
	// insertion point for fields commit

	gongnotelinkshapeDB.Name_Data.String = gongnotelinkshape.Name
	gongnotelinkshapeDB.Name_Data.Valid = true

	gongnotelinkshapeDB.Identifier_Data.String = gongnotelinkshape.Identifier
	gongnotelinkshapeDB.Identifier_Data.Valid = true

	gongnotelinkshapeDB.Type_Data.String = gongnotelinkshape.Type.ToString()
	gongnotelinkshapeDB.Type_Data.Valid = true
}

// CopyBasicFieldsToGongNoteLinkShape
func (gongnotelinkshapeDB *GongNoteLinkShapeDB) CopyBasicFieldsToGongNoteLinkShape(gongnotelinkshape *models.GongNoteLinkShape) {
	// insertion point for checkout of basic fields (back repo to stage)
	gongnotelinkshape.Name = gongnotelinkshapeDB.Name_Data.String
	gongnotelinkshape.Identifier = gongnotelinkshapeDB.Identifier_Data.String
	gongnotelinkshape.Type.FromString(gongnotelinkshapeDB.Type_Data.String)
}

// CopyBasicFieldsToGongNoteLinkShape_WOP
func (gongnotelinkshapeDB *GongNoteLinkShapeDB) CopyBasicFieldsToGongNoteLinkShape_WOP(gongnotelinkshape *models.GongNoteLinkShape_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	gongnotelinkshape.Name = gongnotelinkshapeDB.Name_Data.String
	gongnotelinkshape.Identifier = gongnotelinkshapeDB.Identifier_Data.String
	gongnotelinkshape.Type.FromString(gongnotelinkshapeDB.Type_Data.String)
}

// CopyBasicFieldsToGongNoteLinkShapeWOP
func (gongnotelinkshapeDB *GongNoteLinkShapeDB) CopyBasicFieldsToGongNoteLinkShapeWOP(gongnotelinkshape *GongNoteLinkShapeWOP) {
	gongnotelinkshape.ID = int(gongnotelinkshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	gongnotelinkshape.Name = gongnotelinkshapeDB.Name_Data.String
	gongnotelinkshape.Identifier = gongnotelinkshapeDB.Identifier_Data.String
	gongnotelinkshape.Type.FromString(gongnotelinkshapeDB.Type_Data.String)
}

// Backup generates a json file from a slice of all GongNoteLinkShapeDB instances in the backrepo
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GongNoteLinkShapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongNoteLinkShapeDB, 0)
	for _, gongnotelinkshapeDB := range backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB {
		forBackup = append(forBackup, gongnotelinkshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json GongNoteLinkShape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json GongNoteLinkShape file", err.Error())
	}
}

// Backup generates a json file from a slice of all GongNoteLinkShapeDB instances in the backrepo
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongNoteLinkShapeDB, 0)
	for _, gongnotelinkshapeDB := range backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB {
		forBackup = append(forBackup, gongnotelinkshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GongNoteLinkShape")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GongNoteLinkShape_Fields, -1)
	for _, gongnotelinkshapeDB := range forBackup {

		var gongnotelinkshapeWOP GongNoteLinkShapeWOP
		gongnotelinkshapeDB.CopyBasicFieldsToGongNoteLinkShapeWOP(&gongnotelinkshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&gongnotelinkshapeWOP, -1)
	}
}

// RestoreXL from the "GongNoteLinkShape" sheet all GongNoteLinkShapeDB instances
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGongNoteLinkShapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GongNoteLinkShape"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGongNoteLinkShape.rowVisitorGongNoteLinkShape)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) rowVisitorGongNoteLinkShape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var gongnotelinkshapeWOP GongNoteLinkShapeWOP
		row.ReadStruct(&gongnotelinkshapeWOP)

		// add the unmarshalled struct to the stage
		gongnotelinkshapeDB := new(GongNoteLinkShapeDB)
		gongnotelinkshapeDB.CopyBasicFieldsFromGongNoteLinkShapeWOP(&gongnotelinkshapeWOP)

		gongnotelinkshapeDB_ID_atBackupTime := gongnotelinkshapeDB.ID
		gongnotelinkshapeDB.ID = 0
		_, err := backRepoGongNoteLinkShape.db.Create(gongnotelinkshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB[gongnotelinkshapeDB.ID] = gongnotelinkshapeDB
		BackRepoGongNoteLinkShapeid_atBckpTime_newID[gongnotelinkshapeDB_ID_atBackupTime] = gongnotelinkshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GongNoteLinkShapeDB.json" in dirPath that stores an array
// of GongNoteLinkShapeDB and stores it in the database
// the map BackRepoGongNoteLinkShapeid_atBckpTime_newID is updated accordingly
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGongNoteLinkShapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GongNoteLinkShapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json GongNoteLinkShape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GongNoteLinkShapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB
	for _, gongnotelinkshapeDB := range forRestore {

		gongnotelinkshapeDB_ID_atBackupTime := gongnotelinkshapeDB.ID
		gongnotelinkshapeDB.ID = 0
		_, err := backRepoGongNoteLinkShape.db.Create(gongnotelinkshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB[gongnotelinkshapeDB.ID] = gongnotelinkshapeDB
		BackRepoGongNoteLinkShapeid_atBckpTime_newID[gongnotelinkshapeDB_ID_atBackupTime] = gongnotelinkshapeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json GongNoteLinkShape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GongNoteLinkShape>id_atBckpTime_newID
// to compute new index
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) RestorePhaseTwo() {

	for _, gongnotelinkshapeDB := range backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB {

		// next line of code is to avert unused variable compilation error
		_ = gongnotelinkshapeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoGongNoteLinkShape.db.Model(gongnotelinkshapeDB)
		_, err := db.Updates(*gongnotelinkshapeDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoGongNoteLinkShape.ResetReversePointers commits all staged instances of GongNoteLinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, gongnotelinkshape := range backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr {
		backRepoGongNoteLinkShape.ResetReversePointersInstance(backRepo, idx, gongnotelinkshape)
	}

	return
}

func (backRepoGongNoteLinkShape *BackRepoGongNoteLinkShapeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, gongnotelinkshape *models.GongNoteLinkShape) (Error error) {

	// fetch matching gongnotelinkshapeDB
	if gongnotelinkshapeDB, ok := backRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapeDB[idx]; ok {
		_ = gongnotelinkshapeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGongNoteLinkShapeid_atBckpTime_newID map[uint]uint
