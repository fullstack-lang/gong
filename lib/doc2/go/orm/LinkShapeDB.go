// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/doc2/go/db"
	"github.com/fullstack-lang/gong/lib/doc2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_LinkShape_sql sql.NullBool
var dummy_LinkShape_time time.Duration
var dummy_LinkShape_sort sort.Float64Slice

// LinkShapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model linkshapeAPI
type LinkShapeAPI struct {
	gorm.Model

	models.LinkShape_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LinkShapePointersEncoding LinkShapePointersEncoding
}

// LinkShapePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LinkShapePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// LinkShapeDB describes a linkshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model linkshapeDB
type LinkShapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field linkshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field linkshapeDB.FieldOffsetX
	FieldOffsetX_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.FieldOffsetY
	FieldOffsetY_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.TargetMultiplicity
	TargetMultiplicity_Data sql.NullString

	// Declation for basic field linkshapeDB.TargetMultiplicityOffsetX
	TargetMultiplicityOffsetX_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.TargetMultiplicityOffsetY
	TargetMultiplicityOffsetY_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.SourceMultiplicity
	SourceMultiplicity_Data sql.NullString

	// Declation for basic field linkshapeDB.SourceMultiplicityOffsetX
	SourceMultiplicityOffsetX_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.SourceMultiplicityOffsetY
	SourceMultiplicityOffsetY_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.X
	X_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.Y
	Y_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.StartOrientation
	StartOrientation_Data sql.NullString

	// Declation for basic field linkshapeDB.StartRatio
	StartRatio_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.EndOrientation
	EndOrientation_Data sql.NullString

	// Declation for basic field linkshapeDB.EndRatio
	EndRatio_Data sql.NullFloat64

	// Declation for basic field linkshapeDB.CornerOffsetRatio
	CornerOffsetRatio_Data sql.NullFloat64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LinkShapePointersEncoding
}

// LinkShapeDBs arrays linkshapeDBs
// swagger:response linkshapeDBsResponse
type LinkShapeDBs []LinkShapeDB

// LinkShapeDBResponse provides response
// swagger:response linkshapeDBResponse
type LinkShapeDBResponse struct {
	LinkShapeDB
}

// LinkShapeWOP is a LinkShape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LinkShapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IdentifierMeta any `xlsx:"2"`

	FieldTypeIdentifierMeta any `xlsx:"3"`

	FieldOffsetX float64 `xlsx:"4"`

	FieldOffsetY float64 `xlsx:"5"`

	TargetMultiplicity models.MultiplicityType `xlsx:"6"`

	TargetMultiplicityOffsetX float64 `xlsx:"7"`

	TargetMultiplicityOffsetY float64 `xlsx:"8"`

	SourceMultiplicity models.MultiplicityType `xlsx:"9"`

	SourceMultiplicityOffsetX float64 `xlsx:"10"`

	SourceMultiplicityOffsetY float64 `xlsx:"11"`

	X float64 `xlsx:"12"`

	Y float64 `xlsx:"13"`

	StartOrientation models.OrientationType `xlsx:"14"`

	StartRatio float64 `xlsx:"15"`

	EndOrientation models.OrientationType `xlsx:"16"`

	EndRatio float64 `xlsx:"17"`

	CornerOffsetRatio float64 `xlsx:"18"`
	// insertion for WOP pointer fields
}

var LinkShape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IdentifierMeta",
	"FieldTypeIdentifierMeta",
	"FieldOffsetX",
	"FieldOffsetY",
	"TargetMultiplicity",
	"TargetMultiplicityOffsetX",
	"TargetMultiplicityOffsetY",
	"SourceMultiplicity",
	"SourceMultiplicityOffsetX",
	"SourceMultiplicityOffsetY",
	"X",
	"Y",
	"StartOrientation",
	"StartRatio",
	"EndOrientation",
	"EndRatio",
	"CornerOffsetRatio",
}

type BackRepoLinkShapeStruct struct {
	// stores LinkShapeDB according to their gorm ID
	Map_LinkShapeDBID_LinkShapeDB map[uint]*LinkShapeDB

	// stores LinkShapeDB ID according to LinkShape address
	Map_LinkShapePtr_LinkShapeDBID map[*models.LinkShape]uint

	// stores LinkShape according to their gorm ID
	Map_LinkShapeDBID_LinkShapePtr map[uint]*models.LinkShape

	db db.DBInterface

	stage *models.Stage
}

func (backRepoLinkShape *BackRepoLinkShapeStruct) GetStage() (stage *models.Stage) {
	stage = backRepoLinkShape.stage
	return
}

func (backRepoLinkShape *BackRepoLinkShapeStruct) GetDB() db.DBInterface {
	return backRepoLinkShape.db
}

// GetLinkShapeDBFromLinkShapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoLinkShape *BackRepoLinkShapeStruct) GetLinkShapeDBFromLinkShapePtr(linkshape *models.LinkShape) (linkshapeDB *LinkShapeDB) {
	id := backRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID[linkshape]
	linkshapeDB = backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB[id]
	return
}

// BackRepoLinkShape.CommitPhaseOne commits all staged instances of LinkShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLinkShape *BackRepoLinkShapeStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var linkshapes []*models.LinkShape
	for linkshape := range stage.LinkShapes {
		linkshapes = append(linkshapes, linkshape)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(linkshapes, func(i, j int) bool {
		return stage.LinkShapeMap_Staged_Order[linkshapes[i]] < stage.LinkShapeMap_Staged_Order[linkshapes[j]]
	})

	for _, linkshape := range linkshapes {
		backRepoLinkShape.CommitPhaseOneInstance(linkshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, linkshape := range backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr {
		if _, ok := stage.LinkShapes[linkshape]; !ok {
			backRepoLinkShape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLinkShape.CommitDeleteInstance commits deletion of LinkShape to the BackRepo
func (backRepoLinkShape *BackRepoLinkShapeStruct) CommitDeleteInstance(id uint) (Error error) {

	linkshape := backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr[id]

	// linkshape is not staged anymore, remove linkshapeDB
	linkshapeDB := backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB[id]
	db, _ := backRepoLinkShape.db.Unscoped()
	_, err := db.Delete(linkshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID, linkshape)
	delete(backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr, id)
	delete(backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB, id)

	return
}

// BackRepoLinkShape.CommitPhaseOneInstance commits linkshape staged instances of LinkShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLinkShape *BackRepoLinkShapeStruct) CommitPhaseOneInstance(linkshape *models.LinkShape) (Error error) {

	// check if the linkshape is not commited yet
	if _, ok := backRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID[linkshape]; ok {
		return
	}

	// initiate linkshape
	var linkshapeDB LinkShapeDB
	linkshapeDB.CopyBasicFieldsFromLinkShape(linkshape)

	_, err := backRepoLinkShape.db.Create(&linkshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID[linkshape] = linkshapeDB.ID
	backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr[linkshapeDB.ID] = linkshape
	backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB[linkshapeDB.ID] = &linkshapeDB

	return
}

// BackRepoLinkShape.CommitPhaseTwo commits all staged instances of LinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLinkShape *BackRepoLinkShapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, linkshape := range backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr {
		backRepoLinkShape.CommitPhaseTwoInstance(backRepo, idx, linkshape)
	}

	return
}

// BackRepoLinkShape.CommitPhaseTwoInstance commits {{structname }} of models.LinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLinkShape *BackRepoLinkShapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, linkshape *models.LinkShape) (Error error) {

	// fetch matching linkshapeDB
	if linkshapeDB, ok := backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB[idx]; ok {

		linkshapeDB.CopyBasicFieldsFromLinkShape(linkshape)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoLinkShape.db.Save(linkshapeDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown LinkShape intance %s", linkshape.Name))
		return err
	}

	return
}

// BackRepoLinkShape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLinkShape *BackRepoLinkShapeStruct) CheckoutPhaseOne() (Error error) {

	linkshapeDBArray := make([]LinkShapeDB, 0)
	_, err := backRepoLinkShape.db.Find(&linkshapeDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	linkshapeInstancesToBeRemovedFromTheStage := make(map[*models.LinkShape]any)
	for key, value := range backRepoLinkShape.stage.LinkShapes {
		linkshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, linkshapeDB := range linkshapeDBArray {
		backRepoLinkShape.CheckoutPhaseOneInstance(&linkshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		linkshape, ok := backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr[linkshapeDB.ID]
		if ok {
			delete(linkshapeInstancesToBeRemovedFromTheStage, linkshape)
		}
	}

	// remove from stage and back repo's 3 maps all linkshapes that are not in the checkout
	for linkshape := range linkshapeInstancesToBeRemovedFromTheStage {
		linkshape.Unstage(backRepoLinkShape.GetStage())

		// remove instance from the back repo 3 maps
		linkshapeID := backRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID[linkshape]
		delete(backRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID, linkshape)
		delete(backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB, linkshapeID)
		delete(backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr, linkshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a linkshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the linkshapeDB
func (backRepoLinkShape *BackRepoLinkShapeStruct) CheckoutPhaseOneInstance(linkshapeDB *LinkShapeDB) (Error error) {

	linkshape, ok := backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr[linkshapeDB.ID]
	if !ok {
		linkshape = new(models.LinkShape)

		backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr[linkshapeDB.ID] = linkshape
		backRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID[linkshape] = linkshapeDB.ID

		// append model store with the new element
		linkshape.Name = linkshapeDB.Name_Data.String
		linkshape.Stage(backRepoLinkShape.GetStage())
	}
	linkshapeDB.CopyBasicFieldsToLinkShape(linkshape)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	linkshape.Stage(backRepoLinkShape.GetStage())

	// preserve pointer to linkshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LinkShapeDBID_LinkShapeDB)[linkshapeDB hold variable pointers
	linkshapeDB_Data := *linkshapeDB
	preservedPtrToLinkShape := &linkshapeDB_Data
	backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB[linkshapeDB.ID] = preservedPtrToLinkShape

	return
}

// BackRepoLinkShape.CheckoutPhaseTwo Checkouts all staged instances of LinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLinkShape *BackRepoLinkShapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, linkshapeDB := range backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB {
		backRepoLinkShape.CheckoutPhaseTwoInstance(backRepo, linkshapeDB)
	}
	return
}

// BackRepoLinkShape.CheckoutPhaseTwoInstance Checkouts staged instances of LinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLinkShape *BackRepoLinkShapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, linkshapeDB *LinkShapeDB) (Error error) {

	linkshape := backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr[linkshapeDB.ID]

	linkshapeDB.DecodePointers(backRepo, linkshape)

	return
}

func (linkshapeDB *LinkShapeDB) DecodePointers(backRepo *BackRepoStruct, linkshape *models.LinkShape) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLinkShape allows commit of a single linkshape (if already staged)
func (backRepo *BackRepoStruct) CommitLinkShape(linkshape *models.LinkShape) {
	backRepo.BackRepoLinkShape.CommitPhaseOneInstance(linkshape)
	if id, ok := backRepo.BackRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID[linkshape]; ok {
		backRepo.BackRepoLinkShape.CommitPhaseTwoInstance(backRepo, id, linkshape)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLinkShape allows checkout of a single linkshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLinkShape(linkshape *models.LinkShape) {
	// check if the linkshape is staged
	if _, ok := backRepo.BackRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID[linkshape]; ok {

		if id, ok := backRepo.BackRepoLinkShape.Map_LinkShapePtr_LinkShapeDBID[linkshape]; ok {
			var linkshapeDB LinkShapeDB
			linkshapeDB.ID = id

			if _, err := backRepo.BackRepoLinkShape.db.First(&linkshapeDB, id); err != nil {
				log.Fatalln("CheckoutLinkShape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLinkShape.CheckoutPhaseOneInstance(&linkshapeDB)
			backRepo.BackRepoLinkShape.CheckoutPhaseTwoInstance(backRepo, &linkshapeDB)
		}
	}
}

// CopyBasicFieldsFromLinkShape
func (linkshapeDB *LinkShapeDB) CopyBasicFieldsFromLinkShape(linkshape *models.LinkShape) {
	// insertion point for fields commit

	linkshapeDB.Name_Data.String = linkshape.Name
	linkshapeDB.Name_Data.Valid = true

	linkshapeDB.FieldOffsetX_Data.Float64 = linkshape.FieldOffsetX
	linkshapeDB.FieldOffsetX_Data.Valid = true

	linkshapeDB.FieldOffsetY_Data.Float64 = linkshape.FieldOffsetY
	linkshapeDB.FieldOffsetY_Data.Valid = true

	linkshapeDB.TargetMultiplicity_Data.String = linkshape.TargetMultiplicity.ToString()
	linkshapeDB.TargetMultiplicity_Data.Valid = true

	linkshapeDB.TargetMultiplicityOffsetX_Data.Float64 = linkshape.TargetMultiplicityOffsetX
	linkshapeDB.TargetMultiplicityOffsetX_Data.Valid = true

	linkshapeDB.TargetMultiplicityOffsetY_Data.Float64 = linkshape.TargetMultiplicityOffsetY
	linkshapeDB.TargetMultiplicityOffsetY_Data.Valid = true

	linkshapeDB.SourceMultiplicity_Data.String = linkshape.SourceMultiplicity.ToString()
	linkshapeDB.SourceMultiplicity_Data.Valid = true

	linkshapeDB.SourceMultiplicityOffsetX_Data.Float64 = linkshape.SourceMultiplicityOffsetX
	linkshapeDB.SourceMultiplicityOffsetX_Data.Valid = true

	linkshapeDB.SourceMultiplicityOffsetY_Data.Float64 = linkshape.SourceMultiplicityOffsetY
	linkshapeDB.SourceMultiplicityOffsetY_Data.Valid = true

	linkshapeDB.X_Data.Float64 = linkshape.X
	linkshapeDB.X_Data.Valid = true

	linkshapeDB.Y_Data.Float64 = linkshape.Y
	linkshapeDB.Y_Data.Valid = true

	linkshapeDB.StartOrientation_Data.String = linkshape.StartOrientation.ToString()
	linkshapeDB.StartOrientation_Data.Valid = true

	linkshapeDB.StartRatio_Data.Float64 = linkshape.StartRatio
	linkshapeDB.StartRatio_Data.Valid = true

	linkshapeDB.EndOrientation_Data.String = linkshape.EndOrientation.ToString()
	linkshapeDB.EndOrientation_Data.Valid = true

	linkshapeDB.EndRatio_Data.Float64 = linkshape.EndRatio
	linkshapeDB.EndRatio_Data.Valid = true

	linkshapeDB.CornerOffsetRatio_Data.Float64 = linkshape.CornerOffsetRatio
	linkshapeDB.CornerOffsetRatio_Data.Valid = true
}

// CopyBasicFieldsFromLinkShape_WOP
func (linkshapeDB *LinkShapeDB) CopyBasicFieldsFromLinkShape_WOP(linkshape *models.LinkShape_WOP) {
	// insertion point for fields commit

	linkshapeDB.Name_Data.String = linkshape.Name
	linkshapeDB.Name_Data.Valid = true

	linkshapeDB.FieldOffsetX_Data.Float64 = linkshape.FieldOffsetX
	linkshapeDB.FieldOffsetX_Data.Valid = true

	linkshapeDB.FieldOffsetY_Data.Float64 = linkshape.FieldOffsetY
	linkshapeDB.FieldOffsetY_Data.Valid = true

	linkshapeDB.TargetMultiplicity_Data.String = linkshape.TargetMultiplicity.ToString()
	linkshapeDB.TargetMultiplicity_Data.Valid = true

	linkshapeDB.TargetMultiplicityOffsetX_Data.Float64 = linkshape.TargetMultiplicityOffsetX
	linkshapeDB.TargetMultiplicityOffsetX_Data.Valid = true

	linkshapeDB.TargetMultiplicityOffsetY_Data.Float64 = linkshape.TargetMultiplicityOffsetY
	linkshapeDB.TargetMultiplicityOffsetY_Data.Valid = true

	linkshapeDB.SourceMultiplicity_Data.String = linkshape.SourceMultiplicity.ToString()
	linkshapeDB.SourceMultiplicity_Data.Valid = true

	linkshapeDB.SourceMultiplicityOffsetX_Data.Float64 = linkshape.SourceMultiplicityOffsetX
	linkshapeDB.SourceMultiplicityOffsetX_Data.Valid = true

	linkshapeDB.SourceMultiplicityOffsetY_Data.Float64 = linkshape.SourceMultiplicityOffsetY
	linkshapeDB.SourceMultiplicityOffsetY_Data.Valid = true

	linkshapeDB.X_Data.Float64 = linkshape.X
	linkshapeDB.X_Data.Valid = true

	linkshapeDB.Y_Data.Float64 = linkshape.Y
	linkshapeDB.Y_Data.Valid = true

	linkshapeDB.StartOrientation_Data.String = linkshape.StartOrientation.ToString()
	linkshapeDB.StartOrientation_Data.Valid = true

	linkshapeDB.StartRatio_Data.Float64 = linkshape.StartRatio
	linkshapeDB.StartRatio_Data.Valid = true

	linkshapeDB.EndOrientation_Data.String = linkshape.EndOrientation.ToString()
	linkshapeDB.EndOrientation_Data.Valid = true

	linkshapeDB.EndRatio_Data.Float64 = linkshape.EndRatio
	linkshapeDB.EndRatio_Data.Valid = true

	linkshapeDB.CornerOffsetRatio_Data.Float64 = linkshape.CornerOffsetRatio
	linkshapeDB.CornerOffsetRatio_Data.Valid = true
}

// CopyBasicFieldsFromLinkShapeWOP
func (linkshapeDB *LinkShapeDB) CopyBasicFieldsFromLinkShapeWOP(linkshape *LinkShapeWOP) {
	// insertion point for fields commit

	linkshapeDB.Name_Data.String = linkshape.Name
	linkshapeDB.Name_Data.Valid = true

	linkshapeDB.FieldOffsetX_Data.Float64 = linkshape.FieldOffsetX
	linkshapeDB.FieldOffsetX_Data.Valid = true

	linkshapeDB.FieldOffsetY_Data.Float64 = linkshape.FieldOffsetY
	linkshapeDB.FieldOffsetY_Data.Valid = true

	linkshapeDB.TargetMultiplicity_Data.String = linkshape.TargetMultiplicity.ToString()
	linkshapeDB.TargetMultiplicity_Data.Valid = true

	linkshapeDB.TargetMultiplicityOffsetX_Data.Float64 = linkshape.TargetMultiplicityOffsetX
	linkshapeDB.TargetMultiplicityOffsetX_Data.Valid = true

	linkshapeDB.TargetMultiplicityOffsetY_Data.Float64 = linkshape.TargetMultiplicityOffsetY
	linkshapeDB.TargetMultiplicityOffsetY_Data.Valid = true

	linkshapeDB.SourceMultiplicity_Data.String = linkshape.SourceMultiplicity.ToString()
	linkshapeDB.SourceMultiplicity_Data.Valid = true

	linkshapeDB.SourceMultiplicityOffsetX_Data.Float64 = linkshape.SourceMultiplicityOffsetX
	linkshapeDB.SourceMultiplicityOffsetX_Data.Valid = true

	linkshapeDB.SourceMultiplicityOffsetY_Data.Float64 = linkshape.SourceMultiplicityOffsetY
	linkshapeDB.SourceMultiplicityOffsetY_Data.Valid = true

	linkshapeDB.X_Data.Float64 = linkshape.X
	linkshapeDB.X_Data.Valid = true

	linkshapeDB.Y_Data.Float64 = linkshape.Y
	linkshapeDB.Y_Data.Valid = true

	linkshapeDB.StartOrientation_Data.String = linkshape.StartOrientation.ToString()
	linkshapeDB.StartOrientation_Data.Valid = true

	linkshapeDB.StartRatio_Data.Float64 = linkshape.StartRatio
	linkshapeDB.StartRatio_Data.Valid = true

	linkshapeDB.EndOrientation_Data.String = linkshape.EndOrientation.ToString()
	linkshapeDB.EndOrientation_Data.Valid = true

	linkshapeDB.EndRatio_Data.Float64 = linkshape.EndRatio
	linkshapeDB.EndRatio_Data.Valid = true

	linkshapeDB.CornerOffsetRatio_Data.Float64 = linkshape.CornerOffsetRatio
	linkshapeDB.CornerOffsetRatio_Data.Valid = true
}

// CopyBasicFieldsToLinkShape
func (linkshapeDB *LinkShapeDB) CopyBasicFieldsToLinkShape(linkshape *models.LinkShape) {
	// insertion point for checkout of basic fields (back repo to stage)
	linkshape.Name = linkshapeDB.Name_Data.String
	linkshape.FieldOffsetX = linkshapeDB.FieldOffsetX_Data.Float64
	linkshape.FieldOffsetY = linkshapeDB.FieldOffsetY_Data.Float64
	linkshape.TargetMultiplicity.FromString(linkshapeDB.TargetMultiplicity_Data.String)
	linkshape.TargetMultiplicityOffsetX = linkshapeDB.TargetMultiplicityOffsetX_Data.Float64
	linkshape.TargetMultiplicityOffsetY = linkshapeDB.TargetMultiplicityOffsetY_Data.Float64
	linkshape.SourceMultiplicity.FromString(linkshapeDB.SourceMultiplicity_Data.String)
	linkshape.SourceMultiplicityOffsetX = linkshapeDB.SourceMultiplicityOffsetX_Data.Float64
	linkshape.SourceMultiplicityOffsetY = linkshapeDB.SourceMultiplicityOffsetY_Data.Float64
	linkshape.X = linkshapeDB.X_Data.Float64
	linkshape.Y = linkshapeDB.Y_Data.Float64
	linkshape.StartOrientation.FromString(linkshapeDB.StartOrientation_Data.String)
	linkshape.StartRatio = linkshapeDB.StartRatio_Data.Float64
	linkshape.EndOrientation.FromString(linkshapeDB.EndOrientation_Data.String)
	linkshape.EndRatio = linkshapeDB.EndRatio_Data.Float64
	linkshape.CornerOffsetRatio = linkshapeDB.CornerOffsetRatio_Data.Float64
}

// CopyBasicFieldsToLinkShape_WOP
func (linkshapeDB *LinkShapeDB) CopyBasicFieldsToLinkShape_WOP(linkshape *models.LinkShape_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	linkshape.Name = linkshapeDB.Name_Data.String
	linkshape.FieldOffsetX = linkshapeDB.FieldOffsetX_Data.Float64
	linkshape.FieldOffsetY = linkshapeDB.FieldOffsetY_Data.Float64
	linkshape.TargetMultiplicity.FromString(linkshapeDB.TargetMultiplicity_Data.String)
	linkshape.TargetMultiplicityOffsetX = linkshapeDB.TargetMultiplicityOffsetX_Data.Float64
	linkshape.TargetMultiplicityOffsetY = linkshapeDB.TargetMultiplicityOffsetY_Data.Float64
	linkshape.SourceMultiplicity.FromString(linkshapeDB.SourceMultiplicity_Data.String)
	linkshape.SourceMultiplicityOffsetX = linkshapeDB.SourceMultiplicityOffsetX_Data.Float64
	linkshape.SourceMultiplicityOffsetY = linkshapeDB.SourceMultiplicityOffsetY_Data.Float64
	linkshape.X = linkshapeDB.X_Data.Float64
	linkshape.Y = linkshapeDB.Y_Data.Float64
	linkshape.StartOrientation.FromString(linkshapeDB.StartOrientation_Data.String)
	linkshape.StartRatio = linkshapeDB.StartRatio_Data.Float64
	linkshape.EndOrientation.FromString(linkshapeDB.EndOrientation_Data.String)
	linkshape.EndRatio = linkshapeDB.EndRatio_Data.Float64
	linkshape.CornerOffsetRatio = linkshapeDB.CornerOffsetRatio_Data.Float64
}

// CopyBasicFieldsToLinkShapeWOP
func (linkshapeDB *LinkShapeDB) CopyBasicFieldsToLinkShapeWOP(linkshape *LinkShapeWOP) {
	linkshape.ID = int(linkshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	linkshape.Name = linkshapeDB.Name_Data.String
	linkshape.FieldOffsetX = linkshapeDB.FieldOffsetX_Data.Float64
	linkshape.FieldOffsetY = linkshapeDB.FieldOffsetY_Data.Float64
	linkshape.TargetMultiplicity.FromString(linkshapeDB.TargetMultiplicity_Data.String)
	linkshape.TargetMultiplicityOffsetX = linkshapeDB.TargetMultiplicityOffsetX_Data.Float64
	linkshape.TargetMultiplicityOffsetY = linkshapeDB.TargetMultiplicityOffsetY_Data.Float64
	linkshape.SourceMultiplicity.FromString(linkshapeDB.SourceMultiplicity_Data.String)
	linkshape.SourceMultiplicityOffsetX = linkshapeDB.SourceMultiplicityOffsetX_Data.Float64
	linkshape.SourceMultiplicityOffsetY = linkshapeDB.SourceMultiplicityOffsetY_Data.Float64
	linkshape.X = linkshapeDB.X_Data.Float64
	linkshape.Y = linkshapeDB.Y_Data.Float64
	linkshape.StartOrientation.FromString(linkshapeDB.StartOrientation_Data.String)
	linkshape.StartRatio = linkshapeDB.StartRatio_Data.Float64
	linkshape.EndOrientation.FromString(linkshapeDB.EndOrientation_Data.String)
	linkshape.EndRatio = linkshapeDB.EndRatio_Data.Float64
	linkshape.CornerOffsetRatio = linkshapeDB.CornerOffsetRatio_Data.Float64
}

// Backup generates a json file from a slice of all LinkShapeDB instances in the backrepo
func (backRepoLinkShape *BackRepoLinkShapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LinkShapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LinkShapeDB, 0)
	for _, linkshapeDB := range backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB {
		forBackup = append(forBackup, linkshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json LinkShape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json LinkShape file", err.Error())
	}
}

// Backup generates a json file from a slice of all LinkShapeDB instances in the backrepo
func (backRepoLinkShape *BackRepoLinkShapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LinkShapeDB, 0)
	for _, linkshapeDB := range backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB {
		forBackup = append(forBackup, linkshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("LinkShape")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&LinkShape_Fields, -1)
	for _, linkshapeDB := range forBackup {

		var linkshapeWOP LinkShapeWOP
		linkshapeDB.CopyBasicFieldsToLinkShapeWOP(&linkshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&linkshapeWOP, -1)
	}
}

// RestoreXL from the "LinkShape" sheet all LinkShapeDB instances
func (backRepoLinkShape *BackRepoLinkShapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLinkShapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["LinkShape"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLinkShape.rowVisitorLinkShape)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLinkShape *BackRepoLinkShapeStruct) rowVisitorLinkShape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var linkshapeWOP LinkShapeWOP
		row.ReadStruct(&linkshapeWOP)

		// add the unmarshalled struct to the stage
		linkshapeDB := new(LinkShapeDB)
		linkshapeDB.CopyBasicFieldsFromLinkShapeWOP(&linkshapeWOP)

		linkshapeDB_ID_atBackupTime := linkshapeDB.ID
		linkshapeDB.ID = 0
		_, err := backRepoLinkShape.db.Create(linkshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB[linkshapeDB.ID] = linkshapeDB
		BackRepoLinkShapeid_atBckpTime_newID[linkshapeDB_ID_atBackupTime] = linkshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LinkShapeDB.json" in dirPath that stores an array
// of LinkShapeDB and stores it in the database
// the map BackRepoLinkShapeid_atBckpTime_newID is updated accordingly
func (backRepoLinkShape *BackRepoLinkShapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLinkShapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LinkShapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json LinkShape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LinkShapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LinkShapeDBID_LinkShapeDB
	for _, linkshapeDB := range forRestore {

		linkshapeDB_ID_atBackupTime := linkshapeDB.ID
		linkshapeDB.ID = 0
		_, err := backRepoLinkShape.db.Create(linkshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB[linkshapeDB.ID] = linkshapeDB
		BackRepoLinkShapeid_atBckpTime_newID[linkshapeDB_ID_atBackupTime] = linkshapeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json LinkShape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<LinkShape>id_atBckpTime_newID
// to compute new index
func (backRepoLinkShape *BackRepoLinkShapeStruct) RestorePhaseTwo() {

	for _, linkshapeDB := range backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB {

		// next line of code is to avert unused variable compilation error
		_ = linkshapeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoLinkShape.db.Model(linkshapeDB)
		_, err := db.Updates(*linkshapeDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoLinkShape.ResetReversePointers commits all staged instances of LinkShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLinkShape *BackRepoLinkShapeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, linkshape := range backRepoLinkShape.Map_LinkShapeDBID_LinkShapePtr {
		backRepoLinkShape.ResetReversePointersInstance(backRepo, idx, linkshape)
	}

	return
}

func (backRepoLinkShape *BackRepoLinkShapeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, linkshape *models.LinkShape) (Error error) {

	// fetch matching linkshapeDB
	if linkshapeDB, ok := backRepoLinkShape.Map_LinkShapeDBID_LinkShapeDB[idx]; ok {
		_ = linkshapeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLinkShapeid_atBckpTime_newID map[uint]uint
