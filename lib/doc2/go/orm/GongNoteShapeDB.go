// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/doc2/go/db"
	"github.com/fullstack-lang/gong/lib/doc2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GongNoteShape_sql sql.NullBool
var dummy_GongNoteShape_time time.Duration
var dummy_GongNoteShape_sort sort.Float64Slice

// GongNoteShapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongnoteshapeAPI
type GongNoteShapeAPI struct {
	gorm.Model

	models.GongNoteShape_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GongNoteShapePointersEncoding GongNoteShapePointersEncoding
}

// GongNoteShapePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GongNoteShapePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field GongNoteLinkShapes is a slice of pointers to another Struct (optional or 0..1)
	GongNoteLinkShapes IntSlice `gorm:"type:TEXT"`
}

// GongNoteShapeDB describes a gongnoteshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model gongnoteshapeDB
type GongNoteShapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field gongnoteshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field gongnoteshapeDB.Identifier
	Identifier_Data sql.NullString

	// Declation for basic field gongnoteshapeDB.Body
	Body_Data sql.NullString

	// Declation for basic field gongnoteshapeDB.BodyHTML
	BodyHTML_Data sql.NullString

	// Declation for basic field gongnoteshapeDB.X
	X_Data sql.NullFloat64

	// Declation for basic field gongnoteshapeDB.Y
	Y_Data sql.NullFloat64

	// Declation for basic field gongnoteshapeDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field gongnoteshapeDB.Height
	Height_Data sql.NullFloat64

	// Declation for basic field gongnoteshapeDB.Matched
	// provide the sql storage for the boolan
	Matched_Data sql.NullBool

	// Declation for basic field gongnoteshapeDB.IsExpanded
	// provide the sql storage for the boolan
	IsExpanded_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GongNoteShapePointersEncoding
}

// GongNoteShapeDBs arrays gongnoteshapeDBs
// swagger:response gongnoteshapeDBsResponse
type GongNoteShapeDBs []GongNoteShapeDB

// GongNoteShapeDBResponse provides response
// swagger:response gongnoteshapeDBResponse
type GongNoteShapeDBResponse struct {
	GongNoteShapeDB
}

// GongNoteShapeWOP is a GongNoteShape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GongNoteShapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Identifier string `xlsx:"2"`

	Body string `xlsx:"3"`

	BodyHTML string `xlsx:"4"`

	X float64 `xlsx:"5"`

	Y float64 `xlsx:"6"`

	Width float64 `xlsx:"7"`

	Height float64 `xlsx:"8"`

	Matched bool `xlsx:"9"`

	IsExpanded bool `xlsx:"10"`
	// insertion for WOP pointer fields
}

var GongNoteShape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Identifier",
	"Body",
	"BodyHTML",
	"X",
	"Y",
	"Width",
	"Height",
	"Matched",
	"IsExpanded",
}

type BackRepoGongNoteShapeStruct struct {
	// stores GongNoteShapeDB according to their gorm ID
	Map_GongNoteShapeDBID_GongNoteShapeDB map[uint]*GongNoteShapeDB

	// stores GongNoteShapeDB ID according to GongNoteShape address
	Map_GongNoteShapePtr_GongNoteShapeDBID map[*models.GongNoteShape]uint

	// stores GongNoteShape according to their gorm ID
	Map_GongNoteShapeDBID_GongNoteShapePtr map[uint]*models.GongNoteShape

	db db.DBInterface

	stage *models.Stage
}

func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) GetStage() (stage *models.Stage) {
	stage = backRepoGongNoteShape.stage
	return
}

func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) GetDB() db.DBInterface {
	return backRepoGongNoteShape.db
}

// GetGongNoteShapeDBFromGongNoteShapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) GetGongNoteShapeDBFromGongNoteShapePtr(gongnoteshape *models.GongNoteShape) (gongnoteshapeDB *GongNoteShapeDB) {
	id := backRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID[gongnoteshape]
	gongnoteshapeDB = backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB[id]
	return
}

// BackRepoGongNoteShape.CommitPhaseOne commits all staged instances of GongNoteShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var gongnoteshapes []*models.GongNoteShape
	for gongnoteshape := range stage.GongNoteShapes {
		gongnoteshapes = append(gongnoteshapes, gongnoteshape)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(gongnoteshapes, func(i, j int) bool {
		return stage.GongNoteShapeMap_Staged_Order[gongnoteshapes[i]] < stage.GongNoteShapeMap_Staged_Order[gongnoteshapes[j]]
	})

	for _, gongnoteshape := range gongnoteshapes {
		backRepoGongNoteShape.CommitPhaseOneInstance(gongnoteshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongnoteshape := range backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr {
		if _, ok := stage.GongNoteShapes[gongnoteshape]; !ok {
			backRepoGongNoteShape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongNoteShape.CommitDeleteInstance commits deletion of GongNoteShape to the BackRepo
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CommitDeleteInstance(id uint) (Error error) {

	gongnoteshape := backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr[id]

	// gongnoteshape is not staged anymore, remove gongnoteshapeDB
	gongnoteshapeDB := backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB[id]
	db, _ := backRepoGongNoteShape.db.Unscoped()
	_, err := db.Delete(gongnoteshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID, gongnoteshape)
	delete(backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr, id)
	delete(backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB, id)

	return
}

// BackRepoGongNoteShape.CommitPhaseOneInstance commits gongnoteshape staged instances of GongNoteShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CommitPhaseOneInstance(gongnoteshape *models.GongNoteShape) (Error error) {

	// check if the gongnoteshape is not commited yet
	if _, ok := backRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID[gongnoteshape]; ok {
		return
	}

	// initiate gongnoteshape
	var gongnoteshapeDB GongNoteShapeDB
	gongnoteshapeDB.CopyBasicFieldsFromGongNoteShape(gongnoteshape)

	_, err := backRepoGongNoteShape.db.Create(&gongnoteshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID[gongnoteshape] = gongnoteshapeDB.ID
	backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr[gongnoteshapeDB.ID] = gongnoteshape
	backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB[gongnoteshapeDB.ID] = &gongnoteshapeDB

	return
}

// BackRepoGongNoteShape.CommitPhaseTwo commits all staged instances of GongNoteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongnoteshape := range backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr {
		backRepoGongNoteShape.CommitPhaseTwoInstance(backRepo, idx, gongnoteshape)
	}

	return
}

// BackRepoGongNoteShape.CommitPhaseTwoInstance commits {{structname }} of models.GongNoteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongnoteshape *models.GongNoteShape) (Error error) {

	// fetch matching gongnoteshapeDB
	if gongnoteshapeDB, ok := backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB[idx]; ok {

		gongnoteshapeDB.CopyBasicFieldsFromGongNoteShape(gongnoteshape)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		gongnoteshapeDB.GongNoteShapePointersEncoding.GongNoteLinkShapes = make([]int, 0)
		// 2. encode
		for _, gongnotelinkshapeAssocEnd := range gongnoteshape.GongNoteLinkShapes {
			gongnotelinkshapeAssocEnd_DB :=
				backRepo.BackRepoGongNoteLinkShape.GetGongNoteLinkShapeDBFromGongNoteLinkShapePtr(gongnotelinkshapeAssocEnd)
			
			// the stage might be inconsistant, meaning that the gongnotelinkshapeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if gongnotelinkshapeAssocEnd_DB == nil {
				continue
			}
			
			gongnoteshapeDB.GongNoteShapePointersEncoding.GongNoteLinkShapes =
				append(gongnoteshapeDB.GongNoteShapePointersEncoding.GongNoteLinkShapes, int(gongnotelinkshapeAssocEnd_DB.ID))
		}

		_, err := backRepoGongNoteShape.db.Save(gongnoteshapeDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongNoteShape intance %s", gongnoteshape.Name))
		return err
	}

	return
}

// BackRepoGongNoteShape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CheckoutPhaseOne() (Error error) {

	gongnoteshapeDBArray := make([]GongNoteShapeDB, 0)
	_, err := backRepoGongNoteShape.db.Find(&gongnoteshapeDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	gongnoteshapeInstancesToBeRemovedFromTheStage := make(map[*models.GongNoteShape]any)
	for key, value := range backRepoGongNoteShape.stage.GongNoteShapes {
		gongnoteshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, gongnoteshapeDB := range gongnoteshapeDBArray {
		backRepoGongNoteShape.CheckoutPhaseOneInstance(&gongnoteshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		gongnoteshape, ok := backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr[gongnoteshapeDB.ID]
		if ok {
			delete(gongnoteshapeInstancesToBeRemovedFromTheStage, gongnoteshape)
		}
	}

	// remove from stage and back repo's 3 maps all gongnoteshapes that are not in the checkout
	for gongnoteshape := range gongnoteshapeInstancesToBeRemovedFromTheStage {
		gongnoteshape.Unstage(backRepoGongNoteShape.GetStage())

		// remove instance from the back repo 3 maps
		gongnoteshapeID := backRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID[gongnoteshape]
		delete(backRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID, gongnoteshape)
		delete(backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB, gongnoteshapeID)
		delete(backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr, gongnoteshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongnoteshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongnoteshapeDB
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CheckoutPhaseOneInstance(gongnoteshapeDB *GongNoteShapeDB) (Error error) {

	gongnoteshape, ok := backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr[gongnoteshapeDB.ID]
	if !ok {
		gongnoteshape = new(models.GongNoteShape)

		backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr[gongnoteshapeDB.ID] = gongnoteshape
		backRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID[gongnoteshape] = gongnoteshapeDB.ID

		// append model store with the new element
		gongnoteshape.Name = gongnoteshapeDB.Name_Data.String
		gongnoteshape.Stage(backRepoGongNoteShape.GetStage())
	}
	gongnoteshapeDB.CopyBasicFieldsToGongNoteShape(gongnoteshape)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	gongnoteshape.Stage(backRepoGongNoteShape.GetStage())

	// preserve pointer to gongnoteshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GongNoteShapeDBID_GongNoteShapeDB)[gongnoteshapeDB hold variable pointers
	gongnoteshapeDB_Data := *gongnoteshapeDB
	preservedPtrToGongNoteShape := &gongnoteshapeDB_Data
	backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB[gongnoteshapeDB.ID] = preservedPtrToGongNoteShape

	return
}

// BackRepoGongNoteShape.CheckoutPhaseTwo Checkouts all staged instances of GongNoteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongnoteshapeDB := range backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB {
		backRepoGongNoteShape.CheckoutPhaseTwoInstance(backRepo, gongnoteshapeDB)
	}
	return
}

// BackRepoGongNoteShape.CheckoutPhaseTwoInstance Checkouts staged instances of GongNoteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongnoteshapeDB *GongNoteShapeDB) (Error error) {

	gongnoteshape := backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr[gongnoteshapeDB.ID]

	gongnoteshapeDB.DecodePointers(backRepo, gongnoteshape)

	return
}

func (gongnoteshapeDB *GongNoteShapeDB) DecodePointers(backRepo *BackRepoStruct, gongnoteshape *models.GongNoteShape) {

	// insertion point for checkout of pointer encoding
	// This loop redeem gongnoteshape.GongNoteLinkShapes in the stage from the encode in the back repo
	// It parses all GongNoteLinkShapeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gongnoteshape.GongNoteLinkShapes = gongnoteshape.GongNoteLinkShapes[:0]
	for _, _GongNoteLinkShapeid := range gongnoteshapeDB.GongNoteShapePointersEncoding.GongNoteLinkShapes {
		gongnoteshape.GongNoteLinkShapes = append(gongnoteshape.GongNoteLinkShapes, backRepo.BackRepoGongNoteLinkShape.Map_GongNoteLinkShapeDBID_GongNoteLinkShapePtr[uint(_GongNoteLinkShapeid)])
	}

	return
}

// CommitGongNoteShape allows commit of a single gongnoteshape (if already staged)
func (backRepo *BackRepoStruct) CommitGongNoteShape(gongnoteshape *models.GongNoteShape) {
	backRepo.BackRepoGongNoteShape.CommitPhaseOneInstance(gongnoteshape)
	if id, ok := backRepo.BackRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID[gongnoteshape]; ok {
		backRepo.BackRepoGongNoteShape.CommitPhaseTwoInstance(backRepo, id, gongnoteshape)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGongNoteShape allows checkout of a single gongnoteshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongNoteShape(gongnoteshape *models.GongNoteShape) {
	// check if the gongnoteshape is staged
	if _, ok := backRepo.BackRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID[gongnoteshape]; ok {

		if id, ok := backRepo.BackRepoGongNoteShape.Map_GongNoteShapePtr_GongNoteShapeDBID[gongnoteshape]; ok {
			var gongnoteshapeDB GongNoteShapeDB
			gongnoteshapeDB.ID = id

			if _, err := backRepo.BackRepoGongNoteShape.db.First(&gongnoteshapeDB, id); err != nil {
				log.Fatalln("CheckoutGongNoteShape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongNoteShape.CheckoutPhaseOneInstance(&gongnoteshapeDB)
			backRepo.BackRepoGongNoteShape.CheckoutPhaseTwoInstance(backRepo, &gongnoteshapeDB)
		}
	}
}

// CopyBasicFieldsFromGongNoteShape
func (gongnoteshapeDB *GongNoteShapeDB) CopyBasicFieldsFromGongNoteShape(gongnoteshape *models.GongNoteShape) {
	// insertion point for fields commit

	gongnoteshapeDB.Name_Data.String = gongnoteshape.Name
	gongnoteshapeDB.Name_Data.Valid = true

	gongnoteshapeDB.Identifier_Data.String = gongnoteshape.Identifier
	gongnoteshapeDB.Identifier_Data.Valid = true

	gongnoteshapeDB.Body_Data.String = gongnoteshape.Body
	gongnoteshapeDB.Body_Data.Valid = true

	gongnoteshapeDB.BodyHTML_Data.String = gongnoteshape.BodyHTML
	gongnoteshapeDB.BodyHTML_Data.Valid = true

	gongnoteshapeDB.X_Data.Float64 = gongnoteshape.X
	gongnoteshapeDB.X_Data.Valid = true

	gongnoteshapeDB.Y_Data.Float64 = gongnoteshape.Y
	gongnoteshapeDB.Y_Data.Valid = true

	gongnoteshapeDB.Width_Data.Float64 = gongnoteshape.Width
	gongnoteshapeDB.Width_Data.Valid = true

	gongnoteshapeDB.Height_Data.Float64 = gongnoteshape.Height
	gongnoteshapeDB.Height_Data.Valid = true

	gongnoteshapeDB.Matched_Data.Bool = gongnoteshape.Matched
	gongnoteshapeDB.Matched_Data.Valid = true

	gongnoteshapeDB.IsExpanded_Data.Bool = gongnoteshape.IsExpanded
	gongnoteshapeDB.IsExpanded_Data.Valid = true
}

// CopyBasicFieldsFromGongNoteShape_WOP
func (gongnoteshapeDB *GongNoteShapeDB) CopyBasicFieldsFromGongNoteShape_WOP(gongnoteshape *models.GongNoteShape_WOP) {
	// insertion point for fields commit

	gongnoteshapeDB.Name_Data.String = gongnoteshape.Name
	gongnoteshapeDB.Name_Data.Valid = true

	gongnoteshapeDB.Identifier_Data.String = gongnoteshape.Identifier
	gongnoteshapeDB.Identifier_Data.Valid = true

	gongnoteshapeDB.Body_Data.String = gongnoteshape.Body
	gongnoteshapeDB.Body_Data.Valid = true

	gongnoteshapeDB.BodyHTML_Data.String = gongnoteshape.BodyHTML
	gongnoteshapeDB.BodyHTML_Data.Valid = true

	gongnoteshapeDB.X_Data.Float64 = gongnoteshape.X
	gongnoteshapeDB.X_Data.Valid = true

	gongnoteshapeDB.Y_Data.Float64 = gongnoteshape.Y
	gongnoteshapeDB.Y_Data.Valid = true

	gongnoteshapeDB.Width_Data.Float64 = gongnoteshape.Width
	gongnoteshapeDB.Width_Data.Valid = true

	gongnoteshapeDB.Height_Data.Float64 = gongnoteshape.Height
	gongnoteshapeDB.Height_Data.Valid = true

	gongnoteshapeDB.Matched_Data.Bool = gongnoteshape.Matched
	gongnoteshapeDB.Matched_Data.Valid = true

	gongnoteshapeDB.IsExpanded_Data.Bool = gongnoteshape.IsExpanded
	gongnoteshapeDB.IsExpanded_Data.Valid = true
}

// CopyBasicFieldsFromGongNoteShapeWOP
func (gongnoteshapeDB *GongNoteShapeDB) CopyBasicFieldsFromGongNoteShapeWOP(gongnoteshape *GongNoteShapeWOP) {
	// insertion point for fields commit

	gongnoteshapeDB.Name_Data.String = gongnoteshape.Name
	gongnoteshapeDB.Name_Data.Valid = true

	gongnoteshapeDB.Identifier_Data.String = gongnoteshape.Identifier
	gongnoteshapeDB.Identifier_Data.Valid = true

	gongnoteshapeDB.Body_Data.String = gongnoteshape.Body
	gongnoteshapeDB.Body_Data.Valid = true

	gongnoteshapeDB.BodyHTML_Data.String = gongnoteshape.BodyHTML
	gongnoteshapeDB.BodyHTML_Data.Valid = true

	gongnoteshapeDB.X_Data.Float64 = gongnoteshape.X
	gongnoteshapeDB.X_Data.Valid = true

	gongnoteshapeDB.Y_Data.Float64 = gongnoteshape.Y
	gongnoteshapeDB.Y_Data.Valid = true

	gongnoteshapeDB.Width_Data.Float64 = gongnoteshape.Width
	gongnoteshapeDB.Width_Data.Valid = true

	gongnoteshapeDB.Height_Data.Float64 = gongnoteshape.Height
	gongnoteshapeDB.Height_Data.Valid = true

	gongnoteshapeDB.Matched_Data.Bool = gongnoteshape.Matched
	gongnoteshapeDB.Matched_Data.Valid = true

	gongnoteshapeDB.IsExpanded_Data.Bool = gongnoteshape.IsExpanded
	gongnoteshapeDB.IsExpanded_Data.Valid = true
}

// CopyBasicFieldsToGongNoteShape
func (gongnoteshapeDB *GongNoteShapeDB) CopyBasicFieldsToGongNoteShape(gongnoteshape *models.GongNoteShape) {
	// insertion point for checkout of basic fields (back repo to stage)
	gongnoteshape.Name = gongnoteshapeDB.Name_Data.String
	gongnoteshape.Identifier = gongnoteshapeDB.Identifier_Data.String
	gongnoteshape.Body = gongnoteshapeDB.Body_Data.String
	gongnoteshape.BodyHTML = gongnoteshapeDB.BodyHTML_Data.String
	gongnoteshape.X = gongnoteshapeDB.X_Data.Float64
	gongnoteshape.Y = gongnoteshapeDB.Y_Data.Float64
	gongnoteshape.Width = gongnoteshapeDB.Width_Data.Float64
	gongnoteshape.Height = gongnoteshapeDB.Height_Data.Float64
	gongnoteshape.Matched = gongnoteshapeDB.Matched_Data.Bool
	gongnoteshape.IsExpanded = gongnoteshapeDB.IsExpanded_Data.Bool
}

// CopyBasicFieldsToGongNoteShape_WOP
func (gongnoteshapeDB *GongNoteShapeDB) CopyBasicFieldsToGongNoteShape_WOP(gongnoteshape *models.GongNoteShape_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	gongnoteshape.Name = gongnoteshapeDB.Name_Data.String
	gongnoteshape.Identifier = gongnoteshapeDB.Identifier_Data.String
	gongnoteshape.Body = gongnoteshapeDB.Body_Data.String
	gongnoteshape.BodyHTML = gongnoteshapeDB.BodyHTML_Data.String
	gongnoteshape.X = gongnoteshapeDB.X_Data.Float64
	gongnoteshape.Y = gongnoteshapeDB.Y_Data.Float64
	gongnoteshape.Width = gongnoteshapeDB.Width_Data.Float64
	gongnoteshape.Height = gongnoteshapeDB.Height_Data.Float64
	gongnoteshape.Matched = gongnoteshapeDB.Matched_Data.Bool
	gongnoteshape.IsExpanded = gongnoteshapeDB.IsExpanded_Data.Bool
}

// CopyBasicFieldsToGongNoteShapeWOP
func (gongnoteshapeDB *GongNoteShapeDB) CopyBasicFieldsToGongNoteShapeWOP(gongnoteshape *GongNoteShapeWOP) {
	gongnoteshape.ID = int(gongnoteshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	gongnoteshape.Name = gongnoteshapeDB.Name_Data.String
	gongnoteshape.Identifier = gongnoteshapeDB.Identifier_Data.String
	gongnoteshape.Body = gongnoteshapeDB.Body_Data.String
	gongnoteshape.BodyHTML = gongnoteshapeDB.BodyHTML_Data.String
	gongnoteshape.X = gongnoteshapeDB.X_Data.Float64
	gongnoteshape.Y = gongnoteshapeDB.Y_Data.Float64
	gongnoteshape.Width = gongnoteshapeDB.Width_Data.Float64
	gongnoteshape.Height = gongnoteshapeDB.Height_Data.Float64
	gongnoteshape.Matched = gongnoteshapeDB.Matched_Data.Bool
	gongnoteshape.IsExpanded = gongnoteshapeDB.IsExpanded_Data.Bool
}

// Backup generates a json file from a slice of all GongNoteShapeDB instances in the backrepo
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GongNoteShapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongNoteShapeDB, 0)
	for _, gongnoteshapeDB := range backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB {
		forBackup = append(forBackup, gongnoteshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json GongNoteShape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json GongNoteShape file", err.Error())
	}
}

// Backup generates a json file from a slice of all GongNoteShapeDB instances in the backrepo
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongNoteShapeDB, 0)
	for _, gongnoteshapeDB := range backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB {
		forBackup = append(forBackup, gongnoteshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GongNoteShape")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GongNoteShape_Fields, -1)
	for _, gongnoteshapeDB := range forBackup {

		var gongnoteshapeWOP GongNoteShapeWOP
		gongnoteshapeDB.CopyBasicFieldsToGongNoteShapeWOP(&gongnoteshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&gongnoteshapeWOP, -1)
	}
}

// RestoreXL from the "GongNoteShape" sheet all GongNoteShapeDB instances
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGongNoteShapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GongNoteShape"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGongNoteShape.rowVisitorGongNoteShape)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) rowVisitorGongNoteShape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var gongnoteshapeWOP GongNoteShapeWOP
		row.ReadStruct(&gongnoteshapeWOP)

		// add the unmarshalled struct to the stage
		gongnoteshapeDB := new(GongNoteShapeDB)
		gongnoteshapeDB.CopyBasicFieldsFromGongNoteShapeWOP(&gongnoteshapeWOP)

		gongnoteshapeDB_ID_atBackupTime := gongnoteshapeDB.ID
		gongnoteshapeDB.ID = 0
		_, err := backRepoGongNoteShape.db.Create(gongnoteshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB[gongnoteshapeDB.ID] = gongnoteshapeDB
		BackRepoGongNoteShapeid_atBckpTime_newID[gongnoteshapeDB_ID_atBackupTime] = gongnoteshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GongNoteShapeDB.json" in dirPath that stores an array
// of GongNoteShapeDB and stores it in the database
// the map BackRepoGongNoteShapeid_atBckpTime_newID is updated accordingly
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGongNoteShapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GongNoteShapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json GongNoteShape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GongNoteShapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GongNoteShapeDBID_GongNoteShapeDB
	for _, gongnoteshapeDB := range forRestore {

		gongnoteshapeDB_ID_atBackupTime := gongnoteshapeDB.ID
		gongnoteshapeDB.ID = 0
		_, err := backRepoGongNoteShape.db.Create(gongnoteshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB[gongnoteshapeDB.ID] = gongnoteshapeDB
		BackRepoGongNoteShapeid_atBckpTime_newID[gongnoteshapeDB_ID_atBackupTime] = gongnoteshapeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json GongNoteShape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GongNoteShape>id_atBckpTime_newID
// to compute new index
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) RestorePhaseTwo() {

	for _, gongnoteshapeDB := range backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB {

		// next line of code is to avert unused variable compilation error
		_ = gongnoteshapeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoGongNoteShape.db.Model(gongnoteshapeDB)
		_, err := db.Updates(*gongnoteshapeDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoGongNoteShape.ResetReversePointers commits all staged instances of GongNoteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, gongnoteshape := range backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapePtr {
		backRepoGongNoteShape.ResetReversePointersInstance(backRepo, idx, gongnoteshape)
	}

	return
}

func (backRepoGongNoteShape *BackRepoGongNoteShapeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, gongnoteshape *models.GongNoteShape) (Error error) {

	// fetch matching gongnoteshapeDB
	if gongnoteshapeDB, ok := backRepoGongNoteShape.Map_GongNoteShapeDBID_GongNoteShapeDB[idx]; ok {
		_ = gongnoteshapeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGongNoteShapeid_atBckpTime_newID map[uint]uint
