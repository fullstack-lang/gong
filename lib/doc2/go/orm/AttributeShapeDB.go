// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/doc2/go/db"
	"github.com/fullstack-lang/gong/lib/doc2/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AttributeShape_sql sql.NullBool
var dummy_AttributeShape_time time.Duration
var dummy_AttributeShape_sort sort.Float64Slice

// AttributeShapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributeshapeAPI
type AttributeShapeAPI struct {
	gorm.Model

	models.AttributeShape_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AttributeShapePointersEncoding AttributeShapePointersEncoding
}

// AttributeShapePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AttributeShapePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// AttributeShapeDB describes a attributeshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributeshapeDB
type AttributeShapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributeshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributeshapeDB.FieldTypeAsString
	FieldTypeAsString_Data sql.NullString

	// Declation for basic field attributeshapeDB.Structname
	Structname_Data sql.NullString

	// Declation for basic field attributeshapeDB.Fieldtypename
	Fieldtypename_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AttributeShapePointersEncoding
}

// AttributeShapeDBs arrays attributeshapeDBs
// swagger:response attributeshapeDBsResponse
type AttributeShapeDBs []AttributeShapeDB

// AttributeShapeDBResponse provides response
// swagger:response attributeshapeDBResponse
type AttributeShapeDBResponse struct {
	AttributeShapeDB
}

// AttributeShapeWOP is a AttributeShape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AttributeShapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IdentifierMeta any `xlsx:"2"`

	FieldTypeAsString string `xlsx:"3"`

	Structname string `xlsx:"4"`

	Fieldtypename string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var AttributeShape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IdentifierMeta",
	"FieldTypeAsString",
	"Structname",
	"Fieldtypename",
}

type BackRepoAttributeShapeStruct struct {
	// stores AttributeShapeDB according to their gorm ID
	Map_AttributeShapeDBID_AttributeShapeDB map[uint]*AttributeShapeDB

	// stores AttributeShapeDB ID according to AttributeShape address
	Map_AttributeShapePtr_AttributeShapeDBID map[*models.AttributeShape]uint

	// stores AttributeShape according to their gorm ID
	Map_AttributeShapeDBID_AttributeShapePtr map[uint]*models.AttributeShape

	db db.DBInterface

	stage *models.Stage
}

func (backRepoAttributeShape *BackRepoAttributeShapeStruct) GetStage() (stage *models.Stage) {
	stage = backRepoAttributeShape.stage
	return
}

func (backRepoAttributeShape *BackRepoAttributeShapeStruct) GetDB() db.DBInterface {
	return backRepoAttributeShape.db
}

// GetAttributeShapeDBFromAttributeShapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) GetAttributeShapeDBFromAttributeShapePtr(attributeshape *models.AttributeShape) (attributeshapeDB *AttributeShapeDB) {
	id := backRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID[attributeshape]
	attributeshapeDB = backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB[id]
	return
}

// BackRepoAttributeShape.CommitPhaseOne commits all staged instances of AttributeShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var attributeshapes []*models.AttributeShape
	for attributeshape := range stage.AttributeShapes {
		attributeshapes = append(attributeshapes, attributeshape)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(attributeshapes, func(i, j int) bool {
		return stage.AttributeShapeMap_Staged_Order[attributeshapes[i]] < stage.AttributeShapeMap_Staged_Order[attributeshapes[j]]
	})

	for _, attributeshape := range attributeshapes {
		backRepoAttributeShape.CommitPhaseOneInstance(attributeshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributeshape := range backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr {
		if _, ok := stage.AttributeShapes[attributeshape]; !ok {
			backRepoAttributeShape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAttributeShape.CommitDeleteInstance commits deletion of AttributeShape to the BackRepo
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CommitDeleteInstance(id uint) (Error error) {

	attributeshape := backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr[id]

	// attributeshape is not staged anymore, remove attributeshapeDB
	attributeshapeDB := backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB[id]
	db, _ := backRepoAttributeShape.db.Unscoped()
	_, err := db.Delete(attributeshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID, attributeshape)
	delete(backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr, id)
	delete(backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB, id)

	return
}

// BackRepoAttributeShape.CommitPhaseOneInstance commits attributeshape staged instances of AttributeShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CommitPhaseOneInstance(attributeshape *models.AttributeShape) (Error error) {

	// check if the attributeshape is not commited yet
	if _, ok := backRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID[attributeshape]; ok {
		return
	}

	// initiate attributeshape
	var attributeshapeDB AttributeShapeDB
	attributeshapeDB.CopyBasicFieldsFromAttributeShape(attributeshape)

	_, err := backRepoAttributeShape.db.Create(&attributeshapeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID[attributeshape] = attributeshapeDB.ID
	backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr[attributeshapeDB.ID] = attributeshape
	backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB[attributeshapeDB.ID] = &attributeshapeDB

	return
}

// BackRepoAttributeShape.CommitPhaseTwo commits all staged instances of AttributeShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributeshape := range backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr {
		backRepoAttributeShape.CommitPhaseTwoInstance(backRepo, idx, attributeshape)
	}

	return
}

// BackRepoAttributeShape.CommitPhaseTwoInstance commits {{structname }} of models.AttributeShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributeshape *models.AttributeShape) (Error error) {

	// fetch matching attributeshapeDB
	if attributeshapeDB, ok := backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB[idx]; ok {

		attributeshapeDB.CopyBasicFieldsFromAttributeShape(attributeshape)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoAttributeShape.db.Save(attributeshapeDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AttributeShape intance %s", attributeshape.Name))
		return err
	}

	return
}

// BackRepoAttributeShape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CheckoutPhaseOne() (Error error) {

	attributeshapeDBArray := make([]AttributeShapeDB, 0)
	_, err := backRepoAttributeShape.db.Find(&attributeshapeDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributeshapeInstancesToBeRemovedFromTheStage := make(map[*models.AttributeShape]any)
	for key, value := range backRepoAttributeShape.stage.AttributeShapes {
		attributeshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributeshapeDB := range attributeshapeDBArray {
		backRepoAttributeShape.CheckoutPhaseOneInstance(&attributeshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributeshape, ok := backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr[attributeshapeDB.ID]
		if ok {
			delete(attributeshapeInstancesToBeRemovedFromTheStage, attributeshape)
		}
	}

	// remove from stage and back repo's 3 maps all attributeshapes that are not in the checkout
	for attributeshape := range attributeshapeInstancesToBeRemovedFromTheStage {
		attributeshape.Unstage(backRepoAttributeShape.GetStage())

		// remove instance from the back repo 3 maps
		attributeshapeID := backRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID[attributeshape]
		delete(backRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID, attributeshape)
		delete(backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB, attributeshapeID)
		delete(backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr, attributeshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributeshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributeshapeDB
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CheckoutPhaseOneInstance(attributeshapeDB *AttributeShapeDB) (Error error) {

	attributeshape, ok := backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr[attributeshapeDB.ID]
	if !ok {
		attributeshape = new(models.AttributeShape)

		backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr[attributeshapeDB.ID] = attributeshape
		backRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID[attributeshape] = attributeshapeDB.ID

		// append model store with the new element
		attributeshape.Name = attributeshapeDB.Name_Data.String
		attributeshape.Stage(backRepoAttributeShape.GetStage())
	}
	attributeshapeDB.CopyBasicFieldsToAttributeShape(attributeshape)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributeshape.Stage(backRepoAttributeShape.GetStage())

	// preserve pointer to attributeshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AttributeShapeDBID_AttributeShapeDB)[attributeshapeDB hold variable pointers
	attributeshapeDB_Data := *attributeshapeDB
	preservedPtrToAttributeShape := &attributeshapeDB_Data
	backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB[attributeshapeDB.ID] = preservedPtrToAttributeShape

	return
}

// BackRepoAttributeShape.CheckoutPhaseTwo Checkouts all staged instances of AttributeShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributeshapeDB := range backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB {
		backRepoAttributeShape.CheckoutPhaseTwoInstance(backRepo, attributeshapeDB)
	}
	return
}

// BackRepoAttributeShape.CheckoutPhaseTwoInstance Checkouts staged instances of AttributeShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributeshapeDB *AttributeShapeDB) (Error error) {

	attributeshape := backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr[attributeshapeDB.ID]

	attributeshapeDB.DecodePointers(backRepo, attributeshape)

	return
}

func (attributeshapeDB *AttributeShapeDB) DecodePointers(backRepo *BackRepoStruct, attributeshape *models.AttributeShape) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitAttributeShape allows commit of a single attributeshape (if already staged)
func (backRepo *BackRepoStruct) CommitAttributeShape(attributeshape *models.AttributeShape) {
	backRepo.BackRepoAttributeShape.CommitPhaseOneInstance(attributeshape)
	if id, ok := backRepo.BackRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID[attributeshape]; ok {
		backRepo.BackRepoAttributeShape.CommitPhaseTwoInstance(backRepo, id, attributeshape)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAttributeShape allows checkout of a single attributeshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAttributeShape(attributeshape *models.AttributeShape) {
	// check if the attributeshape is staged
	if _, ok := backRepo.BackRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID[attributeshape]; ok {

		if id, ok := backRepo.BackRepoAttributeShape.Map_AttributeShapePtr_AttributeShapeDBID[attributeshape]; ok {
			var attributeshapeDB AttributeShapeDB
			attributeshapeDB.ID = id

			if _, err := backRepo.BackRepoAttributeShape.db.First(&attributeshapeDB, id); err != nil {
				log.Fatalln("CheckoutAttributeShape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAttributeShape.CheckoutPhaseOneInstance(&attributeshapeDB)
			backRepo.BackRepoAttributeShape.CheckoutPhaseTwoInstance(backRepo, &attributeshapeDB)
		}
	}
}

// CopyBasicFieldsFromAttributeShape
func (attributeshapeDB *AttributeShapeDB) CopyBasicFieldsFromAttributeShape(attributeshape *models.AttributeShape) {
	// insertion point for fields commit

	attributeshapeDB.Name_Data.String = attributeshape.Name
	attributeshapeDB.Name_Data.Valid = true

	attributeshapeDB.FieldTypeAsString_Data.String = attributeshape.FieldTypeAsString
	attributeshapeDB.FieldTypeAsString_Data.Valid = true

	attributeshapeDB.Structname_Data.String = attributeshape.Structname
	attributeshapeDB.Structname_Data.Valid = true

	attributeshapeDB.Fieldtypename_Data.String = attributeshape.Fieldtypename
	attributeshapeDB.Fieldtypename_Data.Valid = true
}

// CopyBasicFieldsFromAttributeShape_WOP
func (attributeshapeDB *AttributeShapeDB) CopyBasicFieldsFromAttributeShape_WOP(attributeshape *models.AttributeShape_WOP) {
	// insertion point for fields commit

	attributeshapeDB.Name_Data.String = attributeshape.Name
	attributeshapeDB.Name_Data.Valid = true

	attributeshapeDB.FieldTypeAsString_Data.String = attributeshape.FieldTypeAsString
	attributeshapeDB.FieldTypeAsString_Data.Valid = true

	attributeshapeDB.Structname_Data.String = attributeshape.Structname
	attributeshapeDB.Structname_Data.Valid = true

	attributeshapeDB.Fieldtypename_Data.String = attributeshape.Fieldtypename
	attributeshapeDB.Fieldtypename_Data.Valid = true
}

// CopyBasicFieldsFromAttributeShapeWOP
func (attributeshapeDB *AttributeShapeDB) CopyBasicFieldsFromAttributeShapeWOP(attributeshape *AttributeShapeWOP) {
	// insertion point for fields commit

	attributeshapeDB.Name_Data.String = attributeshape.Name
	attributeshapeDB.Name_Data.Valid = true

	attributeshapeDB.FieldTypeAsString_Data.String = attributeshape.FieldTypeAsString
	attributeshapeDB.FieldTypeAsString_Data.Valid = true

	attributeshapeDB.Structname_Data.String = attributeshape.Structname
	attributeshapeDB.Structname_Data.Valid = true

	attributeshapeDB.Fieldtypename_Data.String = attributeshape.Fieldtypename
	attributeshapeDB.Fieldtypename_Data.Valid = true
}

// CopyBasicFieldsToAttributeShape
func (attributeshapeDB *AttributeShapeDB) CopyBasicFieldsToAttributeShape(attributeshape *models.AttributeShape) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributeshape.Name = attributeshapeDB.Name_Data.String
	attributeshape.FieldTypeAsString = attributeshapeDB.FieldTypeAsString_Data.String
	attributeshape.Structname = attributeshapeDB.Structname_Data.String
	attributeshape.Fieldtypename = attributeshapeDB.Fieldtypename_Data.String
}

// CopyBasicFieldsToAttributeShape_WOP
func (attributeshapeDB *AttributeShapeDB) CopyBasicFieldsToAttributeShape_WOP(attributeshape *models.AttributeShape_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributeshape.Name = attributeshapeDB.Name_Data.String
	attributeshape.FieldTypeAsString = attributeshapeDB.FieldTypeAsString_Data.String
	attributeshape.Structname = attributeshapeDB.Structname_Data.String
	attributeshape.Fieldtypename = attributeshapeDB.Fieldtypename_Data.String
}

// CopyBasicFieldsToAttributeShapeWOP
func (attributeshapeDB *AttributeShapeDB) CopyBasicFieldsToAttributeShapeWOP(attributeshape *AttributeShapeWOP) {
	attributeshape.ID = int(attributeshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributeshape.Name = attributeshapeDB.Name_Data.String
	attributeshape.FieldTypeAsString = attributeshapeDB.FieldTypeAsString_Data.String
	attributeshape.Structname = attributeshapeDB.Structname_Data.String
	attributeshape.Fieldtypename = attributeshapeDB.Fieldtypename_Data.String
}

// Backup generates a json file from a slice of all AttributeShapeDB instances in the backrepo
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AttributeShapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AttributeShapeDB, 0)
	for _, attributeshapeDB := range backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB {
		forBackup = append(forBackup, attributeshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json AttributeShape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json AttributeShape file", err.Error())
	}
}

// Backup generates a json file from a slice of all AttributeShapeDB instances in the backrepo
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AttributeShapeDB, 0)
	for _, attributeshapeDB := range backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB {
		forBackup = append(forBackup, attributeshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AttributeShape")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AttributeShape_Fields, -1)
	for _, attributeshapeDB := range forBackup {

		var attributeshapeWOP AttributeShapeWOP
		attributeshapeDB.CopyBasicFieldsToAttributeShapeWOP(&attributeshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributeshapeWOP, -1)
	}
}

// RestoreXL from the "AttributeShape" sheet all AttributeShapeDB instances
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAttributeShapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AttributeShape"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAttributeShape.rowVisitorAttributeShape)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAttributeShape *BackRepoAttributeShapeStruct) rowVisitorAttributeShape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributeshapeWOP AttributeShapeWOP
		row.ReadStruct(&attributeshapeWOP)

		// add the unmarshalled struct to the stage
		attributeshapeDB := new(AttributeShapeDB)
		attributeshapeDB.CopyBasicFieldsFromAttributeShapeWOP(&attributeshapeWOP)

		attributeshapeDB_ID_atBackupTime := attributeshapeDB.ID
		attributeshapeDB.ID = 0
		_, err := backRepoAttributeShape.db.Create(attributeshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB[attributeshapeDB.ID] = attributeshapeDB
		BackRepoAttributeShapeid_atBckpTime_newID[attributeshapeDB_ID_atBackupTime] = attributeshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AttributeShapeDB.json" in dirPath that stores an array
// of AttributeShapeDB and stores it in the database
// the map BackRepoAttributeShapeid_atBckpTime_newID is updated accordingly
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAttributeShapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AttributeShapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json AttributeShape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AttributeShapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AttributeShapeDBID_AttributeShapeDB
	for _, attributeshapeDB := range forRestore {

		attributeshapeDB_ID_atBackupTime := attributeshapeDB.ID
		attributeshapeDB.ID = 0
		_, err := backRepoAttributeShape.db.Create(attributeshapeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB[attributeshapeDB.ID] = attributeshapeDB
		BackRepoAttributeShapeid_atBckpTime_newID[attributeshapeDB_ID_atBackupTime] = attributeshapeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json AttributeShape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AttributeShape>id_atBckpTime_newID
// to compute new index
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) RestorePhaseTwo() {

	for _, attributeshapeDB := range backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB {

		// next line of code is to avert unused variable compilation error
		_ = attributeshapeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoAttributeShape.db.Model(attributeshapeDB)
		_, err := db.Updates(*attributeshapeDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoAttributeShape.ResetReversePointers commits all staged instances of AttributeShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeShape *BackRepoAttributeShapeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributeshape := range backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapePtr {
		backRepoAttributeShape.ResetReversePointersInstance(backRepo, idx, attributeshape)
	}

	return
}

func (backRepoAttributeShape *BackRepoAttributeShapeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributeshape *models.AttributeShape) (Error error) {

	// fetch matching attributeshapeDB
	if attributeshapeDB, ok := backRepoAttributeShape.Map_AttributeShapeDBID_AttributeShapeDB[idx]; ok {
		_ = attributeshapeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAttributeShapeid_atBckpTime_newID map[uint]uint
