// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/svg/go/db"
	"github.com/fullstack-lang/gong/lib/svg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Condition_sql sql.NullBool
var dummy_Condition_time time.Duration
var dummy_Condition_sort sort.Float64Slice

// ConditionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model conditionAPI
type ConditionAPI struct {
	gorm.Model

	models.Condition_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ConditionPointersEncoding ConditionPointersEncoding
}

// ConditionPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ConditionPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ConditionDB describes a condition in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model conditionDB
type ConditionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field conditionDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ConditionPointersEncoding
}

// ConditionDBs arrays conditionDBs
// swagger:response conditionDBsResponse
type ConditionDBs []ConditionDB

// ConditionDBResponse provides response
// swagger:response conditionDBResponse
type ConditionDBResponse struct {
	ConditionDB
}

// ConditionWOP is a Condition without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ConditionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Condition_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoConditionStruct struct {
	// stores ConditionDB according to their gorm ID
	Map_ConditionDBID_ConditionDB map[uint]*ConditionDB

	// stores ConditionDB ID according to Condition address
	Map_ConditionPtr_ConditionDBID map[*models.Condition]uint

	// stores Condition according to their gorm ID
	Map_ConditionDBID_ConditionPtr map[uint]*models.Condition

	db db.DBInterface

	stage *models.Stage
}

func (backRepoCondition *BackRepoConditionStruct) GetStage() (stage *models.Stage) {
	stage = backRepoCondition.stage
	return
}

func (backRepoCondition *BackRepoConditionStruct) GetDB() db.DBInterface {
	return backRepoCondition.db
}

// GetConditionDBFromConditionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCondition *BackRepoConditionStruct) GetConditionDBFromConditionPtr(condition *models.Condition) (conditionDB *ConditionDB) {
	id := backRepoCondition.Map_ConditionPtr_ConditionDBID[condition]
	conditionDB = backRepoCondition.Map_ConditionDBID_ConditionDB[id]
	return
}

// BackRepoCondition.CommitPhaseOne commits all staged instances of Condition to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCondition *BackRepoConditionStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var conditions []*models.Condition
	for condition := range stage.Conditions {
		conditions = append(conditions, condition)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(conditions, func(i, j int) bool {
		return stage.ConditionMap_Staged_Order[conditions[i]] < stage.ConditionMap_Staged_Order[conditions[j]]
	})

	for _, condition := range conditions {
		backRepoCondition.CommitPhaseOneInstance(condition)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, condition := range backRepoCondition.Map_ConditionDBID_ConditionPtr {
		if _, ok := stage.Conditions[condition]; !ok {
			backRepoCondition.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCondition.CommitDeleteInstance commits deletion of Condition to the BackRepo
func (backRepoCondition *BackRepoConditionStruct) CommitDeleteInstance(id uint) (Error error) {

	condition := backRepoCondition.Map_ConditionDBID_ConditionPtr[id]

	// condition is not staged anymore, remove conditionDB
	conditionDB := backRepoCondition.Map_ConditionDBID_ConditionDB[id]
	db, _ := backRepoCondition.db.Unscoped()
	_, err := db.Delete(conditionDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoCondition.Map_ConditionPtr_ConditionDBID, condition)
	delete(backRepoCondition.Map_ConditionDBID_ConditionPtr, id)
	delete(backRepoCondition.Map_ConditionDBID_ConditionDB, id)

	return
}

// BackRepoCondition.CommitPhaseOneInstance commits condition staged instances of Condition to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCondition *BackRepoConditionStruct) CommitPhaseOneInstance(condition *models.Condition) (Error error) {

	// check if the condition is not commited yet
	if _, ok := backRepoCondition.Map_ConditionPtr_ConditionDBID[condition]; ok {
		return
	}

	// initiate condition
	var conditionDB ConditionDB
	conditionDB.CopyBasicFieldsFromCondition(condition)

	_, err := backRepoCondition.db.Create(&conditionDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoCondition.Map_ConditionPtr_ConditionDBID[condition] = conditionDB.ID
	backRepoCondition.Map_ConditionDBID_ConditionPtr[conditionDB.ID] = condition
	backRepoCondition.Map_ConditionDBID_ConditionDB[conditionDB.ID] = &conditionDB

	return
}

// BackRepoCondition.CommitPhaseTwo commits all staged instances of Condition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCondition *BackRepoConditionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, condition := range backRepoCondition.Map_ConditionDBID_ConditionPtr {
		backRepoCondition.CommitPhaseTwoInstance(backRepo, idx, condition)
	}

	return
}

// BackRepoCondition.CommitPhaseTwoInstance commits {{structname }} of models.Condition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCondition *BackRepoConditionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, condition *models.Condition) (Error error) {

	// fetch matching conditionDB
	if conditionDB, ok := backRepoCondition.Map_ConditionDBID_ConditionDB[idx]; ok {

		conditionDB.CopyBasicFieldsFromCondition(condition)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoCondition.db.Save(conditionDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Condition intance %s", condition.Name))
		return err
	}

	return
}

// BackRepoCondition.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCondition *BackRepoConditionStruct) CheckoutPhaseOne() (Error error) {

	conditionDBArray := make([]ConditionDB, 0)
	_, err := backRepoCondition.db.Find(&conditionDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	conditionInstancesToBeRemovedFromTheStage := make(map[*models.Condition]any)
	for key, value := range backRepoCondition.stage.Conditions {
		conditionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, conditionDB := range conditionDBArray {
		backRepoCondition.CheckoutPhaseOneInstance(&conditionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		condition, ok := backRepoCondition.Map_ConditionDBID_ConditionPtr[conditionDB.ID]
		if ok {
			delete(conditionInstancesToBeRemovedFromTheStage, condition)
		}
	}

	// remove from stage and back repo's 3 maps all conditions that are not in the checkout
	for condition := range conditionInstancesToBeRemovedFromTheStage {
		condition.Unstage(backRepoCondition.GetStage())

		// remove instance from the back repo 3 maps
		conditionID := backRepoCondition.Map_ConditionPtr_ConditionDBID[condition]
		delete(backRepoCondition.Map_ConditionPtr_ConditionDBID, condition)
		delete(backRepoCondition.Map_ConditionDBID_ConditionDB, conditionID)
		delete(backRepoCondition.Map_ConditionDBID_ConditionPtr, conditionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a conditionDB that has been found in the DB, updates the backRepo and stages the
// models version of the conditionDB
func (backRepoCondition *BackRepoConditionStruct) CheckoutPhaseOneInstance(conditionDB *ConditionDB) (Error error) {

	condition, ok := backRepoCondition.Map_ConditionDBID_ConditionPtr[conditionDB.ID]
	if !ok {
		condition = new(models.Condition)

		backRepoCondition.Map_ConditionDBID_ConditionPtr[conditionDB.ID] = condition
		backRepoCondition.Map_ConditionPtr_ConditionDBID[condition] = conditionDB.ID

		// append model store with the new element
		condition.Name = conditionDB.Name_Data.String
		condition.Stage(backRepoCondition.GetStage())
	}
	conditionDB.CopyBasicFieldsToCondition(condition)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	condition.Stage(backRepoCondition.GetStage())

	// preserve pointer to conditionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ConditionDBID_ConditionDB)[conditionDB hold variable pointers
	conditionDB_Data := *conditionDB
	preservedPtrToCondition := &conditionDB_Data
	backRepoCondition.Map_ConditionDBID_ConditionDB[conditionDB.ID] = preservedPtrToCondition

	return
}

// BackRepoCondition.CheckoutPhaseTwo Checkouts all staged instances of Condition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCondition *BackRepoConditionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, conditionDB := range backRepoCondition.Map_ConditionDBID_ConditionDB {
		backRepoCondition.CheckoutPhaseTwoInstance(backRepo, conditionDB)
	}
	return
}

// BackRepoCondition.CheckoutPhaseTwoInstance Checkouts staged instances of Condition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCondition *BackRepoConditionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, conditionDB *ConditionDB) (Error error) {

	condition := backRepoCondition.Map_ConditionDBID_ConditionPtr[conditionDB.ID]

	conditionDB.DecodePointers(backRepo, condition)

	return
}

func (conditionDB *ConditionDB) DecodePointers(backRepo *BackRepoStruct, condition *models.Condition) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCondition allows commit of a single condition (if already staged)
func (backRepo *BackRepoStruct) CommitCondition(condition *models.Condition) {
	backRepo.BackRepoCondition.CommitPhaseOneInstance(condition)
	if id, ok := backRepo.BackRepoCondition.Map_ConditionPtr_ConditionDBID[condition]; ok {
		backRepo.BackRepoCondition.CommitPhaseTwoInstance(backRepo, id, condition)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCondition allows checkout of a single condition (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCondition(condition *models.Condition) {
	// check if the condition is staged
	if _, ok := backRepo.BackRepoCondition.Map_ConditionPtr_ConditionDBID[condition]; ok {

		if id, ok := backRepo.BackRepoCondition.Map_ConditionPtr_ConditionDBID[condition]; ok {
			var conditionDB ConditionDB
			conditionDB.ID = id

			if _, err := backRepo.BackRepoCondition.db.First(&conditionDB, id); err != nil {
				log.Fatalln("CheckoutCondition : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCondition.CheckoutPhaseOneInstance(&conditionDB)
			backRepo.BackRepoCondition.CheckoutPhaseTwoInstance(backRepo, &conditionDB)
		}
	}
}

// CopyBasicFieldsFromCondition
func (conditionDB *ConditionDB) CopyBasicFieldsFromCondition(condition *models.Condition) {
	// insertion point for fields commit

	conditionDB.Name_Data.String = condition.Name
	conditionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCondition_WOP
func (conditionDB *ConditionDB) CopyBasicFieldsFromCondition_WOP(condition *models.Condition_WOP) {
	// insertion point for fields commit

	conditionDB.Name_Data.String = condition.Name
	conditionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromConditionWOP
func (conditionDB *ConditionDB) CopyBasicFieldsFromConditionWOP(condition *ConditionWOP) {
	// insertion point for fields commit

	conditionDB.Name_Data.String = condition.Name
	conditionDB.Name_Data.Valid = true
}

// CopyBasicFieldsToCondition
func (conditionDB *ConditionDB) CopyBasicFieldsToCondition(condition *models.Condition) {
	// insertion point for checkout of basic fields (back repo to stage)
	condition.Name = conditionDB.Name_Data.String
}

// CopyBasicFieldsToCondition_WOP
func (conditionDB *ConditionDB) CopyBasicFieldsToCondition_WOP(condition *models.Condition_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	condition.Name = conditionDB.Name_Data.String
}

// CopyBasicFieldsToConditionWOP
func (conditionDB *ConditionDB) CopyBasicFieldsToConditionWOP(condition *ConditionWOP) {
	condition.ID = int(conditionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	condition.Name = conditionDB.Name_Data.String
}

// Backup generates a json file from a slice of all ConditionDB instances in the backrepo
func (backRepoCondition *BackRepoConditionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ConditionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ConditionDB, 0)
	for _, conditionDB := range backRepoCondition.Map_ConditionDBID_ConditionDB {
		forBackup = append(forBackup, conditionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Condition ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Condition file", err.Error())
	}
}

// Backup generates a json file from a slice of all ConditionDB instances in the backrepo
func (backRepoCondition *BackRepoConditionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ConditionDB, 0)
	for _, conditionDB := range backRepoCondition.Map_ConditionDBID_ConditionDB {
		forBackup = append(forBackup, conditionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Condition")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Condition_Fields, -1)
	for _, conditionDB := range forBackup {

		var conditionWOP ConditionWOP
		conditionDB.CopyBasicFieldsToConditionWOP(&conditionWOP)

		row := sh.AddRow()
		row.WriteStruct(&conditionWOP, -1)
	}
}

// RestoreXL from the "Condition" sheet all ConditionDB instances
func (backRepoCondition *BackRepoConditionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoConditionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Condition"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCondition.rowVisitorCondition)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCondition *BackRepoConditionStruct) rowVisitorCondition(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var conditionWOP ConditionWOP
		row.ReadStruct(&conditionWOP)

		// add the unmarshalled struct to the stage
		conditionDB := new(ConditionDB)
		conditionDB.CopyBasicFieldsFromConditionWOP(&conditionWOP)

		conditionDB_ID_atBackupTime := conditionDB.ID
		conditionDB.ID = 0
		_, err := backRepoCondition.db.Create(conditionDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCondition.Map_ConditionDBID_ConditionDB[conditionDB.ID] = conditionDB
		BackRepoConditionid_atBckpTime_newID[conditionDB_ID_atBackupTime] = conditionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ConditionDB.json" in dirPath that stores an array
// of ConditionDB and stores it in the database
// the map BackRepoConditionid_atBckpTime_newID is updated accordingly
func (backRepoCondition *BackRepoConditionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoConditionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ConditionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Condition file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ConditionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ConditionDBID_ConditionDB
	for _, conditionDB := range forRestore {

		conditionDB_ID_atBackupTime := conditionDB.ID
		conditionDB.ID = 0
		_, err := backRepoCondition.db.Create(conditionDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCondition.Map_ConditionDBID_ConditionDB[conditionDB.ID] = conditionDB
		BackRepoConditionid_atBckpTime_newID[conditionDB_ID_atBackupTime] = conditionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Condition file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Condition>id_atBckpTime_newID
// to compute new index
func (backRepoCondition *BackRepoConditionStruct) RestorePhaseTwo() {

	for _, conditionDB := range backRepoCondition.Map_ConditionDBID_ConditionDB {

		// next line of code is to avert unused variable compilation error
		_ = conditionDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoCondition.db.Model(conditionDB)
		_, err := db.Updates(*conditionDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoCondition.ResetReversePointers commits all staged instances of Condition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCondition *BackRepoConditionStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, condition := range backRepoCondition.Map_ConditionDBID_ConditionPtr {
		backRepoCondition.ResetReversePointersInstance(backRepo, idx, condition)
	}

	return
}

func (backRepoCondition *BackRepoConditionStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, condition *models.Condition) (Error error) {

	// fetch matching conditionDB
	if conditionDB, ok := backRepoCondition.Map_ConditionDBID_ConditionDB[idx]; ok {
		_ = conditionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoConditionid_atBckpTime_newID map[uint]uint
