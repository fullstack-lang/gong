// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/ssg/go/db"
	"github.com/fullstack-lang/gong/lib/ssg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Chapter_sql sql.NullBool
var dummy_Chapter_time time.Duration
var dummy_Chapter_sort sort.Float64Slice

// ChapterAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model chapterAPI
type ChapterAPI struct {
	gorm.Model

	models.Chapter_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ChapterPointersEncoding ChapterPointersEncoding
}

// ChapterPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ChapterPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Pages is a slice of pointers to another Struct (optional or 0..1)
	Pages IntSlice `gorm:"type:TEXT"`
}

// ChapterDB describes a chapter in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model chapterDB
type ChapterDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field chapterDB.Name
	Name_Data sql.NullString

	// Declation for basic field chapterDB.MardownContent
	MardownContent_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ChapterPointersEncoding
}

// ChapterDBs arrays chapterDBs
// swagger:response chapterDBsResponse
type ChapterDBs []ChapterDB

// ChapterDBResponse provides response
// swagger:response chapterDBResponse
type ChapterDBResponse struct {
	ChapterDB
}

// ChapterWOP is a Chapter without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ChapterWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	MardownContent string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Chapter_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"MardownContent",
}

type BackRepoChapterStruct struct {
	// stores ChapterDB according to their gorm ID
	Map_ChapterDBID_ChapterDB map[uint]*ChapterDB

	// stores ChapterDB ID according to Chapter address
	Map_ChapterPtr_ChapterDBID map[*models.Chapter]uint

	// stores Chapter according to their gorm ID
	Map_ChapterDBID_ChapterPtr map[uint]*models.Chapter

	db db.DBInterface

	stage *models.Stage
}

func (backRepoChapter *BackRepoChapterStruct) GetStage() (stage *models.Stage) {
	stage = backRepoChapter.stage
	return
}

func (backRepoChapter *BackRepoChapterStruct) GetDB() db.DBInterface {
	return backRepoChapter.db
}

// GetChapterDBFromChapterPtr is a handy function to access the back repo instance from the stage instance
func (backRepoChapter *BackRepoChapterStruct) GetChapterDBFromChapterPtr(chapter *models.Chapter) (chapterDB *ChapterDB) {
	id := backRepoChapter.Map_ChapterPtr_ChapterDBID[chapter]
	chapterDB = backRepoChapter.Map_ChapterDBID_ChapterDB[id]
	return
}

// BackRepoChapter.CommitPhaseOne commits all staged instances of Chapter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoChapter *BackRepoChapterStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var chapters []*models.Chapter
	for chapter := range stage.Chapters {
		chapters = append(chapters, chapter)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(chapters, func(i, j int) bool {
		return stage.ChapterMap_Staged_Order[chapters[i]] < stage.ChapterMap_Staged_Order[chapters[j]]
	})

	for _, chapter := range chapters {
		backRepoChapter.CommitPhaseOneInstance(chapter)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, chapter := range backRepoChapter.Map_ChapterDBID_ChapterPtr {
		if _, ok := stage.Chapters[chapter]; !ok {
			backRepoChapter.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoChapter.CommitDeleteInstance commits deletion of Chapter to the BackRepo
func (backRepoChapter *BackRepoChapterStruct) CommitDeleteInstance(id uint) (Error error) {

	chapter := backRepoChapter.Map_ChapterDBID_ChapterPtr[id]

	// chapter is not staged anymore, remove chapterDB
	chapterDB := backRepoChapter.Map_ChapterDBID_ChapterDB[id]
	db, _ := backRepoChapter.db.Unscoped()
	_, err := db.Delete(chapterDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoChapter.Map_ChapterPtr_ChapterDBID, chapter)
	delete(backRepoChapter.Map_ChapterDBID_ChapterPtr, id)
	delete(backRepoChapter.Map_ChapterDBID_ChapterDB, id)

	return
}

// BackRepoChapter.CommitPhaseOneInstance commits chapter staged instances of Chapter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoChapter *BackRepoChapterStruct) CommitPhaseOneInstance(chapter *models.Chapter) (Error error) {

	// check if the chapter is not commited yet
	if _, ok := backRepoChapter.Map_ChapterPtr_ChapterDBID[chapter]; ok {
		return
	}

	// initiate chapter
	var chapterDB ChapterDB
	chapterDB.CopyBasicFieldsFromChapter(chapter)

	_, err := backRepoChapter.db.Create(&chapterDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoChapter.Map_ChapterPtr_ChapterDBID[chapter] = chapterDB.ID
	backRepoChapter.Map_ChapterDBID_ChapterPtr[chapterDB.ID] = chapter
	backRepoChapter.Map_ChapterDBID_ChapterDB[chapterDB.ID] = &chapterDB

	return
}

// BackRepoChapter.CommitPhaseTwo commits all staged instances of Chapter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChapter *BackRepoChapterStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, chapter := range backRepoChapter.Map_ChapterDBID_ChapterPtr {
		backRepoChapter.CommitPhaseTwoInstance(backRepo, idx, chapter)
	}

	return
}

// BackRepoChapter.CommitPhaseTwoInstance commits {{structname }} of models.Chapter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChapter *BackRepoChapterStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, chapter *models.Chapter) (Error error) {

	// fetch matching chapterDB
	if chapterDB, ok := backRepoChapter.Map_ChapterDBID_ChapterDB[idx]; ok {

		chapterDB.CopyBasicFieldsFromChapter(chapter)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		chapterDB.ChapterPointersEncoding.Pages = make([]int, 0)
		// 2. encode
		for _, pageAssocEnd := range chapter.Pages {
			pageAssocEnd_DB :=
				backRepo.BackRepoPage.GetPageDBFromPagePtr(pageAssocEnd)
			
			// the stage might be inconsistant, meaning that the pageAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if pageAssocEnd_DB == nil {
				continue
			}
			
			chapterDB.ChapterPointersEncoding.Pages =
				append(chapterDB.ChapterPointersEncoding.Pages, int(pageAssocEnd_DB.ID))
		}

		_, err := backRepoChapter.db.Save(chapterDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Chapter intance %s", chapter.Name))
		return err
	}

	return
}

// BackRepoChapter.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoChapter *BackRepoChapterStruct) CheckoutPhaseOne() (Error error) {

	chapterDBArray := make([]ChapterDB, 0)
	_, err := backRepoChapter.db.Find(&chapterDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	chapterInstancesToBeRemovedFromTheStage := make(map[*models.Chapter]any)
	for key, value := range backRepoChapter.stage.Chapters {
		chapterInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, chapterDB := range chapterDBArray {
		backRepoChapter.CheckoutPhaseOneInstance(&chapterDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		chapter, ok := backRepoChapter.Map_ChapterDBID_ChapterPtr[chapterDB.ID]
		if ok {
			delete(chapterInstancesToBeRemovedFromTheStage, chapter)
		}
	}

	// remove from stage and back repo's 3 maps all chapters that are not in the checkout
	for chapter := range chapterInstancesToBeRemovedFromTheStage {
		chapter.Unstage(backRepoChapter.GetStage())

		// remove instance from the back repo 3 maps
		chapterID := backRepoChapter.Map_ChapterPtr_ChapterDBID[chapter]
		delete(backRepoChapter.Map_ChapterPtr_ChapterDBID, chapter)
		delete(backRepoChapter.Map_ChapterDBID_ChapterDB, chapterID)
		delete(backRepoChapter.Map_ChapterDBID_ChapterPtr, chapterID)
	}

	return
}

// CheckoutPhaseOneInstance takes a chapterDB that has been found in the DB, updates the backRepo and stages the
// models version of the chapterDB
func (backRepoChapter *BackRepoChapterStruct) CheckoutPhaseOneInstance(chapterDB *ChapterDB) (Error error) {

	chapter, ok := backRepoChapter.Map_ChapterDBID_ChapterPtr[chapterDB.ID]
	if !ok {
		chapter = new(models.Chapter)

		backRepoChapter.Map_ChapterDBID_ChapterPtr[chapterDB.ID] = chapter
		backRepoChapter.Map_ChapterPtr_ChapterDBID[chapter] = chapterDB.ID

		// append model store with the new element
		chapter.Name = chapterDB.Name_Data.String
		chapter.Stage(backRepoChapter.GetStage())
	}
	chapterDB.CopyBasicFieldsToChapter(chapter)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	chapter.Stage(backRepoChapter.GetStage())

	// preserve pointer to chapterDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ChapterDBID_ChapterDB)[chapterDB hold variable pointers
	chapterDB_Data := *chapterDB
	preservedPtrToChapter := &chapterDB_Data
	backRepoChapter.Map_ChapterDBID_ChapterDB[chapterDB.ID] = preservedPtrToChapter

	return
}

// BackRepoChapter.CheckoutPhaseTwo Checkouts all staged instances of Chapter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChapter *BackRepoChapterStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, chapterDB := range backRepoChapter.Map_ChapterDBID_ChapterDB {
		backRepoChapter.CheckoutPhaseTwoInstance(backRepo, chapterDB)
	}
	return
}

// BackRepoChapter.CheckoutPhaseTwoInstance Checkouts staged instances of Chapter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChapter *BackRepoChapterStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, chapterDB *ChapterDB) (Error error) {

	chapter := backRepoChapter.Map_ChapterDBID_ChapterPtr[chapterDB.ID]

	chapterDB.DecodePointers(backRepo, chapter)

	return
}

func (chapterDB *ChapterDB) DecodePointers(backRepo *BackRepoStruct, chapter *models.Chapter) {

	// insertion point for checkout of pointer encoding
	// This loop redeem chapter.Pages in the stage from the encode in the back repo
	// It parses all PageDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	chapter.Pages = chapter.Pages[:0]
	for _, _Pageid := range chapterDB.ChapterPointersEncoding.Pages {
		chapter.Pages = append(chapter.Pages, backRepo.BackRepoPage.Map_PageDBID_PagePtr[uint(_Pageid)])
	}

	return
}

// CommitChapter allows commit of a single chapter (if already staged)
func (backRepo *BackRepoStruct) CommitChapter(chapter *models.Chapter) {
	backRepo.BackRepoChapter.CommitPhaseOneInstance(chapter)
	if id, ok := backRepo.BackRepoChapter.Map_ChapterPtr_ChapterDBID[chapter]; ok {
		backRepo.BackRepoChapter.CommitPhaseTwoInstance(backRepo, id, chapter)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitChapter allows checkout of a single chapter (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutChapter(chapter *models.Chapter) {
	// check if the chapter is staged
	if _, ok := backRepo.BackRepoChapter.Map_ChapterPtr_ChapterDBID[chapter]; ok {

		if id, ok := backRepo.BackRepoChapter.Map_ChapterPtr_ChapterDBID[chapter]; ok {
			var chapterDB ChapterDB
			chapterDB.ID = id

			if _, err := backRepo.BackRepoChapter.db.First(&chapterDB, id); err != nil {
				log.Fatalln("CheckoutChapter : Problem with getting object with id:", id)
			}
			backRepo.BackRepoChapter.CheckoutPhaseOneInstance(&chapterDB)
			backRepo.BackRepoChapter.CheckoutPhaseTwoInstance(backRepo, &chapterDB)
		}
	}
}

// CopyBasicFieldsFromChapter
func (chapterDB *ChapterDB) CopyBasicFieldsFromChapter(chapter *models.Chapter) {
	// insertion point for fields commit

	chapterDB.Name_Data.String = chapter.Name
	chapterDB.Name_Data.Valid = true

	chapterDB.MardownContent_Data.String = chapter.MardownContent
	chapterDB.MardownContent_Data.Valid = true
}

// CopyBasicFieldsFromChapter_WOP
func (chapterDB *ChapterDB) CopyBasicFieldsFromChapter_WOP(chapter *models.Chapter_WOP) {
	// insertion point for fields commit

	chapterDB.Name_Data.String = chapter.Name
	chapterDB.Name_Data.Valid = true

	chapterDB.MardownContent_Data.String = chapter.MardownContent
	chapterDB.MardownContent_Data.Valid = true
}

// CopyBasicFieldsFromChapterWOP
func (chapterDB *ChapterDB) CopyBasicFieldsFromChapterWOP(chapter *ChapterWOP) {
	// insertion point for fields commit

	chapterDB.Name_Data.String = chapter.Name
	chapterDB.Name_Data.Valid = true

	chapterDB.MardownContent_Data.String = chapter.MardownContent
	chapterDB.MardownContent_Data.Valid = true
}

// CopyBasicFieldsToChapter
func (chapterDB *ChapterDB) CopyBasicFieldsToChapter(chapter *models.Chapter) {
	// insertion point for checkout of basic fields (back repo to stage)
	chapter.Name = chapterDB.Name_Data.String
	chapter.MardownContent = chapterDB.MardownContent_Data.String
}

// CopyBasicFieldsToChapter_WOP
func (chapterDB *ChapterDB) CopyBasicFieldsToChapter_WOP(chapter *models.Chapter_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	chapter.Name = chapterDB.Name_Data.String
	chapter.MardownContent = chapterDB.MardownContent_Data.String
}

// CopyBasicFieldsToChapterWOP
func (chapterDB *ChapterDB) CopyBasicFieldsToChapterWOP(chapter *ChapterWOP) {
	chapter.ID = int(chapterDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	chapter.Name = chapterDB.Name_Data.String
	chapter.MardownContent = chapterDB.MardownContent_Data.String
}

// Backup generates a json file from a slice of all ChapterDB instances in the backrepo
func (backRepoChapter *BackRepoChapterStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ChapterDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ChapterDB, 0)
	for _, chapterDB := range backRepoChapter.Map_ChapterDBID_ChapterDB {
		forBackup = append(forBackup, chapterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Chapter ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Chapter file", err.Error())
	}
}

// Backup generates a json file from a slice of all ChapterDB instances in the backrepo
func (backRepoChapter *BackRepoChapterStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ChapterDB, 0)
	for _, chapterDB := range backRepoChapter.Map_ChapterDBID_ChapterDB {
		forBackup = append(forBackup, chapterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Chapter")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Chapter_Fields, -1)
	for _, chapterDB := range forBackup {

		var chapterWOP ChapterWOP
		chapterDB.CopyBasicFieldsToChapterWOP(&chapterWOP)

		row := sh.AddRow()
		row.WriteStruct(&chapterWOP, -1)
	}
}

// RestoreXL from the "Chapter" sheet all ChapterDB instances
func (backRepoChapter *BackRepoChapterStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoChapterid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Chapter"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoChapter.rowVisitorChapter)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoChapter *BackRepoChapterStruct) rowVisitorChapter(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var chapterWOP ChapterWOP
		row.ReadStruct(&chapterWOP)

		// add the unmarshalled struct to the stage
		chapterDB := new(ChapterDB)
		chapterDB.CopyBasicFieldsFromChapterWOP(&chapterWOP)

		chapterDB_ID_atBackupTime := chapterDB.ID
		chapterDB.ID = 0
		_, err := backRepoChapter.db.Create(chapterDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoChapter.Map_ChapterDBID_ChapterDB[chapterDB.ID] = chapterDB
		BackRepoChapterid_atBckpTime_newID[chapterDB_ID_atBackupTime] = chapterDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ChapterDB.json" in dirPath that stores an array
// of ChapterDB and stores it in the database
// the map BackRepoChapterid_atBckpTime_newID is updated accordingly
func (backRepoChapter *BackRepoChapterStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoChapterid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ChapterDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Chapter file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ChapterDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ChapterDBID_ChapterDB
	for _, chapterDB := range forRestore {

		chapterDB_ID_atBackupTime := chapterDB.ID
		chapterDB.ID = 0
		_, err := backRepoChapter.db.Create(chapterDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoChapter.Map_ChapterDBID_ChapterDB[chapterDB.ID] = chapterDB
		BackRepoChapterid_atBckpTime_newID[chapterDB_ID_atBackupTime] = chapterDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Chapter file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Chapter>id_atBckpTime_newID
// to compute new index
func (backRepoChapter *BackRepoChapterStruct) RestorePhaseTwo() {

	for _, chapterDB := range backRepoChapter.Map_ChapterDBID_ChapterDB {

		// next line of code is to avert unused variable compilation error
		_ = chapterDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoChapter.db.Model(chapterDB)
		_, err := db.Updates(*chapterDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoChapter.ResetReversePointers commits all staged instances of Chapter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChapter *BackRepoChapterStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, chapter := range backRepoChapter.Map_ChapterDBID_ChapterPtr {
		backRepoChapter.ResetReversePointersInstance(backRepo, idx, chapter)
	}

	return
}

func (backRepoChapter *BackRepoChapterStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, chapter *models.Chapter) (Error error) {

	// fetch matching chapterDB
	if chapterDB, ok := backRepoChapter.Map_ChapterDBID_ChapterDB[idx]; ok {
		_ = chapterDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoChapterid_atBckpTime_newID map[uint]uint
