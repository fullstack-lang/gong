// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/ssg/go/db"
	"github.com/fullstack-lang/gong/lib/ssg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Content_sql sql.NullBool
var dummy_Content_time time.Duration
var dummy_Content_sort sort.Float64Slice

// ContentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model contentAPI
type ContentAPI struct {
	gorm.Model

	models.Content_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ContentPointersEncoding ContentPointersEncoding
}

// ContentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ContentPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Chapters is a slice of pointers to another Struct (optional or 0..1)
	Chapters IntSlice `gorm:"type:TEXT"`
}

// ContentDB describes a content in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model contentDB
type ContentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field contentDB.Name
	Name_Data sql.NullString

	// Declation for basic field contentDB.MardownContent
	MardownContent_Data sql.NullString

	// Declation for basic field contentDB.ContentPath
	ContentPath_Data sql.NullString

	// Declation for basic field contentDB.OutputPath
	OutputPath_Data sql.NullString

	// Declation for basic field contentDB.LayoutPath
	LayoutPath_Data sql.NullString

	// Declation for basic field contentDB.StaticPath
	StaticPath_Data sql.NullString

	// Declation for basic field contentDB.Target
	Target_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ContentPointersEncoding
}

// ContentDBs arrays contentDBs
// swagger:response contentDBsResponse
type ContentDBs []ContentDB

// ContentDBResponse provides response
// swagger:response contentDBResponse
type ContentDBResponse struct {
	ContentDB
}

// ContentWOP is a Content without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ContentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	MardownContent string `xlsx:"2"`

	ContentPath string `xlsx:"3"`

	OutputPath string `xlsx:"4"`

	LayoutPath string `xlsx:"5"`

	StaticPath string `xlsx:"6"`

	Target models.Target `xlsx:"7"`
	// insertion for WOP pointer fields
}

var Content_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"MardownContent",
	"ContentPath",
	"OutputPath",
	"LayoutPath",
	"StaticPath",
	"Target",
}

type BackRepoContentStruct struct {
	// stores ContentDB according to their gorm ID
	Map_ContentDBID_ContentDB map[uint]*ContentDB

	// stores ContentDB ID according to Content address
	Map_ContentPtr_ContentDBID map[*models.Content]uint

	// stores Content according to their gorm ID
	Map_ContentDBID_ContentPtr map[uint]*models.Content

	db db.DBInterface

	stage *models.Stage
}

func (backRepoContent *BackRepoContentStruct) GetStage() (stage *models.Stage) {
	stage = backRepoContent.stage
	return
}

func (backRepoContent *BackRepoContentStruct) GetDB() db.DBInterface {
	return backRepoContent.db
}

// GetContentDBFromContentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoContent *BackRepoContentStruct) GetContentDBFromContentPtr(content *models.Content) (contentDB *ContentDB) {
	id := backRepoContent.Map_ContentPtr_ContentDBID[content]
	contentDB = backRepoContent.Map_ContentDBID_ContentDB[id]
	return
}

// BackRepoContent.CommitPhaseOne commits all staged instances of Content to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoContent *BackRepoContentStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var contents []*models.Content
	for content := range stage.Contents {
		contents = append(contents, content)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(contents, func(i, j int) bool {
		return stage.ContentMap_Staged_Order[contents[i]] < stage.ContentMap_Staged_Order[contents[j]]
	})

	for _, content := range contents {
		backRepoContent.CommitPhaseOneInstance(content)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, content := range backRepoContent.Map_ContentDBID_ContentPtr {
		if _, ok := stage.Contents[content]; !ok {
			backRepoContent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoContent.CommitDeleteInstance commits deletion of Content to the BackRepo
func (backRepoContent *BackRepoContentStruct) CommitDeleteInstance(id uint) (Error error) {

	content := backRepoContent.Map_ContentDBID_ContentPtr[id]

	// content is not staged anymore, remove contentDB
	contentDB := backRepoContent.Map_ContentDBID_ContentDB[id]
	db, _ := backRepoContent.db.Unscoped()
	_, err := db.Delete(contentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoContent.Map_ContentPtr_ContentDBID, content)
	delete(backRepoContent.Map_ContentDBID_ContentPtr, id)
	delete(backRepoContent.Map_ContentDBID_ContentDB, id)

	return
}

// BackRepoContent.CommitPhaseOneInstance commits content staged instances of Content to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoContent *BackRepoContentStruct) CommitPhaseOneInstance(content *models.Content) (Error error) {

	// check if the content is not commited yet
	if _, ok := backRepoContent.Map_ContentPtr_ContentDBID[content]; ok {
		return
	}

	// initiate content
	var contentDB ContentDB
	contentDB.CopyBasicFieldsFromContent(content)

	_, err := backRepoContent.db.Create(&contentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoContent.Map_ContentPtr_ContentDBID[content] = contentDB.ID
	backRepoContent.Map_ContentDBID_ContentPtr[contentDB.ID] = content
	backRepoContent.Map_ContentDBID_ContentDB[contentDB.ID] = &contentDB

	return
}

// BackRepoContent.CommitPhaseTwo commits all staged instances of Content to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoContent *BackRepoContentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, content := range backRepoContent.Map_ContentDBID_ContentPtr {
		backRepoContent.CommitPhaseTwoInstance(backRepo, idx, content)
	}

	return
}

// BackRepoContent.CommitPhaseTwoInstance commits {{structname }} of models.Content to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoContent *BackRepoContentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, content *models.Content) (Error error) {

	// fetch matching contentDB
	if contentDB, ok := backRepoContent.Map_ContentDBID_ContentDB[idx]; ok {

		contentDB.CopyBasicFieldsFromContent(content)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		contentDB.ContentPointersEncoding.Chapters = make([]int, 0)
		// 2. encode
		for _, chapterAssocEnd := range content.Chapters {
			chapterAssocEnd_DB :=
				backRepo.BackRepoChapter.GetChapterDBFromChapterPtr(chapterAssocEnd)
			
			// the stage might be inconsistant, meaning that the chapterAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if chapterAssocEnd_DB == nil {
				continue
			}
			
			contentDB.ContentPointersEncoding.Chapters =
				append(contentDB.ContentPointersEncoding.Chapters, int(chapterAssocEnd_DB.ID))
		}

		_, err := backRepoContent.db.Save(contentDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Content intance %s", content.Name))
		return err
	}

	return
}

// BackRepoContent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoContent *BackRepoContentStruct) CheckoutPhaseOne() (Error error) {

	contentDBArray := make([]ContentDB, 0)
	_, err := backRepoContent.db.Find(&contentDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	contentInstancesToBeRemovedFromTheStage := make(map[*models.Content]any)
	for key, value := range backRepoContent.stage.Contents {
		contentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, contentDB := range contentDBArray {
		backRepoContent.CheckoutPhaseOneInstance(&contentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		content, ok := backRepoContent.Map_ContentDBID_ContentPtr[contentDB.ID]
		if ok {
			delete(contentInstancesToBeRemovedFromTheStage, content)
		}
	}

	// remove from stage and back repo's 3 maps all contents that are not in the checkout
	for content := range contentInstancesToBeRemovedFromTheStage {
		content.Unstage(backRepoContent.GetStage())

		// remove instance from the back repo 3 maps
		contentID := backRepoContent.Map_ContentPtr_ContentDBID[content]
		delete(backRepoContent.Map_ContentPtr_ContentDBID, content)
		delete(backRepoContent.Map_ContentDBID_ContentDB, contentID)
		delete(backRepoContent.Map_ContentDBID_ContentPtr, contentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a contentDB that has been found in the DB, updates the backRepo and stages the
// models version of the contentDB
func (backRepoContent *BackRepoContentStruct) CheckoutPhaseOneInstance(contentDB *ContentDB) (Error error) {

	content, ok := backRepoContent.Map_ContentDBID_ContentPtr[contentDB.ID]
	if !ok {
		content = new(models.Content)

		backRepoContent.Map_ContentDBID_ContentPtr[contentDB.ID] = content
		backRepoContent.Map_ContentPtr_ContentDBID[content] = contentDB.ID

		// append model store with the new element
		content.Name = contentDB.Name_Data.String
		content.Stage(backRepoContent.GetStage())
	}
	contentDB.CopyBasicFieldsToContent(content)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	content.Stage(backRepoContent.GetStage())

	// preserve pointer to contentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ContentDBID_ContentDB)[contentDB hold variable pointers
	contentDB_Data := *contentDB
	preservedPtrToContent := &contentDB_Data
	backRepoContent.Map_ContentDBID_ContentDB[contentDB.ID] = preservedPtrToContent

	return
}

// BackRepoContent.CheckoutPhaseTwo Checkouts all staged instances of Content to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoContent *BackRepoContentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, contentDB := range backRepoContent.Map_ContentDBID_ContentDB {
		backRepoContent.CheckoutPhaseTwoInstance(backRepo, contentDB)
	}
	return
}

// BackRepoContent.CheckoutPhaseTwoInstance Checkouts staged instances of Content to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoContent *BackRepoContentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, contentDB *ContentDB) (Error error) {

	content := backRepoContent.Map_ContentDBID_ContentPtr[contentDB.ID]

	contentDB.DecodePointers(backRepo, content)

	return
}

func (contentDB *ContentDB) DecodePointers(backRepo *BackRepoStruct, content *models.Content) {

	// insertion point for checkout of pointer encoding
	// This loop redeem content.Chapters in the stage from the encode in the back repo
	// It parses all ChapterDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	content.Chapters = content.Chapters[:0]
	for _, _Chapterid := range contentDB.ContentPointersEncoding.Chapters {
		content.Chapters = append(content.Chapters, backRepo.BackRepoChapter.Map_ChapterDBID_ChapterPtr[uint(_Chapterid)])
	}

	return
}

// CommitContent allows commit of a single content (if already staged)
func (backRepo *BackRepoStruct) CommitContent(content *models.Content) {
	backRepo.BackRepoContent.CommitPhaseOneInstance(content)
	if id, ok := backRepo.BackRepoContent.Map_ContentPtr_ContentDBID[content]; ok {
		backRepo.BackRepoContent.CommitPhaseTwoInstance(backRepo, id, content)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitContent allows checkout of a single content (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutContent(content *models.Content) {
	// check if the content is staged
	if _, ok := backRepo.BackRepoContent.Map_ContentPtr_ContentDBID[content]; ok {

		if id, ok := backRepo.BackRepoContent.Map_ContentPtr_ContentDBID[content]; ok {
			var contentDB ContentDB
			contentDB.ID = id

			if _, err := backRepo.BackRepoContent.db.First(&contentDB, id); err != nil {
				log.Fatalln("CheckoutContent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoContent.CheckoutPhaseOneInstance(&contentDB)
			backRepo.BackRepoContent.CheckoutPhaseTwoInstance(backRepo, &contentDB)
		}
	}
}

// CopyBasicFieldsFromContent
func (contentDB *ContentDB) CopyBasicFieldsFromContent(content *models.Content) {
	// insertion point for fields commit

	contentDB.Name_Data.String = content.Name
	contentDB.Name_Data.Valid = true

	contentDB.MardownContent_Data.String = content.MardownContent
	contentDB.MardownContent_Data.Valid = true

	contentDB.ContentPath_Data.String = content.ContentPath
	contentDB.ContentPath_Data.Valid = true

	contentDB.OutputPath_Data.String = content.OutputPath
	contentDB.OutputPath_Data.Valid = true

	contentDB.LayoutPath_Data.String = content.LayoutPath
	contentDB.LayoutPath_Data.Valid = true

	contentDB.StaticPath_Data.String = content.StaticPath
	contentDB.StaticPath_Data.Valid = true

	contentDB.Target_Data.String = content.Target.ToString()
	contentDB.Target_Data.Valid = true
}

// CopyBasicFieldsFromContent_WOP
func (contentDB *ContentDB) CopyBasicFieldsFromContent_WOP(content *models.Content_WOP) {
	// insertion point for fields commit

	contentDB.Name_Data.String = content.Name
	contentDB.Name_Data.Valid = true

	contentDB.MardownContent_Data.String = content.MardownContent
	contentDB.MardownContent_Data.Valid = true

	contentDB.ContentPath_Data.String = content.ContentPath
	contentDB.ContentPath_Data.Valid = true

	contentDB.OutputPath_Data.String = content.OutputPath
	contentDB.OutputPath_Data.Valid = true

	contentDB.LayoutPath_Data.String = content.LayoutPath
	contentDB.LayoutPath_Data.Valid = true

	contentDB.StaticPath_Data.String = content.StaticPath
	contentDB.StaticPath_Data.Valid = true

	contentDB.Target_Data.String = content.Target.ToString()
	contentDB.Target_Data.Valid = true
}

// CopyBasicFieldsFromContentWOP
func (contentDB *ContentDB) CopyBasicFieldsFromContentWOP(content *ContentWOP) {
	// insertion point for fields commit

	contentDB.Name_Data.String = content.Name
	contentDB.Name_Data.Valid = true

	contentDB.MardownContent_Data.String = content.MardownContent
	contentDB.MardownContent_Data.Valid = true

	contentDB.ContentPath_Data.String = content.ContentPath
	contentDB.ContentPath_Data.Valid = true

	contentDB.OutputPath_Data.String = content.OutputPath
	contentDB.OutputPath_Data.Valid = true

	contentDB.LayoutPath_Data.String = content.LayoutPath
	contentDB.LayoutPath_Data.Valid = true

	contentDB.StaticPath_Data.String = content.StaticPath
	contentDB.StaticPath_Data.Valid = true

	contentDB.Target_Data.String = content.Target.ToString()
	contentDB.Target_Data.Valid = true
}

// CopyBasicFieldsToContent
func (contentDB *ContentDB) CopyBasicFieldsToContent(content *models.Content) {
	// insertion point for checkout of basic fields (back repo to stage)
	content.Name = contentDB.Name_Data.String
	content.MardownContent = contentDB.MardownContent_Data.String
	content.ContentPath = contentDB.ContentPath_Data.String
	content.OutputPath = contentDB.OutputPath_Data.String
	content.LayoutPath = contentDB.LayoutPath_Data.String
	content.StaticPath = contentDB.StaticPath_Data.String
	content.Target.FromString(contentDB.Target_Data.String)
}

// CopyBasicFieldsToContent_WOP
func (contentDB *ContentDB) CopyBasicFieldsToContent_WOP(content *models.Content_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	content.Name = contentDB.Name_Data.String
	content.MardownContent = contentDB.MardownContent_Data.String
	content.ContentPath = contentDB.ContentPath_Data.String
	content.OutputPath = contentDB.OutputPath_Data.String
	content.LayoutPath = contentDB.LayoutPath_Data.String
	content.StaticPath = contentDB.StaticPath_Data.String
	content.Target.FromString(contentDB.Target_Data.String)
}

// CopyBasicFieldsToContentWOP
func (contentDB *ContentDB) CopyBasicFieldsToContentWOP(content *ContentWOP) {
	content.ID = int(contentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	content.Name = contentDB.Name_Data.String
	content.MardownContent = contentDB.MardownContent_Data.String
	content.ContentPath = contentDB.ContentPath_Data.String
	content.OutputPath = contentDB.OutputPath_Data.String
	content.LayoutPath = contentDB.LayoutPath_Data.String
	content.StaticPath = contentDB.StaticPath_Data.String
	content.Target.FromString(contentDB.Target_Data.String)
}

// Backup generates a json file from a slice of all ContentDB instances in the backrepo
func (backRepoContent *BackRepoContentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ContentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ContentDB, 0)
	for _, contentDB := range backRepoContent.Map_ContentDBID_ContentDB {
		forBackup = append(forBackup, contentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Content ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Content file", err.Error())
	}
}

// Backup generates a json file from a slice of all ContentDB instances in the backrepo
func (backRepoContent *BackRepoContentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ContentDB, 0)
	for _, contentDB := range backRepoContent.Map_ContentDBID_ContentDB {
		forBackup = append(forBackup, contentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Content")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Content_Fields, -1)
	for _, contentDB := range forBackup {

		var contentWOP ContentWOP
		contentDB.CopyBasicFieldsToContentWOP(&contentWOP)

		row := sh.AddRow()
		row.WriteStruct(&contentWOP, -1)
	}
}

// RestoreXL from the "Content" sheet all ContentDB instances
func (backRepoContent *BackRepoContentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoContentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Content"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoContent.rowVisitorContent)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoContent *BackRepoContentStruct) rowVisitorContent(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var contentWOP ContentWOP
		row.ReadStruct(&contentWOP)

		// add the unmarshalled struct to the stage
		contentDB := new(ContentDB)
		contentDB.CopyBasicFieldsFromContentWOP(&contentWOP)

		contentDB_ID_atBackupTime := contentDB.ID
		contentDB.ID = 0
		_, err := backRepoContent.db.Create(contentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoContent.Map_ContentDBID_ContentDB[contentDB.ID] = contentDB
		BackRepoContentid_atBckpTime_newID[contentDB_ID_atBackupTime] = contentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ContentDB.json" in dirPath that stores an array
// of ContentDB and stores it in the database
// the map BackRepoContentid_atBckpTime_newID is updated accordingly
func (backRepoContent *BackRepoContentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoContentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ContentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Content file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ContentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ContentDBID_ContentDB
	for _, contentDB := range forRestore {

		contentDB_ID_atBackupTime := contentDB.ID
		contentDB.ID = 0
		_, err := backRepoContent.db.Create(contentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoContent.Map_ContentDBID_ContentDB[contentDB.ID] = contentDB
		BackRepoContentid_atBckpTime_newID[contentDB_ID_atBackupTime] = contentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Content file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Content>id_atBckpTime_newID
// to compute new index
func (backRepoContent *BackRepoContentStruct) RestorePhaseTwo() {

	for _, contentDB := range backRepoContent.Map_ContentDBID_ContentDB {

		// next line of code is to avert unused variable compilation error
		_ = contentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoContent.db.Model(contentDB)
		_, err := db.Updates(*contentDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoContent.ResetReversePointers commits all staged instances of Content to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoContent *BackRepoContentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, content := range backRepoContent.Map_ContentDBID_ContentPtr {
		backRepoContent.ResetReversePointersInstance(backRepo, idx, content)
	}

	return
}

func (backRepoContent *BackRepoContentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, content *models.Content) (Error error) {

	// fetch matching contentDB
	if contentDB, ok := backRepoContent.Map_ContentDBID_ContentDB[idx]; ok {
		_ = contentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoContentid_atBckpTime_newID map[uint]uint
