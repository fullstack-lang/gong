// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/ssg/go/db"
	"github.com/fullstack-lang/gong/lib/ssg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Page_sql sql.NullBool
var dummy_Page_time time.Duration
var dummy_Page_sort sort.Float64Slice

// PageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pageAPI
type PageAPI struct {
	gorm.Model

	models.Page_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PagePointersEncoding PagePointersEncoding
}

// PagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// PageDB describes a page in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model pageDB
type PageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field pageDB.Name
	Name_Data sql.NullString

	// Declation for basic field pageDB.MardownContent
	MardownContent_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PagePointersEncoding
}

// PageDBs arrays pageDBs
// swagger:response pageDBsResponse
type PageDBs []PageDB

// PageDBResponse provides response
// swagger:response pageDBResponse
type PageDBResponse struct {
	PageDB
}

// PageWOP is a Page without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	MardownContent string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Page_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"MardownContent",
}

type BackRepoPageStruct struct {
	// stores PageDB according to their gorm ID
	Map_PageDBID_PageDB map[uint]*PageDB

	// stores PageDB ID according to Page address
	Map_PagePtr_PageDBID map[*models.Page]uint

	// stores Page according to their gorm ID
	Map_PageDBID_PagePtr map[uint]*models.Page

	db db.DBInterface

	stage *models.Stage
}

func (backRepoPage *BackRepoPageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoPage.stage
	return
}

func (backRepoPage *BackRepoPageStruct) GetDB() db.DBInterface {
	return backRepoPage.db
}

// GetPageDBFromPagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoPage *BackRepoPageStruct) GetPageDBFromPagePtr(page *models.Page) (pageDB *PageDB) {
	id := backRepoPage.Map_PagePtr_PageDBID[page]
	pageDB = backRepoPage.Map_PageDBID_PageDB[id]
	return
}

// BackRepoPage.CommitPhaseOne commits all staged instances of Page to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPage *BackRepoPageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var pages []*models.Page
	for page := range stage.Pages {
		pages = append(pages, page)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(pages, func(i, j int) bool {
		return stage.PageMap_Staged_Order[pages[i]] < stage.PageMap_Staged_Order[pages[j]]
	})

	for _, page := range pages {
		backRepoPage.CommitPhaseOneInstance(page)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, page := range backRepoPage.Map_PageDBID_PagePtr {
		if _, ok := stage.Pages[page]; !ok {
			backRepoPage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPage.CommitDeleteInstance commits deletion of Page to the BackRepo
func (backRepoPage *BackRepoPageStruct) CommitDeleteInstance(id uint) (Error error) {

	page := backRepoPage.Map_PageDBID_PagePtr[id]

	// page is not staged anymore, remove pageDB
	pageDB := backRepoPage.Map_PageDBID_PageDB[id]
	db, _ := backRepoPage.db.Unscoped()
	_, err := db.Delete(pageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoPage.Map_PagePtr_PageDBID, page)
	delete(backRepoPage.Map_PageDBID_PagePtr, id)
	delete(backRepoPage.Map_PageDBID_PageDB, id)

	return
}

// BackRepoPage.CommitPhaseOneInstance commits page staged instances of Page to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPage *BackRepoPageStruct) CommitPhaseOneInstance(page *models.Page) (Error error) {

	// check if the page is not commited yet
	if _, ok := backRepoPage.Map_PagePtr_PageDBID[page]; ok {
		return
	}

	// initiate page
	var pageDB PageDB
	pageDB.CopyBasicFieldsFromPage(page)

	_, err := backRepoPage.db.Create(&pageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoPage.Map_PagePtr_PageDBID[page] = pageDB.ID
	backRepoPage.Map_PageDBID_PagePtr[pageDB.ID] = page
	backRepoPage.Map_PageDBID_PageDB[pageDB.ID] = &pageDB

	return
}

// BackRepoPage.CommitPhaseTwo commits all staged instances of Page to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage *BackRepoPageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, page := range backRepoPage.Map_PageDBID_PagePtr {
		backRepoPage.CommitPhaseTwoInstance(backRepo, idx, page)
	}

	return
}

// BackRepoPage.CommitPhaseTwoInstance commits {{structname }} of models.Page to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage *BackRepoPageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, page *models.Page) (Error error) {

	// fetch matching pageDB
	if pageDB, ok := backRepoPage.Map_PageDBID_PageDB[idx]; ok {

		pageDB.CopyBasicFieldsFromPage(page)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoPage.db.Save(pageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Page intance %s", page.Name))
		return err
	}

	return
}

// BackRepoPage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPage *BackRepoPageStruct) CheckoutPhaseOne() (Error error) {

	pageDBArray := make([]PageDB, 0)
	_, err := backRepoPage.db.Find(&pageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	pageInstancesToBeRemovedFromTheStage := make(map[*models.Page]any)
	for key, value := range backRepoPage.stage.Pages {
		pageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, pageDB := range pageDBArray {
		backRepoPage.CheckoutPhaseOneInstance(&pageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		page, ok := backRepoPage.Map_PageDBID_PagePtr[pageDB.ID]
		if ok {
			delete(pageInstancesToBeRemovedFromTheStage, page)
		}
	}

	// remove from stage and back repo's 3 maps all pages that are not in the checkout
	for page := range pageInstancesToBeRemovedFromTheStage {
		page.Unstage(backRepoPage.GetStage())

		// remove instance from the back repo 3 maps
		pageID := backRepoPage.Map_PagePtr_PageDBID[page]
		delete(backRepoPage.Map_PagePtr_PageDBID, page)
		delete(backRepoPage.Map_PageDBID_PageDB, pageID)
		delete(backRepoPage.Map_PageDBID_PagePtr, pageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a pageDB that has been found in the DB, updates the backRepo and stages the
// models version of the pageDB
func (backRepoPage *BackRepoPageStruct) CheckoutPhaseOneInstance(pageDB *PageDB) (Error error) {

	page, ok := backRepoPage.Map_PageDBID_PagePtr[pageDB.ID]
	if !ok {
		page = new(models.Page)

		backRepoPage.Map_PageDBID_PagePtr[pageDB.ID] = page
		backRepoPage.Map_PagePtr_PageDBID[page] = pageDB.ID

		// append model store with the new element
		page.Name = pageDB.Name_Data.String
		page.Stage(backRepoPage.GetStage())
	}
	pageDB.CopyBasicFieldsToPage(page)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	page.Stage(backRepoPage.GetStage())

	// preserve pointer to pageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PageDBID_PageDB)[pageDB hold variable pointers
	pageDB_Data := *pageDB
	preservedPtrToPage := &pageDB_Data
	backRepoPage.Map_PageDBID_PageDB[pageDB.ID] = preservedPtrToPage

	return
}

// BackRepoPage.CheckoutPhaseTwo Checkouts all staged instances of Page to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage *BackRepoPageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pageDB := range backRepoPage.Map_PageDBID_PageDB {
		backRepoPage.CheckoutPhaseTwoInstance(backRepo, pageDB)
	}
	return
}

// BackRepoPage.CheckoutPhaseTwoInstance Checkouts staged instances of Page to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage *BackRepoPageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pageDB *PageDB) (Error error) {

	page := backRepoPage.Map_PageDBID_PagePtr[pageDB.ID]

	pageDB.DecodePointers(backRepo, page)

	return
}

func (pageDB *PageDB) DecodePointers(backRepo *BackRepoStruct, page *models.Page) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPage allows commit of a single page (if already staged)
func (backRepo *BackRepoStruct) CommitPage(page *models.Page) {
	backRepo.BackRepoPage.CommitPhaseOneInstance(page)
	if id, ok := backRepo.BackRepoPage.Map_PagePtr_PageDBID[page]; ok {
		backRepo.BackRepoPage.CommitPhaseTwoInstance(backRepo, id, page)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPage allows checkout of a single page (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPage(page *models.Page) {
	// check if the page is staged
	if _, ok := backRepo.BackRepoPage.Map_PagePtr_PageDBID[page]; ok {

		if id, ok := backRepo.BackRepoPage.Map_PagePtr_PageDBID[page]; ok {
			var pageDB PageDB
			pageDB.ID = id

			if _, err := backRepo.BackRepoPage.db.First(&pageDB, id); err != nil {
				log.Fatalln("CheckoutPage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPage.CheckoutPhaseOneInstance(&pageDB)
			backRepo.BackRepoPage.CheckoutPhaseTwoInstance(backRepo, &pageDB)
		}
	}
}

// CopyBasicFieldsFromPage
func (pageDB *PageDB) CopyBasicFieldsFromPage(page *models.Page) {
	// insertion point for fields commit

	pageDB.Name_Data.String = page.Name
	pageDB.Name_Data.Valid = true

	pageDB.MardownContent_Data.String = page.MardownContent
	pageDB.MardownContent_Data.Valid = true
}

// CopyBasicFieldsFromPage_WOP
func (pageDB *PageDB) CopyBasicFieldsFromPage_WOP(page *models.Page_WOP) {
	// insertion point for fields commit

	pageDB.Name_Data.String = page.Name
	pageDB.Name_Data.Valid = true

	pageDB.MardownContent_Data.String = page.MardownContent
	pageDB.MardownContent_Data.Valid = true
}

// CopyBasicFieldsFromPageWOP
func (pageDB *PageDB) CopyBasicFieldsFromPageWOP(page *PageWOP) {
	// insertion point for fields commit

	pageDB.Name_Data.String = page.Name
	pageDB.Name_Data.Valid = true

	pageDB.MardownContent_Data.String = page.MardownContent
	pageDB.MardownContent_Data.Valid = true
}

// CopyBasicFieldsToPage
func (pageDB *PageDB) CopyBasicFieldsToPage(page *models.Page) {
	// insertion point for checkout of basic fields (back repo to stage)
	page.Name = pageDB.Name_Data.String
	page.MardownContent = pageDB.MardownContent_Data.String
}

// CopyBasicFieldsToPage_WOP
func (pageDB *PageDB) CopyBasicFieldsToPage_WOP(page *models.Page_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	page.Name = pageDB.Name_Data.String
	page.MardownContent = pageDB.MardownContent_Data.String
}

// CopyBasicFieldsToPageWOP
func (pageDB *PageDB) CopyBasicFieldsToPageWOP(page *PageWOP) {
	page.ID = int(pageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	page.Name = pageDB.Name_Data.String
	page.MardownContent = pageDB.MardownContent_Data.String
}

// Backup generates a json file from a slice of all PageDB instances in the backrepo
func (backRepoPage *BackRepoPageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PageDB, 0)
	for _, pageDB := range backRepoPage.Map_PageDBID_PageDB {
		forBackup = append(forBackup, pageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Page ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Page file", err.Error())
	}
}

// Backup generates a json file from a slice of all PageDB instances in the backrepo
func (backRepoPage *BackRepoPageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PageDB, 0)
	for _, pageDB := range backRepoPage.Map_PageDBID_PageDB {
		forBackup = append(forBackup, pageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Page")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Page_Fields, -1)
	for _, pageDB := range forBackup {

		var pageWOP PageWOP
		pageDB.CopyBasicFieldsToPageWOP(&pageWOP)

		row := sh.AddRow()
		row.WriteStruct(&pageWOP, -1)
	}
}

// RestoreXL from the "Page" sheet all PageDB instances
func (backRepoPage *BackRepoPageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Page"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPage.rowVisitorPage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPage *BackRepoPageStruct) rowVisitorPage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var pageWOP PageWOP
		row.ReadStruct(&pageWOP)

		// add the unmarshalled struct to the stage
		pageDB := new(PageDB)
		pageDB.CopyBasicFieldsFromPageWOP(&pageWOP)

		pageDB_ID_atBackupTime := pageDB.ID
		pageDB.ID = 0
		_, err := backRepoPage.db.Create(pageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPage.Map_PageDBID_PageDB[pageDB.ID] = pageDB
		BackRepoPageid_atBckpTime_newID[pageDB_ID_atBackupTime] = pageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PageDB.json" in dirPath that stores an array
// of PageDB and stores it in the database
// the map BackRepoPageid_atBckpTime_newID is updated accordingly
func (backRepoPage *BackRepoPageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Page file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PageDBID_PageDB
	for _, pageDB := range forRestore {

		pageDB_ID_atBackupTime := pageDB.ID
		pageDB.ID = 0
		_, err := backRepoPage.db.Create(pageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPage.Map_PageDBID_PageDB[pageDB.ID] = pageDB
		BackRepoPageid_atBckpTime_newID[pageDB_ID_atBackupTime] = pageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Page file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Page>id_atBckpTime_newID
// to compute new index
func (backRepoPage *BackRepoPageStruct) RestorePhaseTwo() {

	for _, pageDB := range backRepoPage.Map_PageDBID_PageDB {

		// next line of code is to avert unused variable compilation error
		_ = pageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoPage.db.Model(pageDB)
		_, err := db.Updates(*pageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoPage.ResetReversePointers commits all staged instances of Page to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage *BackRepoPageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, page := range backRepoPage.Map_PageDBID_PagePtr {
		backRepoPage.ResetReversePointersInstance(backRepo, idx, page)
	}

	return
}

func (backRepoPage *BackRepoPageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, page *models.Page) (Error error) {

	// fetch matching pageDB
	if pageDB, ok := backRepoPage.Map_PageDBID_PageDB[idx]; ok {
		_ = pageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPageid_atBckpTime_newID map[uint]uint
