// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/button/go/db"
	"github.com/fullstack-lang/gong/lib/button/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Layout_sql sql.NullBool
var dummy_Layout_time time.Duration
var dummy_Layout_sort sort.Float64Slice

// LayoutAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model layoutAPI
type LayoutAPI struct {
	gorm.Model

	models.Layout_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LayoutPointersEncoding LayoutPointersEncoding
}

// LayoutPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LayoutPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Groups is a slice of pointers to another Struct (optional or 0..1)
	Groups IntSlice `gorm:"type:TEXT"`
}

// LayoutDB describes a layout in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model layoutDB
type LayoutDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field layoutDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LayoutPointersEncoding
}

// LayoutDBs arrays layoutDBs
// swagger:response layoutDBsResponse
type LayoutDBs []LayoutDB

// LayoutDBResponse provides response
// swagger:response layoutDBResponse
type LayoutDBResponse struct {
	LayoutDB
}

// LayoutWOP is a Layout without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LayoutWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Layout_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoLayoutStruct struct {
	// stores LayoutDB according to their gorm ID
	Map_LayoutDBID_LayoutDB map[uint]*LayoutDB

	// stores LayoutDB ID according to Layout address
	Map_LayoutPtr_LayoutDBID map[*models.Layout]uint

	// stores Layout according to their gorm ID
	Map_LayoutDBID_LayoutPtr map[uint]*models.Layout

	db db.DBInterface

	stage *models.Stage
}

func (backRepoLayout *BackRepoLayoutStruct) GetStage() (stage *models.Stage) {
	stage = backRepoLayout.stage
	return
}

func (backRepoLayout *BackRepoLayoutStruct) GetDB() db.DBInterface {
	return backRepoLayout.db
}

// GetLayoutDBFromLayoutPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLayout *BackRepoLayoutStruct) GetLayoutDBFromLayoutPtr(layout *models.Layout) (layoutDB *LayoutDB) {
	id := backRepoLayout.Map_LayoutPtr_LayoutDBID[layout]
	layoutDB = backRepoLayout.Map_LayoutDBID_LayoutDB[id]
	return
}

// BackRepoLayout.CommitPhaseOne commits all staged instances of Layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLayout *BackRepoLayoutStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var layouts []*models.Layout
	for layout := range stage.Layouts {
		layouts = append(layouts, layout)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(layouts, func(i, j int) bool {
		return stage.LayoutMap_Staged_Order[layouts[i]] < stage.LayoutMap_Staged_Order[layouts[j]]
	})

	for _, layout := range layouts {
		backRepoLayout.CommitPhaseOneInstance(layout)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, layout := range backRepoLayout.Map_LayoutDBID_LayoutPtr {
		if _, ok := stage.Layouts[layout]; !ok {
			backRepoLayout.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLayout.CommitDeleteInstance commits deletion of Layout to the BackRepo
func (backRepoLayout *BackRepoLayoutStruct) CommitDeleteInstance(id uint) (Error error) {

	layout := backRepoLayout.Map_LayoutDBID_LayoutPtr[id]

	// layout is not staged anymore, remove layoutDB
	layoutDB := backRepoLayout.Map_LayoutDBID_LayoutDB[id]
	db, _ := backRepoLayout.db.Unscoped()
	_, err := db.Delete(layoutDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoLayout.Map_LayoutPtr_LayoutDBID, layout)
	delete(backRepoLayout.Map_LayoutDBID_LayoutPtr, id)
	delete(backRepoLayout.Map_LayoutDBID_LayoutDB, id)

	return
}

// BackRepoLayout.CommitPhaseOneInstance commits layout staged instances of Layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLayout *BackRepoLayoutStruct) CommitPhaseOneInstance(layout *models.Layout) (Error error) {

	// check if the layout is not commited yet
	if _, ok := backRepoLayout.Map_LayoutPtr_LayoutDBID[layout]; ok {
		return
	}

	// initiate layout
	var layoutDB LayoutDB
	layoutDB.CopyBasicFieldsFromLayout(layout)

	_, err := backRepoLayout.db.Create(&layoutDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoLayout.Map_LayoutPtr_LayoutDBID[layout] = layoutDB.ID
	backRepoLayout.Map_LayoutDBID_LayoutPtr[layoutDB.ID] = layout
	backRepoLayout.Map_LayoutDBID_LayoutDB[layoutDB.ID] = &layoutDB

	return
}

// BackRepoLayout.CommitPhaseTwo commits all staged instances of Layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayout *BackRepoLayoutStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, layout := range backRepoLayout.Map_LayoutDBID_LayoutPtr {
		backRepoLayout.CommitPhaseTwoInstance(backRepo, idx, layout)
	}

	return
}

// BackRepoLayout.CommitPhaseTwoInstance commits {{structname }} of models.Layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayout *BackRepoLayoutStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, layout *models.Layout) (Error error) {

	// fetch matching layoutDB
	if layoutDB, ok := backRepoLayout.Map_LayoutDBID_LayoutDB[idx]; ok {

		layoutDB.CopyBasicFieldsFromLayout(layout)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		layoutDB.LayoutPointersEncoding.Groups = make([]int, 0)
		// 2. encode
		for _, groupAssocEnd := range layout.Groups {
			groupAssocEnd_DB :=
				backRepo.BackRepoGroup.GetGroupDBFromGroupPtr(groupAssocEnd)
			
			// the stage might be inconsistant, meaning that the groupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupAssocEnd_DB == nil {
				continue
			}
			
			layoutDB.LayoutPointersEncoding.Groups =
				append(layoutDB.LayoutPointersEncoding.Groups, int(groupAssocEnd_DB.ID))
		}

		_, err := backRepoLayout.db.Save(layoutDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Layout intance %s", layout.Name))
		return err
	}

	return
}

// BackRepoLayout.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLayout *BackRepoLayoutStruct) CheckoutPhaseOne() (Error error) {

	layoutDBArray := make([]LayoutDB, 0)
	_, err := backRepoLayout.db.Find(&layoutDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	layoutInstancesToBeRemovedFromTheStage := make(map[*models.Layout]any)
	for key, value := range backRepoLayout.stage.Layouts {
		layoutInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, layoutDB := range layoutDBArray {
		backRepoLayout.CheckoutPhaseOneInstance(&layoutDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		layout, ok := backRepoLayout.Map_LayoutDBID_LayoutPtr[layoutDB.ID]
		if ok {
			delete(layoutInstancesToBeRemovedFromTheStage, layout)
		}
	}

	// remove from stage and back repo's 3 maps all layouts that are not in the checkout
	for layout := range layoutInstancesToBeRemovedFromTheStage {
		layout.Unstage(backRepoLayout.GetStage())

		// remove instance from the back repo 3 maps
		layoutID := backRepoLayout.Map_LayoutPtr_LayoutDBID[layout]
		delete(backRepoLayout.Map_LayoutPtr_LayoutDBID, layout)
		delete(backRepoLayout.Map_LayoutDBID_LayoutDB, layoutID)
		delete(backRepoLayout.Map_LayoutDBID_LayoutPtr, layoutID)
	}

	return
}

// CheckoutPhaseOneInstance takes a layoutDB that has been found in the DB, updates the backRepo and stages the
// models version of the layoutDB
func (backRepoLayout *BackRepoLayoutStruct) CheckoutPhaseOneInstance(layoutDB *LayoutDB) (Error error) {

	layout, ok := backRepoLayout.Map_LayoutDBID_LayoutPtr[layoutDB.ID]
	if !ok {
		layout = new(models.Layout)

		backRepoLayout.Map_LayoutDBID_LayoutPtr[layoutDB.ID] = layout
		backRepoLayout.Map_LayoutPtr_LayoutDBID[layout] = layoutDB.ID

		// append model store with the new element
		layout.Name = layoutDB.Name_Data.String
		layout.Stage(backRepoLayout.GetStage())
	}
	layoutDB.CopyBasicFieldsToLayout(layout)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	layout.Stage(backRepoLayout.GetStage())

	// preserve pointer to layoutDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LayoutDBID_LayoutDB)[layoutDB hold variable pointers
	layoutDB_Data := *layoutDB
	preservedPtrToLayout := &layoutDB_Data
	backRepoLayout.Map_LayoutDBID_LayoutDB[layoutDB.ID] = preservedPtrToLayout

	return
}

// BackRepoLayout.CheckoutPhaseTwo Checkouts all staged instances of Layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayout *BackRepoLayoutStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, layoutDB := range backRepoLayout.Map_LayoutDBID_LayoutDB {
		backRepoLayout.CheckoutPhaseTwoInstance(backRepo, layoutDB)
	}
	return
}

// BackRepoLayout.CheckoutPhaseTwoInstance Checkouts staged instances of Layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayout *BackRepoLayoutStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, layoutDB *LayoutDB) (Error error) {

	layout := backRepoLayout.Map_LayoutDBID_LayoutPtr[layoutDB.ID]

	layoutDB.DecodePointers(backRepo, layout)

	return
}

func (layoutDB *LayoutDB) DecodePointers(backRepo *BackRepoStruct, layout *models.Layout) {

	// insertion point for checkout of pointer encoding
	// This loop redeem layout.Groups in the stage from the encode in the back repo
	// It parses all GroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	layout.Groups = layout.Groups[:0]
	for _, _Groupid := range layoutDB.LayoutPointersEncoding.Groups {
		layout.Groups = append(layout.Groups, backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(_Groupid)])
	}

	return
}

// CommitLayout allows commit of a single layout (if already staged)
func (backRepo *BackRepoStruct) CommitLayout(layout *models.Layout) {
	backRepo.BackRepoLayout.CommitPhaseOneInstance(layout)
	if id, ok := backRepo.BackRepoLayout.Map_LayoutPtr_LayoutDBID[layout]; ok {
		backRepo.BackRepoLayout.CommitPhaseTwoInstance(backRepo, id, layout)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLayout allows checkout of a single layout (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLayout(layout *models.Layout) {
	// check if the layout is staged
	if _, ok := backRepo.BackRepoLayout.Map_LayoutPtr_LayoutDBID[layout]; ok {

		if id, ok := backRepo.BackRepoLayout.Map_LayoutPtr_LayoutDBID[layout]; ok {
			var layoutDB LayoutDB
			layoutDB.ID = id

			if _, err := backRepo.BackRepoLayout.db.First(&layoutDB, id); err != nil {
				log.Fatalln("CheckoutLayout : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLayout.CheckoutPhaseOneInstance(&layoutDB)
			backRepo.BackRepoLayout.CheckoutPhaseTwoInstance(backRepo, &layoutDB)
		}
	}
}

// CopyBasicFieldsFromLayout
func (layoutDB *LayoutDB) CopyBasicFieldsFromLayout(layout *models.Layout) {
	// insertion point for fields commit

	layoutDB.Name_Data.String = layout.Name
	layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLayout_WOP
func (layoutDB *LayoutDB) CopyBasicFieldsFromLayout_WOP(layout *models.Layout_WOP) {
	// insertion point for fields commit

	layoutDB.Name_Data.String = layout.Name
	layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLayoutWOP
func (layoutDB *LayoutDB) CopyBasicFieldsFromLayoutWOP(layout *LayoutWOP) {
	// insertion point for fields commit

	layoutDB.Name_Data.String = layout.Name
	layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsToLayout
func (layoutDB *LayoutDB) CopyBasicFieldsToLayout(layout *models.Layout) {
	// insertion point for checkout of basic fields (back repo to stage)
	layout.Name = layoutDB.Name_Data.String
}

// CopyBasicFieldsToLayout_WOP
func (layoutDB *LayoutDB) CopyBasicFieldsToLayout_WOP(layout *models.Layout_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	layout.Name = layoutDB.Name_Data.String
}

// CopyBasicFieldsToLayoutWOP
func (layoutDB *LayoutDB) CopyBasicFieldsToLayoutWOP(layout *LayoutWOP) {
	layout.ID = int(layoutDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	layout.Name = layoutDB.Name_Data.String
}

// Backup generates a json file from a slice of all LayoutDB instances in the backrepo
func (backRepoLayout *BackRepoLayoutStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LayoutDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LayoutDB, 0)
	for _, layoutDB := range backRepoLayout.Map_LayoutDBID_LayoutDB {
		forBackup = append(forBackup, layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Layout ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Layout file", err.Error())
	}
}

// Backup generates a json file from a slice of all LayoutDB instances in the backrepo
func (backRepoLayout *BackRepoLayoutStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LayoutDB, 0)
	for _, layoutDB := range backRepoLayout.Map_LayoutDBID_LayoutDB {
		forBackup = append(forBackup, layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Layout")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Layout_Fields, -1)
	for _, layoutDB := range forBackup {

		var layoutWOP LayoutWOP
		layoutDB.CopyBasicFieldsToLayoutWOP(&layoutWOP)

		row := sh.AddRow()
		row.WriteStruct(&layoutWOP, -1)
	}
}

// RestoreXL from the "Layout" sheet all LayoutDB instances
func (backRepoLayout *BackRepoLayoutStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLayoutid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Layout"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLayout.rowVisitorLayout)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLayout *BackRepoLayoutStruct) rowVisitorLayout(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var layoutWOP LayoutWOP
		row.ReadStruct(&layoutWOP)

		// add the unmarshalled struct to the stage
		layoutDB := new(LayoutDB)
		layoutDB.CopyBasicFieldsFromLayoutWOP(&layoutWOP)

		layoutDB_ID_atBackupTime := layoutDB.ID
		layoutDB.ID = 0
		_, err := backRepoLayout.db.Create(layoutDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLayout.Map_LayoutDBID_LayoutDB[layoutDB.ID] = layoutDB
		BackRepoLayoutid_atBckpTime_newID[layoutDB_ID_atBackupTime] = layoutDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LayoutDB.json" in dirPath that stores an array
// of LayoutDB and stores it in the database
// the map BackRepoLayoutid_atBckpTime_newID is updated accordingly
func (backRepoLayout *BackRepoLayoutStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLayoutid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LayoutDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Layout file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LayoutDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LayoutDBID_LayoutDB
	for _, layoutDB := range forRestore {

		layoutDB_ID_atBackupTime := layoutDB.ID
		layoutDB.ID = 0
		_, err := backRepoLayout.db.Create(layoutDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLayout.Map_LayoutDBID_LayoutDB[layoutDB.ID] = layoutDB
		BackRepoLayoutid_atBckpTime_newID[layoutDB_ID_atBackupTime] = layoutDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Layout file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Layout>id_atBckpTime_newID
// to compute new index
func (backRepoLayout *BackRepoLayoutStruct) RestorePhaseTwo() {

	for _, layoutDB := range backRepoLayout.Map_LayoutDBID_LayoutDB {

		// next line of code is to avert unused variable compilation error
		_ = layoutDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoLayout.db.Model(layoutDB)
		_, err := db.Updates(*layoutDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoLayout.ResetReversePointers commits all staged instances of Layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayout *BackRepoLayoutStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, layout := range backRepoLayout.Map_LayoutDBID_LayoutPtr {
		backRepoLayout.ResetReversePointersInstance(backRepo, idx, layout)
	}

	return
}

func (backRepoLayout *BackRepoLayoutStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, layout *models.Layout) (Error error) {

	// fetch matching layoutDB
	if layoutDB, ok := backRepoLayout.Map_LayoutDBID_LayoutDB[idx]; ok {
		_ = layoutDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLayoutid_atBckpTime_newID map[uint]uint
