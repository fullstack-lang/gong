// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/markdown/go/db"
	"github.com/fullstack-lang/gong/lib/markdown/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_JpgImage_sql sql.NullBool
var dummy_JpgImage_time time.Duration
var dummy_JpgImage_sort sort.Float64Slice

// JpgImageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model jpgimageAPI
type JpgImageAPI struct {
	gorm.Model

	models.JpgImage_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	JpgImagePointersEncoding JpgImagePointersEncoding
}

// JpgImagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type JpgImagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// JpgImageDB describes a jpgimage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model jpgimageDB
type JpgImageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field jpgimageDB.Name
	Name_Data sql.NullString

	// Declation for basic field jpgimageDB.Base64Content
	Base64Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	JpgImagePointersEncoding
}

// JpgImageDBs arrays jpgimageDBs
// swagger:response jpgimageDBsResponse
type JpgImageDBs []JpgImageDB

// JpgImageDBResponse provides response
// swagger:response jpgimageDBResponse
type JpgImageDBResponse struct {
	JpgImageDB
}

// JpgImageWOP is a JpgImage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type JpgImageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Base64Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var JpgImage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Base64Content",
}

type BackRepoJpgImageStruct struct {
	// stores JpgImageDB according to their gorm ID
	Map_JpgImageDBID_JpgImageDB map[uint]*JpgImageDB

	// stores JpgImageDB ID according to JpgImage address
	Map_JpgImagePtr_JpgImageDBID map[*models.JpgImage]uint

	// stores JpgImage according to their gorm ID
	Map_JpgImageDBID_JpgImagePtr map[uint]*models.JpgImage

	db db.DBInterface

	stage *models.Stage
}

func (backRepoJpgImage *BackRepoJpgImageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoJpgImage.stage
	return
}

func (backRepoJpgImage *BackRepoJpgImageStruct) GetDB() db.DBInterface {
	return backRepoJpgImage.db
}

// GetJpgImageDBFromJpgImagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoJpgImage *BackRepoJpgImageStruct) GetJpgImageDBFromJpgImagePtr(jpgimage *models.JpgImage) (jpgimageDB *JpgImageDB) {
	id := backRepoJpgImage.Map_JpgImagePtr_JpgImageDBID[jpgimage]
	jpgimageDB = backRepoJpgImage.Map_JpgImageDBID_JpgImageDB[id]
	return
}

// BackRepoJpgImage.CommitPhaseOne commits all staged instances of JpgImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoJpgImage *BackRepoJpgImageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var jpgimages []*models.JpgImage
	for jpgimage := range stage.JpgImages {
		jpgimages = append(jpgimages, jpgimage)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(jpgimages, func(i, j int) bool {
		return stage.JpgImageMap_Staged_Order[jpgimages[i]] < stage.JpgImageMap_Staged_Order[jpgimages[j]]
	})

	for _, jpgimage := range jpgimages {
		backRepoJpgImage.CommitPhaseOneInstance(jpgimage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, jpgimage := range backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr {
		if _, ok := stage.JpgImages[jpgimage]; !ok {
			backRepoJpgImage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoJpgImage.CommitDeleteInstance commits deletion of JpgImage to the BackRepo
func (backRepoJpgImage *BackRepoJpgImageStruct) CommitDeleteInstance(id uint) (Error error) {

	jpgimage := backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr[id]

	// jpgimage is not staged anymore, remove jpgimageDB
	jpgimageDB := backRepoJpgImage.Map_JpgImageDBID_JpgImageDB[id]
	db, _ := backRepoJpgImage.db.Unscoped()
	_, err := db.Delete(jpgimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoJpgImage.Map_JpgImagePtr_JpgImageDBID, jpgimage)
	delete(backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr, id)
	delete(backRepoJpgImage.Map_JpgImageDBID_JpgImageDB, id)

	return
}

// BackRepoJpgImage.CommitPhaseOneInstance commits jpgimage staged instances of JpgImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoJpgImage *BackRepoJpgImageStruct) CommitPhaseOneInstance(jpgimage *models.JpgImage) (Error error) {

	// check if the jpgimage is not commited yet
	if _, ok := backRepoJpgImage.Map_JpgImagePtr_JpgImageDBID[jpgimage]; ok {
		return
	}

	// initiate jpgimage
	var jpgimageDB JpgImageDB
	jpgimageDB.CopyBasicFieldsFromJpgImage(jpgimage)

	_, err := backRepoJpgImage.db.Create(&jpgimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoJpgImage.Map_JpgImagePtr_JpgImageDBID[jpgimage] = jpgimageDB.ID
	backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr[jpgimageDB.ID] = jpgimage
	backRepoJpgImage.Map_JpgImageDBID_JpgImageDB[jpgimageDB.ID] = &jpgimageDB

	return
}

// BackRepoJpgImage.CommitPhaseTwo commits all staged instances of JpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoJpgImage *BackRepoJpgImageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, jpgimage := range backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr {
		backRepoJpgImage.CommitPhaseTwoInstance(backRepo, idx, jpgimage)
	}

	return
}

// BackRepoJpgImage.CommitPhaseTwoInstance commits {{structname }} of models.JpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoJpgImage *BackRepoJpgImageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, jpgimage *models.JpgImage) (Error error) {

	// fetch matching jpgimageDB
	if jpgimageDB, ok := backRepoJpgImage.Map_JpgImageDBID_JpgImageDB[idx]; ok {

		jpgimageDB.CopyBasicFieldsFromJpgImage(jpgimage)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoJpgImage.db.Save(jpgimageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown JpgImage intance %s", jpgimage.Name))
		return err
	}

	return
}

// BackRepoJpgImage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoJpgImage *BackRepoJpgImageStruct) CheckoutPhaseOne() (Error error) {

	jpgimageDBArray := make([]JpgImageDB, 0)
	_, err := backRepoJpgImage.db.Find(&jpgimageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	jpgimageInstancesToBeRemovedFromTheStage := make(map[*models.JpgImage]any)
	for key, value := range backRepoJpgImage.stage.JpgImages {
		jpgimageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, jpgimageDB := range jpgimageDBArray {
		backRepoJpgImage.CheckoutPhaseOneInstance(&jpgimageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		jpgimage, ok := backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr[jpgimageDB.ID]
		if ok {
			delete(jpgimageInstancesToBeRemovedFromTheStage, jpgimage)
		}
	}

	// remove from stage and back repo's 3 maps all jpgimages that are not in the checkout
	for jpgimage := range jpgimageInstancesToBeRemovedFromTheStage {
		jpgimage.Unstage(backRepoJpgImage.GetStage())

		// remove instance from the back repo 3 maps
		jpgimageID := backRepoJpgImage.Map_JpgImagePtr_JpgImageDBID[jpgimage]
		delete(backRepoJpgImage.Map_JpgImagePtr_JpgImageDBID, jpgimage)
		delete(backRepoJpgImage.Map_JpgImageDBID_JpgImageDB, jpgimageID)
		delete(backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr, jpgimageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a jpgimageDB that has been found in the DB, updates the backRepo and stages the
// models version of the jpgimageDB
func (backRepoJpgImage *BackRepoJpgImageStruct) CheckoutPhaseOneInstance(jpgimageDB *JpgImageDB) (Error error) {

	jpgimage, ok := backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr[jpgimageDB.ID]
	if !ok {
		jpgimage = new(models.JpgImage)

		backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr[jpgimageDB.ID] = jpgimage
		backRepoJpgImage.Map_JpgImagePtr_JpgImageDBID[jpgimage] = jpgimageDB.ID

		// append model store with the new element
		jpgimage.Name = jpgimageDB.Name_Data.String
		jpgimage.Stage(backRepoJpgImage.GetStage())
	}
	jpgimageDB.CopyBasicFieldsToJpgImage(jpgimage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	jpgimage.Stage(backRepoJpgImage.GetStage())

	// preserve pointer to jpgimageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_JpgImageDBID_JpgImageDB)[jpgimageDB hold variable pointers
	jpgimageDB_Data := *jpgimageDB
	preservedPtrToJpgImage := &jpgimageDB_Data
	backRepoJpgImage.Map_JpgImageDBID_JpgImageDB[jpgimageDB.ID] = preservedPtrToJpgImage

	return
}

// BackRepoJpgImage.CheckoutPhaseTwo Checkouts all staged instances of JpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoJpgImage *BackRepoJpgImageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, jpgimageDB := range backRepoJpgImage.Map_JpgImageDBID_JpgImageDB {
		backRepoJpgImage.CheckoutPhaseTwoInstance(backRepo, jpgimageDB)
	}
	return
}

// BackRepoJpgImage.CheckoutPhaseTwoInstance Checkouts staged instances of JpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoJpgImage *BackRepoJpgImageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, jpgimageDB *JpgImageDB) (Error error) {

	jpgimage := backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr[jpgimageDB.ID]

	jpgimageDB.DecodePointers(backRepo, jpgimage)

	return
}

func (jpgimageDB *JpgImageDB) DecodePointers(backRepo *BackRepoStruct, jpgimage *models.JpgImage) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitJpgImage allows commit of a single jpgimage (if already staged)
func (backRepo *BackRepoStruct) CommitJpgImage(jpgimage *models.JpgImage) {
	backRepo.BackRepoJpgImage.CommitPhaseOneInstance(jpgimage)
	if id, ok := backRepo.BackRepoJpgImage.Map_JpgImagePtr_JpgImageDBID[jpgimage]; ok {
		backRepo.BackRepoJpgImage.CommitPhaseTwoInstance(backRepo, id, jpgimage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitJpgImage allows checkout of a single jpgimage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutJpgImage(jpgimage *models.JpgImage) {
	// check if the jpgimage is staged
	if _, ok := backRepo.BackRepoJpgImage.Map_JpgImagePtr_JpgImageDBID[jpgimage]; ok {

		if id, ok := backRepo.BackRepoJpgImage.Map_JpgImagePtr_JpgImageDBID[jpgimage]; ok {
			var jpgimageDB JpgImageDB
			jpgimageDB.ID = id

			if _, err := backRepo.BackRepoJpgImage.db.First(&jpgimageDB, id); err != nil {
				log.Fatalln("CheckoutJpgImage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoJpgImage.CheckoutPhaseOneInstance(&jpgimageDB)
			backRepo.BackRepoJpgImage.CheckoutPhaseTwoInstance(backRepo, &jpgimageDB)
		}
	}
}

// CopyBasicFieldsFromJpgImage
func (jpgimageDB *JpgImageDB) CopyBasicFieldsFromJpgImage(jpgimage *models.JpgImage) {
	// insertion point for fields commit

	jpgimageDB.Name_Data.String = jpgimage.Name
	jpgimageDB.Name_Data.Valid = true

	jpgimageDB.Base64Content_Data.String = jpgimage.Base64Content
	jpgimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsFromJpgImage_WOP
func (jpgimageDB *JpgImageDB) CopyBasicFieldsFromJpgImage_WOP(jpgimage *models.JpgImage_WOP) {
	// insertion point for fields commit

	jpgimageDB.Name_Data.String = jpgimage.Name
	jpgimageDB.Name_Data.Valid = true

	jpgimageDB.Base64Content_Data.String = jpgimage.Base64Content
	jpgimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsFromJpgImageWOP
func (jpgimageDB *JpgImageDB) CopyBasicFieldsFromJpgImageWOP(jpgimage *JpgImageWOP) {
	// insertion point for fields commit

	jpgimageDB.Name_Data.String = jpgimage.Name
	jpgimageDB.Name_Data.Valid = true

	jpgimageDB.Base64Content_Data.String = jpgimage.Base64Content
	jpgimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsToJpgImage
func (jpgimageDB *JpgImageDB) CopyBasicFieldsToJpgImage(jpgimage *models.JpgImage) {
	// insertion point for checkout of basic fields (back repo to stage)
	jpgimage.Name = jpgimageDB.Name_Data.String
	jpgimage.Base64Content = jpgimageDB.Base64Content_Data.String
}

// CopyBasicFieldsToJpgImage_WOP
func (jpgimageDB *JpgImageDB) CopyBasicFieldsToJpgImage_WOP(jpgimage *models.JpgImage_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	jpgimage.Name = jpgimageDB.Name_Data.String
	jpgimage.Base64Content = jpgimageDB.Base64Content_Data.String
}

// CopyBasicFieldsToJpgImageWOP
func (jpgimageDB *JpgImageDB) CopyBasicFieldsToJpgImageWOP(jpgimage *JpgImageWOP) {
	jpgimage.ID = int(jpgimageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	jpgimage.Name = jpgimageDB.Name_Data.String
	jpgimage.Base64Content = jpgimageDB.Base64Content_Data.String
}

// Backup generates a json file from a slice of all JpgImageDB instances in the backrepo
func (backRepoJpgImage *BackRepoJpgImageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "JpgImageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*JpgImageDB, 0)
	for _, jpgimageDB := range backRepoJpgImage.Map_JpgImageDBID_JpgImageDB {
		forBackup = append(forBackup, jpgimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json JpgImage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json JpgImage file", err.Error())
	}
}

// Backup generates a json file from a slice of all JpgImageDB instances in the backrepo
func (backRepoJpgImage *BackRepoJpgImageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*JpgImageDB, 0)
	for _, jpgimageDB := range backRepoJpgImage.Map_JpgImageDBID_JpgImageDB {
		forBackup = append(forBackup, jpgimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("JpgImage")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&JpgImage_Fields, -1)
	for _, jpgimageDB := range forBackup {

		var jpgimageWOP JpgImageWOP
		jpgimageDB.CopyBasicFieldsToJpgImageWOP(&jpgimageWOP)

		row := sh.AddRow()
		row.WriteStruct(&jpgimageWOP, -1)
	}
}

// RestoreXL from the "JpgImage" sheet all JpgImageDB instances
func (backRepoJpgImage *BackRepoJpgImageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoJpgImageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["JpgImage"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoJpgImage.rowVisitorJpgImage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoJpgImage *BackRepoJpgImageStruct) rowVisitorJpgImage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var jpgimageWOP JpgImageWOP
		row.ReadStruct(&jpgimageWOP)

		// add the unmarshalled struct to the stage
		jpgimageDB := new(JpgImageDB)
		jpgimageDB.CopyBasicFieldsFromJpgImageWOP(&jpgimageWOP)

		jpgimageDB_ID_atBackupTime := jpgimageDB.ID
		jpgimageDB.ID = 0
		_, err := backRepoJpgImage.db.Create(jpgimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoJpgImage.Map_JpgImageDBID_JpgImageDB[jpgimageDB.ID] = jpgimageDB
		BackRepoJpgImageid_atBckpTime_newID[jpgimageDB_ID_atBackupTime] = jpgimageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "JpgImageDB.json" in dirPath that stores an array
// of JpgImageDB and stores it in the database
// the map BackRepoJpgImageid_atBckpTime_newID is updated accordingly
func (backRepoJpgImage *BackRepoJpgImageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoJpgImageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "JpgImageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json JpgImage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*JpgImageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_JpgImageDBID_JpgImageDB
	for _, jpgimageDB := range forRestore {

		jpgimageDB_ID_atBackupTime := jpgimageDB.ID
		jpgimageDB.ID = 0
		_, err := backRepoJpgImage.db.Create(jpgimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoJpgImage.Map_JpgImageDBID_JpgImageDB[jpgimageDB.ID] = jpgimageDB
		BackRepoJpgImageid_atBckpTime_newID[jpgimageDB_ID_atBackupTime] = jpgimageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json JpgImage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<JpgImage>id_atBckpTime_newID
// to compute new index
func (backRepoJpgImage *BackRepoJpgImageStruct) RestorePhaseTwo() {

	for _, jpgimageDB := range backRepoJpgImage.Map_JpgImageDBID_JpgImageDB {

		// next line of code is to avert unused variable compilation error
		_ = jpgimageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoJpgImage.db.Model(jpgimageDB)
		_, err := db.Updates(*jpgimageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoJpgImage.ResetReversePointers commits all staged instances of JpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoJpgImage *BackRepoJpgImageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, jpgimage := range backRepoJpgImage.Map_JpgImageDBID_JpgImagePtr {
		backRepoJpgImage.ResetReversePointersInstance(backRepo, idx, jpgimage)
	}

	return
}

func (backRepoJpgImage *BackRepoJpgImageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, jpgimage *models.JpgImage) (Error error) {

	// fetch matching jpgimageDB
	if jpgimageDB, ok := backRepoJpgImage.Map_JpgImageDBID_JpgImageDB[idx]; ok {
		_ = jpgimageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoJpgImageid_atBckpTime_newID map[uint]uint
