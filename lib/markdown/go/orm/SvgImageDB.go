// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/markdown/go/db"
	"github.com/fullstack-lang/gong/lib/markdown/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SvgImage_sql sql.NullBool
var dummy_SvgImage_time time.Duration
var dummy_SvgImage_sort sort.Float64Slice

// SvgImageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model svgimageAPI
type SvgImageAPI struct {
	gorm.Model

	models.SvgImage_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SvgImagePointersEncoding SvgImagePointersEncoding
}

// SvgImagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SvgImagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SvgImageDB describes a svgimage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model svgimageDB
type SvgImageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field svgimageDB.Name
	Name_Data sql.NullString

	// Declation for basic field svgimageDB.Content
	Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SvgImagePointersEncoding
}

// SvgImageDBs arrays svgimageDBs
// swagger:response svgimageDBsResponse
type SvgImageDBs []SvgImageDB

// SvgImageDBResponse provides response
// swagger:response svgimageDBResponse
type SvgImageDBResponse struct {
	SvgImageDB
}

// SvgImageWOP is a SvgImage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SvgImageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var SvgImage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
}

type BackRepoSvgImageStruct struct {
	// stores SvgImageDB according to their gorm ID
	Map_SvgImageDBID_SvgImageDB map[uint]*SvgImageDB

	// stores SvgImageDB ID according to SvgImage address
	Map_SvgImagePtr_SvgImageDBID map[*models.SvgImage]uint

	// stores SvgImage according to their gorm ID
	Map_SvgImageDBID_SvgImagePtr map[uint]*models.SvgImage

	db db.DBInterface

	stage *models.Stage
}

func (backRepoSvgImage *BackRepoSvgImageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoSvgImage.stage
	return
}

func (backRepoSvgImage *BackRepoSvgImageStruct) GetDB() db.DBInterface {
	return backRepoSvgImage.db
}

// GetSvgImageDBFromSvgImagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoSvgImage *BackRepoSvgImageStruct) GetSvgImageDBFromSvgImagePtr(svgimage *models.SvgImage) (svgimageDB *SvgImageDB) {
	id := backRepoSvgImage.Map_SvgImagePtr_SvgImageDBID[svgimage]
	svgimageDB = backRepoSvgImage.Map_SvgImageDBID_SvgImageDB[id]
	return
}

// BackRepoSvgImage.CommitPhaseOne commits all staged instances of SvgImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSvgImage *BackRepoSvgImageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var svgimages []*models.SvgImage
	for svgimage := range stage.SvgImages {
		svgimages = append(svgimages, svgimage)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(svgimages, func(i, j int) bool {
		return stage.SvgImageMap_Staged_Order[svgimages[i]] < stage.SvgImageMap_Staged_Order[svgimages[j]]
	})

	for _, svgimage := range svgimages {
		backRepoSvgImage.CommitPhaseOneInstance(svgimage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, svgimage := range backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr {
		if _, ok := stage.SvgImages[svgimage]; !ok {
			backRepoSvgImage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSvgImage.CommitDeleteInstance commits deletion of SvgImage to the BackRepo
func (backRepoSvgImage *BackRepoSvgImageStruct) CommitDeleteInstance(id uint) (Error error) {

	svgimage := backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr[id]

	// svgimage is not staged anymore, remove svgimageDB
	svgimageDB := backRepoSvgImage.Map_SvgImageDBID_SvgImageDB[id]
	db, _ := backRepoSvgImage.db.Unscoped()
	_, err := db.Delete(svgimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSvgImage.Map_SvgImagePtr_SvgImageDBID, svgimage)
	delete(backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr, id)
	delete(backRepoSvgImage.Map_SvgImageDBID_SvgImageDB, id)

	return
}

// BackRepoSvgImage.CommitPhaseOneInstance commits svgimage staged instances of SvgImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSvgImage *BackRepoSvgImageStruct) CommitPhaseOneInstance(svgimage *models.SvgImage) (Error error) {

	// check if the svgimage is not commited yet
	if _, ok := backRepoSvgImage.Map_SvgImagePtr_SvgImageDBID[svgimage]; ok {
		return
	}

	// initiate svgimage
	var svgimageDB SvgImageDB
	svgimageDB.CopyBasicFieldsFromSvgImage(svgimage)

	_, err := backRepoSvgImage.db.Create(&svgimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSvgImage.Map_SvgImagePtr_SvgImageDBID[svgimage] = svgimageDB.ID
	backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr[svgimageDB.ID] = svgimage
	backRepoSvgImage.Map_SvgImageDBID_SvgImageDB[svgimageDB.ID] = &svgimageDB

	return
}

// BackRepoSvgImage.CommitPhaseTwo commits all staged instances of SvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgImage *BackRepoSvgImageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, svgimage := range backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr {
		backRepoSvgImage.CommitPhaseTwoInstance(backRepo, idx, svgimage)
	}

	return
}

// BackRepoSvgImage.CommitPhaseTwoInstance commits {{structname }} of models.SvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgImage *BackRepoSvgImageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, svgimage *models.SvgImage) (Error error) {

	// fetch matching svgimageDB
	if svgimageDB, ok := backRepoSvgImage.Map_SvgImageDBID_SvgImageDB[idx]; ok {

		svgimageDB.CopyBasicFieldsFromSvgImage(svgimage)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoSvgImage.db.Save(svgimageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SvgImage intance %s", svgimage.Name))
		return err
	}

	return
}

// BackRepoSvgImage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSvgImage *BackRepoSvgImageStruct) CheckoutPhaseOne() (Error error) {

	svgimageDBArray := make([]SvgImageDB, 0)
	_, err := backRepoSvgImage.db.Find(&svgimageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	svgimageInstancesToBeRemovedFromTheStage := make(map[*models.SvgImage]any)
	for key, value := range backRepoSvgImage.stage.SvgImages {
		svgimageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, svgimageDB := range svgimageDBArray {
		backRepoSvgImage.CheckoutPhaseOneInstance(&svgimageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		svgimage, ok := backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr[svgimageDB.ID]
		if ok {
			delete(svgimageInstancesToBeRemovedFromTheStage, svgimage)
		}
	}

	// remove from stage and back repo's 3 maps all svgimages that are not in the checkout
	for svgimage := range svgimageInstancesToBeRemovedFromTheStage {
		svgimage.Unstage(backRepoSvgImage.GetStage())

		// remove instance from the back repo 3 maps
		svgimageID := backRepoSvgImage.Map_SvgImagePtr_SvgImageDBID[svgimage]
		delete(backRepoSvgImage.Map_SvgImagePtr_SvgImageDBID, svgimage)
		delete(backRepoSvgImage.Map_SvgImageDBID_SvgImageDB, svgimageID)
		delete(backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr, svgimageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a svgimageDB that has been found in the DB, updates the backRepo and stages the
// models version of the svgimageDB
func (backRepoSvgImage *BackRepoSvgImageStruct) CheckoutPhaseOneInstance(svgimageDB *SvgImageDB) (Error error) {

	svgimage, ok := backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr[svgimageDB.ID]
	if !ok {
		svgimage = new(models.SvgImage)

		backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr[svgimageDB.ID] = svgimage
		backRepoSvgImage.Map_SvgImagePtr_SvgImageDBID[svgimage] = svgimageDB.ID

		// append model store with the new element
		svgimage.Name = svgimageDB.Name_Data.String
		svgimage.Stage(backRepoSvgImage.GetStage())
	}
	svgimageDB.CopyBasicFieldsToSvgImage(svgimage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	svgimage.Stage(backRepoSvgImage.GetStage())

	// preserve pointer to svgimageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SvgImageDBID_SvgImageDB)[svgimageDB hold variable pointers
	svgimageDB_Data := *svgimageDB
	preservedPtrToSvgImage := &svgimageDB_Data
	backRepoSvgImage.Map_SvgImageDBID_SvgImageDB[svgimageDB.ID] = preservedPtrToSvgImage

	return
}

// BackRepoSvgImage.CheckoutPhaseTwo Checkouts all staged instances of SvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgImage *BackRepoSvgImageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, svgimageDB := range backRepoSvgImage.Map_SvgImageDBID_SvgImageDB {
		backRepoSvgImage.CheckoutPhaseTwoInstance(backRepo, svgimageDB)
	}
	return
}

// BackRepoSvgImage.CheckoutPhaseTwoInstance Checkouts staged instances of SvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgImage *BackRepoSvgImageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, svgimageDB *SvgImageDB) (Error error) {

	svgimage := backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr[svgimageDB.ID]

	svgimageDB.DecodePointers(backRepo, svgimage)

	return
}

func (svgimageDB *SvgImageDB) DecodePointers(backRepo *BackRepoStruct, svgimage *models.SvgImage) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSvgImage allows commit of a single svgimage (if already staged)
func (backRepo *BackRepoStruct) CommitSvgImage(svgimage *models.SvgImage) {
	backRepo.BackRepoSvgImage.CommitPhaseOneInstance(svgimage)
	if id, ok := backRepo.BackRepoSvgImage.Map_SvgImagePtr_SvgImageDBID[svgimage]; ok {
		backRepo.BackRepoSvgImage.CommitPhaseTwoInstance(backRepo, id, svgimage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSvgImage allows checkout of a single svgimage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSvgImage(svgimage *models.SvgImage) {
	// check if the svgimage is staged
	if _, ok := backRepo.BackRepoSvgImage.Map_SvgImagePtr_SvgImageDBID[svgimage]; ok {

		if id, ok := backRepo.BackRepoSvgImage.Map_SvgImagePtr_SvgImageDBID[svgimage]; ok {
			var svgimageDB SvgImageDB
			svgimageDB.ID = id

			if _, err := backRepo.BackRepoSvgImage.db.First(&svgimageDB, id); err != nil {
				log.Fatalln("CheckoutSvgImage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSvgImage.CheckoutPhaseOneInstance(&svgimageDB)
			backRepo.BackRepoSvgImage.CheckoutPhaseTwoInstance(backRepo, &svgimageDB)
		}
	}
}

// CopyBasicFieldsFromSvgImage
func (svgimageDB *SvgImageDB) CopyBasicFieldsFromSvgImage(svgimage *models.SvgImage) {
	// insertion point for fields commit

	svgimageDB.Name_Data.String = svgimage.Name
	svgimageDB.Name_Data.Valid = true

	svgimageDB.Content_Data.String = svgimage.Content
	svgimageDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromSvgImage_WOP
func (svgimageDB *SvgImageDB) CopyBasicFieldsFromSvgImage_WOP(svgimage *models.SvgImage_WOP) {
	// insertion point for fields commit

	svgimageDB.Name_Data.String = svgimage.Name
	svgimageDB.Name_Data.Valid = true

	svgimageDB.Content_Data.String = svgimage.Content
	svgimageDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromSvgImageWOP
func (svgimageDB *SvgImageDB) CopyBasicFieldsFromSvgImageWOP(svgimage *SvgImageWOP) {
	// insertion point for fields commit

	svgimageDB.Name_Data.String = svgimage.Name
	svgimageDB.Name_Data.Valid = true

	svgimageDB.Content_Data.String = svgimage.Content
	svgimageDB.Content_Data.Valid = true
}

// CopyBasicFieldsToSvgImage
func (svgimageDB *SvgImageDB) CopyBasicFieldsToSvgImage(svgimage *models.SvgImage) {
	// insertion point for checkout of basic fields (back repo to stage)
	svgimage.Name = svgimageDB.Name_Data.String
	svgimage.Content = svgimageDB.Content_Data.String
}

// CopyBasicFieldsToSvgImage_WOP
func (svgimageDB *SvgImageDB) CopyBasicFieldsToSvgImage_WOP(svgimage *models.SvgImage_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	svgimage.Name = svgimageDB.Name_Data.String
	svgimage.Content = svgimageDB.Content_Data.String
}

// CopyBasicFieldsToSvgImageWOP
func (svgimageDB *SvgImageDB) CopyBasicFieldsToSvgImageWOP(svgimage *SvgImageWOP) {
	svgimage.ID = int(svgimageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	svgimage.Name = svgimageDB.Name_Data.String
	svgimage.Content = svgimageDB.Content_Data.String
}

// Backup generates a json file from a slice of all SvgImageDB instances in the backrepo
func (backRepoSvgImage *BackRepoSvgImageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SvgImageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SvgImageDB, 0)
	for _, svgimageDB := range backRepoSvgImage.Map_SvgImageDBID_SvgImageDB {
		forBackup = append(forBackup, svgimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SvgImage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SvgImage file", err.Error())
	}
}

// Backup generates a json file from a slice of all SvgImageDB instances in the backrepo
func (backRepoSvgImage *BackRepoSvgImageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SvgImageDB, 0)
	for _, svgimageDB := range backRepoSvgImage.Map_SvgImageDBID_SvgImageDB {
		forBackup = append(forBackup, svgimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SvgImage")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SvgImage_Fields, -1)
	for _, svgimageDB := range forBackup {

		var svgimageWOP SvgImageWOP
		svgimageDB.CopyBasicFieldsToSvgImageWOP(&svgimageWOP)

		row := sh.AddRow()
		row.WriteStruct(&svgimageWOP, -1)
	}
}

// RestoreXL from the "SvgImage" sheet all SvgImageDB instances
func (backRepoSvgImage *BackRepoSvgImageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSvgImageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SvgImage"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSvgImage.rowVisitorSvgImage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSvgImage *BackRepoSvgImageStruct) rowVisitorSvgImage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var svgimageWOP SvgImageWOP
		row.ReadStruct(&svgimageWOP)

		// add the unmarshalled struct to the stage
		svgimageDB := new(SvgImageDB)
		svgimageDB.CopyBasicFieldsFromSvgImageWOP(&svgimageWOP)

		svgimageDB_ID_atBackupTime := svgimageDB.ID
		svgimageDB.ID = 0
		_, err := backRepoSvgImage.db.Create(svgimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSvgImage.Map_SvgImageDBID_SvgImageDB[svgimageDB.ID] = svgimageDB
		BackRepoSvgImageid_atBckpTime_newID[svgimageDB_ID_atBackupTime] = svgimageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SvgImageDB.json" in dirPath that stores an array
// of SvgImageDB and stores it in the database
// the map BackRepoSvgImageid_atBckpTime_newID is updated accordingly
func (backRepoSvgImage *BackRepoSvgImageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSvgImageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SvgImageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SvgImage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SvgImageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SvgImageDBID_SvgImageDB
	for _, svgimageDB := range forRestore {

		svgimageDB_ID_atBackupTime := svgimageDB.ID
		svgimageDB.ID = 0
		_, err := backRepoSvgImage.db.Create(svgimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSvgImage.Map_SvgImageDBID_SvgImageDB[svgimageDB.ID] = svgimageDB
		BackRepoSvgImageid_atBckpTime_newID[svgimageDB_ID_atBackupTime] = svgimageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SvgImage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SvgImage>id_atBckpTime_newID
// to compute new index
func (backRepoSvgImage *BackRepoSvgImageStruct) RestorePhaseTwo() {

	for _, svgimageDB := range backRepoSvgImage.Map_SvgImageDBID_SvgImageDB {

		// next line of code is to avert unused variable compilation error
		_ = svgimageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoSvgImage.db.Model(svgimageDB)
		_, err := db.Updates(*svgimageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSvgImage.ResetReversePointers commits all staged instances of SvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvgImage *BackRepoSvgImageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, svgimage := range backRepoSvgImage.Map_SvgImageDBID_SvgImagePtr {
		backRepoSvgImage.ResetReversePointersInstance(backRepo, idx, svgimage)
	}

	return
}

func (backRepoSvgImage *BackRepoSvgImageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, svgimage *models.SvgImage) (Error error) {

	// fetch matching svgimageDB
	if svgimageDB, ok := backRepoSvgImage.Map_SvgImageDBID_SvgImageDB[idx]; ok {
		_ = svgimageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSvgImageid_atBckpTime_newID map[uint]uint
