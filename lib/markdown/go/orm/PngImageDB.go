// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/markdown/go/db"
	"github.com/fullstack-lang/gong/lib/markdown/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_PngImage_sql sql.NullBool
var dummy_PngImage_time time.Duration
var dummy_PngImage_sort sort.Float64Slice

// PngImageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pngimageAPI
type PngImageAPI struct {
	gorm.Model

	models.PngImage_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PngImagePointersEncoding PngImagePointersEncoding
}

// PngImagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PngImagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// PngImageDB describes a pngimage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model pngimageDB
type PngImageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field pngimageDB.Name
	Name_Data sql.NullString

	// Declation for basic field pngimageDB.Base64Content
	Base64Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PngImagePointersEncoding
}

// PngImageDBs arrays pngimageDBs
// swagger:response pngimageDBsResponse
type PngImageDBs []PngImageDB

// PngImageDBResponse provides response
// swagger:response pngimageDBResponse
type PngImageDBResponse struct {
	PngImageDB
}

// PngImageWOP is a PngImage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PngImageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Base64Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var PngImage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Base64Content",
}

type BackRepoPngImageStruct struct {
	// stores PngImageDB according to their gorm ID
	Map_PngImageDBID_PngImageDB map[uint]*PngImageDB

	// stores PngImageDB ID according to PngImage address
	Map_PngImagePtr_PngImageDBID map[*models.PngImage]uint

	// stores PngImage according to their gorm ID
	Map_PngImageDBID_PngImagePtr map[uint]*models.PngImage

	db db.DBInterface

	stage *models.Stage
}

func (backRepoPngImage *BackRepoPngImageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoPngImage.stage
	return
}

func (backRepoPngImage *BackRepoPngImageStruct) GetDB() db.DBInterface {
	return backRepoPngImage.db
}

// GetPngImageDBFromPngImagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoPngImage *BackRepoPngImageStruct) GetPngImageDBFromPngImagePtr(pngimage *models.PngImage) (pngimageDB *PngImageDB) {
	id := backRepoPngImage.Map_PngImagePtr_PngImageDBID[pngimage]
	pngimageDB = backRepoPngImage.Map_PngImageDBID_PngImageDB[id]
	return
}

// BackRepoPngImage.CommitPhaseOne commits all staged instances of PngImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPngImage *BackRepoPngImageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var pngimages []*models.PngImage
	for pngimage := range stage.PngImages {
		pngimages = append(pngimages, pngimage)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(pngimages, func(i, j int) bool {
		return stage.PngImageMap_Staged_Order[pngimages[i]] < stage.PngImageMap_Staged_Order[pngimages[j]]
	})

	for _, pngimage := range pngimages {
		backRepoPngImage.CommitPhaseOneInstance(pngimage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pngimage := range backRepoPngImage.Map_PngImageDBID_PngImagePtr {
		if _, ok := stage.PngImages[pngimage]; !ok {
			backRepoPngImage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPngImage.CommitDeleteInstance commits deletion of PngImage to the BackRepo
func (backRepoPngImage *BackRepoPngImageStruct) CommitDeleteInstance(id uint) (Error error) {

	pngimage := backRepoPngImage.Map_PngImageDBID_PngImagePtr[id]

	// pngimage is not staged anymore, remove pngimageDB
	pngimageDB := backRepoPngImage.Map_PngImageDBID_PngImageDB[id]
	db, _ := backRepoPngImage.db.Unscoped()
	_, err := db.Delete(pngimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoPngImage.Map_PngImagePtr_PngImageDBID, pngimage)
	delete(backRepoPngImage.Map_PngImageDBID_PngImagePtr, id)
	delete(backRepoPngImage.Map_PngImageDBID_PngImageDB, id)

	return
}

// BackRepoPngImage.CommitPhaseOneInstance commits pngimage staged instances of PngImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPngImage *BackRepoPngImageStruct) CommitPhaseOneInstance(pngimage *models.PngImage) (Error error) {

	// check if the pngimage is not commited yet
	if _, ok := backRepoPngImage.Map_PngImagePtr_PngImageDBID[pngimage]; ok {
		return
	}

	// initiate pngimage
	var pngimageDB PngImageDB
	pngimageDB.CopyBasicFieldsFromPngImage(pngimage)

	_, err := backRepoPngImage.db.Create(&pngimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoPngImage.Map_PngImagePtr_PngImageDBID[pngimage] = pngimageDB.ID
	backRepoPngImage.Map_PngImageDBID_PngImagePtr[pngimageDB.ID] = pngimage
	backRepoPngImage.Map_PngImageDBID_PngImageDB[pngimageDB.ID] = &pngimageDB

	return
}

// BackRepoPngImage.CommitPhaseTwo commits all staged instances of PngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPngImage *BackRepoPngImageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pngimage := range backRepoPngImage.Map_PngImageDBID_PngImagePtr {
		backRepoPngImage.CommitPhaseTwoInstance(backRepo, idx, pngimage)
	}

	return
}

// BackRepoPngImage.CommitPhaseTwoInstance commits {{structname }} of models.PngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPngImage *BackRepoPngImageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pngimage *models.PngImage) (Error error) {

	// fetch matching pngimageDB
	if pngimageDB, ok := backRepoPngImage.Map_PngImageDBID_PngImageDB[idx]; ok {

		pngimageDB.CopyBasicFieldsFromPngImage(pngimage)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoPngImage.db.Save(pngimageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown PngImage intance %s", pngimage.Name))
		return err
	}

	return
}

// BackRepoPngImage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPngImage *BackRepoPngImageStruct) CheckoutPhaseOne() (Error error) {

	pngimageDBArray := make([]PngImageDB, 0)
	_, err := backRepoPngImage.db.Find(&pngimageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	pngimageInstancesToBeRemovedFromTheStage := make(map[*models.PngImage]any)
	for key, value := range backRepoPngImage.stage.PngImages {
		pngimageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, pngimageDB := range pngimageDBArray {
		backRepoPngImage.CheckoutPhaseOneInstance(&pngimageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		pngimage, ok := backRepoPngImage.Map_PngImageDBID_PngImagePtr[pngimageDB.ID]
		if ok {
			delete(pngimageInstancesToBeRemovedFromTheStage, pngimage)
		}
	}

	// remove from stage and back repo's 3 maps all pngimages that are not in the checkout
	for pngimage := range pngimageInstancesToBeRemovedFromTheStage {
		pngimage.Unstage(backRepoPngImage.GetStage())

		// remove instance from the back repo 3 maps
		pngimageID := backRepoPngImage.Map_PngImagePtr_PngImageDBID[pngimage]
		delete(backRepoPngImage.Map_PngImagePtr_PngImageDBID, pngimage)
		delete(backRepoPngImage.Map_PngImageDBID_PngImageDB, pngimageID)
		delete(backRepoPngImage.Map_PngImageDBID_PngImagePtr, pngimageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a pngimageDB that has been found in the DB, updates the backRepo and stages the
// models version of the pngimageDB
func (backRepoPngImage *BackRepoPngImageStruct) CheckoutPhaseOneInstance(pngimageDB *PngImageDB) (Error error) {

	pngimage, ok := backRepoPngImage.Map_PngImageDBID_PngImagePtr[pngimageDB.ID]
	if !ok {
		pngimage = new(models.PngImage)

		backRepoPngImage.Map_PngImageDBID_PngImagePtr[pngimageDB.ID] = pngimage
		backRepoPngImage.Map_PngImagePtr_PngImageDBID[pngimage] = pngimageDB.ID

		// append model store with the new element
		pngimage.Name = pngimageDB.Name_Data.String
		pngimage.Stage(backRepoPngImage.GetStage())
	}
	pngimageDB.CopyBasicFieldsToPngImage(pngimage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	pngimage.Stage(backRepoPngImage.GetStage())

	// preserve pointer to pngimageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PngImageDBID_PngImageDB)[pngimageDB hold variable pointers
	pngimageDB_Data := *pngimageDB
	preservedPtrToPngImage := &pngimageDB_Data
	backRepoPngImage.Map_PngImageDBID_PngImageDB[pngimageDB.ID] = preservedPtrToPngImage

	return
}

// BackRepoPngImage.CheckoutPhaseTwo Checkouts all staged instances of PngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPngImage *BackRepoPngImageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pngimageDB := range backRepoPngImage.Map_PngImageDBID_PngImageDB {
		backRepoPngImage.CheckoutPhaseTwoInstance(backRepo, pngimageDB)
	}
	return
}

// BackRepoPngImage.CheckoutPhaseTwoInstance Checkouts staged instances of PngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPngImage *BackRepoPngImageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pngimageDB *PngImageDB) (Error error) {

	pngimage := backRepoPngImage.Map_PngImageDBID_PngImagePtr[pngimageDB.ID]

	pngimageDB.DecodePointers(backRepo, pngimage)

	return
}

func (pngimageDB *PngImageDB) DecodePointers(backRepo *BackRepoStruct, pngimage *models.PngImage) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPngImage allows commit of a single pngimage (if already staged)
func (backRepo *BackRepoStruct) CommitPngImage(pngimage *models.PngImage) {
	backRepo.BackRepoPngImage.CommitPhaseOneInstance(pngimage)
	if id, ok := backRepo.BackRepoPngImage.Map_PngImagePtr_PngImageDBID[pngimage]; ok {
		backRepo.BackRepoPngImage.CommitPhaseTwoInstance(backRepo, id, pngimage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPngImage allows checkout of a single pngimage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPngImage(pngimage *models.PngImage) {
	// check if the pngimage is staged
	if _, ok := backRepo.BackRepoPngImage.Map_PngImagePtr_PngImageDBID[pngimage]; ok {

		if id, ok := backRepo.BackRepoPngImage.Map_PngImagePtr_PngImageDBID[pngimage]; ok {
			var pngimageDB PngImageDB
			pngimageDB.ID = id

			if _, err := backRepo.BackRepoPngImage.db.First(&pngimageDB, id); err != nil {
				log.Fatalln("CheckoutPngImage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPngImage.CheckoutPhaseOneInstance(&pngimageDB)
			backRepo.BackRepoPngImage.CheckoutPhaseTwoInstance(backRepo, &pngimageDB)
		}
	}
}

// CopyBasicFieldsFromPngImage
func (pngimageDB *PngImageDB) CopyBasicFieldsFromPngImage(pngimage *models.PngImage) {
	// insertion point for fields commit

	pngimageDB.Name_Data.String = pngimage.Name
	pngimageDB.Name_Data.Valid = true

	pngimageDB.Base64Content_Data.String = pngimage.Base64Content
	pngimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsFromPngImage_WOP
func (pngimageDB *PngImageDB) CopyBasicFieldsFromPngImage_WOP(pngimage *models.PngImage_WOP) {
	// insertion point for fields commit

	pngimageDB.Name_Data.String = pngimage.Name
	pngimageDB.Name_Data.Valid = true

	pngimageDB.Base64Content_Data.String = pngimage.Base64Content
	pngimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsFromPngImageWOP
func (pngimageDB *PngImageDB) CopyBasicFieldsFromPngImageWOP(pngimage *PngImageWOP) {
	// insertion point for fields commit

	pngimageDB.Name_Data.String = pngimage.Name
	pngimageDB.Name_Data.Valid = true

	pngimageDB.Base64Content_Data.String = pngimage.Base64Content
	pngimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsToPngImage
func (pngimageDB *PngImageDB) CopyBasicFieldsToPngImage(pngimage *models.PngImage) {
	// insertion point for checkout of basic fields (back repo to stage)
	pngimage.Name = pngimageDB.Name_Data.String
	pngimage.Base64Content = pngimageDB.Base64Content_Data.String
}

// CopyBasicFieldsToPngImage_WOP
func (pngimageDB *PngImageDB) CopyBasicFieldsToPngImage_WOP(pngimage *models.PngImage_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	pngimage.Name = pngimageDB.Name_Data.String
	pngimage.Base64Content = pngimageDB.Base64Content_Data.String
}

// CopyBasicFieldsToPngImageWOP
func (pngimageDB *PngImageDB) CopyBasicFieldsToPngImageWOP(pngimage *PngImageWOP) {
	pngimage.ID = int(pngimageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	pngimage.Name = pngimageDB.Name_Data.String
	pngimage.Base64Content = pngimageDB.Base64Content_Data.String
}

// Backup generates a json file from a slice of all PngImageDB instances in the backrepo
func (backRepoPngImage *BackRepoPngImageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PngImageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PngImageDB, 0)
	for _, pngimageDB := range backRepoPngImage.Map_PngImageDBID_PngImageDB {
		forBackup = append(forBackup, pngimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json PngImage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json PngImage file", err.Error())
	}
}

// Backup generates a json file from a slice of all PngImageDB instances in the backrepo
func (backRepoPngImage *BackRepoPngImageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PngImageDB, 0)
	for _, pngimageDB := range backRepoPngImage.Map_PngImageDBID_PngImageDB {
		forBackup = append(forBackup, pngimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("PngImage")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&PngImage_Fields, -1)
	for _, pngimageDB := range forBackup {

		var pngimageWOP PngImageWOP
		pngimageDB.CopyBasicFieldsToPngImageWOP(&pngimageWOP)

		row := sh.AddRow()
		row.WriteStruct(&pngimageWOP, -1)
	}
}

// RestoreXL from the "PngImage" sheet all PngImageDB instances
func (backRepoPngImage *BackRepoPngImageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPngImageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["PngImage"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPngImage.rowVisitorPngImage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPngImage *BackRepoPngImageStruct) rowVisitorPngImage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var pngimageWOP PngImageWOP
		row.ReadStruct(&pngimageWOP)

		// add the unmarshalled struct to the stage
		pngimageDB := new(PngImageDB)
		pngimageDB.CopyBasicFieldsFromPngImageWOP(&pngimageWOP)

		pngimageDB_ID_atBackupTime := pngimageDB.ID
		pngimageDB.ID = 0
		_, err := backRepoPngImage.db.Create(pngimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPngImage.Map_PngImageDBID_PngImageDB[pngimageDB.ID] = pngimageDB
		BackRepoPngImageid_atBckpTime_newID[pngimageDB_ID_atBackupTime] = pngimageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PngImageDB.json" in dirPath that stores an array
// of PngImageDB and stores it in the database
// the map BackRepoPngImageid_atBckpTime_newID is updated accordingly
func (backRepoPngImage *BackRepoPngImageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPngImageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PngImageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json PngImage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PngImageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PngImageDBID_PngImageDB
	for _, pngimageDB := range forRestore {

		pngimageDB_ID_atBackupTime := pngimageDB.ID
		pngimageDB.ID = 0
		_, err := backRepoPngImage.db.Create(pngimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPngImage.Map_PngImageDBID_PngImageDB[pngimageDB.ID] = pngimageDB
		BackRepoPngImageid_atBckpTime_newID[pngimageDB_ID_atBackupTime] = pngimageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json PngImage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<PngImage>id_atBckpTime_newID
// to compute new index
func (backRepoPngImage *BackRepoPngImageStruct) RestorePhaseTwo() {

	for _, pngimageDB := range backRepoPngImage.Map_PngImageDBID_PngImageDB {

		// next line of code is to avert unused variable compilation error
		_ = pngimageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoPngImage.db.Model(pngimageDB)
		_, err := db.Updates(*pngimageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoPngImage.ResetReversePointers commits all staged instances of PngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPngImage *BackRepoPngImageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, pngimage := range backRepoPngImage.Map_PngImageDBID_PngImagePtr {
		backRepoPngImage.ResetReversePointersInstance(backRepo, idx, pngimage)
	}

	return
}

func (backRepoPngImage *BackRepoPngImageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, pngimage *models.PngImage) (Error error) {

	// fetch matching pngimageDB
	if pngimageDB, ok := backRepoPngImage.Map_PngImageDBID_PngImageDB[idx]; ok {
		_ = pngimageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPngImageid_atBckpTime_newID map[uint]uint
