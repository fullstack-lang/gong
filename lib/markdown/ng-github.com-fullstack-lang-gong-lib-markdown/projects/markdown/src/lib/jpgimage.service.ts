// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { JpgImageAPI } from './jpgimage-api'
import { JpgImage, CopyJpgImageToJpgImageAPI } from './jpgimage'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class JpgImageService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  JpgImageServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private jpgimagesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.jpgimagesUrl = origin + '/api/github.com/fullstack-lang/gong/lib/markdown/go/v1/jpgimages';
  }

  /** GET jpgimages from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<JpgImageAPI[]> {
    return this.getJpgImages(Name, frontRepo)
  }
  getJpgImages(Name: string, frontRepo: FrontRepo): Observable<JpgImageAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<JpgImageAPI[]>(this.jpgimagesUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<JpgImageAPI[]>('getJpgImages', []))
      );
  }

  /** GET jpgimage by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<JpgImageAPI> {
    return this.getJpgImage(id, Name, frontRepo)
  }
  getJpgImage(id: number, Name: string, frontRepo: FrontRepo): Observable<JpgImageAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.jpgimagesUrl}/${id}`;
    return this.http.get<JpgImageAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched jpgimage id=${id}`)),
      catchError(this.handleError<JpgImageAPI>(`getJpgImage id=${id}`))
    );
  }

  // postFront copy jpgimage to a version with encoded pointers and post to the back
  postFront(jpgimage: JpgImage, Name: string): Observable<JpgImageAPI> {
    let jpgimageAPI = new JpgImageAPI
    CopyJpgImageToJpgImageAPI(jpgimage, jpgimageAPI)
    const id = typeof jpgimageAPI === 'number' ? jpgimageAPI : jpgimageAPI.ID
    const url = `${this.jpgimagesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<JpgImageAPI>(url, jpgimageAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<JpgImageAPI>('postJpgImage'))
    );
  }

  /** POST: add a new jpgimage to the server */
  post(jpgimagedb: JpgImageAPI, Name: string, frontRepo: FrontRepo): Observable<JpgImageAPI> {
    return this.postJpgImage(jpgimagedb, Name, frontRepo)
  }
  postJpgImage(jpgimagedb: JpgImageAPI, Name: string, frontRepo: FrontRepo): Observable<JpgImageAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<JpgImageAPI>(this.jpgimagesUrl, jpgimagedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted jpgimagedb id=${jpgimagedb.ID}`)
      }),
      catchError(this.handleError<JpgImageAPI>('postJpgImage'))
    );
  }

  /** DELETE: delete the jpgimagedb from the server */
  delete(jpgimagedb: JpgImageAPI | number, Name: string): Observable<JpgImageAPI> {
    return this.deleteJpgImage(jpgimagedb, Name)
  }
  deleteJpgImage(jpgimagedb: JpgImageAPI | number, Name: string): Observable<JpgImageAPI> {
    const id = typeof jpgimagedb === 'number' ? jpgimagedb : jpgimagedb.ID;
    const url = `${this.jpgimagesUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<JpgImageAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted jpgimagedb id=${id}`)),
      catchError(this.handleError<JpgImageAPI>('deleteJpgImage'))
    );
  }

  // updateFront copy jpgimage to a version with encoded pointers and update to the back
  updateFront(jpgimage: JpgImage, Name: string): Observable<JpgImageAPI> {
    let jpgimageAPI = new JpgImageAPI
    CopyJpgImageToJpgImageAPI(jpgimage, jpgimageAPI)
    const id = typeof jpgimageAPI === 'number' ? jpgimageAPI : jpgimageAPI.ID
    const url = `${this.jpgimagesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<JpgImageAPI>(url, jpgimageAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<JpgImageAPI>('updateJpgImage'))
    );
  }

  /** PUT: update the jpgimagedb on the server */
  update(jpgimagedb: JpgImageAPI, Name: string, frontRepo: FrontRepo): Observable<JpgImageAPI> {
    return this.updateJpgImage(jpgimagedb, Name, frontRepo)
  }
  updateJpgImage(jpgimagedb: JpgImageAPI, Name: string, frontRepo: FrontRepo): Observable<JpgImageAPI> {
    const id = typeof jpgimagedb === 'number' ? jpgimagedb : jpgimagedb.ID;
    const url = `${this.jpgimagesUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<JpgImageAPI>(url, jpgimagedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated jpgimagedb id=${jpgimagedb.ID}`)
      }),
      catchError(this.handleError<JpgImageAPI>('updateJpgImage'))
    );
  }

  // updateFrontWithMouseEvent
  updateFrontWithMouseEvent(jpgimage: JpgImage, Name: string, gong__mouseEvent: MouseEvent): Observable<JpgImageAPI> {
    let jpgimageAPI = new JpgImageAPI
    CopyJpgImageToJpgImageAPI(jpgimage, jpgimageAPI)
    const id = typeof jpgimageAPI === 'number' ? jpgimageAPI : jpgimageAPI.ID
    const url = `${this.jpgimagesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    params = params.append("shiftKey", gong__mouseEvent.shiftKey)
    params = params.append("altKey", gong__mouseEvent.altKey)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<JpgImageAPI>(url, jpgimageAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<JpgImageAPI>('updateJpgImage'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in JpgImageService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging
      console.error("JpgImageService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
