// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { SvgImageAPI } from './svgimage-api'
import { SvgImage, CopySvgImageToSvgImageAPI } from './svgimage'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class SvgImageService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  SvgImageServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private svgimagesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.svgimagesUrl = origin + '/api/github.com/fullstack-lang/gong/lib/markdown/go/v1/svgimages';
  }

  /** GET svgimages from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<SvgImageAPI[]> {
    return this.getSvgImages(Name, frontRepo)
  }
  getSvgImages(Name: string, frontRepo: FrontRepo): Observable<SvgImageAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<SvgImageAPI[]>(this.svgimagesUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<SvgImageAPI[]>('getSvgImages', []))
      );
  }

  /** GET svgimage by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<SvgImageAPI> {
    return this.getSvgImage(id, Name, frontRepo)
  }
  getSvgImage(id: number, Name: string, frontRepo: FrontRepo): Observable<SvgImageAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.svgimagesUrl}/${id}`;
    return this.http.get<SvgImageAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched svgimage id=${id}`)),
      catchError(this.handleError<SvgImageAPI>(`getSvgImage id=${id}`))
    );
  }

  // postFront copy svgimage to a version with encoded pointers and post to the back
  postFront(svgimage: SvgImage, Name: string): Observable<SvgImageAPI> {
    let svgimageAPI = new SvgImageAPI
    CopySvgImageToSvgImageAPI(svgimage, svgimageAPI)
    const id = typeof svgimageAPI === 'number' ? svgimageAPI : svgimageAPI.ID
    const url = `${this.svgimagesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SvgImageAPI>(url, svgimageAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SvgImageAPI>('postSvgImage'))
    );
  }

  /** POST: add a new svgimage to the server */
  post(svgimagedb: SvgImageAPI, Name: string, frontRepo: FrontRepo): Observable<SvgImageAPI> {
    return this.postSvgImage(svgimagedb, Name, frontRepo)
  }
  postSvgImage(svgimagedb: SvgImageAPI, Name: string, frontRepo: FrontRepo): Observable<SvgImageAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SvgImageAPI>(this.svgimagesUrl, svgimagedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted svgimagedb id=${svgimagedb.ID}`)
      }),
      catchError(this.handleError<SvgImageAPI>('postSvgImage'))
    );
  }

  /** DELETE: delete the svgimagedb from the server */
  delete(svgimagedb: SvgImageAPI | number, Name: string): Observable<SvgImageAPI> {
    return this.deleteSvgImage(svgimagedb, Name)
  }
  deleteSvgImage(svgimagedb: SvgImageAPI | number, Name: string): Observable<SvgImageAPI> {
    const id = typeof svgimagedb === 'number' ? svgimagedb : svgimagedb.ID;
    const url = `${this.svgimagesUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<SvgImageAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted svgimagedb id=${id}`)),
      catchError(this.handleError<SvgImageAPI>('deleteSvgImage'))
    );
  }

  // updateFront copy svgimage to a version with encoded pointers and update to the back
  updateFront(svgimage: SvgImage, Name: string): Observable<SvgImageAPI> {
    let svgimageAPI = new SvgImageAPI
    CopySvgImageToSvgImageAPI(svgimage, svgimageAPI)
    const id = typeof svgimageAPI === 'number' ? svgimageAPI : svgimageAPI.ID
    const url = `${this.svgimagesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<SvgImageAPI>(url, svgimageAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SvgImageAPI>('updateSvgImage'))
    );
  }

  /** PUT: update the svgimagedb on the server */
  update(svgimagedb: SvgImageAPI, Name: string, frontRepo: FrontRepo): Observable<SvgImageAPI> {
    return this.updateSvgImage(svgimagedb, Name, frontRepo)
  }
  updateSvgImage(svgimagedb: SvgImageAPI, Name: string, frontRepo: FrontRepo): Observable<SvgImageAPI> {
    const id = typeof svgimagedb === 'number' ? svgimagedb : svgimagedb.ID;
    const url = `${this.svgimagesUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<SvgImageAPI>(url, svgimagedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated svgimagedb id=${svgimagedb.ID}`)
      }),
      catchError(this.handleError<SvgImageAPI>('updateSvgImage'))
    );
  }

  // updateFrontWithMouseEvent
  updateFrontWithMouseEvent(svgimage: SvgImage, Name: string, gong__mouseEvent: MouseEvent): Observable<SvgImageAPI> {
    let svgimageAPI = new SvgImageAPI
    CopySvgImageToSvgImageAPI(svgimage, svgimageAPI)
    const id = typeof svgimageAPI === 'number' ? svgimageAPI : svgimageAPI.ID
    const url = `${this.svgimagesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    params = params.append("shiftKey", gong__mouseEvent.shiftKey)
    params = params.append("altKey", gong__mouseEvent.altKey)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<SvgImageAPI>(url, svgimageAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SvgImageAPI>('updateSvgImage'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in SvgImageService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging
      console.error("SvgImageService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
