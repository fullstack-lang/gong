// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/cursor/go/db"
	"github.com/fullstack-lang/gong/lib/cursor/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Cursor_sql sql.NullBool
var dummy_Cursor_time time.Duration
var dummy_Cursor_sort sort.Float64Slice

// CursorAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model cursorAPI
type CursorAPI struct {
	gorm.Model

	models.Cursor_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CursorPointersEncoding CursorPointersEncoding
}

// CursorPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CursorPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CursorDB describes a cursor in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model cursorDB
type CursorDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field cursorDB.Name
	Name_Data sql.NullString

	// Declation for basic field cursorDB.StartX
	StartX_Data sql.NullFloat64

	// Declation for basic field cursorDB.EndX
	EndX_Data sql.NullFloat64

	// Declation for basic field cursorDB.Y1
	Y1_Data sql.NullFloat64

	// Declation for basic field cursorDB.Y2
	Y2_Data sql.NullFloat64

	// Declation for basic field cursorDB.DurationSeconds
	DurationSeconds_Data sql.NullFloat64

	// Declation for basic field cursorDB.Color
	Color_Data sql.NullString

	// Declation for basic field cursorDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field cursorDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field cursorDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field cursorDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field cursorDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field cursorDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field cursorDB.Transform
	Transform_Data sql.NullString

	// Declation for basic field cursorDB.IsPlaying
	// provide the sql storage for the boolan
	IsPlaying_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CursorPointersEncoding
}

// CursorDBs arrays cursorDBs
// swagger:response cursorDBsResponse
type CursorDBs []CursorDB

// CursorDBResponse provides response
// swagger:response cursorDBResponse
type CursorDBResponse struct {
	CursorDB
}

// CursorWOP is a Cursor without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CursorWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StartX float64 `xlsx:"2"`

	EndX float64 `xlsx:"3"`

	Y1 float64 `xlsx:"4"`

	Y2 float64 `xlsx:"5"`

	DurationSeconds float64 `xlsx:"6"`

	Color string `xlsx:"7"`

	FillOpacity float64 `xlsx:"8"`

	Stroke string `xlsx:"9"`

	StrokeOpacity float64 `xlsx:"10"`

	StrokeWidth float64 `xlsx:"11"`

	StrokeDashArray string `xlsx:"12"`

	StrokeDashArrayWhenSelected string `xlsx:"13"`

	Transform string `xlsx:"14"`

	IsPlaying bool `xlsx:"15"`
	// insertion for WOP pointer fields
}

var Cursor_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StartX",
	"EndX",
	"Y1",
	"Y2",
	"DurationSeconds",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
	"IsPlaying",
}

type BackRepoCursorStruct struct {
	// stores CursorDB according to their gorm ID
	Map_CursorDBID_CursorDB map[uint]*CursorDB

	// stores CursorDB ID according to Cursor address
	Map_CursorPtr_CursorDBID map[*models.Cursor]uint

	// stores Cursor according to their gorm ID
	Map_CursorDBID_CursorPtr map[uint]*models.Cursor

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoCursor *BackRepoCursorStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCursor.stage
	return
}

func (backRepoCursor *BackRepoCursorStruct) GetDB() db.DBInterface {
	return backRepoCursor.db
}

// GetCursorDBFromCursorPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCursor *BackRepoCursorStruct) GetCursorDBFromCursorPtr(cursor *models.Cursor) (cursorDB *CursorDB) {
	id := backRepoCursor.Map_CursorPtr_CursorDBID[cursor]
	cursorDB = backRepoCursor.Map_CursorDBID_CursorDB[id]
	return
}

// BackRepoCursor.CommitPhaseOne commits all staged instances of Cursor to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCursor *BackRepoCursorStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var cursors []*models.Cursor
	for cursor := range stage.Cursors {
		cursors = append(cursors, cursor)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(cursors, func(i, j int) bool {
		return stage.CursorMap_Staged_Order[cursors[i]] < stage.CursorMap_Staged_Order[cursors[j]]
	})

	for _, cursor := range cursors {
		backRepoCursor.CommitPhaseOneInstance(cursor)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, cursor := range backRepoCursor.Map_CursorDBID_CursorPtr {
		if _, ok := stage.Cursors[cursor]; !ok {
			backRepoCursor.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCursor.CommitDeleteInstance commits deletion of Cursor to the BackRepo
func (backRepoCursor *BackRepoCursorStruct) CommitDeleteInstance(id uint) (Error error) {

	cursor := backRepoCursor.Map_CursorDBID_CursorPtr[id]

	// cursor is not staged anymore, remove cursorDB
	cursorDB := backRepoCursor.Map_CursorDBID_CursorDB[id]
	db, _ := backRepoCursor.db.Unscoped()
	_, err := db.Delete(cursorDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoCursor.Map_CursorPtr_CursorDBID, cursor)
	delete(backRepoCursor.Map_CursorDBID_CursorPtr, id)
	delete(backRepoCursor.Map_CursorDBID_CursorDB, id)

	return
}

// BackRepoCursor.CommitPhaseOneInstance commits cursor staged instances of Cursor to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCursor *BackRepoCursorStruct) CommitPhaseOneInstance(cursor *models.Cursor) (Error error) {

	// check if the cursor is not commited yet
	if _, ok := backRepoCursor.Map_CursorPtr_CursorDBID[cursor]; ok {
		return
	}

	// initiate cursor
	var cursorDB CursorDB
	cursorDB.CopyBasicFieldsFromCursor(cursor)

	_, err := backRepoCursor.db.Create(&cursorDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoCursor.Map_CursorPtr_CursorDBID[cursor] = cursorDB.ID
	backRepoCursor.Map_CursorDBID_CursorPtr[cursorDB.ID] = cursor
	backRepoCursor.Map_CursorDBID_CursorDB[cursorDB.ID] = &cursorDB

	return
}

// BackRepoCursor.CommitPhaseTwo commits all staged instances of Cursor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCursor *BackRepoCursorStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, cursor := range backRepoCursor.Map_CursorDBID_CursorPtr {
		backRepoCursor.CommitPhaseTwoInstance(backRepo, idx, cursor)
	}

	return
}

// BackRepoCursor.CommitPhaseTwoInstance commits {{structname }} of models.Cursor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCursor *BackRepoCursorStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, cursor *models.Cursor) (Error error) {

	// fetch matching cursorDB
	if cursorDB, ok := backRepoCursor.Map_CursorDBID_CursorDB[idx]; ok {

		cursorDB.CopyBasicFieldsFromCursor(cursor)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoCursor.db.Save(cursorDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Cursor intance %s", cursor.Name))
		return err
	}

	return
}

// BackRepoCursor.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCursor *BackRepoCursorStruct) CheckoutPhaseOne() (Error error) {

	cursorDBArray := make([]CursorDB, 0)
	_, err := backRepoCursor.db.Find(&cursorDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	cursorInstancesToBeRemovedFromTheStage := make(map[*models.Cursor]any)
	for key, value := range backRepoCursor.stage.Cursors {
		cursorInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, cursorDB := range cursorDBArray {
		backRepoCursor.CheckoutPhaseOneInstance(&cursorDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		cursor, ok := backRepoCursor.Map_CursorDBID_CursorPtr[cursorDB.ID]
		if ok {
			delete(cursorInstancesToBeRemovedFromTheStage, cursor)
		}
	}

	// remove from stage and back repo's 3 maps all cursors that are not in the checkout
	for cursor := range cursorInstancesToBeRemovedFromTheStage {
		cursor.Unstage(backRepoCursor.GetStage())

		// remove instance from the back repo 3 maps
		cursorID := backRepoCursor.Map_CursorPtr_CursorDBID[cursor]
		delete(backRepoCursor.Map_CursorPtr_CursorDBID, cursor)
		delete(backRepoCursor.Map_CursorDBID_CursorDB, cursorID)
		delete(backRepoCursor.Map_CursorDBID_CursorPtr, cursorID)
	}

	return
}

// CheckoutPhaseOneInstance takes a cursorDB that has been found in the DB, updates the backRepo and stages the
// models version of the cursorDB
func (backRepoCursor *BackRepoCursorStruct) CheckoutPhaseOneInstance(cursorDB *CursorDB) (Error error) {

	cursor, ok := backRepoCursor.Map_CursorDBID_CursorPtr[cursorDB.ID]
	if !ok {
		cursor = new(models.Cursor)

		backRepoCursor.Map_CursorDBID_CursorPtr[cursorDB.ID] = cursor
		backRepoCursor.Map_CursorPtr_CursorDBID[cursor] = cursorDB.ID

		// append model store with the new element
		cursor.Name = cursorDB.Name_Data.String
		cursor.Stage(backRepoCursor.GetStage())
	}
	cursorDB.CopyBasicFieldsToCursor(cursor)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	cursor.Stage(backRepoCursor.GetStage())

	// preserve pointer to cursorDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CursorDBID_CursorDB)[cursorDB hold variable pointers
	cursorDB_Data := *cursorDB
	preservedPtrToCursor := &cursorDB_Data
	backRepoCursor.Map_CursorDBID_CursorDB[cursorDB.ID] = preservedPtrToCursor

	return
}

// BackRepoCursor.CheckoutPhaseTwo Checkouts all staged instances of Cursor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCursor *BackRepoCursorStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, cursorDB := range backRepoCursor.Map_CursorDBID_CursorDB {
		backRepoCursor.CheckoutPhaseTwoInstance(backRepo, cursorDB)
	}
	return
}

// BackRepoCursor.CheckoutPhaseTwoInstance Checkouts staged instances of Cursor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCursor *BackRepoCursorStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, cursorDB *CursorDB) (Error error) {

	cursor := backRepoCursor.Map_CursorDBID_CursorPtr[cursorDB.ID]

	cursorDB.DecodePointers(backRepo, cursor)

	return
}

func (cursorDB *CursorDB) DecodePointers(backRepo *BackRepoStruct, cursor *models.Cursor) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCursor allows commit of a single cursor (if already staged)
func (backRepo *BackRepoStruct) CommitCursor(cursor *models.Cursor) {
	backRepo.BackRepoCursor.CommitPhaseOneInstance(cursor)
	if id, ok := backRepo.BackRepoCursor.Map_CursorPtr_CursorDBID[cursor]; ok {
		backRepo.BackRepoCursor.CommitPhaseTwoInstance(backRepo, id, cursor)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCursor allows checkout of a single cursor (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCursor(cursor *models.Cursor) {
	// check if the cursor is staged
	if _, ok := backRepo.BackRepoCursor.Map_CursorPtr_CursorDBID[cursor]; ok {

		if id, ok := backRepo.BackRepoCursor.Map_CursorPtr_CursorDBID[cursor]; ok {
			var cursorDB CursorDB
			cursorDB.ID = id

			if _, err := backRepo.BackRepoCursor.db.First(&cursorDB, id); err != nil {
				log.Fatalln("CheckoutCursor : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCursor.CheckoutPhaseOneInstance(&cursorDB)
			backRepo.BackRepoCursor.CheckoutPhaseTwoInstance(backRepo, &cursorDB)
		}
	}
}

// CopyBasicFieldsFromCursor
func (cursorDB *CursorDB) CopyBasicFieldsFromCursor(cursor *models.Cursor) {
	// insertion point for fields commit

	cursorDB.Name_Data.String = cursor.Name
	cursorDB.Name_Data.Valid = true

	cursorDB.StartX_Data.Float64 = cursor.StartX
	cursorDB.StartX_Data.Valid = true

	cursorDB.EndX_Data.Float64 = cursor.EndX
	cursorDB.EndX_Data.Valid = true

	cursorDB.Y1_Data.Float64 = cursor.Y1
	cursorDB.Y1_Data.Valid = true

	cursorDB.Y2_Data.Float64 = cursor.Y2
	cursorDB.Y2_Data.Valid = true

	cursorDB.DurationSeconds_Data.Float64 = cursor.DurationSeconds
	cursorDB.DurationSeconds_Data.Valid = true

	cursorDB.Color_Data.String = cursor.Color
	cursorDB.Color_Data.Valid = true

	cursorDB.FillOpacity_Data.Float64 = cursor.FillOpacity
	cursorDB.FillOpacity_Data.Valid = true

	cursorDB.Stroke_Data.String = cursor.Stroke
	cursorDB.Stroke_Data.Valid = true

	cursorDB.StrokeOpacity_Data.Float64 = cursor.StrokeOpacity
	cursorDB.StrokeOpacity_Data.Valid = true

	cursorDB.StrokeWidth_Data.Float64 = cursor.StrokeWidth
	cursorDB.StrokeWidth_Data.Valid = true

	cursorDB.StrokeDashArray_Data.String = cursor.StrokeDashArray
	cursorDB.StrokeDashArray_Data.Valid = true

	cursorDB.StrokeDashArrayWhenSelected_Data.String = cursor.StrokeDashArrayWhenSelected
	cursorDB.StrokeDashArrayWhenSelected_Data.Valid = true

	cursorDB.Transform_Data.String = cursor.Transform
	cursorDB.Transform_Data.Valid = true

	cursorDB.IsPlaying_Data.Bool = cursor.IsPlaying
	cursorDB.IsPlaying_Data.Valid = true
}

// CopyBasicFieldsFromCursor_WOP
func (cursorDB *CursorDB) CopyBasicFieldsFromCursor_WOP(cursor *models.Cursor_WOP) {
	// insertion point for fields commit

	cursorDB.Name_Data.String = cursor.Name
	cursorDB.Name_Data.Valid = true

	cursorDB.StartX_Data.Float64 = cursor.StartX
	cursorDB.StartX_Data.Valid = true

	cursorDB.EndX_Data.Float64 = cursor.EndX
	cursorDB.EndX_Data.Valid = true

	cursorDB.Y1_Data.Float64 = cursor.Y1
	cursorDB.Y1_Data.Valid = true

	cursorDB.Y2_Data.Float64 = cursor.Y2
	cursorDB.Y2_Data.Valid = true

	cursorDB.DurationSeconds_Data.Float64 = cursor.DurationSeconds
	cursorDB.DurationSeconds_Data.Valid = true

	cursorDB.Color_Data.String = cursor.Color
	cursorDB.Color_Data.Valid = true

	cursorDB.FillOpacity_Data.Float64 = cursor.FillOpacity
	cursorDB.FillOpacity_Data.Valid = true

	cursorDB.Stroke_Data.String = cursor.Stroke
	cursorDB.Stroke_Data.Valid = true

	cursorDB.StrokeOpacity_Data.Float64 = cursor.StrokeOpacity
	cursorDB.StrokeOpacity_Data.Valid = true

	cursorDB.StrokeWidth_Data.Float64 = cursor.StrokeWidth
	cursorDB.StrokeWidth_Data.Valid = true

	cursorDB.StrokeDashArray_Data.String = cursor.StrokeDashArray
	cursorDB.StrokeDashArray_Data.Valid = true

	cursorDB.StrokeDashArrayWhenSelected_Data.String = cursor.StrokeDashArrayWhenSelected
	cursorDB.StrokeDashArrayWhenSelected_Data.Valid = true

	cursorDB.Transform_Data.String = cursor.Transform
	cursorDB.Transform_Data.Valid = true

	cursorDB.IsPlaying_Data.Bool = cursor.IsPlaying
	cursorDB.IsPlaying_Data.Valid = true
}

// CopyBasicFieldsFromCursorWOP
func (cursorDB *CursorDB) CopyBasicFieldsFromCursorWOP(cursor *CursorWOP) {
	// insertion point for fields commit

	cursorDB.Name_Data.String = cursor.Name
	cursorDB.Name_Data.Valid = true

	cursorDB.StartX_Data.Float64 = cursor.StartX
	cursorDB.StartX_Data.Valid = true

	cursorDB.EndX_Data.Float64 = cursor.EndX
	cursorDB.EndX_Data.Valid = true

	cursorDB.Y1_Data.Float64 = cursor.Y1
	cursorDB.Y1_Data.Valid = true

	cursorDB.Y2_Data.Float64 = cursor.Y2
	cursorDB.Y2_Data.Valid = true

	cursorDB.DurationSeconds_Data.Float64 = cursor.DurationSeconds
	cursorDB.DurationSeconds_Data.Valid = true

	cursorDB.Color_Data.String = cursor.Color
	cursorDB.Color_Data.Valid = true

	cursorDB.FillOpacity_Data.Float64 = cursor.FillOpacity
	cursorDB.FillOpacity_Data.Valid = true

	cursorDB.Stroke_Data.String = cursor.Stroke
	cursorDB.Stroke_Data.Valid = true

	cursorDB.StrokeOpacity_Data.Float64 = cursor.StrokeOpacity
	cursorDB.StrokeOpacity_Data.Valid = true

	cursorDB.StrokeWidth_Data.Float64 = cursor.StrokeWidth
	cursorDB.StrokeWidth_Data.Valid = true

	cursorDB.StrokeDashArray_Data.String = cursor.StrokeDashArray
	cursorDB.StrokeDashArray_Data.Valid = true

	cursorDB.StrokeDashArrayWhenSelected_Data.String = cursor.StrokeDashArrayWhenSelected
	cursorDB.StrokeDashArrayWhenSelected_Data.Valid = true

	cursorDB.Transform_Data.String = cursor.Transform
	cursorDB.Transform_Data.Valid = true

	cursorDB.IsPlaying_Data.Bool = cursor.IsPlaying
	cursorDB.IsPlaying_Data.Valid = true
}

// CopyBasicFieldsToCursor
func (cursorDB *CursorDB) CopyBasicFieldsToCursor(cursor *models.Cursor) {
	// insertion point for checkout of basic fields (back repo to stage)
	cursor.Name = cursorDB.Name_Data.String
	cursor.StartX = cursorDB.StartX_Data.Float64
	cursor.EndX = cursorDB.EndX_Data.Float64
	cursor.Y1 = cursorDB.Y1_Data.Float64
	cursor.Y2 = cursorDB.Y2_Data.Float64
	cursor.DurationSeconds = cursorDB.DurationSeconds_Data.Float64
	cursor.Color = cursorDB.Color_Data.String
	cursor.FillOpacity = cursorDB.FillOpacity_Data.Float64
	cursor.Stroke = cursorDB.Stroke_Data.String
	cursor.StrokeOpacity = cursorDB.StrokeOpacity_Data.Float64
	cursor.StrokeWidth = cursorDB.StrokeWidth_Data.Float64
	cursor.StrokeDashArray = cursorDB.StrokeDashArray_Data.String
	cursor.StrokeDashArrayWhenSelected = cursorDB.StrokeDashArrayWhenSelected_Data.String
	cursor.Transform = cursorDB.Transform_Data.String
	cursor.IsPlaying = cursorDB.IsPlaying_Data.Bool
}

// CopyBasicFieldsToCursor_WOP
func (cursorDB *CursorDB) CopyBasicFieldsToCursor_WOP(cursor *models.Cursor_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	cursor.Name = cursorDB.Name_Data.String
	cursor.StartX = cursorDB.StartX_Data.Float64
	cursor.EndX = cursorDB.EndX_Data.Float64
	cursor.Y1 = cursorDB.Y1_Data.Float64
	cursor.Y2 = cursorDB.Y2_Data.Float64
	cursor.DurationSeconds = cursorDB.DurationSeconds_Data.Float64
	cursor.Color = cursorDB.Color_Data.String
	cursor.FillOpacity = cursorDB.FillOpacity_Data.Float64
	cursor.Stroke = cursorDB.Stroke_Data.String
	cursor.StrokeOpacity = cursorDB.StrokeOpacity_Data.Float64
	cursor.StrokeWidth = cursorDB.StrokeWidth_Data.Float64
	cursor.StrokeDashArray = cursorDB.StrokeDashArray_Data.String
	cursor.StrokeDashArrayWhenSelected = cursorDB.StrokeDashArrayWhenSelected_Data.String
	cursor.Transform = cursorDB.Transform_Data.String
	cursor.IsPlaying = cursorDB.IsPlaying_Data.Bool
}

// CopyBasicFieldsToCursorWOP
func (cursorDB *CursorDB) CopyBasicFieldsToCursorWOP(cursor *CursorWOP) {
	cursor.ID = int(cursorDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	cursor.Name = cursorDB.Name_Data.String
	cursor.StartX = cursorDB.StartX_Data.Float64
	cursor.EndX = cursorDB.EndX_Data.Float64
	cursor.Y1 = cursorDB.Y1_Data.Float64
	cursor.Y2 = cursorDB.Y2_Data.Float64
	cursor.DurationSeconds = cursorDB.DurationSeconds_Data.Float64
	cursor.Color = cursorDB.Color_Data.String
	cursor.FillOpacity = cursorDB.FillOpacity_Data.Float64
	cursor.Stroke = cursorDB.Stroke_Data.String
	cursor.StrokeOpacity = cursorDB.StrokeOpacity_Data.Float64
	cursor.StrokeWidth = cursorDB.StrokeWidth_Data.Float64
	cursor.StrokeDashArray = cursorDB.StrokeDashArray_Data.String
	cursor.StrokeDashArrayWhenSelected = cursorDB.StrokeDashArrayWhenSelected_Data.String
	cursor.Transform = cursorDB.Transform_Data.String
	cursor.IsPlaying = cursorDB.IsPlaying_Data.Bool
}

// Backup generates a json file from a slice of all CursorDB instances in the backrepo
func (backRepoCursor *BackRepoCursorStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CursorDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CursorDB, 0)
	for _, cursorDB := range backRepoCursor.Map_CursorDBID_CursorDB {
		forBackup = append(forBackup, cursorDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Cursor ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Cursor file", err.Error())
	}
}

// Backup generates a json file from a slice of all CursorDB instances in the backrepo
func (backRepoCursor *BackRepoCursorStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CursorDB, 0)
	for _, cursorDB := range backRepoCursor.Map_CursorDBID_CursorDB {
		forBackup = append(forBackup, cursorDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Cursor")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Cursor_Fields, -1)
	for _, cursorDB := range forBackup {

		var cursorWOP CursorWOP
		cursorDB.CopyBasicFieldsToCursorWOP(&cursorWOP)

		row := sh.AddRow()
		row.WriteStruct(&cursorWOP, -1)
	}
}

// RestoreXL from the "Cursor" sheet all CursorDB instances
func (backRepoCursor *BackRepoCursorStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCursorid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Cursor"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCursor.rowVisitorCursor)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCursor *BackRepoCursorStruct) rowVisitorCursor(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var cursorWOP CursorWOP
		row.ReadStruct(&cursorWOP)

		// add the unmarshalled struct to the stage
		cursorDB := new(CursorDB)
		cursorDB.CopyBasicFieldsFromCursorWOP(&cursorWOP)

		cursorDB_ID_atBackupTime := cursorDB.ID
		cursorDB.ID = 0
		_, err := backRepoCursor.db.Create(cursorDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCursor.Map_CursorDBID_CursorDB[cursorDB.ID] = cursorDB
		BackRepoCursorid_atBckpTime_newID[cursorDB_ID_atBackupTime] = cursorDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CursorDB.json" in dirPath that stores an array
// of CursorDB and stores it in the database
// the map BackRepoCursorid_atBckpTime_newID is updated accordingly
func (backRepoCursor *BackRepoCursorStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCursorid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CursorDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Cursor file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CursorDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CursorDBID_CursorDB
	for _, cursorDB := range forRestore {

		cursorDB_ID_atBackupTime := cursorDB.ID
		cursorDB.ID = 0
		_, err := backRepoCursor.db.Create(cursorDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCursor.Map_CursorDBID_CursorDB[cursorDB.ID] = cursorDB
		BackRepoCursorid_atBckpTime_newID[cursorDB_ID_atBackupTime] = cursorDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Cursor file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Cursor>id_atBckpTime_newID
// to compute new index
func (backRepoCursor *BackRepoCursorStruct) RestorePhaseTwo() {

	for _, cursorDB := range backRepoCursor.Map_CursorDBID_CursorDB {

		// next line of code is to avert unused variable compilation error
		_ = cursorDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoCursor.db.Model(cursorDB)
		_, err := db.Updates(*cursorDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoCursor.ResetReversePointers commits all staged instances of Cursor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCursor *BackRepoCursorStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, cursor := range backRepoCursor.Map_CursorDBID_CursorPtr {
		backRepoCursor.ResetReversePointersInstance(backRepo, idx, cursor)
	}

	return
}

func (backRepoCursor *BackRepoCursorStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, cursor *models.Cursor) (Error error) {

	// fetch matching cursorDB
	if cursorDB, ok := backRepoCursor.Map_CursorDBID_CursorDB[idx]; ok {
		_ = cursorDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCursorid_atBckpTime_newID map[uint]uint
