// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { XLSheetAPI } from './xlsheet-api'
import { XLSheet, CopyXLSheetToXLSheetAPI } from './xlsheet'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { XLRowAPI } from './xlrow-api'
import { XLCellAPI } from './xlcell-api'

@Injectable({
  providedIn: 'root'
})
export class XLSheetService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  XLSheetServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private xlsheetsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.xlsheetsUrl = origin + '/api/github.com/fullstack-lang/gong/lib/xlsx/go/v1/xlsheets';
  }

  /** GET xlsheets from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<XLSheetAPI[]> {
    return this.getXLSheets(Name, frontRepo)
  }
  getXLSheets(Name: string, frontRepo: FrontRepo): Observable<XLSheetAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<XLSheetAPI[]>(this.xlsheetsUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<XLSheetAPI[]>('getXLSheets', []))
      );
  }

  /** GET xlsheet by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<XLSheetAPI> {
    return this.getXLSheet(id, Name, frontRepo)
  }
  getXLSheet(id: number, Name: string, frontRepo: FrontRepo): Observable<XLSheetAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.xlsheetsUrl}/${id}`;
    return this.http.get<XLSheetAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched xlsheet id=${id}`)),
      catchError(this.handleError<XLSheetAPI>(`getXLSheet id=${id}`))
    );
  }

  // postFront copy xlsheet to a version with encoded pointers and post to the back
  postFront(xlsheet: XLSheet, Name: string): Observable<XLSheetAPI> {
    let xlsheetAPI = new XLSheetAPI
    CopyXLSheetToXLSheetAPI(xlsheet, xlsheetAPI)
    const id = typeof xlsheetAPI === 'number' ? xlsheetAPI : xlsheetAPI.ID
    const url = `${this.xlsheetsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<XLSheetAPI>(url, xlsheetAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<XLSheetAPI>('postXLSheet'))
    );
  }
  
  /** POST: add a new xlsheet to the server */
  post(xlsheetdb: XLSheetAPI, Name: string, frontRepo: FrontRepo): Observable<XLSheetAPI> {
    return this.postXLSheet(xlsheetdb, Name, frontRepo)
  }
  postXLSheet(xlsheetdb: XLSheetAPI, Name: string, frontRepo: FrontRepo): Observable<XLSheetAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<XLSheetAPI>(this.xlsheetsUrl, xlsheetdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted xlsheetdb id=${xlsheetdb.ID}`)
      }),
      catchError(this.handleError<XLSheetAPI>('postXLSheet'))
    );
  }

  /** DELETE: delete the xlsheetdb from the server */
  delete(xlsheetdb: XLSheetAPI | number, Name: string): Observable<XLSheetAPI> {
    return this.deleteXLSheet(xlsheetdb, Name)
  }
  deleteXLSheet(xlsheetdb: XLSheetAPI | number, Name: string): Observable<XLSheetAPI> {
    const id = typeof xlsheetdb === 'number' ? xlsheetdb : xlsheetdb.ID;
    const url = `${this.xlsheetsUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<XLSheetAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted xlsheetdb id=${id}`)),
      catchError(this.handleError<XLSheetAPI>('deleteXLSheet'))
    );
  }

  // updateFront copy xlsheet to a version with encoded pointers and update to the back
  updateFront(xlsheet: XLSheet, Name: string): Observable<XLSheetAPI> {
    let xlsheetAPI = new XLSheetAPI
    CopyXLSheetToXLSheetAPI(xlsheet, xlsheetAPI)
    const id = typeof xlsheetAPI === 'number' ? xlsheetAPI : xlsheetAPI.ID
    const url = `${this.xlsheetsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<XLSheetAPI>(url, xlsheetAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<XLSheetAPI>('updateXLSheet'))
    );
  }

  /** PUT: update the xlsheetdb on the server */
  update(xlsheetdb: XLSheetAPI, Name: string, frontRepo: FrontRepo): Observable<XLSheetAPI> {
    return this.updateXLSheet(xlsheetdb, Name, frontRepo)
  }
  updateXLSheet(xlsheetdb: XLSheetAPI, Name: string, frontRepo: FrontRepo): Observable<XLSheetAPI> {
    const id = typeof xlsheetdb === 'number' ? xlsheetdb : xlsheetdb.ID;
    const url = `${this.xlsheetsUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<XLSheetAPI>(url, xlsheetdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated xlsheetdb id=${xlsheetdb.ID}`)
      }),
      catchError(this.handleError<XLSheetAPI>('updateXLSheet'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in XLSheetService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("XLSheetService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
