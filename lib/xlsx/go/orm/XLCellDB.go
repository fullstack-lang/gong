// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/xlsx/go/db"
	"github.com/fullstack-lang/gong/lib/xlsx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_XLCell_sql sql.NullBool
var dummy_XLCell_time time.Duration
var dummy_XLCell_sort sort.Float64Slice

// XLCellAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xlcellAPI
type XLCellAPI struct {
	gorm.Model

	models.XLCell_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	XLCellPointersEncoding XLCellPointersEncoding
}

// XLCellPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type XLCellPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// XLCellDB describes a xlcell in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model xlcellDB
type XLCellDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field xlcellDB.Name
	Name_Data sql.NullString

	// Declation for basic field xlcellDB.X
	X_Data sql.NullInt64

	// Declation for basic field xlcellDB.Y
	Y_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	XLCellPointersEncoding
}

// XLCellDBs arrays xlcellDBs
// swagger:response xlcellDBsResponse
type XLCellDBs []XLCellDB

// XLCellDBResponse provides response
// swagger:response xlcellDBResponse
type XLCellDBResponse struct {
	XLCellDB
}

// XLCellWOP is a XLCell without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type XLCellWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	X int `xlsx:"2"`

	Y int `xlsx:"3"`
	// insertion for WOP pointer fields
}

var XLCell_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"X",
	"Y",
}

type BackRepoXLCellStruct struct {
	// stores XLCellDB according to their gorm ID
	Map_XLCellDBID_XLCellDB map[uint]*XLCellDB

	// stores XLCellDB ID according to XLCell address
	Map_XLCellPtr_XLCellDBID map[*models.XLCell]uint

	// stores XLCell according to their gorm ID
	Map_XLCellDBID_XLCellPtr map[uint]*models.XLCell

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoXLCell *BackRepoXLCellStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoXLCell.stage
	return
}

func (backRepoXLCell *BackRepoXLCellStruct) GetDB() db.DBInterface {
	return backRepoXLCell.db
}

// GetXLCellDBFromXLCellPtr is a handy function to access the back repo instance from the stage instance
func (backRepoXLCell *BackRepoXLCellStruct) GetXLCellDBFromXLCellPtr(xlcell *models.XLCell) (xlcellDB *XLCellDB) {
	id := backRepoXLCell.Map_XLCellPtr_XLCellDBID[xlcell]
	xlcellDB = backRepoXLCell.Map_XLCellDBID_XLCellDB[id]
	return
}

// BackRepoXLCell.CommitPhaseOne commits all staged instances of XLCell to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLCell *BackRepoXLCellStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var xlcells []*models.XLCell
	for xlcell := range stage.XLCells {
		xlcells = append(xlcells, xlcell)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(xlcells, func(i, j int) bool {
		return stage.XLCellMap_Staged_Order[xlcells[i]] < stage.XLCellMap_Staged_Order[xlcells[j]]
	})

	for _, xlcell := range xlcells {
		backRepoXLCell.CommitPhaseOneInstance(xlcell)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xlcell := range backRepoXLCell.Map_XLCellDBID_XLCellPtr {
		if _, ok := stage.XLCells[xlcell]; !ok {
			backRepoXLCell.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXLCell.CommitDeleteInstance commits deletion of XLCell to the BackRepo
func (backRepoXLCell *BackRepoXLCellStruct) CommitDeleteInstance(id uint) (Error error) {

	xlcell := backRepoXLCell.Map_XLCellDBID_XLCellPtr[id]

	// xlcell is not staged anymore, remove xlcellDB
	xlcellDB := backRepoXLCell.Map_XLCellDBID_XLCellDB[id]
	db, _ := backRepoXLCell.db.Unscoped()
	_, err := db.Delete(xlcellDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoXLCell.Map_XLCellPtr_XLCellDBID, xlcell)
	delete(backRepoXLCell.Map_XLCellDBID_XLCellPtr, id)
	delete(backRepoXLCell.Map_XLCellDBID_XLCellDB, id)

	return
}

// BackRepoXLCell.CommitPhaseOneInstance commits xlcell staged instances of XLCell to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLCell *BackRepoXLCellStruct) CommitPhaseOneInstance(xlcell *models.XLCell) (Error error) {

	// check if the xlcell is not commited yet
	if _, ok := backRepoXLCell.Map_XLCellPtr_XLCellDBID[xlcell]; ok {
		return
	}

	// initiate xlcell
	var xlcellDB XLCellDB
	xlcellDB.CopyBasicFieldsFromXLCell(xlcell)

	_, err := backRepoXLCell.db.Create(&xlcellDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoXLCell.Map_XLCellPtr_XLCellDBID[xlcell] = xlcellDB.ID
	backRepoXLCell.Map_XLCellDBID_XLCellPtr[xlcellDB.ID] = xlcell
	backRepoXLCell.Map_XLCellDBID_XLCellDB[xlcellDB.ID] = &xlcellDB

	return
}

// BackRepoXLCell.CommitPhaseTwo commits all staged instances of XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xlcell := range backRepoXLCell.Map_XLCellDBID_XLCellPtr {
		backRepoXLCell.CommitPhaseTwoInstance(backRepo, idx, xlcell)
	}

	return
}

// BackRepoXLCell.CommitPhaseTwoInstance commits {{structname }} of models.XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xlcell *models.XLCell) (Error error) {

	// fetch matching xlcellDB
	if xlcellDB, ok := backRepoXLCell.Map_XLCellDBID_XLCellDB[idx]; ok {

		xlcellDB.CopyBasicFieldsFromXLCell(xlcell)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoXLCell.db.Save(xlcellDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown XLCell intance %s", xlcell.Name))
		return err
	}

	return
}

// BackRepoXLCell.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoXLCell *BackRepoXLCellStruct) CheckoutPhaseOne() (Error error) {

	xlcellDBArray := make([]XLCellDB, 0)
	_, err := backRepoXLCell.db.Find(&xlcellDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	xlcellInstancesToBeRemovedFromTheStage := make(map[*models.XLCell]any)
	for key, value := range backRepoXLCell.stage.XLCells {
		xlcellInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, xlcellDB := range xlcellDBArray {
		backRepoXLCell.CheckoutPhaseOneInstance(&xlcellDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		xlcell, ok := backRepoXLCell.Map_XLCellDBID_XLCellPtr[xlcellDB.ID]
		if ok {
			delete(xlcellInstancesToBeRemovedFromTheStage, xlcell)
		}
	}

	// remove from stage and back repo's 3 maps all xlcells that are not in the checkout
	for xlcell := range xlcellInstancesToBeRemovedFromTheStage {
		xlcell.Unstage(backRepoXLCell.GetStage())

		// remove instance from the back repo 3 maps
		xlcellID := backRepoXLCell.Map_XLCellPtr_XLCellDBID[xlcell]
		delete(backRepoXLCell.Map_XLCellPtr_XLCellDBID, xlcell)
		delete(backRepoXLCell.Map_XLCellDBID_XLCellDB, xlcellID)
		delete(backRepoXLCell.Map_XLCellDBID_XLCellPtr, xlcellID)
	}

	return
}

// CheckoutPhaseOneInstance takes a xlcellDB that has been found in the DB, updates the backRepo and stages the
// models version of the xlcellDB
func (backRepoXLCell *BackRepoXLCellStruct) CheckoutPhaseOneInstance(xlcellDB *XLCellDB) (Error error) {

	xlcell, ok := backRepoXLCell.Map_XLCellDBID_XLCellPtr[xlcellDB.ID]
	if !ok {
		xlcell = new(models.XLCell)

		backRepoXLCell.Map_XLCellDBID_XLCellPtr[xlcellDB.ID] = xlcell
		backRepoXLCell.Map_XLCellPtr_XLCellDBID[xlcell] = xlcellDB.ID

		// append model store with the new element
		xlcell.Name = xlcellDB.Name_Data.String
		xlcell.Stage(backRepoXLCell.GetStage())
	}
	xlcellDB.CopyBasicFieldsToXLCell(xlcell)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	xlcell.Stage(backRepoXLCell.GetStage())

	// preserve pointer to xlcellDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_XLCellDBID_XLCellDB)[xlcellDB hold variable pointers
	xlcellDB_Data := *xlcellDB
	preservedPtrToXLCell := &xlcellDB_Data
	backRepoXLCell.Map_XLCellDBID_XLCellDB[xlcellDB.ID] = preservedPtrToXLCell

	return
}

// BackRepoXLCell.CheckoutPhaseTwo Checkouts all staged instances of XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xlcellDB := range backRepoXLCell.Map_XLCellDBID_XLCellDB {
		backRepoXLCell.CheckoutPhaseTwoInstance(backRepo, xlcellDB)
	}
	return
}

// BackRepoXLCell.CheckoutPhaseTwoInstance Checkouts staged instances of XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xlcellDB *XLCellDB) (Error error) {

	xlcell := backRepoXLCell.Map_XLCellDBID_XLCellPtr[xlcellDB.ID]

	xlcellDB.DecodePointers(backRepo, xlcell)

	return
}

func (xlcellDB *XLCellDB) DecodePointers(backRepo *BackRepoStruct, xlcell *models.XLCell) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitXLCell allows commit of a single xlcell (if already staged)
func (backRepo *BackRepoStruct) CommitXLCell(xlcell *models.XLCell) {
	backRepo.BackRepoXLCell.CommitPhaseOneInstance(xlcell)
	if id, ok := backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID[xlcell]; ok {
		backRepo.BackRepoXLCell.CommitPhaseTwoInstance(backRepo, id, xlcell)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitXLCell allows checkout of a single xlcell (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXLCell(xlcell *models.XLCell) {
	// check if the xlcell is staged
	if _, ok := backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID[xlcell]; ok {

		if id, ok := backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID[xlcell]; ok {
			var xlcellDB XLCellDB
			xlcellDB.ID = id

			if _, err := backRepo.BackRepoXLCell.db.First(&xlcellDB, id); err != nil {
				log.Fatalln("CheckoutXLCell : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXLCell.CheckoutPhaseOneInstance(&xlcellDB)
			backRepo.BackRepoXLCell.CheckoutPhaseTwoInstance(backRepo, &xlcellDB)
		}
	}
}

// CopyBasicFieldsFromXLCell
func (xlcellDB *XLCellDB) CopyBasicFieldsFromXLCell(xlcell *models.XLCell) {
	// insertion point for fields commit

	xlcellDB.Name_Data.String = xlcell.Name
	xlcellDB.Name_Data.Valid = true

	xlcellDB.X_Data.Int64 = int64(xlcell.X)
	xlcellDB.X_Data.Valid = true

	xlcellDB.Y_Data.Int64 = int64(xlcell.Y)
	xlcellDB.Y_Data.Valid = true
}

// CopyBasicFieldsFromXLCell_WOP
func (xlcellDB *XLCellDB) CopyBasicFieldsFromXLCell_WOP(xlcell *models.XLCell_WOP) {
	// insertion point for fields commit

	xlcellDB.Name_Data.String = xlcell.Name
	xlcellDB.Name_Data.Valid = true

	xlcellDB.X_Data.Int64 = int64(xlcell.X)
	xlcellDB.X_Data.Valid = true

	xlcellDB.Y_Data.Int64 = int64(xlcell.Y)
	xlcellDB.Y_Data.Valid = true
}

// CopyBasicFieldsFromXLCellWOP
func (xlcellDB *XLCellDB) CopyBasicFieldsFromXLCellWOP(xlcell *XLCellWOP) {
	// insertion point for fields commit

	xlcellDB.Name_Data.String = xlcell.Name
	xlcellDB.Name_Data.Valid = true

	xlcellDB.X_Data.Int64 = int64(xlcell.X)
	xlcellDB.X_Data.Valid = true

	xlcellDB.Y_Data.Int64 = int64(xlcell.Y)
	xlcellDB.Y_Data.Valid = true
}

// CopyBasicFieldsToXLCell
func (xlcellDB *XLCellDB) CopyBasicFieldsToXLCell(xlcell *models.XLCell) {
	// insertion point for checkout of basic fields (back repo to stage)
	xlcell.Name = xlcellDB.Name_Data.String
	xlcell.X = int(xlcellDB.X_Data.Int64)
	xlcell.Y = int(xlcellDB.Y_Data.Int64)
}

// CopyBasicFieldsToXLCell_WOP
func (xlcellDB *XLCellDB) CopyBasicFieldsToXLCell_WOP(xlcell *models.XLCell_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	xlcell.Name = xlcellDB.Name_Data.String
	xlcell.X = int(xlcellDB.X_Data.Int64)
	xlcell.Y = int(xlcellDB.Y_Data.Int64)
}

// CopyBasicFieldsToXLCellWOP
func (xlcellDB *XLCellDB) CopyBasicFieldsToXLCellWOP(xlcell *XLCellWOP) {
	xlcell.ID = int(xlcellDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	xlcell.Name = xlcellDB.Name_Data.String
	xlcell.X = int(xlcellDB.X_Data.Int64)
	xlcell.Y = int(xlcellDB.Y_Data.Int64)
}

// Backup generates a json file from a slice of all XLCellDB instances in the backrepo
func (backRepoXLCell *BackRepoXLCellStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "XLCellDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XLCellDB, 0)
	for _, xlcellDB := range backRepoXLCell.Map_XLCellDBID_XLCellDB {
		forBackup = append(forBackup, xlcellDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json XLCell ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json XLCell file", err.Error())
	}
}

// Backup generates a json file from a slice of all XLCellDB instances in the backrepo
func (backRepoXLCell *BackRepoXLCellStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XLCellDB, 0)
	for _, xlcellDB := range backRepoXLCell.Map_XLCellDBID_XLCellDB {
		forBackup = append(forBackup, xlcellDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("XLCell")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&XLCell_Fields, -1)
	for _, xlcellDB := range forBackup {

		var xlcellWOP XLCellWOP
		xlcellDB.CopyBasicFieldsToXLCellWOP(&xlcellWOP)

		row := sh.AddRow()
		row.WriteStruct(&xlcellWOP, -1)
	}
}

// RestoreXL from the "XLCell" sheet all XLCellDB instances
func (backRepoXLCell *BackRepoXLCellStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoXLCellid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["XLCell"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoXLCell.rowVisitorXLCell)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoXLCell *BackRepoXLCellStruct) rowVisitorXLCell(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var xlcellWOP XLCellWOP
		row.ReadStruct(&xlcellWOP)

		// add the unmarshalled struct to the stage
		xlcellDB := new(XLCellDB)
		xlcellDB.CopyBasicFieldsFromXLCellWOP(&xlcellWOP)

		xlcellDB_ID_atBackupTime := xlcellDB.ID
		xlcellDB.ID = 0
		_, err := backRepoXLCell.db.Create(xlcellDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoXLCell.Map_XLCellDBID_XLCellDB[xlcellDB.ID] = xlcellDB
		BackRepoXLCellid_atBckpTime_newID[xlcellDB_ID_atBackupTime] = xlcellDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "XLCellDB.json" in dirPath that stores an array
// of XLCellDB and stores it in the database
// the map BackRepoXLCellid_atBckpTime_newID is updated accordingly
func (backRepoXLCell *BackRepoXLCellStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoXLCellid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "XLCellDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json XLCell file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*XLCellDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_XLCellDBID_XLCellDB
	for _, xlcellDB := range forRestore {

		xlcellDB_ID_atBackupTime := xlcellDB.ID
		xlcellDB.ID = 0
		_, err := backRepoXLCell.db.Create(xlcellDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoXLCell.Map_XLCellDBID_XLCellDB[xlcellDB.ID] = xlcellDB
		BackRepoXLCellid_atBckpTime_newID[xlcellDB_ID_atBackupTime] = xlcellDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json XLCell file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<XLCell>id_atBckpTime_newID
// to compute new index
func (backRepoXLCell *BackRepoXLCellStruct) RestorePhaseTwo() {

	for _, xlcellDB := range backRepoXLCell.Map_XLCellDBID_XLCellDB {

		// next line of code is to avert unused variable compilation error
		_ = xlcellDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoXLCell.db.Model(xlcellDB)
		_, err := db.Updates(*xlcellDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoXLCell.ResetReversePointers commits all staged instances of XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, xlcell := range backRepoXLCell.Map_XLCellDBID_XLCellPtr {
		backRepoXLCell.ResetReversePointersInstance(backRepo, idx, xlcell)
	}

	return
}

func (backRepoXLCell *BackRepoXLCellStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, xlcell *models.XLCell) (Error error) {

	// fetch matching xlcellDB
	if xlcellDB, ok := backRepoXLCell.Map_XLCellDBID_XLCellDB[idx]; ok {
		_ = xlcellDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoXLCellid_atBckpTime_newID map[uint]uint
