// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/xlsx/go/db"
	"github.com/fullstack-lang/gong/lib/xlsx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_XLFile_sql sql.NullBool
var dummy_XLFile_time time.Duration
var dummy_XLFile_sort sort.Float64Slice

// XLFileAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xlfileAPI
type XLFileAPI struct {
	gorm.Model

	models.XLFile_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	XLFilePointersEncoding XLFilePointersEncoding
}

// XLFilePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type XLFilePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Sheets is a slice of pointers to another Struct (optional or 0..1)
	Sheets IntSlice `gorm:"type:TEXT"`
}

// XLFileDB describes a xlfile in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model xlfileDB
type XLFileDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field xlfileDB.Name
	Name_Data sql.NullString

	// Declation for basic field xlfileDB.NbSheets
	NbSheets_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	XLFilePointersEncoding
}

// XLFileDBs arrays xlfileDBs
// swagger:response xlfileDBsResponse
type XLFileDBs []XLFileDB

// XLFileDBResponse provides response
// swagger:response xlfileDBResponse
type XLFileDBResponse struct {
	XLFileDB
}

// XLFileWOP is a XLFile without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type XLFileWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NbSheets int `xlsx:"2"`
	// insertion for WOP pointer fields
}

var XLFile_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NbSheets",
}

type BackRepoXLFileStruct struct {
	// stores XLFileDB according to their gorm ID
	Map_XLFileDBID_XLFileDB map[uint]*XLFileDB

	// stores XLFileDB ID according to XLFile address
	Map_XLFilePtr_XLFileDBID map[*models.XLFile]uint

	// stores XLFile according to their gorm ID
	Map_XLFileDBID_XLFilePtr map[uint]*models.XLFile

	db db.DBInterface

	stage *models.Stage
}

func (backRepoXLFile *BackRepoXLFileStruct) GetStage() (stage *models.Stage) {
	stage = backRepoXLFile.stage
	return
}

func (backRepoXLFile *BackRepoXLFileStruct) GetDB() db.DBInterface {
	return backRepoXLFile.db
}

// GetXLFileDBFromXLFilePtr is a handy function to access the back repo instance from the stage instance
func (backRepoXLFile *BackRepoXLFileStruct) GetXLFileDBFromXLFilePtr(xlfile *models.XLFile) (xlfileDB *XLFileDB) {
	id := backRepoXLFile.Map_XLFilePtr_XLFileDBID[xlfile]
	xlfileDB = backRepoXLFile.Map_XLFileDBID_XLFileDB[id]
	return
}

// BackRepoXLFile.CommitPhaseOne commits all staged instances of XLFile to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLFile *BackRepoXLFileStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var xlfiles []*models.XLFile
	for xlfile := range stage.XLFiles {
		xlfiles = append(xlfiles, xlfile)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(xlfiles, func(i, j int) bool {
		return stage.XLFileMap_Staged_Order[xlfiles[i]] < stage.XLFileMap_Staged_Order[xlfiles[j]]
	})

	for _, xlfile := range xlfiles {
		backRepoXLFile.CommitPhaseOneInstance(xlfile)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xlfile := range backRepoXLFile.Map_XLFileDBID_XLFilePtr {
		if _, ok := stage.XLFiles[xlfile]; !ok {
			backRepoXLFile.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXLFile.CommitDeleteInstance commits deletion of XLFile to the BackRepo
func (backRepoXLFile *BackRepoXLFileStruct) CommitDeleteInstance(id uint) (Error error) {

	xlfile := backRepoXLFile.Map_XLFileDBID_XLFilePtr[id]

	// xlfile is not staged anymore, remove xlfileDB
	xlfileDB := backRepoXLFile.Map_XLFileDBID_XLFileDB[id]
	db, _ := backRepoXLFile.db.Unscoped()
	_, err := db.Delete(xlfileDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoXLFile.Map_XLFilePtr_XLFileDBID, xlfile)
	delete(backRepoXLFile.Map_XLFileDBID_XLFilePtr, id)
	delete(backRepoXLFile.Map_XLFileDBID_XLFileDB, id)

	return
}

// BackRepoXLFile.CommitPhaseOneInstance commits xlfile staged instances of XLFile to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLFile *BackRepoXLFileStruct) CommitPhaseOneInstance(xlfile *models.XLFile) (Error error) {

	// check if the xlfile is not commited yet
	if _, ok := backRepoXLFile.Map_XLFilePtr_XLFileDBID[xlfile]; ok {
		return
	}

	// initiate xlfile
	var xlfileDB XLFileDB
	xlfileDB.CopyBasicFieldsFromXLFile(xlfile)

	_, err := backRepoXLFile.db.Create(&xlfileDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoXLFile.Map_XLFilePtr_XLFileDBID[xlfile] = xlfileDB.ID
	backRepoXLFile.Map_XLFileDBID_XLFilePtr[xlfileDB.ID] = xlfile
	backRepoXLFile.Map_XLFileDBID_XLFileDB[xlfileDB.ID] = &xlfileDB

	return
}

// BackRepoXLFile.CommitPhaseTwo commits all staged instances of XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xlfile := range backRepoXLFile.Map_XLFileDBID_XLFilePtr {
		backRepoXLFile.CommitPhaseTwoInstance(backRepo, idx, xlfile)
	}

	return
}

// BackRepoXLFile.CommitPhaseTwoInstance commits {{structname }} of models.XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xlfile *models.XLFile) (Error error) {

	// fetch matching xlfileDB
	if xlfileDB, ok := backRepoXLFile.Map_XLFileDBID_XLFileDB[idx]; ok {

		xlfileDB.CopyBasicFieldsFromXLFile(xlfile)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		xlfileDB.XLFilePointersEncoding.Sheets = make([]int, 0)
		// 2. encode
		for _, xlsheetAssocEnd := range xlfile.Sheets {
			xlsheetAssocEnd_DB :=
				backRepo.BackRepoXLSheet.GetXLSheetDBFromXLSheetPtr(xlsheetAssocEnd)
			
			// the stage might be inconsistant, meaning that the xlsheetAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if xlsheetAssocEnd_DB == nil {
				continue
			}
			
			xlfileDB.XLFilePointersEncoding.Sheets =
				append(xlfileDB.XLFilePointersEncoding.Sheets, int(xlsheetAssocEnd_DB.ID))
		}

		_, err := backRepoXLFile.db.Save(xlfileDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown XLFile intance %s", xlfile.Name))
		return err
	}

	return
}

// BackRepoXLFile.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoXLFile *BackRepoXLFileStruct) CheckoutPhaseOne() (Error error) {

	xlfileDBArray := make([]XLFileDB, 0)
	_, err := backRepoXLFile.db.Find(&xlfileDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	xlfileInstancesToBeRemovedFromTheStage := make(map[*models.XLFile]any)
	for key, value := range backRepoXLFile.stage.XLFiles {
		xlfileInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, xlfileDB := range xlfileDBArray {
		backRepoXLFile.CheckoutPhaseOneInstance(&xlfileDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		xlfile, ok := backRepoXLFile.Map_XLFileDBID_XLFilePtr[xlfileDB.ID]
		if ok {
			delete(xlfileInstancesToBeRemovedFromTheStage, xlfile)
		}
	}

	// remove from stage and back repo's 3 maps all xlfiles that are not in the checkout
	for xlfile := range xlfileInstancesToBeRemovedFromTheStage {
		xlfile.Unstage(backRepoXLFile.GetStage())

		// remove instance from the back repo 3 maps
		xlfileID := backRepoXLFile.Map_XLFilePtr_XLFileDBID[xlfile]
		delete(backRepoXLFile.Map_XLFilePtr_XLFileDBID, xlfile)
		delete(backRepoXLFile.Map_XLFileDBID_XLFileDB, xlfileID)
		delete(backRepoXLFile.Map_XLFileDBID_XLFilePtr, xlfileID)
	}

	return
}

// CheckoutPhaseOneInstance takes a xlfileDB that has been found in the DB, updates the backRepo and stages the
// models version of the xlfileDB
func (backRepoXLFile *BackRepoXLFileStruct) CheckoutPhaseOneInstance(xlfileDB *XLFileDB) (Error error) {

	xlfile, ok := backRepoXLFile.Map_XLFileDBID_XLFilePtr[xlfileDB.ID]
	if !ok {
		xlfile = new(models.XLFile)

		backRepoXLFile.Map_XLFileDBID_XLFilePtr[xlfileDB.ID] = xlfile
		backRepoXLFile.Map_XLFilePtr_XLFileDBID[xlfile] = xlfileDB.ID

		// append model store with the new element
		xlfile.Name = xlfileDB.Name_Data.String
		xlfile.Stage(backRepoXLFile.GetStage())
	}
	xlfileDB.CopyBasicFieldsToXLFile(xlfile)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	xlfile.Stage(backRepoXLFile.GetStage())

	// preserve pointer to xlfileDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_XLFileDBID_XLFileDB)[xlfileDB hold variable pointers
	xlfileDB_Data := *xlfileDB
	preservedPtrToXLFile := &xlfileDB_Data
	backRepoXLFile.Map_XLFileDBID_XLFileDB[xlfileDB.ID] = preservedPtrToXLFile

	return
}

// BackRepoXLFile.CheckoutPhaseTwo Checkouts all staged instances of XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xlfileDB := range backRepoXLFile.Map_XLFileDBID_XLFileDB {
		backRepoXLFile.CheckoutPhaseTwoInstance(backRepo, xlfileDB)
	}
	return
}

// BackRepoXLFile.CheckoutPhaseTwoInstance Checkouts staged instances of XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xlfileDB *XLFileDB) (Error error) {

	xlfile := backRepoXLFile.Map_XLFileDBID_XLFilePtr[xlfileDB.ID]

	xlfileDB.DecodePointers(backRepo, xlfile)

	return
}

func (xlfileDB *XLFileDB) DecodePointers(backRepo *BackRepoStruct, xlfile *models.XLFile) {

	// insertion point for checkout of pointer encoding
	// This loop redeem xlfile.Sheets in the stage from the encode in the back repo
	// It parses all XLSheetDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	xlfile.Sheets = xlfile.Sheets[:0]
	for _, _XLSheetid := range xlfileDB.XLFilePointersEncoding.Sheets {
		xlfile.Sheets = append(xlfile.Sheets, backRepo.BackRepoXLSheet.Map_XLSheetDBID_XLSheetPtr[uint(_XLSheetid)])
	}

	return
}

// CommitXLFile allows commit of a single xlfile (if already staged)
func (backRepo *BackRepoStruct) CommitXLFile(xlfile *models.XLFile) {
	backRepo.BackRepoXLFile.CommitPhaseOneInstance(xlfile)
	if id, ok := backRepo.BackRepoXLFile.Map_XLFilePtr_XLFileDBID[xlfile]; ok {
		backRepo.BackRepoXLFile.CommitPhaseTwoInstance(backRepo, id, xlfile)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitXLFile allows checkout of a single xlfile (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXLFile(xlfile *models.XLFile) {
	// check if the xlfile is staged
	if _, ok := backRepo.BackRepoXLFile.Map_XLFilePtr_XLFileDBID[xlfile]; ok {

		if id, ok := backRepo.BackRepoXLFile.Map_XLFilePtr_XLFileDBID[xlfile]; ok {
			var xlfileDB XLFileDB
			xlfileDB.ID = id

			if _, err := backRepo.BackRepoXLFile.db.First(&xlfileDB, id); err != nil {
				log.Fatalln("CheckoutXLFile : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXLFile.CheckoutPhaseOneInstance(&xlfileDB)
			backRepo.BackRepoXLFile.CheckoutPhaseTwoInstance(backRepo, &xlfileDB)
		}
	}
}

// CopyBasicFieldsFromXLFile
func (xlfileDB *XLFileDB) CopyBasicFieldsFromXLFile(xlfile *models.XLFile) {
	// insertion point for fields commit

	xlfileDB.Name_Data.String = xlfile.Name
	xlfileDB.Name_Data.Valid = true

	xlfileDB.NbSheets_Data.Int64 = int64(xlfile.NbSheets)
	xlfileDB.NbSheets_Data.Valid = true
}

// CopyBasicFieldsFromXLFile_WOP
func (xlfileDB *XLFileDB) CopyBasicFieldsFromXLFile_WOP(xlfile *models.XLFile_WOP) {
	// insertion point for fields commit

	xlfileDB.Name_Data.String = xlfile.Name
	xlfileDB.Name_Data.Valid = true

	xlfileDB.NbSheets_Data.Int64 = int64(xlfile.NbSheets)
	xlfileDB.NbSheets_Data.Valid = true
}

// CopyBasicFieldsFromXLFileWOP
func (xlfileDB *XLFileDB) CopyBasicFieldsFromXLFileWOP(xlfile *XLFileWOP) {
	// insertion point for fields commit

	xlfileDB.Name_Data.String = xlfile.Name
	xlfileDB.Name_Data.Valid = true

	xlfileDB.NbSheets_Data.Int64 = int64(xlfile.NbSheets)
	xlfileDB.NbSheets_Data.Valid = true
}

// CopyBasicFieldsToXLFile
func (xlfileDB *XLFileDB) CopyBasicFieldsToXLFile(xlfile *models.XLFile) {
	// insertion point for checkout of basic fields (back repo to stage)
	xlfile.Name = xlfileDB.Name_Data.String
	xlfile.NbSheets = int(xlfileDB.NbSheets_Data.Int64)
}

// CopyBasicFieldsToXLFile_WOP
func (xlfileDB *XLFileDB) CopyBasicFieldsToXLFile_WOP(xlfile *models.XLFile_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	xlfile.Name = xlfileDB.Name_Data.String
	xlfile.NbSheets = int(xlfileDB.NbSheets_Data.Int64)
}

// CopyBasicFieldsToXLFileWOP
func (xlfileDB *XLFileDB) CopyBasicFieldsToXLFileWOP(xlfile *XLFileWOP) {
	xlfile.ID = int(xlfileDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	xlfile.Name = xlfileDB.Name_Data.String
	xlfile.NbSheets = int(xlfileDB.NbSheets_Data.Int64)
}

// Backup generates a json file from a slice of all XLFileDB instances in the backrepo
func (backRepoXLFile *BackRepoXLFileStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "XLFileDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XLFileDB, 0)
	for _, xlfileDB := range backRepoXLFile.Map_XLFileDBID_XLFileDB {
		forBackup = append(forBackup, xlfileDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json XLFile ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json XLFile file", err.Error())
	}
}

// Backup generates a json file from a slice of all XLFileDB instances in the backrepo
func (backRepoXLFile *BackRepoXLFileStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XLFileDB, 0)
	for _, xlfileDB := range backRepoXLFile.Map_XLFileDBID_XLFileDB {
		forBackup = append(forBackup, xlfileDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("XLFile")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&XLFile_Fields, -1)
	for _, xlfileDB := range forBackup {

		var xlfileWOP XLFileWOP
		xlfileDB.CopyBasicFieldsToXLFileWOP(&xlfileWOP)

		row := sh.AddRow()
		row.WriteStruct(&xlfileWOP, -1)
	}
}

// RestoreXL from the "XLFile" sheet all XLFileDB instances
func (backRepoXLFile *BackRepoXLFileStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoXLFileid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["XLFile"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoXLFile.rowVisitorXLFile)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoXLFile *BackRepoXLFileStruct) rowVisitorXLFile(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var xlfileWOP XLFileWOP
		row.ReadStruct(&xlfileWOP)

		// add the unmarshalled struct to the stage
		xlfileDB := new(XLFileDB)
		xlfileDB.CopyBasicFieldsFromXLFileWOP(&xlfileWOP)

		xlfileDB_ID_atBackupTime := xlfileDB.ID
		xlfileDB.ID = 0
		_, err := backRepoXLFile.db.Create(xlfileDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoXLFile.Map_XLFileDBID_XLFileDB[xlfileDB.ID] = xlfileDB
		BackRepoXLFileid_atBckpTime_newID[xlfileDB_ID_atBackupTime] = xlfileDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "XLFileDB.json" in dirPath that stores an array
// of XLFileDB and stores it in the database
// the map BackRepoXLFileid_atBckpTime_newID is updated accordingly
func (backRepoXLFile *BackRepoXLFileStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoXLFileid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "XLFileDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json XLFile file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*XLFileDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_XLFileDBID_XLFileDB
	for _, xlfileDB := range forRestore {

		xlfileDB_ID_atBackupTime := xlfileDB.ID
		xlfileDB.ID = 0
		_, err := backRepoXLFile.db.Create(xlfileDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoXLFile.Map_XLFileDBID_XLFileDB[xlfileDB.ID] = xlfileDB
		BackRepoXLFileid_atBckpTime_newID[xlfileDB_ID_atBackupTime] = xlfileDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json XLFile file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<XLFile>id_atBckpTime_newID
// to compute new index
func (backRepoXLFile *BackRepoXLFileStruct) RestorePhaseTwo() {

	for _, xlfileDB := range backRepoXLFile.Map_XLFileDBID_XLFileDB {

		// next line of code is to avert unused variable compilation error
		_ = xlfileDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoXLFile.db.Model(xlfileDB)
		_, err := db.Updates(*xlfileDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoXLFile.ResetReversePointers commits all staged instances of XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, xlfile := range backRepoXLFile.Map_XLFileDBID_XLFilePtr {
		backRepoXLFile.ResetReversePointersInstance(backRepo, idx, xlfile)
	}

	return
}

func (backRepoXLFile *BackRepoXLFileStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, xlfile *models.XLFile) (Error error) {

	// fetch matching xlfileDB
	if xlfileDB, ok := backRepoXLFile.Map_XLFileDBID_XLFileDB[idx]; ok {
		_ = xlfileDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoXLFileid_atBckpTime_newID map[uint]uint
