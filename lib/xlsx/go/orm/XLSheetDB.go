// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/xlsx/go/db"
	"github.com/fullstack-lang/gong/lib/xlsx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_XLSheet_sql sql.NullBool
var dummy_XLSheet_time time.Duration
var dummy_XLSheet_sort sort.Float64Slice

// XLSheetAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xlsheetAPI
type XLSheetAPI struct {
	gorm.Model

	models.XLSheet_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	XLSheetPointersEncoding XLSheetPointersEncoding
}

// XLSheetPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type XLSheetPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Rows is a slice of pointers to another Struct (optional or 0..1)
	Rows IntSlice `gorm:"type:TEXT"`

	// field SheetCells is a slice of pointers to another Struct (optional or 0..1)
	SheetCells IntSlice `gorm:"type:TEXT"`
}

// XLSheetDB describes a xlsheet in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model xlsheetDB
type XLSheetDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field xlsheetDB.Name
	Name_Data sql.NullString

	// Declation for basic field xlsheetDB.MaxRow
	MaxRow_Data sql.NullInt64

	// Declation for basic field xlsheetDB.MaxCol
	MaxCol_Data sql.NullInt64

	// Declation for basic field xlsheetDB.NbRows
	NbRows_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	XLSheetPointersEncoding
}

// XLSheetDBs arrays xlsheetDBs
// swagger:response xlsheetDBsResponse
type XLSheetDBs []XLSheetDB

// XLSheetDBResponse provides response
// swagger:response xlsheetDBResponse
type XLSheetDBResponse struct {
	XLSheetDB
}

// XLSheetWOP is a XLSheet without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type XLSheetWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	MaxRow int `xlsx:"2"`

	MaxCol int `xlsx:"3"`

	NbRows int `xlsx:"4"`
	// insertion for WOP pointer fields
}

var XLSheet_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"MaxRow",
	"MaxCol",
	"NbRows",
}

type BackRepoXLSheetStruct struct {
	// stores XLSheetDB according to their gorm ID
	Map_XLSheetDBID_XLSheetDB map[uint]*XLSheetDB

	// stores XLSheetDB ID according to XLSheet address
	Map_XLSheetPtr_XLSheetDBID map[*models.XLSheet]uint

	// stores XLSheet according to their gorm ID
	Map_XLSheetDBID_XLSheetPtr map[uint]*models.XLSheet

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoXLSheet *BackRepoXLSheetStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoXLSheet.stage
	return
}

func (backRepoXLSheet *BackRepoXLSheetStruct) GetDB() db.DBInterface {
	return backRepoXLSheet.db
}

// GetXLSheetDBFromXLSheetPtr is a handy function to access the back repo instance from the stage instance
func (backRepoXLSheet *BackRepoXLSheetStruct) GetXLSheetDBFromXLSheetPtr(xlsheet *models.XLSheet) (xlsheetDB *XLSheetDB) {
	id := backRepoXLSheet.Map_XLSheetPtr_XLSheetDBID[xlsheet]
	xlsheetDB = backRepoXLSheet.Map_XLSheetDBID_XLSheetDB[id]
	return
}

// BackRepoXLSheet.CommitPhaseOne commits all staged instances of XLSheet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLSheet *BackRepoXLSheetStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var xlsheets []*models.XLSheet
	for xlsheet := range stage.XLSheets {
		xlsheets = append(xlsheets, xlsheet)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(xlsheets, func(i, j int) bool {
		return stage.XLSheetMap_Staged_Order[xlsheets[i]] < stage.XLSheetMap_Staged_Order[xlsheets[j]]
	})

	for _, xlsheet := range xlsheets {
		backRepoXLSheet.CommitPhaseOneInstance(xlsheet)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xlsheet := range backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr {
		if _, ok := stage.XLSheets[xlsheet]; !ok {
			backRepoXLSheet.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXLSheet.CommitDeleteInstance commits deletion of XLSheet to the BackRepo
func (backRepoXLSheet *BackRepoXLSheetStruct) CommitDeleteInstance(id uint) (Error error) {

	xlsheet := backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr[id]

	// xlsheet is not staged anymore, remove xlsheetDB
	xlsheetDB := backRepoXLSheet.Map_XLSheetDBID_XLSheetDB[id]
	db, _ := backRepoXLSheet.db.Unscoped()
	_, err := db.Delete(xlsheetDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoXLSheet.Map_XLSheetPtr_XLSheetDBID, xlsheet)
	delete(backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr, id)
	delete(backRepoXLSheet.Map_XLSheetDBID_XLSheetDB, id)

	return
}

// BackRepoXLSheet.CommitPhaseOneInstance commits xlsheet staged instances of XLSheet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLSheet *BackRepoXLSheetStruct) CommitPhaseOneInstance(xlsheet *models.XLSheet) (Error error) {

	// check if the xlsheet is not commited yet
	if _, ok := backRepoXLSheet.Map_XLSheetPtr_XLSheetDBID[xlsheet]; ok {
		return
	}

	// initiate xlsheet
	var xlsheetDB XLSheetDB
	xlsheetDB.CopyBasicFieldsFromXLSheet(xlsheet)

	_, err := backRepoXLSheet.db.Create(&xlsheetDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoXLSheet.Map_XLSheetPtr_XLSheetDBID[xlsheet] = xlsheetDB.ID
	backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr[xlsheetDB.ID] = xlsheet
	backRepoXLSheet.Map_XLSheetDBID_XLSheetDB[xlsheetDB.ID] = &xlsheetDB

	return
}

// BackRepoXLSheet.CommitPhaseTwo commits all staged instances of XLSheet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLSheet *BackRepoXLSheetStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xlsheet := range backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr {
		backRepoXLSheet.CommitPhaseTwoInstance(backRepo, idx, xlsheet)
	}

	return
}

// BackRepoXLSheet.CommitPhaseTwoInstance commits {{structname }} of models.XLSheet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLSheet *BackRepoXLSheetStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xlsheet *models.XLSheet) (Error error) {

	// fetch matching xlsheetDB
	if xlsheetDB, ok := backRepoXLSheet.Map_XLSheetDBID_XLSheetDB[idx]; ok {

		xlsheetDB.CopyBasicFieldsFromXLSheet(xlsheet)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		xlsheetDB.XLSheetPointersEncoding.Rows = make([]int, 0)
		// 2. encode
		for _, xlrowAssocEnd := range xlsheet.Rows {
			xlrowAssocEnd_DB :=
				backRepo.BackRepoXLRow.GetXLRowDBFromXLRowPtr(xlrowAssocEnd)
			
			// the stage might be inconsistant, meaning that the xlrowAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if xlrowAssocEnd_DB == nil {
				continue
			}
			
			xlsheetDB.XLSheetPointersEncoding.Rows =
				append(xlsheetDB.XLSheetPointersEncoding.Rows, int(xlrowAssocEnd_DB.ID))
		}

		// 1. reset
		xlsheetDB.XLSheetPointersEncoding.SheetCells = make([]int, 0)
		// 2. encode
		for _, xlcellAssocEnd := range xlsheet.SheetCells {
			xlcellAssocEnd_DB :=
				backRepo.BackRepoXLCell.GetXLCellDBFromXLCellPtr(xlcellAssocEnd)
			
			// the stage might be inconsistant, meaning that the xlcellAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if xlcellAssocEnd_DB == nil {
				continue
			}
			
			xlsheetDB.XLSheetPointersEncoding.SheetCells =
				append(xlsheetDB.XLSheetPointersEncoding.SheetCells, int(xlcellAssocEnd_DB.ID))
		}

		_, err := backRepoXLSheet.db.Save(xlsheetDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown XLSheet intance %s", xlsheet.Name))
		return err
	}

	return
}

// BackRepoXLSheet.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoXLSheet *BackRepoXLSheetStruct) CheckoutPhaseOne() (Error error) {

	xlsheetDBArray := make([]XLSheetDB, 0)
	_, err := backRepoXLSheet.db.Find(&xlsheetDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	xlsheetInstancesToBeRemovedFromTheStage := make(map[*models.XLSheet]any)
	for key, value := range backRepoXLSheet.stage.XLSheets {
		xlsheetInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, xlsheetDB := range xlsheetDBArray {
		backRepoXLSheet.CheckoutPhaseOneInstance(&xlsheetDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		xlsheet, ok := backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr[xlsheetDB.ID]
		if ok {
			delete(xlsheetInstancesToBeRemovedFromTheStage, xlsheet)
		}
	}

	// remove from stage and back repo's 3 maps all xlsheets that are not in the checkout
	for xlsheet := range xlsheetInstancesToBeRemovedFromTheStage {
		xlsheet.Unstage(backRepoXLSheet.GetStage())

		// remove instance from the back repo 3 maps
		xlsheetID := backRepoXLSheet.Map_XLSheetPtr_XLSheetDBID[xlsheet]
		delete(backRepoXLSheet.Map_XLSheetPtr_XLSheetDBID, xlsheet)
		delete(backRepoXLSheet.Map_XLSheetDBID_XLSheetDB, xlsheetID)
		delete(backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr, xlsheetID)
	}

	return
}

// CheckoutPhaseOneInstance takes a xlsheetDB that has been found in the DB, updates the backRepo and stages the
// models version of the xlsheetDB
func (backRepoXLSheet *BackRepoXLSheetStruct) CheckoutPhaseOneInstance(xlsheetDB *XLSheetDB) (Error error) {

	xlsheet, ok := backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr[xlsheetDB.ID]
	if !ok {
		xlsheet = new(models.XLSheet)

		backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr[xlsheetDB.ID] = xlsheet
		backRepoXLSheet.Map_XLSheetPtr_XLSheetDBID[xlsheet] = xlsheetDB.ID

		// append model store with the new element
		xlsheet.Name = xlsheetDB.Name_Data.String
		xlsheet.Stage(backRepoXLSheet.GetStage())
	}
	xlsheetDB.CopyBasicFieldsToXLSheet(xlsheet)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	xlsheet.Stage(backRepoXLSheet.GetStage())

	// preserve pointer to xlsheetDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_XLSheetDBID_XLSheetDB)[xlsheetDB hold variable pointers
	xlsheetDB_Data := *xlsheetDB
	preservedPtrToXLSheet := &xlsheetDB_Data
	backRepoXLSheet.Map_XLSheetDBID_XLSheetDB[xlsheetDB.ID] = preservedPtrToXLSheet

	return
}

// BackRepoXLSheet.CheckoutPhaseTwo Checkouts all staged instances of XLSheet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLSheet *BackRepoXLSheetStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xlsheetDB := range backRepoXLSheet.Map_XLSheetDBID_XLSheetDB {
		backRepoXLSheet.CheckoutPhaseTwoInstance(backRepo, xlsheetDB)
	}
	return
}

// BackRepoXLSheet.CheckoutPhaseTwoInstance Checkouts staged instances of XLSheet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLSheet *BackRepoXLSheetStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xlsheetDB *XLSheetDB) (Error error) {

	xlsheet := backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr[xlsheetDB.ID]

	xlsheetDB.DecodePointers(backRepo, xlsheet)

	return
}

func (xlsheetDB *XLSheetDB) DecodePointers(backRepo *BackRepoStruct, xlsheet *models.XLSheet) {

	// insertion point for checkout of pointer encoding
	// This loop redeem xlsheet.Rows in the stage from the encode in the back repo
	// It parses all XLRowDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	xlsheet.Rows = xlsheet.Rows[:0]
	for _, _XLRowid := range xlsheetDB.XLSheetPointersEncoding.Rows {
		xlsheet.Rows = append(xlsheet.Rows, backRepo.BackRepoXLRow.Map_XLRowDBID_XLRowPtr[uint(_XLRowid)])
	}

	// This loop redeem xlsheet.SheetCells in the stage from the encode in the back repo
	// It parses all XLCellDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	xlsheet.SheetCells = xlsheet.SheetCells[:0]
	for _, _XLCellid := range xlsheetDB.XLSheetPointersEncoding.SheetCells {
		xlsheet.SheetCells = append(xlsheet.SheetCells, backRepo.BackRepoXLCell.Map_XLCellDBID_XLCellPtr[uint(_XLCellid)])
	}

	return
}

// CommitXLSheet allows commit of a single xlsheet (if already staged)
func (backRepo *BackRepoStruct) CommitXLSheet(xlsheet *models.XLSheet) {
	backRepo.BackRepoXLSheet.CommitPhaseOneInstance(xlsheet)
	if id, ok := backRepo.BackRepoXLSheet.Map_XLSheetPtr_XLSheetDBID[xlsheet]; ok {
		backRepo.BackRepoXLSheet.CommitPhaseTwoInstance(backRepo, id, xlsheet)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitXLSheet allows checkout of a single xlsheet (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXLSheet(xlsheet *models.XLSheet) {
	// check if the xlsheet is staged
	if _, ok := backRepo.BackRepoXLSheet.Map_XLSheetPtr_XLSheetDBID[xlsheet]; ok {

		if id, ok := backRepo.BackRepoXLSheet.Map_XLSheetPtr_XLSheetDBID[xlsheet]; ok {
			var xlsheetDB XLSheetDB
			xlsheetDB.ID = id

			if _, err := backRepo.BackRepoXLSheet.db.First(&xlsheetDB, id); err != nil {
				log.Fatalln("CheckoutXLSheet : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXLSheet.CheckoutPhaseOneInstance(&xlsheetDB)
			backRepo.BackRepoXLSheet.CheckoutPhaseTwoInstance(backRepo, &xlsheetDB)
		}
	}
}

// CopyBasicFieldsFromXLSheet
func (xlsheetDB *XLSheetDB) CopyBasicFieldsFromXLSheet(xlsheet *models.XLSheet) {
	// insertion point for fields commit

	xlsheetDB.Name_Data.String = xlsheet.Name
	xlsheetDB.Name_Data.Valid = true

	xlsheetDB.MaxRow_Data.Int64 = int64(xlsheet.MaxRow)
	xlsheetDB.MaxRow_Data.Valid = true

	xlsheetDB.MaxCol_Data.Int64 = int64(xlsheet.MaxCol)
	xlsheetDB.MaxCol_Data.Valid = true

	xlsheetDB.NbRows_Data.Int64 = int64(xlsheet.NbRows)
	xlsheetDB.NbRows_Data.Valid = true
}

// CopyBasicFieldsFromXLSheet_WOP
func (xlsheetDB *XLSheetDB) CopyBasicFieldsFromXLSheet_WOP(xlsheet *models.XLSheet_WOP) {
	// insertion point for fields commit

	xlsheetDB.Name_Data.String = xlsheet.Name
	xlsheetDB.Name_Data.Valid = true

	xlsheetDB.MaxRow_Data.Int64 = int64(xlsheet.MaxRow)
	xlsheetDB.MaxRow_Data.Valid = true

	xlsheetDB.MaxCol_Data.Int64 = int64(xlsheet.MaxCol)
	xlsheetDB.MaxCol_Data.Valid = true

	xlsheetDB.NbRows_Data.Int64 = int64(xlsheet.NbRows)
	xlsheetDB.NbRows_Data.Valid = true
}

// CopyBasicFieldsFromXLSheetWOP
func (xlsheetDB *XLSheetDB) CopyBasicFieldsFromXLSheetWOP(xlsheet *XLSheetWOP) {
	// insertion point for fields commit

	xlsheetDB.Name_Data.String = xlsheet.Name
	xlsheetDB.Name_Data.Valid = true

	xlsheetDB.MaxRow_Data.Int64 = int64(xlsheet.MaxRow)
	xlsheetDB.MaxRow_Data.Valid = true

	xlsheetDB.MaxCol_Data.Int64 = int64(xlsheet.MaxCol)
	xlsheetDB.MaxCol_Data.Valid = true

	xlsheetDB.NbRows_Data.Int64 = int64(xlsheet.NbRows)
	xlsheetDB.NbRows_Data.Valid = true
}

// CopyBasicFieldsToXLSheet
func (xlsheetDB *XLSheetDB) CopyBasicFieldsToXLSheet(xlsheet *models.XLSheet) {
	// insertion point for checkout of basic fields (back repo to stage)
	xlsheet.Name = xlsheetDB.Name_Data.String
	xlsheet.MaxRow = int(xlsheetDB.MaxRow_Data.Int64)
	xlsheet.MaxCol = int(xlsheetDB.MaxCol_Data.Int64)
	xlsheet.NbRows = int(xlsheetDB.NbRows_Data.Int64)
}

// CopyBasicFieldsToXLSheet_WOP
func (xlsheetDB *XLSheetDB) CopyBasicFieldsToXLSheet_WOP(xlsheet *models.XLSheet_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	xlsheet.Name = xlsheetDB.Name_Data.String
	xlsheet.MaxRow = int(xlsheetDB.MaxRow_Data.Int64)
	xlsheet.MaxCol = int(xlsheetDB.MaxCol_Data.Int64)
	xlsheet.NbRows = int(xlsheetDB.NbRows_Data.Int64)
}

// CopyBasicFieldsToXLSheetWOP
func (xlsheetDB *XLSheetDB) CopyBasicFieldsToXLSheetWOP(xlsheet *XLSheetWOP) {
	xlsheet.ID = int(xlsheetDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	xlsheet.Name = xlsheetDB.Name_Data.String
	xlsheet.MaxRow = int(xlsheetDB.MaxRow_Data.Int64)
	xlsheet.MaxCol = int(xlsheetDB.MaxCol_Data.Int64)
	xlsheet.NbRows = int(xlsheetDB.NbRows_Data.Int64)
}

// Backup generates a json file from a slice of all XLSheetDB instances in the backrepo
func (backRepoXLSheet *BackRepoXLSheetStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "XLSheetDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XLSheetDB, 0)
	for _, xlsheetDB := range backRepoXLSheet.Map_XLSheetDBID_XLSheetDB {
		forBackup = append(forBackup, xlsheetDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json XLSheet ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json XLSheet file", err.Error())
	}
}

// Backup generates a json file from a slice of all XLSheetDB instances in the backrepo
func (backRepoXLSheet *BackRepoXLSheetStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XLSheetDB, 0)
	for _, xlsheetDB := range backRepoXLSheet.Map_XLSheetDBID_XLSheetDB {
		forBackup = append(forBackup, xlsheetDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("XLSheet")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&XLSheet_Fields, -1)
	for _, xlsheetDB := range forBackup {

		var xlsheetWOP XLSheetWOP
		xlsheetDB.CopyBasicFieldsToXLSheetWOP(&xlsheetWOP)

		row := sh.AddRow()
		row.WriteStruct(&xlsheetWOP, -1)
	}
}

// RestoreXL from the "XLSheet" sheet all XLSheetDB instances
func (backRepoXLSheet *BackRepoXLSheetStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoXLSheetid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["XLSheet"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoXLSheet.rowVisitorXLSheet)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoXLSheet *BackRepoXLSheetStruct) rowVisitorXLSheet(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var xlsheetWOP XLSheetWOP
		row.ReadStruct(&xlsheetWOP)

		// add the unmarshalled struct to the stage
		xlsheetDB := new(XLSheetDB)
		xlsheetDB.CopyBasicFieldsFromXLSheetWOP(&xlsheetWOP)

		xlsheetDB_ID_atBackupTime := xlsheetDB.ID
		xlsheetDB.ID = 0
		_, err := backRepoXLSheet.db.Create(xlsheetDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoXLSheet.Map_XLSheetDBID_XLSheetDB[xlsheetDB.ID] = xlsheetDB
		BackRepoXLSheetid_atBckpTime_newID[xlsheetDB_ID_atBackupTime] = xlsheetDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "XLSheetDB.json" in dirPath that stores an array
// of XLSheetDB and stores it in the database
// the map BackRepoXLSheetid_atBckpTime_newID is updated accordingly
func (backRepoXLSheet *BackRepoXLSheetStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoXLSheetid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "XLSheetDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json XLSheet file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*XLSheetDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_XLSheetDBID_XLSheetDB
	for _, xlsheetDB := range forRestore {

		xlsheetDB_ID_atBackupTime := xlsheetDB.ID
		xlsheetDB.ID = 0
		_, err := backRepoXLSheet.db.Create(xlsheetDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoXLSheet.Map_XLSheetDBID_XLSheetDB[xlsheetDB.ID] = xlsheetDB
		BackRepoXLSheetid_atBckpTime_newID[xlsheetDB_ID_atBackupTime] = xlsheetDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json XLSheet file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<XLSheet>id_atBckpTime_newID
// to compute new index
func (backRepoXLSheet *BackRepoXLSheetStruct) RestorePhaseTwo() {

	for _, xlsheetDB := range backRepoXLSheet.Map_XLSheetDBID_XLSheetDB {

		// next line of code is to avert unused variable compilation error
		_ = xlsheetDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoXLSheet.db.Model(xlsheetDB)
		_, err := db.Updates(*xlsheetDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoXLSheet.ResetReversePointers commits all staged instances of XLSheet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLSheet *BackRepoXLSheetStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, xlsheet := range backRepoXLSheet.Map_XLSheetDBID_XLSheetPtr {
		backRepoXLSheet.ResetReversePointersInstance(backRepo, idx, xlsheet)
	}

	return
}

func (backRepoXLSheet *BackRepoXLSheetStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, xlsheet *models.XLSheet) (Error error) {

	// fetch matching xlsheetDB
	if xlsheetDB, ok := backRepoXLSheet.Map_XLSheetDBID_XLSheetDB[idx]; ok {
		_ = xlsheetDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoXLSheetid_atBckpTime_newID map[uint]uint
