// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/load/go/db"
	"github.com/fullstack-lang/gong/lib/load/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FileToUpload_sql sql.NullBool
var dummy_FileToUpload_time time.Duration
var dummy_FileToUpload_sort sort.Float64Slice

// FileToUploadAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model filetouploadAPI
type FileToUploadAPI struct {
	gorm.Model

	models.FileToUpload_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FileToUploadPointersEncoding FileToUploadPointersEncoding
}

// FileToUploadPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FileToUploadPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FileToUploadDB describes a filetoupload in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model filetouploadDB
type FileToUploadDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field filetouploadDB.Name
	Name_Data sql.NullString

	// Declation for basic field filetouploadDB.Base64EncodedContent
	Base64EncodedContent_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FileToUploadPointersEncoding
}

// FileToUploadDBs arrays filetouploadDBs
// swagger:response filetouploadDBsResponse
type FileToUploadDBs []FileToUploadDB

// FileToUploadDBResponse provides response
// swagger:response filetouploadDBResponse
type FileToUploadDBResponse struct {
	FileToUploadDB
}

// FileToUploadWOP is a FileToUpload without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FileToUploadWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Base64EncodedContent string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FileToUpload_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Base64EncodedContent",
}

type BackRepoFileToUploadStruct struct {
	// stores FileToUploadDB according to their gorm ID
	Map_FileToUploadDBID_FileToUploadDB map[uint]*FileToUploadDB

	// stores FileToUploadDB ID according to FileToUpload address
	Map_FileToUploadPtr_FileToUploadDBID map[*models.FileToUpload]uint

	// stores FileToUpload according to their gorm ID
	Map_FileToUploadDBID_FileToUploadPtr map[uint]*models.FileToUpload

	db db.DBInterface

	stage *models.Stage
}

func (backRepoFileToUpload *BackRepoFileToUploadStruct) GetStage() (stage *models.Stage) {
	stage = backRepoFileToUpload.stage
	return
}

func (backRepoFileToUpload *BackRepoFileToUploadStruct) GetDB() db.DBInterface {
	return backRepoFileToUpload.db
}

// GetFileToUploadDBFromFileToUploadPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFileToUpload *BackRepoFileToUploadStruct) GetFileToUploadDBFromFileToUploadPtr(filetoupload *models.FileToUpload) (filetouploadDB *FileToUploadDB) {
	id := backRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID[filetoupload]
	filetouploadDB = backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB[id]
	return
}

// BackRepoFileToUpload.CommitPhaseOne commits all staged instances of FileToUpload to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var filetouploads []*models.FileToUpload
	for filetoupload := range stage.FileToUploads {
		filetouploads = append(filetouploads, filetoupload)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(filetouploads, func(i, j int) bool {
		return stage.FileToUploadMap_Staged_Order[filetouploads[i]] < stage.FileToUploadMap_Staged_Order[filetouploads[j]]
	})

	for _, filetoupload := range filetouploads {
		backRepoFileToUpload.CommitPhaseOneInstance(filetoupload)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, filetoupload := range backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr {
		if _, ok := stage.FileToUploads[filetoupload]; !ok {
			backRepoFileToUpload.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFileToUpload.CommitDeleteInstance commits deletion of FileToUpload to the BackRepo
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CommitDeleteInstance(id uint) (Error error) {

	filetoupload := backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr[id]

	// filetoupload is not staged anymore, remove filetouploadDB
	filetouploadDB := backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB[id]
	db, _ := backRepoFileToUpload.db.Unscoped()
	_, err := db.Delete(filetouploadDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID, filetoupload)
	delete(backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr, id)
	delete(backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB, id)

	return
}

// BackRepoFileToUpload.CommitPhaseOneInstance commits filetoupload staged instances of FileToUpload to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CommitPhaseOneInstance(filetoupload *models.FileToUpload) (Error error) {

	// check if the filetoupload is not commited yet
	if _, ok := backRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID[filetoupload]; ok {
		return
	}

	// initiate filetoupload
	var filetouploadDB FileToUploadDB
	filetouploadDB.CopyBasicFieldsFromFileToUpload(filetoupload)

	_, err := backRepoFileToUpload.db.Create(&filetouploadDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID[filetoupload] = filetouploadDB.ID
	backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr[filetouploadDB.ID] = filetoupload
	backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB[filetouploadDB.ID] = &filetouploadDB

	return
}

// BackRepoFileToUpload.CommitPhaseTwo commits all staged instances of FileToUpload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, filetoupload := range backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr {
		backRepoFileToUpload.CommitPhaseTwoInstance(backRepo, idx, filetoupload)
	}

	return
}

// BackRepoFileToUpload.CommitPhaseTwoInstance commits {{structname }} of models.FileToUpload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, filetoupload *models.FileToUpload) (Error error) {

	// fetch matching filetouploadDB
	if filetouploadDB, ok := backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB[idx]; ok {

		filetouploadDB.CopyBasicFieldsFromFileToUpload(filetoupload)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoFileToUpload.db.Save(filetouploadDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FileToUpload intance %s", filetoupload.Name))
		return err
	}

	return
}

// BackRepoFileToUpload.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CheckoutPhaseOne() (Error error) {

	filetouploadDBArray := make([]FileToUploadDB, 0)
	_, err := backRepoFileToUpload.db.Find(&filetouploadDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	filetouploadInstancesToBeRemovedFromTheStage := make(map[*models.FileToUpload]any)
	for key, value := range backRepoFileToUpload.stage.FileToUploads {
		filetouploadInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, filetouploadDB := range filetouploadDBArray {
		backRepoFileToUpload.CheckoutPhaseOneInstance(&filetouploadDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		filetoupload, ok := backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr[filetouploadDB.ID]
		if ok {
			delete(filetouploadInstancesToBeRemovedFromTheStage, filetoupload)
		}
	}

	// remove from stage and back repo's 3 maps all filetouploads that are not in the checkout
	for filetoupload := range filetouploadInstancesToBeRemovedFromTheStage {
		filetoupload.Unstage(backRepoFileToUpload.GetStage())

		// remove instance from the back repo 3 maps
		filetouploadID := backRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID[filetoupload]
		delete(backRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID, filetoupload)
		delete(backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB, filetouploadID)
		delete(backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr, filetouploadID)
	}

	return
}

// CheckoutPhaseOneInstance takes a filetouploadDB that has been found in the DB, updates the backRepo and stages the
// models version of the filetouploadDB
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CheckoutPhaseOneInstance(filetouploadDB *FileToUploadDB) (Error error) {

	filetoupload, ok := backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr[filetouploadDB.ID]
	if !ok {
		filetoupload = new(models.FileToUpload)

		backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr[filetouploadDB.ID] = filetoupload
		backRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID[filetoupload] = filetouploadDB.ID

		// append model store with the new element
		filetoupload.Name = filetouploadDB.Name_Data.String
		filetoupload.Stage(backRepoFileToUpload.GetStage())
	}
	filetouploadDB.CopyBasicFieldsToFileToUpload(filetoupload)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	filetoupload.Stage(backRepoFileToUpload.GetStage())

	// preserve pointer to filetouploadDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FileToUploadDBID_FileToUploadDB)[filetouploadDB hold variable pointers
	filetouploadDB_Data := *filetouploadDB
	preservedPtrToFileToUpload := &filetouploadDB_Data
	backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB[filetouploadDB.ID] = preservedPtrToFileToUpload

	return
}

// BackRepoFileToUpload.CheckoutPhaseTwo Checkouts all staged instances of FileToUpload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, filetouploadDB := range backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB {
		backRepoFileToUpload.CheckoutPhaseTwoInstance(backRepo, filetouploadDB)
	}
	return
}

// BackRepoFileToUpload.CheckoutPhaseTwoInstance Checkouts staged instances of FileToUpload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToUpload *BackRepoFileToUploadStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, filetouploadDB *FileToUploadDB) (Error error) {

	filetoupload := backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr[filetouploadDB.ID]

	filetouploadDB.DecodePointers(backRepo, filetoupload)

	return
}

func (filetouploadDB *FileToUploadDB) DecodePointers(backRepo *BackRepoStruct, filetoupload *models.FileToUpload) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFileToUpload allows commit of a single filetoupload (if already staged)
func (backRepo *BackRepoStruct) CommitFileToUpload(filetoupload *models.FileToUpload) {
	backRepo.BackRepoFileToUpload.CommitPhaseOneInstance(filetoupload)
	if id, ok := backRepo.BackRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID[filetoupload]; ok {
		backRepo.BackRepoFileToUpload.CommitPhaseTwoInstance(backRepo, id, filetoupload)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFileToUpload allows checkout of a single filetoupload (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFileToUpload(filetoupload *models.FileToUpload) {
	// check if the filetoupload is staged
	if _, ok := backRepo.BackRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID[filetoupload]; ok {

		if id, ok := backRepo.BackRepoFileToUpload.Map_FileToUploadPtr_FileToUploadDBID[filetoupload]; ok {
			var filetouploadDB FileToUploadDB
			filetouploadDB.ID = id

			if _, err := backRepo.BackRepoFileToUpload.db.First(&filetouploadDB, id); err != nil {
				log.Fatalln("CheckoutFileToUpload : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFileToUpload.CheckoutPhaseOneInstance(&filetouploadDB)
			backRepo.BackRepoFileToUpload.CheckoutPhaseTwoInstance(backRepo, &filetouploadDB)
		}
	}
}

// CopyBasicFieldsFromFileToUpload
func (filetouploadDB *FileToUploadDB) CopyBasicFieldsFromFileToUpload(filetoupload *models.FileToUpload) {
	// insertion point for fields commit

	filetouploadDB.Name_Data.String = filetoupload.Name
	filetouploadDB.Name_Data.Valid = true

	filetouploadDB.Base64EncodedContent_Data.String = filetoupload.Base64EncodedContent
	filetouploadDB.Base64EncodedContent_Data.Valid = true
}

// CopyBasicFieldsFromFileToUpload_WOP
func (filetouploadDB *FileToUploadDB) CopyBasicFieldsFromFileToUpload_WOP(filetoupload *models.FileToUpload_WOP) {
	// insertion point for fields commit

	filetouploadDB.Name_Data.String = filetoupload.Name
	filetouploadDB.Name_Data.Valid = true

	filetouploadDB.Base64EncodedContent_Data.String = filetoupload.Base64EncodedContent
	filetouploadDB.Base64EncodedContent_Data.Valid = true
}

// CopyBasicFieldsFromFileToUploadWOP
func (filetouploadDB *FileToUploadDB) CopyBasicFieldsFromFileToUploadWOP(filetoupload *FileToUploadWOP) {
	// insertion point for fields commit

	filetouploadDB.Name_Data.String = filetoupload.Name
	filetouploadDB.Name_Data.Valid = true

	filetouploadDB.Base64EncodedContent_Data.String = filetoupload.Base64EncodedContent
	filetouploadDB.Base64EncodedContent_Data.Valid = true
}

// CopyBasicFieldsToFileToUpload
func (filetouploadDB *FileToUploadDB) CopyBasicFieldsToFileToUpload(filetoupload *models.FileToUpload) {
	// insertion point for checkout of basic fields (back repo to stage)
	filetoupload.Name = filetouploadDB.Name_Data.String
	filetoupload.Base64EncodedContent = filetouploadDB.Base64EncodedContent_Data.String
}

// CopyBasicFieldsToFileToUpload_WOP
func (filetouploadDB *FileToUploadDB) CopyBasicFieldsToFileToUpload_WOP(filetoupload *models.FileToUpload_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	filetoupload.Name = filetouploadDB.Name_Data.String
	filetoupload.Base64EncodedContent = filetouploadDB.Base64EncodedContent_Data.String
}

// CopyBasicFieldsToFileToUploadWOP
func (filetouploadDB *FileToUploadDB) CopyBasicFieldsToFileToUploadWOP(filetoupload *FileToUploadWOP) {
	filetoupload.ID = int(filetouploadDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	filetoupload.Name = filetouploadDB.Name_Data.String
	filetoupload.Base64EncodedContent = filetouploadDB.Base64EncodedContent_Data.String
}

// Backup generates a json file from a slice of all FileToUploadDB instances in the backrepo
func (backRepoFileToUpload *BackRepoFileToUploadStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FileToUploadDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FileToUploadDB, 0)
	for _, filetouploadDB := range backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB {
		forBackup = append(forBackup, filetouploadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FileToUpload ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FileToUpload file", err.Error())
	}
}

// Backup generates a json file from a slice of all FileToUploadDB instances in the backrepo
func (backRepoFileToUpload *BackRepoFileToUploadStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FileToUploadDB, 0)
	for _, filetouploadDB := range backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB {
		forBackup = append(forBackup, filetouploadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FileToUpload")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FileToUpload_Fields, -1)
	for _, filetouploadDB := range forBackup {

		var filetouploadWOP FileToUploadWOP
		filetouploadDB.CopyBasicFieldsToFileToUploadWOP(&filetouploadWOP)

		row := sh.AddRow()
		row.WriteStruct(&filetouploadWOP, -1)
	}
}

// RestoreXL from the "FileToUpload" sheet all FileToUploadDB instances
func (backRepoFileToUpload *BackRepoFileToUploadStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFileToUploadid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FileToUpload"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFileToUpload.rowVisitorFileToUpload)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFileToUpload *BackRepoFileToUploadStruct) rowVisitorFileToUpload(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var filetouploadWOP FileToUploadWOP
		row.ReadStruct(&filetouploadWOP)

		// add the unmarshalled struct to the stage
		filetouploadDB := new(FileToUploadDB)
		filetouploadDB.CopyBasicFieldsFromFileToUploadWOP(&filetouploadWOP)

		filetouploadDB_ID_atBackupTime := filetouploadDB.ID
		filetouploadDB.ID = 0
		_, err := backRepoFileToUpload.db.Create(filetouploadDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB[filetouploadDB.ID] = filetouploadDB
		BackRepoFileToUploadid_atBckpTime_newID[filetouploadDB_ID_atBackupTime] = filetouploadDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FileToUploadDB.json" in dirPath that stores an array
// of FileToUploadDB and stores it in the database
// the map BackRepoFileToUploadid_atBckpTime_newID is updated accordingly
func (backRepoFileToUpload *BackRepoFileToUploadStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFileToUploadid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FileToUploadDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FileToUpload file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FileToUploadDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FileToUploadDBID_FileToUploadDB
	for _, filetouploadDB := range forRestore {

		filetouploadDB_ID_atBackupTime := filetouploadDB.ID
		filetouploadDB.ID = 0
		_, err := backRepoFileToUpload.db.Create(filetouploadDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB[filetouploadDB.ID] = filetouploadDB
		BackRepoFileToUploadid_atBckpTime_newID[filetouploadDB_ID_atBackupTime] = filetouploadDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FileToUpload file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FileToUpload>id_atBckpTime_newID
// to compute new index
func (backRepoFileToUpload *BackRepoFileToUploadStruct) RestorePhaseTwo() {

	for _, filetouploadDB := range backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB {

		// next line of code is to avert unused variable compilation error
		_ = filetouploadDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoFileToUpload.db.Model(filetouploadDB)
		_, err := db.Updates(*filetouploadDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoFileToUpload.ResetReversePointers commits all staged instances of FileToUpload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToUpload *BackRepoFileToUploadStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, filetoupload := range backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadPtr {
		backRepoFileToUpload.ResetReversePointersInstance(backRepo, idx, filetoupload)
	}

	return
}

func (backRepoFileToUpload *BackRepoFileToUploadStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, filetoupload *models.FileToUpload) (Error error) {

	// fetch matching filetouploadDB
	if filetouploadDB, ok := backRepoFileToUpload.Map_FileToUploadDBID_FileToUploadDB[idx]; ok {
		_ = filetouploadDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFileToUploadid_atBckpTime_newID map[uint]uint
