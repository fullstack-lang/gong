// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/load/go/db"
	"github.com/fullstack-lang/gong/lib/load/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FileToDownload_sql sql.NullBool
var dummy_FileToDownload_time time.Duration
var dummy_FileToDownload_sort sort.Float64Slice

// FileToDownloadAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model filetodownloadAPI
type FileToDownloadAPI struct {
	gorm.Model

	models.FileToDownload_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FileToDownloadPointersEncoding FileToDownloadPointersEncoding
}

// FileToDownloadPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FileToDownloadPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FileToDownloadDB describes a filetodownload in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model filetodownloadDB
type FileToDownloadDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field filetodownloadDB.Name
	Name_Data sql.NullString

	// Declation for basic field filetodownloadDB.Content
	Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FileToDownloadPointersEncoding
}

// FileToDownloadDBs arrays filetodownloadDBs
// swagger:response filetodownloadDBsResponse
type FileToDownloadDBs []FileToDownloadDB

// FileToDownloadDBResponse provides response
// swagger:response filetodownloadDBResponse
type FileToDownloadDBResponse struct {
	FileToDownloadDB
}

// FileToDownloadWOP is a FileToDownload without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FileToDownloadWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FileToDownload_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
}

type BackRepoFileToDownloadStruct struct {
	// stores FileToDownloadDB according to their gorm ID
	Map_FileToDownloadDBID_FileToDownloadDB map[uint]*FileToDownloadDB

	// stores FileToDownloadDB ID according to FileToDownload address
	Map_FileToDownloadPtr_FileToDownloadDBID map[*models.FileToDownload]uint

	// stores FileToDownload according to their gorm ID
	Map_FileToDownloadDBID_FileToDownloadPtr map[uint]*models.FileToDownload

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoFileToDownload *BackRepoFileToDownloadStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFileToDownload.stage
	return
}

func (backRepoFileToDownload *BackRepoFileToDownloadStruct) GetDB() db.DBInterface {
	return backRepoFileToDownload.db
}

// GetFileToDownloadDBFromFileToDownloadPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) GetFileToDownloadDBFromFileToDownloadPtr(filetodownload *models.FileToDownload) (filetodownloadDB *FileToDownloadDB) {
	id := backRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID[filetodownload]
	filetodownloadDB = backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB[id]
	return
}

// BackRepoFileToDownload.CommitPhaseOne commits all staged instances of FileToDownload to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var filetodownloads []*models.FileToDownload
	for filetodownload := range stage.FileToDownloads {
		filetodownloads = append(filetodownloads, filetodownload)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(filetodownloads, func(i, j int) bool {
		return stage.FileToDownloadMap_Staged_Order[filetodownloads[i]] < stage.FileToDownloadMap_Staged_Order[filetodownloads[j]]
	})

	for _, filetodownload := range filetodownloads {
		backRepoFileToDownload.CommitPhaseOneInstance(filetodownload)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, filetodownload := range backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr {
		if _, ok := stage.FileToDownloads[filetodownload]; !ok {
			backRepoFileToDownload.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFileToDownload.CommitDeleteInstance commits deletion of FileToDownload to the BackRepo
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CommitDeleteInstance(id uint) (Error error) {

	filetodownload := backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr[id]

	// filetodownload is not staged anymore, remove filetodownloadDB
	filetodownloadDB := backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB[id]
	db, _ := backRepoFileToDownload.db.Unscoped()
	_, err := db.Delete(filetodownloadDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID, filetodownload)
	delete(backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr, id)
	delete(backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB, id)

	return
}

// BackRepoFileToDownload.CommitPhaseOneInstance commits filetodownload staged instances of FileToDownload to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CommitPhaseOneInstance(filetodownload *models.FileToDownload) (Error error) {

	// check if the filetodownload is not commited yet
	if _, ok := backRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID[filetodownload]; ok {
		return
	}

	// initiate filetodownload
	var filetodownloadDB FileToDownloadDB
	filetodownloadDB.CopyBasicFieldsFromFileToDownload(filetodownload)

	_, err := backRepoFileToDownload.db.Create(&filetodownloadDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID[filetodownload] = filetodownloadDB.ID
	backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr[filetodownloadDB.ID] = filetodownload
	backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB[filetodownloadDB.ID] = &filetodownloadDB

	return
}

// BackRepoFileToDownload.CommitPhaseTwo commits all staged instances of FileToDownload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, filetodownload := range backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr {
		backRepoFileToDownload.CommitPhaseTwoInstance(backRepo, idx, filetodownload)
	}

	return
}

// BackRepoFileToDownload.CommitPhaseTwoInstance commits {{structname }} of models.FileToDownload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, filetodownload *models.FileToDownload) (Error error) {

	// fetch matching filetodownloadDB
	if filetodownloadDB, ok := backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB[idx]; ok {

		filetodownloadDB.CopyBasicFieldsFromFileToDownload(filetodownload)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoFileToDownload.db.Save(filetodownloadDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FileToDownload intance %s", filetodownload.Name))
		return err
	}

	return
}

// BackRepoFileToDownload.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CheckoutPhaseOne() (Error error) {

	filetodownloadDBArray := make([]FileToDownloadDB, 0)
	_, err := backRepoFileToDownload.db.Find(&filetodownloadDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	filetodownloadInstancesToBeRemovedFromTheStage := make(map[*models.FileToDownload]any)
	for key, value := range backRepoFileToDownload.stage.FileToDownloads {
		filetodownloadInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, filetodownloadDB := range filetodownloadDBArray {
		backRepoFileToDownload.CheckoutPhaseOneInstance(&filetodownloadDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		filetodownload, ok := backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr[filetodownloadDB.ID]
		if ok {
			delete(filetodownloadInstancesToBeRemovedFromTheStage, filetodownload)
		}
	}

	// remove from stage and back repo's 3 maps all filetodownloads that are not in the checkout
	for filetodownload := range filetodownloadInstancesToBeRemovedFromTheStage {
		filetodownload.Unstage(backRepoFileToDownload.GetStage())

		// remove instance from the back repo 3 maps
		filetodownloadID := backRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID[filetodownload]
		delete(backRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID, filetodownload)
		delete(backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB, filetodownloadID)
		delete(backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr, filetodownloadID)
	}

	return
}

// CheckoutPhaseOneInstance takes a filetodownloadDB that has been found in the DB, updates the backRepo and stages the
// models version of the filetodownloadDB
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CheckoutPhaseOneInstance(filetodownloadDB *FileToDownloadDB) (Error error) {

	filetodownload, ok := backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr[filetodownloadDB.ID]
	if !ok {
		filetodownload = new(models.FileToDownload)

		backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr[filetodownloadDB.ID] = filetodownload
		backRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID[filetodownload] = filetodownloadDB.ID

		// append model store with the new element
		filetodownload.Name = filetodownloadDB.Name_Data.String
		filetodownload.Stage(backRepoFileToDownload.GetStage())
	}
	filetodownloadDB.CopyBasicFieldsToFileToDownload(filetodownload)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	filetodownload.Stage(backRepoFileToDownload.GetStage())

	// preserve pointer to filetodownloadDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FileToDownloadDBID_FileToDownloadDB)[filetodownloadDB hold variable pointers
	filetodownloadDB_Data := *filetodownloadDB
	preservedPtrToFileToDownload := &filetodownloadDB_Data
	backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB[filetodownloadDB.ID] = preservedPtrToFileToDownload

	return
}

// BackRepoFileToDownload.CheckoutPhaseTwo Checkouts all staged instances of FileToDownload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, filetodownloadDB := range backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB {
		backRepoFileToDownload.CheckoutPhaseTwoInstance(backRepo, filetodownloadDB)
	}
	return
}

// BackRepoFileToDownload.CheckoutPhaseTwoInstance Checkouts staged instances of FileToDownload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, filetodownloadDB *FileToDownloadDB) (Error error) {

	filetodownload := backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr[filetodownloadDB.ID]

	filetodownloadDB.DecodePointers(backRepo, filetodownload)

	return
}

func (filetodownloadDB *FileToDownloadDB) DecodePointers(backRepo *BackRepoStruct, filetodownload *models.FileToDownload) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFileToDownload allows commit of a single filetodownload (if already staged)
func (backRepo *BackRepoStruct) CommitFileToDownload(filetodownload *models.FileToDownload) {
	backRepo.BackRepoFileToDownload.CommitPhaseOneInstance(filetodownload)
	if id, ok := backRepo.BackRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID[filetodownload]; ok {
		backRepo.BackRepoFileToDownload.CommitPhaseTwoInstance(backRepo, id, filetodownload)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFileToDownload allows checkout of a single filetodownload (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFileToDownload(filetodownload *models.FileToDownload) {
	// check if the filetodownload is staged
	if _, ok := backRepo.BackRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID[filetodownload]; ok {

		if id, ok := backRepo.BackRepoFileToDownload.Map_FileToDownloadPtr_FileToDownloadDBID[filetodownload]; ok {
			var filetodownloadDB FileToDownloadDB
			filetodownloadDB.ID = id

			if _, err := backRepo.BackRepoFileToDownload.db.First(&filetodownloadDB, id); err != nil {
				log.Fatalln("CheckoutFileToDownload : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFileToDownload.CheckoutPhaseOneInstance(&filetodownloadDB)
			backRepo.BackRepoFileToDownload.CheckoutPhaseTwoInstance(backRepo, &filetodownloadDB)
		}
	}
}

// CopyBasicFieldsFromFileToDownload
func (filetodownloadDB *FileToDownloadDB) CopyBasicFieldsFromFileToDownload(filetodownload *models.FileToDownload) {
	// insertion point for fields commit

	filetodownloadDB.Name_Data.String = filetodownload.Name
	filetodownloadDB.Name_Data.Valid = true

	filetodownloadDB.Content_Data.String = filetodownload.Content
	filetodownloadDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromFileToDownload_WOP
func (filetodownloadDB *FileToDownloadDB) CopyBasicFieldsFromFileToDownload_WOP(filetodownload *models.FileToDownload_WOP) {
	// insertion point for fields commit

	filetodownloadDB.Name_Data.String = filetodownload.Name
	filetodownloadDB.Name_Data.Valid = true

	filetodownloadDB.Content_Data.String = filetodownload.Content
	filetodownloadDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromFileToDownloadWOP
func (filetodownloadDB *FileToDownloadDB) CopyBasicFieldsFromFileToDownloadWOP(filetodownload *FileToDownloadWOP) {
	// insertion point for fields commit

	filetodownloadDB.Name_Data.String = filetodownload.Name
	filetodownloadDB.Name_Data.Valid = true

	filetodownloadDB.Content_Data.String = filetodownload.Content
	filetodownloadDB.Content_Data.Valid = true
}

// CopyBasicFieldsToFileToDownload
func (filetodownloadDB *FileToDownloadDB) CopyBasicFieldsToFileToDownload(filetodownload *models.FileToDownload) {
	// insertion point for checkout of basic fields (back repo to stage)
	filetodownload.Name = filetodownloadDB.Name_Data.String
	filetodownload.Content = filetodownloadDB.Content_Data.String
}

// CopyBasicFieldsToFileToDownload_WOP
func (filetodownloadDB *FileToDownloadDB) CopyBasicFieldsToFileToDownload_WOP(filetodownload *models.FileToDownload_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	filetodownload.Name = filetodownloadDB.Name_Data.String
	filetodownload.Content = filetodownloadDB.Content_Data.String
}

// CopyBasicFieldsToFileToDownloadWOP
func (filetodownloadDB *FileToDownloadDB) CopyBasicFieldsToFileToDownloadWOP(filetodownload *FileToDownloadWOP) {
	filetodownload.ID = int(filetodownloadDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	filetodownload.Name = filetodownloadDB.Name_Data.String
	filetodownload.Content = filetodownloadDB.Content_Data.String
}

// Backup generates a json file from a slice of all FileToDownloadDB instances in the backrepo
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FileToDownloadDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FileToDownloadDB, 0)
	for _, filetodownloadDB := range backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB {
		forBackup = append(forBackup, filetodownloadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FileToDownload ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FileToDownload file", err.Error())
	}
}

// Backup generates a json file from a slice of all FileToDownloadDB instances in the backrepo
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FileToDownloadDB, 0)
	for _, filetodownloadDB := range backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB {
		forBackup = append(forBackup, filetodownloadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FileToDownload")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FileToDownload_Fields, -1)
	for _, filetodownloadDB := range forBackup {

		var filetodownloadWOP FileToDownloadWOP
		filetodownloadDB.CopyBasicFieldsToFileToDownloadWOP(&filetodownloadWOP)

		row := sh.AddRow()
		row.WriteStruct(&filetodownloadWOP, -1)
	}
}

// RestoreXL from the "FileToDownload" sheet all FileToDownloadDB instances
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFileToDownloadid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FileToDownload"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFileToDownload.rowVisitorFileToDownload)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFileToDownload *BackRepoFileToDownloadStruct) rowVisitorFileToDownload(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var filetodownloadWOP FileToDownloadWOP
		row.ReadStruct(&filetodownloadWOP)

		// add the unmarshalled struct to the stage
		filetodownloadDB := new(FileToDownloadDB)
		filetodownloadDB.CopyBasicFieldsFromFileToDownloadWOP(&filetodownloadWOP)

		filetodownloadDB_ID_atBackupTime := filetodownloadDB.ID
		filetodownloadDB.ID = 0
		_, err := backRepoFileToDownload.db.Create(filetodownloadDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB[filetodownloadDB.ID] = filetodownloadDB
		BackRepoFileToDownloadid_atBckpTime_newID[filetodownloadDB_ID_atBackupTime] = filetodownloadDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FileToDownloadDB.json" in dirPath that stores an array
// of FileToDownloadDB and stores it in the database
// the map BackRepoFileToDownloadid_atBckpTime_newID is updated accordingly
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFileToDownloadid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FileToDownloadDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FileToDownload file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FileToDownloadDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FileToDownloadDBID_FileToDownloadDB
	for _, filetodownloadDB := range forRestore {

		filetodownloadDB_ID_atBackupTime := filetodownloadDB.ID
		filetodownloadDB.ID = 0
		_, err := backRepoFileToDownload.db.Create(filetodownloadDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB[filetodownloadDB.ID] = filetodownloadDB
		BackRepoFileToDownloadid_atBckpTime_newID[filetodownloadDB_ID_atBackupTime] = filetodownloadDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FileToDownload file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FileToDownload>id_atBckpTime_newID
// to compute new index
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) RestorePhaseTwo() {

	for _, filetodownloadDB := range backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB {

		// next line of code is to avert unused variable compilation error
		_ = filetodownloadDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoFileToDownload.db.Model(filetodownloadDB)
		_, err := db.Updates(*filetodownloadDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoFileToDownload.ResetReversePointers commits all staged instances of FileToDownload to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFileToDownload *BackRepoFileToDownloadStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, filetodownload := range backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadPtr {
		backRepoFileToDownload.ResetReversePointersInstance(backRepo, idx, filetodownload)
	}

	return
}

func (backRepoFileToDownload *BackRepoFileToDownloadStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, filetodownload *models.FileToDownload) (Error error) {

	// fetch matching filetodownloadDB
	if filetodownloadDB, ok := backRepoFileToDownload.Map_FileToDownloadDBID_FileToDownloadDB[idx]; ok {
		_ = filetodownloadDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFileToDownloadid_atBckpTime_newID map[uint]uint
