// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/gantt/go/db"
	"github.com/fullstack-lang/gong/lib/gantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_LaneUse_sql sql.NullBool
var dummy_LaneUse_time time.Duration
var dummy_LaneUse_sort sort.Float64Slice

// LaneUseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model laneuseAPI
type LaneUseAPI struct {
	gorm.Model

	models.LaneUse_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LaneUsePointersEncoding LaneUsePointersEncoding
}

// LaneUsePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LaneUsePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Lane is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	LaneID sql.NullInt64
}

// LaneUseDB describes a laneuse in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model laneuseDB
type LaneUseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field laneuseDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LaneUsePointersEncoding
}

// LaneUseDBs arrays laneuseDBs
// swagger:response laneuseDBsResponse
type LaneUseDBs []LaneUseDB

// LaneUseDBResponse provides response
// swagger:response laneuseDBResponse
type LaneUseDBResponse struct {
	LaneUseDB
}

// LaneUseWOP is a LaneUse without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LaneUseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var LaneUse_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoLaneUseStruct struct {
	// stores LaneUseDB according to their gorm ID
	Map_LaneUseDBID_LaneUseDB map[uint]*LaneUseDB

	// stores LaneUseDB ID according to LaneUse address
	Map_LaneUsePtr_LaneUseDBID map[*models.LaneUse]uint

	// stores LaneUse according to their gorm ID
	Map_LaneUseDBID_LaneUsePtr map[uint]*models.LaneUse

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoLaneUse *BackRepoLaneUseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLaneUse.stage
	return
}

func (backRepoLaneUse *BackRepoLaneUseStruct) GetDB() db.DBInterface {
	return backRepoLaneUse.db
}

// GetLaneUseDBFromLaneUsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoLaneUse *BackRepoLaneUseStruct) GetLaneUseDBFromLaneUsePtr(laneuse *models.LaneUse) (laneuseDB *LaneUseDB) {
	id := backRepoLaneUse.Map_LaneUsePtr_LaneUseDBID[laneuse]
	laneuseDB = backRepoLaneUse.Map_LaneUseDBID_LaneUseDB[id]
	return
}

// BackRepoLaneUse.CommitPhaseOne commits all staged instances of LaneUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLaneUse *BackRepoLaneUseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var laneuses []*models.LaneUse
	for laneuse := range stage.LaneUses {
		laneuses = append(laneuses, laneuse)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(laneuses, func(i, j int) bool {
		return stage.Map_Staged_Order[laneuses[i]] < stage.Map_Staged_Order[laneuses[j]]
	})

	for _, laneuse := range laneuses {
		backRepoLaneUse.CommitPhaseOneInstance(laneuse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, laneuse := range backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr {
		if _, ok := stage.LaneUses[laneuse]; !ok {
			backRepoLaneUse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLaneUse.CommitDeleteInstance commits deletion of LaneUse to the BackRepo
func (backRepoLaneUse *BackRepoLaneUseStruct) CommitDeleteInstance(id uint) (Error error) {

	laneuse := backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr[id]

	// laneuse is not staged anymore, remove laneuseDB
	laneuseDB := backRepoLaneUse.Map_LaneUseDBID_LaneUseDB[id]
	db, _ := backRepoLaneUse.db.Unscoped()
	_, err := db.Delete(laneuseDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoLaneUse.Map_LaneUsePtr_LaneUseDBID, laneuse)
	delete(backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr, id)
	delete(backRepoLaneUse.Map_LaneUseDBID_LaneUseDB, id)

	return
}

// BackRepoLaneUse.CommitPhaseOneInstance commits laneuse staged instances of LaneUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLaneUse *BackRepoLaneUseStruct) CommitPhaseOneInstance(laneuse *models.LaneUse) (Error error) {

	// check if the laneuse is not commited yet
	if _, ok := backRepoLaneUse.Map_LaneUsePtr_LaneUseDBID[laneuse]; ok {
		return
	}

	// initiate laneuse
	var laneuseDB LaneUseDB
	laneuseDB.CopyBasicFieldsFromLaneUse(laneuse)

	_, err := backRepoLaneUse.db.Create(&laneuseDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoLaneUse.Map_LaneUsePtr_LaneUseDBID[laneuse] = laneuseDB.ID
	backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr[laneuseDB.ID] = laneuse
	backRepoLaneUse.Map_LaneUseDBID_LaneUseDB[laneuseDB.ID] = &laneuseDB

	return
}

// BackRepoLaneUse.CommitPhaseTwo commits all staged instances of LaneUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLaneUse *BackRepoLaneUseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, laneuse := range backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr {
		backRepoLaneUse.CommitPhaseTwoInstance(backRepo, idx, laneuse)
	}

	return
}

// BackRepoLaneUse.CommitPhaseTwoInstance commits {{structname }} of models.LaneUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLaneUse *BackRepoLaneUseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, laneuse *models.LaneUse) (Error error) {

	// fetch matching laneuseDB
	if laneuseDB, ok := backRepoLaneUse.Map_LaneUseDBID_LaneUseDB[idx]; ok {

		laneuseDB.CopyBasicFieldsFromLaneUse(laneuse)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value laneuse.Lane translates to updating the laneuse.LaneID
		laneuseDB.LaneID.Valid = true // allow for a 0 value (nil association)
		if laneuse.Lane != nil {
			if LaneId, ok := backRepo.BackRepoLane.Map_LanePtr_LaneDBID[laneuse.Lane]; ok {
				laneuseDB.LaneID.Int64 = int64(LaneId)
				laneuseDB.LaneID.Valid = true
			}
		} else {
			laneuseDB.LaneID.Int64 = 0
			laneuseDB.LaneID.Valid = true
		}

		_, err := backRepoLaneUse.db.Save(laneuseDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown LaneUse intance %s", laneuse.Name))
		return err
	}

	return
}

// BackRepoLaneUse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLaneUse *BackRepoLaneUseStruct) CheckoutPhaseOne() (Error error) {

	laneuseDBArray := make([]LaneUseDB, 0)
	_, err := backRepoLaneUse.db.Find(&laneuseDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	laneuseInstancesToBeRemovedFromTheStage := make(map[*models.LaneUse]any)
	for key, value := range backRepoLaneUse.stage.LaneUses {
		laneuseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, laneuseDB := range laneuseDBArray {
		backRepoLaneUse.CheckoutPhaseOneInstance(&laneuseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		laneuse, ok := backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr[laneuseDB.ID]
		if ok {
			delete(laneuseInstancesToBeRemovedFromTheStage, laneuse)
		}
	}

	// remove from stage and back repo's 3 maps all laneuses that are not in the checkout
	for laneuse := range laneuseInstancesToBeRemovedFromTheStage {
		laneuse.Unstage(backRepoLaneUse.GetStage())

		// remove instance from the back repo 3 maps
		laneuseID := backRepoLaneUse.Map_LaneUsePtr_LaneUseDBID[laneuse]
		delete(backRepoLaneUse.Map_LaneUsePtr_LaneUseDBID, laneuse)
		delete(backRepoLaneUse.Map_LaneUseDBID_LaneUseDB, laneuseID)
		delete(backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr, laneuseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a laneuseDB that has been found in the DB, updates the backRepo and stages the
// models version of the laneuseDB
func (backRepoLaneUse *BackRepoLaneUseStruct) CheckoutPhaseOneInstance(laneuseDB *LaneUseDB) (Error error) {

	laneuse, ok := backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr[laneuseDB.ID]
	if !ok {
		laneuse = new(models.LaneUse)

		backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr[laneuseDB.ID] = laneuse
		backRepoLaneUse.Map_LaneUsePtr_LaneUseDBID[laneuse] = laneuseDB.ID

		// append model store with the new element
		laneuse.Name = laneuseDB.Name_Data.String
		laneuse.Stage(backRepoLaneUse.GetStage())
	}
	laneuseDB.CopyBasicFieldsToLaneUse(laneuse)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	laneuse.Stage(backRepoLaneUse.GetStage())

	// preserve pointer to laneuseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LaneUseDBID_LaneUseDB)[laneuseDB hold variable pointers
	laneuseDB_Data := *laneuseDB
	preservedPtrToLaneUse := &laneuseDB_Data
	backRepoLaneUse.Map_LaneUseDBID_LaneUseDB[laneuseDB.ID] = preservedPtrToLaneUse

	return
}

// BackRepoLaneUse.CheckoutPhaseTwo Checkouts all staged instances of LaneUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLaneUse *BackRepoLaneUseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, laneuseDB := range backRepoLaneUse.Map_LaneUseDBID_LaneUseDB {
		backRepoLaneUse.CheckoutPhaseTwoInstance(backRepo, laneuseDB)
	}
	return
}

// BackRepoLaneUse.CheckoutPhaseTwoInstance Checkouts staged instances of LaneUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLaneUse *BackRepoLaneUseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, laneuseDB *LaneUseDB) (Error error) {

	laneuse := backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr[laneuseDB.ID]

	laneuseDB.DecodePointers(backRepo, laneuse)

	return
}

func (laneuseDB *LaneUseDB) DecodePointers(backRepo *BackRepoStruct, laneuse *models.LaneUse) {

	// insertion point for checkout of pointer encoding
	// Lane field	
	{
		id := laneuseDB.LaneID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoLane.Map_LaneDBID_LanePtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: laneuse.Lane, unknown pointer id", id)
				laneuse.Lane = nil
			} else {
				// updates only if field has changed
				if laneuse.Lane == nil || laneuse.Lane != tmp {
					laneuse.Lane = tmp
				}
			}
		} else {
			laneuse.Lane = nil
		}
	}
	
	return
}

// CommitLaneUse allows commit of a single laneuse (if already staged)
func (backRepo *BackRepoStruct) CommitLaneUse(laneuse *models.LaneUse) {
	backRepo.BackRepoLaneUse.CommitPhaseOneInstance(laneuse)
	if id, ok := backRepo.BackRepoLaneUse.Map_LaneUsePtr_LaneUseDBID[laneuse]; ok {
		backRepo.BackRepoLaneUse.CommitPhaseTwoInstance(backRepo, id, laneuse)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLaneUse allows checkout of a single laneuse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLaneUse(laneuse *models.LaneUse) {
	// check if the laneuse is staged
	if _, ok := backRepo.BackRepoLaneUse.Map_LaneUsePtr_LaneUseDBID[laneuse]; ok {

		if id, ok := backRepo.BackRepoLaneUse.Map_LaneUsePtr_LaneUseDBID[laneuse]; ok {
			var laneuseDB LaneUseDB
			laneuseDB.ID = id

			if _, err := backRepo.BackRepoLaneUse.db.First(&laneuseDB, id); err != nil {
				log.Fatalln("CheckoutLaneUse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLaneUse.CheckoutPhaseOneInstance(&laneuseDB)
			backRepo.BackRepoLaneUse.CheckoutPhaseTwoInstance(backRepo, &laneuseDB)
		}
	}
}

// CopyBasicFieldsFromLaneUse
func (laneuseDB *LaneUseDB) CopyBasicFieldsFromLaneUse(laneuse *models.LaneUse) {
	// insertion point for fields commit

	laneuseDB.Name_Data.String = laneuse.Name
	laneuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLaneUse_WOP
func (laneuseDB *LaneUseDB) CopyBasicFieldsFromLaneUse_WOP(laneuse *models.LaneUse_WOP) {
	// insertion point for fields commit

	laneuseDB.Name_Data.String = laneuse.Name
	laneuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLaneUseWOP
func (laneuseDB *LaneUseDB) CopyBasicFieldsFromLaneUseWOP(laneuse *LaneUseWOP) {
	// insertion point for fields commit

	laneuseDB.Name_Data.String = laneuse.Name
	laneuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToLaneUse
func (laneuseDB *LaneUseDB) CopyBasicFieldsToLaneUse(laneuse *models.LaneUse) {
	// insertion point for checkout of basic fields (back repo to stage)
	laneuse.Name = laneuseDB.Name_Data.String
}

// CopyBasicFieldsToLaneUse_WOP
func (laneuseDB *LaneUseDB) CopyBasicFieldsToLaneUse_WOP(laneuse *models.LaneUse_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	laneuse.Name = laneuseDB.Name_Data.String
}

// CopyBasicFieldsToLaneUseWOP
func (laneuseDB *LaneUseDB) CopyBasicFieldsToLaneUseWOP(laneuse *LaneUseWOP) {
	laneuse.ID = int(laneuseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	laneuse.Name = laneuseDB.Name_Data.String
}

// Backup generates a json file from a slice of all LaneUseDB instances in the backrepo
func (backRepoLaneUse *BackRepoLaneUseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LaneUseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LaneUseDB, 0)
	for _, laneuseDB := range backRepoLaneUse.Map_LaneUseDBID_LaneUseDB {
		forBackup = append(forBackup, laneuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json LaneUse ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json LaneUse file", err.Error())
	}
}

// Backup generates a json file from a slice of all LaneUseDB instances in the backrepo
func (backRepoLaneUse *BackRepoLaneUseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LaneUseDB, 0)
	for _, laneuseDB := range backRepoLaneUse.Map_LaneUseDBID_LaneUseDB {
		forBackup = append(forBackup, laneuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("LaneUse")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&LaneUse_Fields, -1)
	for _, laneuseDB := range forBackup {

		var laneuseWOP LaneUseWOP
		laneuseDB.CopyBasicFieldsToLaneUseWOP(&laneuseWOP)

		row := sh.AddRow()
		row.WriteStruct(&laneuseWOP, -1)
	}
}

// RestoreXL from the "LaneUse" sheet all LaneUseDB instances
func (backRepoLaneUse *BackRepoLaneUseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLaneUseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["LaneUse"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLaneUse.rowVisitorLaneUse)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLaneUse *BackRepoLaneUseStruct) rowVisitorLaneUse(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var laneuseWOP LaneUseWOP
		row.ReadStruct(&laneuseWOP)

		// add the unmarshalled struct to the stage
		laneuseDB := new(LaneUseDB)
		laneuseDB.CopyBasicFieldsFromLaneUseWOP(&laneuseWOP)

		laneuseDB_ID_atBackupTime := laneuseDB.ID
		laneuseDB.ID = 0
		_, err := backRepoLaneUse.db.Create(laneuseDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLaneUse.Map_LaneUseDBID_LaneUseDB[laneuseDB.ID] = laneuseDB
		BackRepoLaneUseid_atBckpTime_newID[laneuseDB_ID_atBackupTime] = laneuseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LaneUseDB.json" in dirPath that stores an array
// of LaneUseDB and stores it in the database
// the map BackRepoLaneUseid_atBckpTime_newID is updated accordingly
func (backRepoLaneUse *BackRepoLaneUseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLaneUseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LaneUseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json LaneUse file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LaneUseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LaneUseDBID_LaneUseDB
	for _, laneuseDB := range forRestore {

		laneuseDB_ID_atBackupTime := laneuseDB.ID
		laneuseDB.ID = 0
		_, err := backRepoLaneUse.db.Create(laneuseDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLaneUse.Map_LaneUseDBID_LaneUseDB[laneuseDB.ID] = laneuseDB
		BackRepoLaneUseid_atBckpTime_newID[laneuseDB_ID_atBackupTime] = laneuseDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json LaneUse file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<LaneUse>id_atBckpTime_newID
// to compute new index
func (backRepoLaneUse *BackRepoLaneUseStruct) RestorePhaseTwo() {

	for _, laneuseDB := range backRepoLaneUse.Map_LaneUseDBID_LaneUseDB {

		// next line of code is to avert unused variable compilation error
		_ = laneuseDB

		// insertion point for reindexing pointers encoding
		// reindexing Lane field
		if laneuseDB.LaneID.Int64 != 0 {
			laneuseDB.LaneID.Int64 = int64(BackRepoLaneid_atBckpTime_newID[uint(laneuseDB.LaneID.Int64)])
			laneuseDB.LaneID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoLaneUse.db.Model(laneuseDB)
		_, err := db.Updates(*laneuseDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoLaneUse.ResetReversePointers commits all staged instances of LaneUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLaneUse *BackRepoLaneUseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, laneuse := range backRepoLaneUse.Map_LaneUseDBID_LaneUsePtr {
		backRepoLaneUse.ResetReversePointersInstance(backRepo, idx, laneuse)
	}

	return
}

func (backRepoLaneUse *BackRepoLaneUseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, laneuse *models.LaneUse) (Error error) {

	// fetch matching laneuseDB
	if laneuseDB, ok := backRepoLaneUse.Map_LaneUseDBID_LaneUseDB[idx]; ok {
		_ = laneuseDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLaneUseid_atBckpTime_newID map[uint]uint
