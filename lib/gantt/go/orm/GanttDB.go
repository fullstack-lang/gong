// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/gantt/go/db"
	"github.com/fullstack-lang/gong/lib/gantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Gantt_sql sql.NullBool
var dummy_Gantt_time time.Duration
var dummy_Gantt_sort sort.Float64Slice

// GanttAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model ganttAPI
type GanttAPI struct {
	gorm.Model

	models.Gantt_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GanttPointersEncoding GanttPointersEncoding
}

// GanttPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GanttPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Lanes is a slice of pointers to another Struct (optional or 0..1)
	Lanes IntSlice `gorm:"type:TEXT"`

	// field Milestones is a slice of pointers to another Struct (optional or 0..1)
	Milestones IntSlice `gorm:"type:TEXT"`

	// field Groups is a slice of pointers to another Struct (optional or 0..1)
	Groups IntSlice `gorm:"type:TEXT"`

	// field Arrows is a slice of pointers to another Struct (optional or 0..1)
	Arrows IntSlice `gorm:"type:TEXT"`
}

// GanttDB describes a gantt in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model ganttDB
type GanttDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field ganttDB.Name
	Name_Data sql.NullString

	// Declation for basic field ganttDB.ComputedStart
	ComputedStart_Data sql.NullTime

	// Declation for basic field ganttDB.ComputedEnd
	ComputedEnd_Data sql.NullTime

	// Declation for basic field ganttDB.ComputedDuration
	ComputedDuration_Data sql.NullInt64

	// Declation for basic field ganttDB.UseManualStartAndEndDates
	// provide the sql storage for the boolan
	UseManualStartAndEndDates_Data sql.NullBool

	// Declation for basic field ganttDB.ManualStart
	ManualStart_Data sql.NullTime

	// Declation for basic field ganttDB.ManualEnd
	ManualEnd_Data sql.NullTime

	// Declation for basic field ganttDB.LaneHeight
	LaneHeight_Data sql.NullFloat64

	// Declation for basic field ganttDB.RatioBarToLaneHeight
	RatioBarToLaneHeight_Data sql.NullFloat64

	// Declation for basic field ganttDB.YTopMargin
	YTopMargin_Data sql.NullFloat64

	// Declation for basic field ganttDB.XLeftText
	XLeftText_Data sql.NullFloat64

	// Declation for basic field ganttDB.TextHeight
	TextHeight_Data sql.NullFloat64

	// Declation for basic field ganttDB.XLeftLanes
	XLeftLanes_Data sql.NullFloat64

	// Declation for basic field ganttDB.XRightMargin
	XRightMargin_Data sql.NullFloat64

	// Declation for basic field ganttDB.ArrowLengthToTheRightOfStartBar
	ArrowLengthToTheRightOfStartBar_Data sql.NullFloat64

	// Declation for basic field ganttDB.ArrowTipLenght
	ArrowTipLenght_Data sql.NullFloat64

	// Declation for basic field ganttDB.TimeLine_Color
	TimeLine_Color_Data sql.NullString

	// Declation for basic field ganttDB.TimeLine_FillOpacity
	TimeLine_FillOpacity_Data sql.NullFloat64

	// Declation for basic field ganttDB.TimeLine_Stroke
	TimeLine_Stroke_Data sql.NullString

	// Declation for basic field ganttDB.TimeLine_StrokeWidth
	TimeLine_StrokeWidth_Data sql.NullFloat64

	// Declation for basic field ganttDB.Group_Stroke
	Group_Stroke_Data sql.NullString

	// Declation for basic field ganttDB.Group_StrokeWidth
	Group_StrokeWidth_Data sql.NullFloat64

	// Declation for basic field ganttDB.Group_StrokeDashArray
	Group_StrokeDashArray_Data sql.NullString

	// Declation for basic field ganttDB.DateYOffset
	DateYOffset_Data sql.NullFloat64

	// Declation for basic field ganttDB.AlignOnStartEndOnYearStart
	// provide the sql storage for the boolan
	AlignOnStartEndOnYearStart_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GanttPointersEncoding
}

// GanttDBs arrays ganttDBs
// swagger:response ganttDBsResponse
type GanttDBs []GanttDB

// GanttDBResponse provides response
// swagger:response ganttDBResponse
type GanttDBResponse struct {
	GanttDB
}

// GanttWOP is a Gantt without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GanttWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ComputedStart time.Time `xlsx:"2"`

	ComputedEnd time.Time `xlsx:"3"`

	ComputedDuration time.Duration `xlsx:"4"`

	UseManualStartAndEndDates bool `xlsx:"5"`

	ManualStart time.Time `xlsx:"6"`

	ManualEnd time.Time `xlsx:"7"`

	LaneHeight float64 `xlsx:"8"`

	RatioBarToLaneHeight float64 `xlsx:"9"`

	YTopMargin float64 `xlsx:"10"`

	XLeftText float64 `xlsx:"11"`

	TextHeight float64 `xlsx:"12"`

	XLeftLanes float64 `xlsx:"13"`

	XRightMargin float64 `xlsx:"14"`

	ArrowLengthToTheRightOfStartBar float64 `xlsx:"15"`

	ArrowTipLenght float64 `xlsx:"16"`

	TimeLine_Color string `xlsx:"17"`

	TimeLine_FillOpacity float64 `xlsx:"18"`

	TimeLine_Stroke string `xlsx:"19"`

	TimeLine_StrokeWidth float64 `xlsx:"20"`

	Group_Stroke string `xlsx:"21"`

	Group_StrokeWidth float64 `xlsx:"22"`

	Group_StrokeDashArray string `xlsx:"23"`

	DateYOffset float64 `xlsx:"24"`

	AlignOnStartEndOnYearStart bool `xlsx:"25"`
	// insertion for WOP pointer fields
}

var Gantt_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ComputedStart",
	"ComputedEnd",
	"ComputedDuration",
	"UseManualStartAndEndDates",
	"ManualStart",
	"ManualEnd",
	"LaneHeight",
	"RatioBarToLaneHeight",
	"YTopMargin",
	"XLeftText",
	"TextHeight",
	"XLeftLanes",
	"XRightMargin",
	"ArrowLengthToTheRightOfStartBar",
	"ArrowTipLenght",
	"TimeLine_Color",
	"TimeLine_FillOpacity",
	"TimeLine_Stroke",
	"TimeLine_StrokeWidth",
	"Group_Stroke",
	"Group_StrokeWidth",
	"Group_StrokeDashArray",
	"DateYOffset",
	"AlignOnStartEndOnYearStart",
}

type BackRepoGanttStruct struct {
	// stores GanttDB according to their gorm ID
	Map_GanttDBID_GanttDB map[uint]*GanttDB

	// stores GanttDB ID according to Gantt address
	Map_GanttPtr_GanttDBID map[*models.Gantt]uint

	// stores Gantt according to their gorm ID
	Map_GanttDBID_GanttPtr map[uint]*models.Gantt

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoGantt *BackRepoGanttStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGantt.stage
	return
}

func (backRepoGantt *BackRepoGanttStruct) GetDB() db.DBInterface {
	return backRepoGantt.db
}

// GetGanttDBFromGanttPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGantt *BackRepoGanttStruct) GetGanttDBFromGanttPtr(gantt *models.Gantt) (ganttDB *GanttDB) {
	id := backRepoGantt.Map_GanttPtr_GanttDBID[gantt]
	ganttDB = backRepoGantt.Map_GanttDBID_GanttDB[id]
	return
}

// BackRepoGantt.CommitPhaseOne commits all staged instances of Gantt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var gantts []*models.Gantt
	for gantt := range stage.Gantts {
		gantts = append(gantts, gantt)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(gantts, func(i, j int) bool {
		return stage.GanttMap_Staged_Order[gantts[i]] < stage.GanttMap_Staged_Order[gantts[j]]
	})

	for _, gantt := range gantts {
		backRepoGantt.CommitPhaseOneInstance(gantt)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gantt := range backRepoGantt.Map_GanttDBID_GanttPtr {
		if _, ok := stage.Gantts[gantt]; !ok {
			backRepoGantt.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGantt.CommitDeleteInstance commits deletion of Gantt to the BackRepo
func (backRepoGantt *BackRepoGanttStruct) CommitDeleteInstance(id uint) (Error error) {

	gantt := backRepoGantt.Map_GanttDBID_GanttPtr[id]

	// gantt is not staged anymore, remove ganttDB
	ganttDB := backRepoGantt.Map_GanttDBID_GanttDB[id]
	db, _ := backRepoGantt.db.Unscoped()
	_, err := db.Delete(ganttDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoGantt.Map_GanttPtr_GanttDBID, gantt)
	delete(backRepoGantt.Map_GanttDBID_GanttPtr, id)
	delete(backRepoGantt.Map_GanttDBID_GanttDB, id)

	return
}

// BackRepoGantt.CommitPhaseOneInstance commits gantt staged instances of Gantt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseOneInstance(gantt *models.Gantt) (Error error) {

	// check if the gantt is not commited yet
	if _, ok := backRepoGantt.Map_GanttPtr_GanttDBID[gantt]; ok {
		return
	}

	// initiate gantt
	var ganttDB GanttDB
	ganttDB.CopyBasicFieldsFromGantt(gantt)

	_, err := backRepoGantt.db.Create(&ganttDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoGantt.Map_GanttPtr_GanttDBID[gantt] = ganttDB.ID
	backRepoGantt.Map_GanttDBID_GanttPtr[ganttDB.ID] = gantt
	backRepoGantt.Map_GanttDBID_GanttDB[ganttDB.ID] = &ganttDB

	return
}

// BackRepoGantt.CommitPhaseTwo commits all staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gantt := range backRepoGantt.Map_GanttDBID_GanttPtr {
		backRepoGantt.CommitPhaseTwoInstance(backRepo, idx, gantt)
	}

	return
}

// BackRepoGantt.CommitPhaseTwoInstance commits {{structname }} of models.Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gantt *models.Gantt) (Error error) {

	// fetch matching ganttDB
	if ganttDB, ok := backRepoGantt.Map_GanttDBID_GanttDB[idx]; ok {

		ganttDB.CopyBasicFieldsFromGantt(gantt)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		ganttDB.GanttPointersEncoding.Lanes = make([]int, 0)
		// 2. encode
		for _, laneAssocEnd := range gantt.Lanes {
			laneAssocEnd_DB :=
				backRepo.BackRepoLane.GetLaneDBFromLanePtr(laneAssocEnd)
			
			// the stage might be inconsistant, meaning that the laneAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if laneAssocEnd_DB == nil {
				continue
			}
			
			ganttDB.GanttPointersEncoding.Lanes =
				append(ganttDB.GanttPointersEncoding.Lanes, int(laneAssocEnd_DB.ID))
		}

		// 1. reset
		ganttDB.GanttPointersEncoding.Milestones = make([]int, 0)
		// 2. encode
		for _, milestoneAssocEnd := range gantt.Milestones {
			milestoneAssocEnd_DB :=
				backRepo.BackRepoMilestone.GetMilestoneDBFromMilestonePtr(milestoneAssocEnd)
			
			// the stage might be inconsistant, meaning that the milestoneAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if milestoneAssocEnd_DB == nil {
				continue
			}
			
			ganttDB.GanttPointersEncoding.Milestones =
				append(ganttDB.GanttPointersEncoding.Milestones, int(milestoneAssocEnd_DB.ID))
		}

		// 1. reset
		ganttDB.GanttPointersEncoding.Groups = make([]int, 0)
		// 2. encode
		for _, groupAssocEnd := range gantt.Groups {
			groupAssocEnd_DB :=
				backRepo.BackRepoGroup.GetGroupDBFromGroupPtr(groupAssocEnd)
			
			// the stage might be inconsistant, meaning that the groupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupAssocEnd_DB == nil {
				continue
			}
			
			ganttDB.GanttPointersEncoding.Groups =
				append(ganttDB.GanttPointersEncoding.Groups, int(groupAssocEnd_DB.ID))
		}

		// 1. reset
		ganttDB.GanttPointersEncoding.Arrows = make([]int, 0)
		// 2. encode
		for _, arrowAssocEnd := range gantt.Arrows {
			arrowAssocEnd_DB :=
				backRepo.BackRepoArrow.GetArrowDBFromArrowPtr(arrowAssocEnd)
			
			// the stage might be inconsistant, meaning that the arrowAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if arrowAssocEnd_DB == nil {
				continue
			}
			
			ganttDB.GanttPointersEncoding.Arrows =
				append(ganttDB.GanttPointersEncoding.Arrows, int(arrowAssocEnd_DB.ID))
		}

		_, err := backRepoGantt.db.Save(ganttDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Gantt intance %s", gantt.Name))
		return err
	}

	return
}

// BackRepoGantt.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseOne() (Error error) {

	ganttDBArray := make([]GanttDB, 0)
	_, err := backRepoGantt.db.Find(&ganttDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	ganttInstancesToBeRemovedFromTheStage := make(map[*models.Gantt]any)
	for key, value := range backRepoGantt.stage.Gantts {
		ganttInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, ganttDB := range ganttDBArray {
		backRepoGantt.CheckoutPhaseOneInstance(&ganttDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		gantt, ok := backRepoGantt.Map_GanttDBID_GanttPtr[ganttDB.ID]
		if ok {
			delete(ganttInstancesToBeRemovedFromTheStage, gantt)
		}
	}

	// remove from stage and back repo's 3 maps all gantts that are not in the checkout
	for gantt := range ganttInstancesToBeRemovedFromTheStage {
		gantt.Unstage(backRepoGantt.GetStage())

		// remove instance from the back repo 3 maps
		ganttID := backRepoGantt.Map_GanttPtr_GanttDBID[gantt]
		delete(backRepoGantt.Map_GanttPtr_GanttDBID, gantt)
		delete(backRepoGantt.Map_GanttDBID_GanttDB, ganttID)
		delete(backRepoGantt.Map_GanttDBID_GanttPtr, ganttID)
	}

	return
}

// CheckoutPhaseOneInstance takes a ganttDB that has been found in the DB, updates the backRepo and stages the
// models version of the ganttDB
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseOneInstance(ganttDB *GanttDB) (Error error) {

	gantt, ok := backRepoGantt.Map_GanttDBID_GanttPtr[ganttDB.ID]
	if !ok {
		gantt = new(models.Gantt)

		backRepoGantt.Map_GanttDBID_GanttPtr[ganttDB.ID] = gantt
		backRepoGantt.Map_GanttPtr_GanttDBID[gantt] = ganttDB.ID

		// append model store with the new element
		gantt.Name = ganttDB.Name_Data.String
		gantt.Stage(backRepoGantt.GetStage())
	}
	ganttDB.CopyBasicFieldsToGantt(gantt)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	gantt.Stage(backRepoGantt.GetStage())

	// preserve pointer to ganttDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GanttDBID_GanttDB)[ganttDB hold variable pointers
	ganttDB_Data := *ganttDB
	preservedPtrToGantt := &ganttDB_Data
	backRepoGantt.Map_GanttDBID_GanttDB[ganttDB.ID] = preservedPtrToGantt

	return
}

// BackRepoGantt.CheckoutPhaseTwo Checkouts all staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, ganttDB := range backRepoGantt.Map_GanttDBID_GanttDB {
		backRepoGantt.CheckoutPhaseTwoInstance(backRepo, ganttDB)
	}
	return
}

// BackRepoGantt.CheckoutPhaseTwoInstance Checkouts staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, ganttDB *GanttDB) (Error error) {

	gantt := backRepoGantt.Map_GanttDBID_GanttPtr[ganttDB.ID]

	ganttDB.DecodePointers(backRepo, gantt)

	return
}

func (ganttDB *GanttDB) DecodePointers(backRepo *BackRepoStruct, gantt *models.Gantt) {

	// insertion point for checkout of pointer encoding
	// This loop redeem gantt.Lanes in the stage from the encode in the back repo
	// It parses all LaneDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gantt.Lanes = gantt.Lanes[:0]
	for _, _Laneid := range ganttDB.GanttPointersEncoding.Lanes {
		gantt.Lanes = append(gantt.Lanes, backRepo.BackRepoLane.Map_LaneDBID_LanePtr[uint(_Laneid)])
	}

	// This loop redeem gantt.Milestones in the stage from the encode in the back repo
	// It parses all MilestoneDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gantt.Milestones = gantt.Milestones[:0]
	for _, _Milestoneid := range ganttDB.GanttPointersEncoding.Milestones {
		gantt.Milestones = append(gantt.Milestones, backRepo.BackRepoMilestone.Map_MilestoneDBID_MilestonePtr[uint(_Milestoneid)])
	}

	// This loop redeem gantt.Groups in the stage from the encode in the back repo
	// It parses all GroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gantt.Groups = gantt.Groups[:0]
	for _, _Groupid := range ganttDB.GanttPointersEncoding.Groups {
		gantt.Groups = append(gantt.Groups, backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(_Groupid)])
	}

	// This loop redeem gantt.Arrows in the stage from the encode in the back repo
	// It parses all ArrowDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gantt.Arrows = gantt.Arrows[:0]
	for _, _Arrowid := range ganttDB.GanttPointersEncoding.Arrows {
		gantt.Arrows = append(gantt.Arrows, backRepo.BackRepoArrow.Map_ArrowDBID_ArrowPtr[uint(_Arrowid)])
	}

	return
}

// CommitGantt allows commit of a single gantt (if already staged)
func (backRepo *BackRepoStruct) CommitGantt(gantt *models.Gantt) {
	backRepo.BackRepoGantt.CommitPhaseOneInstance(gantt)
	if id, ok := backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID[gantt]; ok {
		backRepo.BackRepoGantt.CommitPhaseTwoInstance(backRepo, id, gantt)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGantt allows checkout of a single gantt (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGantt(gantt *models.Gantt) {
	// check if the gantt is staged
	if _, ok := backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID[gantt]; ok {

		if id, ok := backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID[gantt]; ok {
			var ganttDB GanttDB
			ganttDB.ID = id

			if _, err := backRepo.BackRepoGantt.db.First(&ganttDB, id); err != nil {
				log.Fatalln("CheckoutGantt : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGantt.CheckoutPhaseOneInstance(&ganttDB)
			backRepo.BackRepoGantt.CheckoutPhaseTwoInstance(backRepo, &ganttDB)
		}
	}
}

// CopyBasicFieldsFromGantt
func (ganttDB *GanttDB) CopyBasicFieldsFromGantt(gantt *models.Gantt) {
	// insertion point for fields commit

	ganttDB.Name_Data.String = gantt.Name
	ganttDB.Name_Data.Valid = true

	ganttDB.ComputedStart_Data.Time = gantt.ComputedStart
	ganttDB.ComputedStart_Data.Valid = true

	ganttDB.ComputedEnd_Data.Time = gantt.ComputedEnd
	ganttDB.ComputedEnd_Data.Valid = true

	ganttDB.ComputedDuration_Data.Int64 = int64(gantt.ComputedDuration)
	ganttDB.ComputedDuration_Data.Valid = true

	ganttDB.UseManualStartAndEndDates_Data.Bool = gantt.UseManualStartAndEndDates
	ganttDB.UseManualStartAndEndDates_Data.Valid = true

	ganttDB.ManualStart_Data.Time = gantt.ManualStart
	ganttDB.ManualStart_Data.Valid = true

	ganttDB.ManualEnd_Data.Time = gantt.ManualEnd
	ganttDB.ManualEnd_Data.Valid = true

	ganttDB.LaneHeight_Data.Float64 = gantt.LaneHeight
	ganttDB.LaneHeight_Data.Valid = true

	ganttDB.RatioBarToLaneHeight_Data.Float64 = gantt.RatioBarToLaneHeight
	ganttDB.RatioBarToLaneHeight_Data.Valid = true

	ganttDB.YTopMargin_Data.Float64 = gantt.YTopMargin
	ganttDB.YTopMargin_Data.Valid = true

	ganttDB.XLeftText_Data.Float64 = gantt.XLeftText
	ganttDB.XLeftText_Data.Valid = true

	ganttDB.TextHeight_Data.Float64 = gantt.TextHeight
	ganttDB.TextHeight_Data.Valid = true

	ganttDB.XLeftLanes_Data.Float64 = gantt.XLeftLanes
	ganttDB.XLeftLanes_Data.Valid = true

	ganttDB.XRightMargin_Data.Float64 = gantt.XRightMargin
	ganttDB.XRightMargin_Data.Valid = true

	ganttDB.ArrowLengthToTheRightOfStartBar_Data.Float64 = gantt.ArrowLengthToTheRightOfStartBar
	ganttDB.ArrowLengthToTheRightOfStartBar_Data.Valid = true

	ganttDB.ArrowTipLenght_Data.Float64 = gantt.ArrowTipLenght
	ganttDB.ArrowTipLenght_Data.Valid = true

	ganttDB.TimeLine_Color_Data.String = gantt.TimeLine_Color
	ganttDB.TimeLine_Color_Data.Valid = true

	ganttDB.TimeLine_FillOpacity_Data.Float64 = gantt.TimeLine_FillOpacity
	ganttDB.TimeLine_FillOpacity_Data.Valid = true

	ganttDB.TimeLine_Stroke_Data.String = gantt.TimeLine_Stroke
	ganttDB.TimeLine_Stroke_Data.Valid = true

	ganttDB.TimeLine_StrokeWidth_Data.Float64 = gantt.TimeLine_StrokeWidth
	ganttDB.TimeLine_StrokeWidth_Data.Valid = true

	ganttDB.Group_Stroke_Data.String = gantt.Group_Stroke
	ganttDB.Group_Stroke_Data.Valid = true

	ganttDB.Group_StrokeWidth_Data.Float64 = gantt.Group_StrokeWidth
	ganttDB.Group_StrokeWidth_Data.Valid = true

	ganttDB.Group_StrokeDashArray_Data.String = gantt.Group_StrokeDashArray
	ganttDB.Group_StrokeDashArray_Data.Valid = true

	ganttDB.DateYOffset_Data.Float64 = gantt.DateYOffset
	ganttDB.DateYOffset_Data.Valid = true

	ganttDB.AlignOnStartEndOnYearStart_Data.Bool = gantt.AlignOnStartEndOnYearStart
	ganttDB.AlignOnStartEndOnYearStart_Data.Valid = true
}

// CopyBasicFieldsFromGantt_WOP
func (ganttDB *GanttDB) CopyBasicFieldsFromGantt_WOP(gantt *models.Gantt_WOP) {
	// insertion point for fields commit

	ganttDB.Name_Data.String = gantt.Name
	ganttDB.Name_Data.Valid = true

	ganttDB.ComputedStart_Data.Time = gantt.ComputedStart
	ganttDB.ComputedStart_Data.Valid = true

	ganttDB.ComputedEnd_Data.Time = gantt.ComputedEnd
	ganttDB.ComputedEnd_Data.Valid = true

	ganttDB.ComputedDuration_Data.Int64 = int64(gantt.ComputedDuration)
	ganttDB.ComputedDuration_Data.Valid = true

	ganttDB.UseManualStartAndEndDates_Data.Bool = gantt.UseManualStartAndEndDates
	ganttDB.UseManualStartAndEndDates_Data.Valid = true

	ganttDB.ManualStart_Data.Time = gantt.ManualStart
	ganttDB.ManualStart_Data.Valid = true

	ganttDB.ManualEnd_Data.Time = gantt.ManualEnd
	ganttDB.ManualEnd_Data.Valid = true

	ganttDB.LaneHeight_Data.Float64 = gantt.LaneHeight
	ganttDB.LaneHeight_Data.Valid = true

	ganttDB.RatioBarToLaneHeight_Data.Float64 = gantt.RatioBarToLaneHeight
	ganttDB.RatioBarToLaneHeight_Data.Valid = true

	ganttDB.YTopMargin_Data.Float64 = gantt.YTopMargin
	ganttDB.YTopMargin_Data.Valid = true

	ganttDB.XLeftText_Data.Float64 = gantt.XLeftText
	ganttDB.XLeftText_Data.Valid = true

	ganttDB.TextHeight_Data.Float64 = gantt.TextHeight
	ganttDB.TextHeight_Data.Valid = true

	ganttDB.XLeftLanes_Data.Float64 = gantt.XLeftLanes
	ganttDB.XLeftLanes_Data.Valid = true

	ganttDB.XRightMargin_Data.Float64 = gantt.XRightMargin
	ganttDB.XRightMargin_Data.Valid = true

	ganttDB.ArrowLengthToTheRightOfStartBar_Data.Float64 = gantt.ArrowLengthToTheRightOfStartBar
	ganttDB.ArrowLengthToTheRightOfStartBar_Data.Valid = true

	ganttDB.ArrowTipLenght_Data.Float64 = gantt.ArrowTipLenght
	ganttDB.ArrowTipLenght_Data.Valid = true

	ganttDB.TimeLine_Color_Data.String = gantt.TimeLine_Color
	ganttDB.TimeLine_Color_Data.Valid = true

	ganttDB.TimeLine_FillOpacity_Data.Float64 = gantt.TimeLine_FillOpacity
	ganttDB.TimeLine_FillOpacity_Data.Valid = true

	ganttDB.TimeLine_Stroke_Data.String = gantt.TimeLine_Stroke
	ganttDB.TimeLine_Stroke_Data.Valid = true

	ganttDB.TimeLine_StrokeWidth_Data.Float64 = gantt.TimeLine_StrokeWidth
	ganttDB.TimeLine_StrokeWidth_Data.Valid = true

	ganttDB.Group_Stroke_Data.String = gantt.Group_Stroke
	ganttDB.Group_Stroke_Data.Valid = true

	ganttDB.Group_StrokeWidth_Data.Float64 = gantt.Group_StrokeWidth
	ganttDB.Group_StrokeWidth_Data.Valid = true

	ganttDB.Group_StrokeDashArray_Data.String = gantt.Group_StrokeDashArray
	ganttDB.Group_StrokeDashArray_Data.Valid = true

	ganttDB.DateYOffset_Data.Float64 = gantt.DateYOffset
	ganttDB.DateYOffset_Data.Valid = true

	ganttDB.AlignOnStartEndOnYearStart_Data.Bool = gantt.AlignOnStartEndOnYearStart
	ganttDB.AlignOnStartEndOnYearStart_Data.Valid = true
}

// CopyBasicFieldsFromGanttWOP
func (ganttDB *GanttDB) CopyBasicFieldsFromGanttWOP(gantt *GanttWOP) {
	// insertion point for fields commit

	ganttDB.Name_Data.String = gantt.Name
	ganttDB.Name_Data.Valid = true

	ganttDB.ComputedStart_Data.Time = gantt.ComputedStart
	ganttDB.ComputedStart_Data.Valid = true

	ganttDB.ComputedEnd_Data.Time = gantt.ComputedEnd
	ganttDB.ComputedEnd_Data.Valid = true

	ganttDB.ComputedDuration_Data.Int64 = int64(gantt.ComputedDuration)
	ganttDB.ComputedDuration_Data.Valid = true

	ganttDB.UseManualStartAndEndDates_Data.Bool = gantt.UseManualStartAndEndDates
	ganttDB.UseManualStartAndEndDates_Data.Valid = true

	ganttDB.ManualStart_Data.Time = gantt.ManualStart
	ganttDB.ManualStart_Data.Valid = true

	ganttDB.ManualEnd_Data.Time = gantt.ManualEnd
	ganttDB.ManualEnd_Data.Valid = true

	ganttDB.LaneHeight_Data.Float64 = gantt.LaneHeight
	ganttDB.LaneHeight_Data.Valid = true

	ganttDB.RatioBarToLaneHeight_Data.Float64 = gantt.RatioBarToLaneHeight
	ganttDB.RatioBarToLaneHeight_Data.Valid = true

	ganttDB.YTopMargin_Data.Float64 = gantt.YTopMargin
	ganttDB.YTopMargin_Data.Valid = true

	ganttDB.XLeftText_Data.Float64 = gantt.XLeftText
	ganttDB.XLeftText_Data.Valid = true

	ganttDB.TextHeight_Data.Float64 = gantt.TextHeight
	ganttDB.TextHeight_Data.Valid = true

	ganttDB.XLeftLanes_Data.Float64 = gantt.XLeftLanes
	ganttDB.XLeftLanes_Data.Valid = true

	ganttDB.XRightMargin_Data.Float64 = gantt.XRightMargin
	ganttDB.XRightMargin_Data.Valid = true

	ganttDB.ArrowLengthToTheRightOfStartBar_Data.Float64 = gantt.ArrowLengthToTheRightOfStartBar
	ganttDB.ArrowLengthToTheRightOfStartBar_Data.Valid = true

	ganttDB.ArrowTipLenght_Data.Float64 = gantt.ArrowTipLenght
	ganttDB.ArrowTipLenght_Data.Valid = true

	ganttDB.TimeLine_Color_Data.String = gantt.TimeLine_Color
	ganttDB.TimeLine_Color_Data.Valid = true

	ganttDB.TimeLine_FillOpacity_Data.Float64 = gantt.TimeLine_FillOpacity
	ganttDB.TimeLine_FillOpacity_Data.Valid = true

	ganttDB.TimeLine_Stroke_Data.String = gantt.TimeLine_Stroke
	ganttDB.TimeLine_Stroke_Data.Valid = true

	ganttDB.TimeLine_StrokeWidth_Data.Float64 = gantt.TimeLine_StrokeWidth
	ganttDB.TimeLine_StrokeWidth_Data.Valid = true

	ganttDB.Group_Stroke_Data.String = gantt.Group_Stroke
	ganttDB.Group_Stroke_Data.Valid = true

	ganttDB.Group_StrokeWidth_Data.Float64 = gantt.Group_StrokeWidth
	ganttDB.Group_StrokeWidth_Data.Valid = true

	ganttDB.Group_StrokeDashArray_Data.String = gantt.Group_StrokeDashArray
	ganttDB.Group_StrokeDashArray_Data.Valid = true

	ganttDB.DateYOffset_Data.Float64 = gantt.DateYOffset
	ganttDB.DateYOffset_Data.Valid = true

	ganttDB.AlignOnStartEndOnYearStart_Data.Bool = gantt.AlignOnStartEndOnYearStart
	ganttDB.AlignOnStartEndOnYearStart_Data.Valid = true
}

// CopyBasicFieldsToGantt
func (ganttDB *GanttDB) CopyBasicFieldsToGantt(gantt *models.Gantt) {
	// insertion point for checkout of basic fields (back repo to stage)
	gantt.Name = ganttDB.Name_Data.String
	gantt.ComputedStart = ganttDB.ComputedStart_Data.Time
	gantt.ComputedEnd = ganttDB.ComputedEnd_Data.Time
	gantt.ComputedDuration = time.Duration(ganttDB.ComputedDuration_Data.Int64)
	gantt.UseManualStartAndEndDates = ganttDB.UseManualStartAndEndDates_Data.Bool
	gantt.ManualStart = ganttDB.ManualStart_Data.Time
	gantt.ManualEnd = ganttDB.ManualEnd_Data.Time
	gantt.LaneHeight = ganttDB.LaneHeight_Data.Float64
	gantt.RatioBarToLaneHeight = ganttDB.RatioBarToLaneHeight_Data.Float64
	gantt.YTopMargin = ganttDB.YTopMargin_Data.Float64
	gantt.XLeftText = ganttDB.XLeftText_Data.Float64
	gantt.TextHeight = ganttDB.TextHeight_Data.Float64
	gantt.XLeftLanes = ganttDB.XLeftLanes_Data.Float64
	gantt.XRightMargin = ganttDB.XRightMargin_Data.Float64
	gantt.ArrowLengthToTheRightOfStartBar = ganttDB.ArrowLengthToTheRightOfStartBar_Data.Float64
	gantt.ArrowTipLenght = ganttDB.ArrowTipLenght_Data.Float64
	gantt.TimeLine_Color = ganttDB.TimeLine_Color_Data.String
	gantt.TimeLine_FillOpacity = ganttDB.TimeLine_FillOpacity_Data.Float64
	gantt.TimeLine_Stroke = ganttDB.TimeLine_Stroke_Data.String
	gantt.TimeLine_StrokeWidth = ganttDB.TimeLine_StrokeWidth_Data.Float64
	gantt.Group_Stroke = ganttDB.Group_Stroke_Data.String
	gantt.Group_StrokeWidth = ganttDB.Group_StrokeWidth_Data.Float64
	gantt.Group_StrokeDashArray = ganttDB.Group_StrokeDashArray_Data.String
	gantt.DateYOffset = ganttDB.DateYOffset_Data.Float64
	gantt.AlignOnStartEndOnYearStart = ganttDB.AlignOnStartEndOnYearStart_Data.Bool
}

// CopyBasicFieldsToGantt_WOP
func (ganttDB *GanttDB) CopyBasicFieldsToGantt_WOP(gantt *models.Gantt_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	gantt.Name = ganttDB.Name_Data.String
	gantt.ComputedStart = ganttDB.ComputedStart_Data.Time
	gantt.ComputedEnd = ganttDB.ComputedEnd_Data.Time
	gantt.ComputedDuration = time.Duration(ganttDB.ComputedDuration_Data.Int64)
	gantt.UseManualStartAndEndDates = ganttDB.UseManualStartAndEndDates_Data.Bool
	gantt.ManualStart = ganttDB.ManualStart_Data.Time
	gantt.ManualEnd = ganttDB.ManualEnd_Data.Time
	gantt.LaneHeight = ganttDB.LaneHeight_Data.Float64
	gantt.RatioBarToLaneHeight = ganttDB.RatioBarToLaneHeight_Data.Float64
	gantt.YTopMargin = ganttDB.YTopMargin_Data.Float64
	gantt.XLeftText = ganttDB.XLeftText_Data.Float64
	gantt.TextHeight = ganttDB.TextHeight_Data.Float64
	gantt.XLeftLanes = ganttDB.XLeftLanes_Data.Float64
	gantt.XRightMargin = ganttDB.XRightMargin_Data.Float64
	gantt.ArrowLengthToTheRightOfStartBar = ganttDB.ArrowLengthToTheRightOfStartBar_Data.Float64
	gantt.ArrowTipLenght = ganttDB.ArrowTipLenght_Data.Float64
	gantt.TimeLine_Color = ganttDB.TimeLine_Color_Data.String
	gantt.TimeLine_FillOpacity = ganttDB.TimeLine_FillOpacity_Data.Float64
	gantt.TimeLine_Stroke = ganttDB.TimeLine_Stroke_Data.String
	gantt.TimeLine_StrokeWidth = ganttDB.TimeLine_StrokeWidth_Data.Float64
	gantt.Group_Stroke = ganttDB.Group_Stroke_Data.String
	gantt.Group_StrokeWidth = ganttDB.Group_StrokeWidth_Data.Float64
	gantt.Group_StrokeDashArray = ganttDB.Group_StrokeDashArray_Data.String
	gantt.DateYOffset = ganttDB.DateYOffset_Data.Float64
	gantt.AlignOnStartEndOnYearStart = ganttDB.AlignOnStartEndOnYearStart_Data.Bool
}

// CopyBasicFieldsToGanttWOP
func (ganttDB *GanttDB) CopyBasicFieldsToGanttWOP(gantt *GanttWOP) {
	gantt.ID = int(ganttDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	gantt.Name = ganttDB.Name_Data.String
	gantt.ComputedStart = ganttDB.ComputedStart_Data.Time
	gantt.ComputedEnd = ganttDB.ComputedEnd_Data.Time
	gantt.ComputedDuration = time.Duration(ganttDB.ComputedDuration_Data.Int64)
	gantt.UseManualStartAndEndDates = ganttDB.UseManualStartAndEndDates_Data.Bool
	gantt.ManualStart = ganttDB.ManualStart_Data.Time
	gantt.ManualEnd = ganttDB.ManualEnd_Data.Time
	gantt.LaneHeight = ganttDB.LaneHeight_Data.Float64
	gantt.RatioBarToLaneHeight = ganttDB.RatioBarToLaneHeight_Data.Float64
	gantt.YTopMargin = ganttDB.YTopMargin_Data.Float64
	gantt.XLeftText = ganttDB.XLeftText_Data.Float64
	gantt.TextHeight = ganttDB.TextHeight_Data.Float64
	gantt.XLeftLanes = ganttDB.XLeftLanes_Data.Float64
	gantt.XRightMargin = ganttDB.XRightMargin_Data.Float64
	gantt.ArrowLengthToTheRightOfStartBar = ganttDB.ArrowLengthToTheRightOfStartBar_Data.Float64
	gantt.ArrowTipLenght = ganttDB.ArrowTipLenght_Data.Float64
	gantt.TimeLine_Color = ganttDB.TimeLine_Color_Data.String
	gantt.TimeLine_FillOpacity = ganttDB.TimeLine_FillOpacity_Data.Float64
	gantt.TimeLine_Stroke = ganttDB.TimeLine_Stroke_Data.String
	gantt.TimeLine_StrokeWidth = ganttDB.TimeLine_StrokeWidth_Data.Float64
	gantt.Group_Stroke = ganttDB.Group_Stroke_Data.String
	gantt.Group_StrokeWidth = ganttDB.Group_StrokeWidth_Data.Float64
	gantt.Group_StrokeDashArray = ganttDB.Group_StrokeDashArray_Data.String
	gantt.DateYOffset = ganttDB.DateYOffset_Data.Float64
	gantt.AlignOnStartEndOnYearStart = ganttDB.AlignOnStartEndOnYearStart_Data.Bool
}

// Backup generates a json file from a slice of all GanttDB instances in the backrepo
func (backRepoGantt *BackRepoGanttStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GanttDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GanttDB, 0)
	for _, ganttDB := range backRepoGantt.Map_GanttDBID_GanttDB {
		forBackup = append(forBackup, ganttDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Gantt ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Gantt file", err.Error())
	}
}

// Backup generates a json file from a slice of all GanttDB instances in the backrepo
func (backRepoGantt *BackRepoGanttStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GanttDB, 0)
	for _, ganttDB := range backRepoGantt.Map_GanttDBID_GanttDB {
		forBackup = append(forBackup, ganttDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Gantt")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Gantt_Fields, -1)
	for _, ganttDB := range forBackup {

		var ganttWOP GanttWOP
		ganttDB.CopyBasicFieldsToGanttWOP(&ganttWOP)

		row := sh.AddRow()
		row.WriteStruct(&ganttWOP, -1)
	}
}

// RestoreXL from the "Gantt" sheet all GanttDB instances
func (backRepoGantt *BackRepoGanttStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGanttid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Gantt"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGantt.rowVisitorGantt)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGantt *BackRepoGanttStruct) rowVisitorGantt(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var ganttWOP GanttWOP
		row.ReadStruct(&ganttWOP)

		// add the unmarshalled struct to the stage
		ganttDB := new(GanttDB)
		ganttDB.CopyBasicFieldsFromGanttWOP(&ganttWOP)

		ganttDB_ID_atBackupTime := ganttDB.ID
		ganttDB.ID = 0
		_, err := backRepoGantt.db.Create(ganttDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGantt.Map_GanttDBID_GanttDB[ganttDB.ID] = ganttDB
		BackRepoGanttid_atBckpTime_newID[ganttDB_ID_atBackupTime] = ganttDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GanttDB.json" in dirPath that stores an array
// of GanttDB and stores it in the database
// the map BackRepoGanttid_atBckpTime_newID is updated accordingly
func (backRepoGantt *BackRepoGanttStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGanttid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GanttDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Gantt file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GanttDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GanttDBID_GanttDB
	for _, ganttDB := range forRestore {

		ganttDB_ID_atBackupTime := ganttDB.ID
		ganttDB.ID = 0
		_, err := backRepoGantt.db.Create(ganttDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGantt.Map_GanttDBID_GanttDB[ganttDB.ID] = ganttDB
		BackRepoGanttid_atBckpTime_newID[ganttDB_ID_atBackupTime] = ganttDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Gantt file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Gantt>id_atBckpTime_newID
// to compute new index
func (backRepoGantt *BackRepoGanttStruct) RestorePhaseTwo() {

	for _, ganttDB := range backRepoGantt.Map_GanttDBID_GanttDB {

		// next line of code is to avert unused variable compilation error
		_ = ganttDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoGantt.db.Model(ganttDB)
		_, err := db.Updates(*ganttDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoGantt.ResetReversePointers commits all staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, gantt := range backRepoGantt.Map_GanttDBID_GanttPtr {
		backRepoGantt.ResetReversePointersInstance(backRepo, idx, gantt)
	}

	return
}

func (backRepoGantt *BackRepoGanttStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, gantt *models.Gantt) (Error error) {

	// fetch matching ganttDB
	if ganttDB, ok := backRepoGantt.Map_GanttDBID_GanttDB[idx]; ok {
		_ = ganttDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGanttid_atBckpTime_newID map[uint]uint
