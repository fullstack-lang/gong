// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { SliderAPI } from './slider-api'
import { Slider, CopySliderToSliderAPI } from './slider'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class SliderService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  SliderServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private slidersUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.slidersUrl = origin + '/api/github.com/fullstack-lang/gong/lib/split/go/v1/sliders';
  }

  /** GET sliders from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<SliderAPI[]> {
    return this.getSliders(Name, frontRepo)
  }
  getSliders(Name: string, frontRepo: FrontRepo): Observable<SliderAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<SliderAPI[]>(this.slidersUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<SliderAPI[]>('getSliders', []))
      );
  }

  /** GET slider by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<SliderAPI> {
    return this.getSlider(id, Name, frontRepo)
  }
  getSlider(id: number, Name: string, frontRepo: FrontRepo): Observable<SliderAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.slidersUrl}/${id}`;
    return this.http.get<SliderAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched slider id=${id}`)),
      catchError(this.handleError<SliderAPI>(`getSlider id=${id}`))
    );
  }

  // postFront copy slider to a version with encoded pointers and post to the back
  postFront(slider: Slider, Name: string): Observable<SliderAPI> {
    let sliderAPI = new SliderAPI
    CopySliderToSliderAPI(slider, sliderAPI)
    const id = typeof sliderAPI === 'number' ? sliderAPI : sliderAPI.ID
    const url = `${this.slidersUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SliderAPI>(url, sliderAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SliderAPI>('postSlider'))
    );
  }
  
  /** POST: add a new slider to the server */
  post(sliderdb: SliderAPI, Name: string, frontRepo: FrontRepo): Observable<SliderAPI> {
    return this.postSlider(sliderdb, Name, frontRepo)
  }
  postSlider(sliderdb: SliderAPI, Name: string, frontRepo: FrontRepo): Observable<SliderAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SliderAPI>(this.slidersUrl, sliderdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted sliderdb id=${sliderdb.ID}`)
      }),
      catchError(this.handleError<SliderAPI>('postSlider'))
    );
  }

  /** DELETE: delete the sliderdb from the server */
  delete(sliderdb: SliderAPI | number, Name: string): Observable<SliderAPI> {
    return this.deleteSlider(sliderdb, Name)
  }
  deleteSlider(sliderdb: SliderAPI | number, Name: string): Observable<SliderAPI> {
    const id = typeof sliderdb === 'number' ? sliderdb : sliderdb.ID;
    const url = `${this.slidersUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<SliderAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted sliderdb id=${id}`)),
      catchError(this.handleError<SliderAPI>('deleteSlider'))
    );
  }

  // updateFront copy slider to a version with encoded pointers and update to the back
  updateFront(slider: Slider, Name: string): Observable<SliderAPI> {
    let sliderAPI = new SliderAPI
    CopySliderToSliderAPI(slider, sliderAPI)
    const id = typeof sliderAPI === 'number' ? sliderAPI : sliderAPI.ID
    const url = `${this.slidersUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<SliderAPI>(url, sliderAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SliderAPI>('updateSlider'))
    );
  }

  /** PUT: update the sliderdb on the server */
  update(sliderdb: SliderAPI, Name: string, frontRepo: FrontRepo): Observable<SliderAPI> {
    return this.updateSlider(sliderdb, Name, frontRepo)
  }
  updateSlider(sliderdb: SliderAPI, Name: string, frontRepo: FrontRepo): Observable<SliderAPI> {
    const id = typeof sliderdb === 'number' ? sliderdb : sliderdb.ID;
    const url = `${this.slidersUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<SliderAPI>(url, sliderdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated sliderdb id=${sliderdb.ID}`)
      }),
      catchError(this.handleError<SliderAPI>('updateSlider'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in SliderService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("SliderService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
