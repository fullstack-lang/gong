// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { TitleAPI } from './title-api'
import { Title, CopyTitleToTitleAPI } from './title'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class TitleService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  TitleServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private titlesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.titlesUrl = origin + '/api/github.com/fullstack-lang/gong/lib/split/go/v1/titles';
  }

  /** GET titles from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<TitleAPI[]> {
    return this.getTitles(Name, frontRepo)
  }
  getTitles(Name: string, frontRepo: FrontRepo): Observable<TitleAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<TitleAPI[]>(this.titlesUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<TitleAPI[]>('getTitles', []))
      );
  }

  /** GET title by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<TitleAPI> {
    return this.getTitle(id, Name, frontRepo)
  }
  getTitle(id: number, Name: string, frontRepo: FrontRepo): Observable<TitleAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.titlesUrl}/${id}`;
    return this.http.get<TitleAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched title id=${id}`)),
      catchError(this.handleError<TitleAPI>(`getTitle id=${id}`))
    );
  }

  // postFront copy title to a version with encoded pointers and post to the back
  postFront(title: Title, Name: string): Observable<TitleAPI> {
    let titleAPI = new TitleAPI
    CopyTitleToTitleAPI(title, titleAPI)
    const id = typeof titleAPI === 'number' ? titleAPI : titleAPI.ID
    const url = `${this.titlesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<TitleAPI>(url, titleAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<TitleAPI>('postTitle'))
    );
  }
  
  /** POST: add a new title to the server */
  post(titledb: TitleAPI, Name: string, frontRepo: FrontRepo): Observable<TitleAPI> {
    return this.postTitle(titledb, Name, frontRepo)
  }
  postTitle(titledb: TitleAPI, Name: string, frontRepo: FrontRepo): Observable<TitleAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<TitleAPI>(this.titlesUrl, titledb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted titledb id=${titledb.ID}`)
      }),
      catchError(this.handleError<TitleAPI>('postTitle'))
    );
  }

  /** DELETE: delete the titledb from the server */
  delete(titledb: TitleAPI | number, Name: string): Observable<TitleAPI> {
    return this.deleteTitle(titledb, Name)
  }
  deleteTitle(titledb: TitleAPI | number, Name: string): Observable<TitleAPI> {
    const id = typeof titledb === 'number' ? titledb : titledb.ID;
    const url = `${this.titlesUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<TitleAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted titledb id=${id}`)),
      catchError(this.handleError<TitleAPI>('deleteTitle'))
    );
  }

  // updateFront copy title to a version with encoded pointers and update to the back
  updateFront(title: Title, Name: string): Observable<TitleAPI> {
    let titleAPI = new TitleAPI
    CopyTitleToTitleAPI(title, titleAPI)
    const id = typeof titleAPI === 'number' ? titleAPI : titleAPI.ID
    const url = `${this.titlesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<TitleAPI>(url, titleAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<TitleAPI>('updateTitle'))
    );
  }

  /** PUT: update the titledb on the server */
  update(titledb: TitleAPI, Name: string, frontRepo: FrontRepo): Observable<TitleAPI> {
    return this.updateTitle(titledb, Name, frontRepo)
  }
  updateTitle(titledb: TitleAPI, Name: string, frontRepo: FrontRepo): Observable<TitleAPI> {
    const id = typeof titledb === 'number' ? titledb : titledb.ID;
    const url = `${this.titlesUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<TitleAPI>(url, titledb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated titledb id=${titledb.ID}`)
      }),
      catchError(this.handleError<TitleAPI>('updateTitle'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in TitleService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("TitleService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
