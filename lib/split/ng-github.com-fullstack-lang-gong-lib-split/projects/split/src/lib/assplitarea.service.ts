// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { AsSplitAreaAPI } from './assplitarea-api'
import { AsSplitArea, CopyAsSplitAreaToAsSplitAreaAPI } from './assplitarea'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { AsSplitAPI } from './assplit-api'
import { TreeAPI } from './tree-api'
import { TableAPI } from './table-api'
import { FormAPI } from './form-api'
import { SvgAPI } from './svg-api'
import { DocAPI } from './doc-api'

@Injectable({
  providedIn: 'root'
})
export class AsSplitAreaService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  AsSplitAreaServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private assplitareasUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.assplitareasUrl = origin + '/api/github.com/fullstack-lang/gong/lib/split/go/v1/assplitareas';
  }

  /** GET assplitareas from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<AsSplitAreaAPI[]> {
    return this.getAsSplitAreas(GONG__StackPath, frontRepo)
  }
  getAsSplitAreas(GONG__StackPath: string, frontRepo: FrontRepo): Observable<AsSplitAreaAPI[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<AsSplitAreaAPI[]>(this.assplitareasUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<AsSplitAreaAPI[]>('getAsSplitAreas', []))
      );
  }

  /** GET assplitarea by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AsSplitAreaAPI> {
    return this.getAsSplitArea(id, GONG__StackPath, frontRepo)
  }
  getAsSplitArea(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AsSplitAreaAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.assplitareasUrl}/${id}`;
    return this.http.get<AsSplitAreaAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched assplitarea id=${id}`)),
      catchError(this.handleError<AsSplitAreaAPI>(`getAsSplitArea id=${id}`))
    );
  }

  // postFront copy assplitarea to a version with encoded pointers and post to the back
  postFront(assplitarea: AsSplitArea, GONG__StackPath: string): Observable<AsSplitAreaAPI> {
    let assplitareaAPI = new AsSplitAreaAPI
    CopyAsSplitAreaToAsSplitAreaAPI(assplitarea, assplitareaAPI)
    const id = typeof assplitareaAPI === 'number' ? assplitareaAPI : assplitareaAPI.ID
    const url = `${this.assplitareasUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<AsSplitAreaAPI>(url, assplitareaAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<AsSplitAreaAPI>('postAsSplitArea'))
    );
  }
  
  /** POST: add a new assplitarea to the server */
  post(assplitareadb: AsSplitAreaAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AsSplitAreaAPI> {
    return this.postAsSplitArea(assplitareadb, GONG__StackPath, frontRepo)
  }
  postAsSplitArea(assplitareadb: AsSplitAreaAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AsSplitAreaAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<AsSplitAreaAPI>(this.assplitareasUrl, assplitareadb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted assplitareadb id=${assplitareadb.ID}`)
      }),
      catchError(this.handleError<AsSplitAreaAPI>('postAsSplitArea'))
    );
  }

  /** DELETE: delete the assplitareadb from the server */
  delete(assplitareadb: AsSplitAreaAPI | number, GONG__StackPath: string): Observable<AsSplitAreaAPI> {
    return this.deleteAsSplitArea(assplitareadb, GONG__StackPath)
  }
  deleteAsSplitArea(assplitareadb: AsSplitAreaAPI | number, GONG__StackPath: string): Observable<AsSplitAreaAPI> {
    const id = typeof assplitareadb === 'number' ? assplitareadb : assplitareadb.ID;
    const url = `${this.assplitareasUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<AsSplitAreaAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted assplitareadb id=${id}`)),
      catchError(this.handleError<AsSplitAreaAPI>('deleteAsSplitArea'))
    );
  }

  // updateFront copy assplitarea to a version with encoded pointers and update to the back
  updateFront(assplitarea: AsSplitArea, GONG__StackPath: string): Observable<AsSplitAreaAPI> {
    let assplitareaAPI = new AsSplitAreaAPI
    CopyAsSplitAreaToAsSplitAreaAPI(assplitarea, assplitareaAPI)
    const id = typeof assplitareaAPI === 'number' ? assplitareaAPI : assplitareaAPI.ID
    const url = `${this.assplitareasUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<AsSplitAreaAPI>(url, assplitareaAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<AsSplitAreaAPI>('updateAsSplitArea'))
    );
  }

  /** PUT: update the assplitareadb on the server */
  update(assplitareadb: AsSplitAreaAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AsSplitAreaAPI> {
    return this.updateAsSplitArea(assplitareadb, GONG__StackPath, frontRepo)
  }
  updateAsSplitArea(assplitareadb: AsSplitAreaAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<AsSplitAreaAPI> {
    const id = typeof assplitareadb === 'number' ? assplitareadb : assplitareadb.ID;
    const url = `${this.assplitareasUrl}/${id}`;


    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<AsSplitAreaAPI>(url, assplitareadb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated assplitareadb id=${assplitareadb.ID}`)
      }),
      catchError(this.handleError<AsSplitAreaAPI>('updateAsSplitArea'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in AsSplitAreaService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("AsSplitAreaService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
