// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Svg_sql sql.NullBool
var dummy_Svg_time time.Duration
var dummy_Svg_sort sort.Float64Slice

// SvgAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model svgAPI
type SvgAPI struct {
	gorm.Model

	models.Svg_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SvgPointersEncoding SvgPointersEncoding
}

// SvgPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SvgPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SvgDB describes a svg in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model svgDB
type SvgDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field svgDB.Name
	Name_Data sql.NullString

	// Declation for basic field svgDB.StackName
	StackName_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SvgPointersEncoding
}

// SvgDBs arrays svgDBs
// swagger:response svgDBsResponse
type SvgDBs []SvgDB

// SvgDBResponse provides response
// swagger:response svgDBResponse
type SvgDBResponse struct {
	SvgDB
}

// SvgWOP is a Svg without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SvgWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StackName string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Svg_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StackName",
}

type BackRepoSvgStruct struct {
	// stores SvgDB according to their gorm ID
	Map_SvgDBID_SvgDB map[uint]*SvgDB

	// stores SvgDB ID according to Svg address
	Map_SvgPtr_SvgDBID map[*models.Svg]uint

	// stores Svg according to their gorm ID
	Map_SvgDBID_SvgPtr map[uint]*models.Svg

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSvg *BackRepoSvgStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSvg.stage
	return
}

func (backRepoSvg *BackRepoSvgStruct) GetDB() db.DBInterface {
	return backRepoSvg.db
}

// GetSvgDBFromSvgPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSvg *BackRepoSvgStruct) GetSvgDBFromSvgPtr(svg *models.Svg) (svgDB *SvgDB) {
	id := backRepoSvg.Map_SvgPtr_SvgDBID[svg]
	svgDB = backRepoSvg.Map_SvgDBID_SvgDB[id]
	return
}

// BackRepoSvg.CommitPhaseOne commits all staged instances of Svg to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSvg *BackRepoSvgStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var svgs []*models.Svg
	for svg := range stage.Svgs {
		svgs = append(svgs, svg)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(svgs, func(i, j int) bool {
		return stage.Map_Staged_Order[svgs[i]] < stage.Map_Staged_Order[svgs[j]]
	})

	for _, svg := range svgs {
		backRepoSvg.CommitPhaseOneInstance(svg)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, svg := range backRepoSvg.Map_SvgDBID_SvgPtr {
		if _, ok := stage.Svgs[svg]; !ok {
			backRepoSvg.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSvg.CommitDeleteInstance commits deletion of Svg to the BackRepo
func (backRepoSvg *BackRepoSvgStruct) CommitDeleteInstance(id uint) (Error error) {

	svg := backRepoSvg.Map_SvgDBID_SvgPtr[id]

	// svg is not staged anymore, remove svgDB
	svgDB := backRepoSvg.Map_SvgDBID_SvgDB[id]
	db, _ := backRepoSvg.db.Unscoped()
	_, err := db.Delete(svgDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSvg.Map_SvgPtr_SvgDBID, svg)
	delete(backRepoSvg.Map_SvgDBID_SvgPtr, id)
	delete(backRepoSvg.Map_SvgDBID_SvgDB, id)

	return
}

// BackRepoSvg.CommitPhaseOneInstance commits svg staged instances of Svg to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSvg *BackRepoSvgStruct) CommitPhaseOneInstance(svg *models.Svg) (Error error) {

	// check if the svg is not commited yet
	if _, ok := backRepoSvg.Map_SvgPtr_SvgDBID[svg]; ok {
		return
	}

	// initiate svg
	var svgDB SvgDB
	svgDB.CopyBasicFieldsFromSvg(svg)

	_, err := backRepoSvg.db.Create(&svgDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSvg.Map_SvgPtr_SvgDBID[svg] = svgDB.ID
	backRepoSvg.Map_SvgDBID_SvgPtr[svgDB.ID] = svg
	backRepoSvg.Map_SvgDBID_SvgDB[svgDB.ID] = &svgDB

	return
}

// BackRepoSvg.CommitPhaseTwo commits all staged instances of Svg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvg *BackRepoSvgStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, svg := range backRepoSvg.Map_SvgDBID_SvgPtr {
		backRepoSvg.CommitPhaseTwoInstance(backRepo, idx, svg)
	}

	return
}

// BackRepoSvg.CommitPhaseTwoInstance commits {{structname }} of models.Svg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvg *BackRepoSvgStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, svg *models.Svg) (Error error) {

	// fetch matching svgDB
	if svgDB, ok := backRepoSvg.Map_SvgDBID_SvgDB[idx]; ok {

		svgDB.CopyBasicFieldsFromSvg(svg)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoSvg.db.Save(svgDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Svg intance %s", svg.Name))
		return err
	}

	return
}

// BackRepoSvg.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSvg *BackRepoSvgStruct) CheckoutPhaseOne() (Error error) {

	svgDBArray := make([]SvgDB, 0)
	_, err := backRepoSvg.db.Find(&svgDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	svgInstancesToBeRemovedFromTheStage := make(map[*models.Svg]any)
	for key, value := range backRepoSvg.stage.Svgs {
		svgInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, svgDB := range svgDBArray {
		backRepoSvg.CheckoutPhaseOneInstance(&svgDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		svg, ok := backRepoSvg.Map_SvgDBID_SvgPtr[svgDB.ID]
		if ok {
			delete(svgInstancesToBeRemovedFromTheStage, svg)
		}
	}

	// remove from stage and back repo's 3 maps all svgs that are not in the checkout
	for svg := range svgInstancesToBeRemovedFromTheStage {
		svg.Unstage(backRepoSvg.GetStage())

		// remove instance from the back repo 3 maps
		svgID := backRepoSvg.Map_SvgPtr_SvgDBID[svg]
		delete(backRepoSvg.Map_SvgPtr_SvgDBID, svg)
		delete(backRepoSvg.Map_SvgDBID_SvgDB, svgID)
		delete(backRepoSvg.Map_SvgDBID_SvgPtr, svgID)
	}

	return
}

// CheckoutPhaseOneInstance takes a svgDB that has been found in the DB, updates the backRepo and stages the
// models version of the svgDB
func (backRepoSvg *BackRepoSvgStruct) CheckoutPhaseOneInstance(svgDB *SvgDB) (Error error) {

	svg, ok := backRepoSvg.Map_SvgDBID_SvgPtr[svgDB.ID]
	if !ok {
		svg = new(models.Svg)

		backRepoSvg.Map_SvgDBID_SvgPtr[svgDB.ID] = svg
		backRepoSvg.Map_SvgPtr_SvgDBID[svg] = svgDB.ID

		// append model store with the new element
		svg.Name = svgDB.Name_Data.String
		svg.Stage(backRepoSvg.GetStage())
	}
	svgDB.CopyBasicFieldsToSvg(svg)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	svg.Stage(backRepoSvg.GetStage())

	// preserve pointer to svgDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SvgDBID_SvgDB)[svgDB hold variable pointers
	svgDB_Data := *svgDB
	preservedPtrToSvg := &svgDB_Data
	backRepoSvg.Map_SvgDBID_SvgDB[svgDB.ID] = preservedPtrToSvg

	return
}

// BackRepoSvg.CheckoutPhaseTwo Checkouts all staged instances of Svg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvg *BackRepoSvgStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, svgDB := range backRepoSvg.Map_SvgDBID_SvgDB {
		backRepoSvg.CheckoutPhaseTwoInstance(backRepo, svgDB)
	}
	return
}

// BackRepoSvg.CheckoutPhaseTwoInstance Checkouts staged instances of Svg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvg *BackRepoSvgStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, svgDB *SvgDB) (Error error) {

	svg := backRepoSvg.Map_SvgDBID_SvgPtr[svgDB.ID]

	svgDB.DecodePointers(backRepo, svg)

	return
}

func (svgDB *SvgDB) DecodePointers(backRepo *BackRepoStruct, svg *models.Svg) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSvg allows commit of a single svg (if already staged)
func (backRepo *BackRepoStruct) CommitSvg(svg *models.Svg) {
	backRepo.BackRepoSvg.CommitPhaseOneInstance(svg)
	if id, ok := backRepo.BackRepoSvg.Map_SvgPtr_SvgDBID[svg]; ok {
		backRepo.BackRepoSvg.CommitPhaseTwoInstance(backRepo, id, svg)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSvg allows checkout of a single svg (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSvg(svg *models.Svg) {
	// check if the svg is staged
	if _, ok := backRepo.BackRepoSvg.Map_SvgPtr_SvgDBID[svg]; ok {

		if id, ok := backRepo.BackRepoSvg.Map_SvgPtr_SvgDBID[svg]; ok {
			var svgDB SvgDB
			svgDB.ID = id

			if _, err := backRepo.BackRepoSvg.db.First(&svgDB, id); err != nil {
				log.Fatalln("CheckoutSvg : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSvg.CheckoutPhaseOneInstance(&svgDB)
			backRepo.BackRepoSvg.CheckoutPhaseTwoInstance(backRepo, &svgDB)
		}
	}
}

// CopyBasicFieldsFromSvg
func (svgDB *SvgDB) CopyBasicFieldsFromSvg(svg *models.Svg) {
	// insertion point for fields commit

	svgDB.Name_Data.String = svg.Name
	svgDB.Name_Data.Valid = true

	svgDB.StackName_Data.String = svg.StackName
	svgDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromSvg_WOP
func (svgDB *SvgDB) CopyBasicFieldsFromSvg_WOP(svg *models.Svg_WOP) {
	// insertion point for fields commit

	svgDB.Name_Data.String = svg.Name
	svgDB.Name_Data.Valid = true

	svgDB.StackName_Data.String = svg.StackName
	svgDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromSvgWOP
func (svgDB *SvgDB) CopyBasicFieldsFromSvgWOP(svg *SvgWOP) {
	// insertion point for fields commit

	svgDB.Name_Data.String = svg.Name
	svgDB.Name_Data.Valid = true

	svgDB.StackName_Data.String = svg.StackName
	svgDB.StackName_Data.Valid = true
}

// CopyBasicFieldsToSvg
func (svgDB *SvgDB) CopyBasicFieldsToSvg(svg *models.Svg) {
	// insertion point for checkout of basic fields (back repo to stage)
	svg.Name = svgDB.Name_Data.String
	svg.StackName = svgDB.StackName_Data.String
}

// CopyBasicFieldsToSvg_WOP
func (svgDB *SvgDB) CopyBasicFieldsToSvg_WOP(svg *models.Svg_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	svg.Name = svgDB.Name_Data.String
	svg.StackName = svgDB.StackName_Data.String
}

// CopyBasicFieldsToSvgWOP
func (svgDB *SvgDB) CopyBasicFieldsToSvgWOP(svg *SvgWOP) {
	svg.ID = int(svgDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	svg.Name = svgDB.Name_Data.String
	svg.StackName = svgDB.StackName_Data.String
}

// Backup generates a json file from a slice of all SvgDB instances in the backrepo
func (backRepoSvg *BackRepoSvgStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SvgDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SvgDB, 0)
	for _, svgDB := range backRepoSvg.Map_SvgDBID_SvgDB {
		forBackup = append(forBackup, svgDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Svg ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Svg file", err.Error())
	}
}

// Backup generates a json file from a slice of all SvgDB instances in the backrepo
func (backRepoSvg *BackRepoSvgStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SvgDB, 0)
	for _, svgDB := range backRepoSvg.Map_SvgDBID_SvgDB {
		forBackup = append(forBackup, svgDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Svg")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Svg_Fields, -1)
	for _, svgDB := range forBackup {

		var svgWOP SvgWOP
		svgDB.CopyBasicFieldsToSvgWOP(&svgWOP)

		row := sh.AddRow()
		row.WriteStruct(&svgWOP, -1)
	}
}

// RestoreXL from the "Svg" sheet all SvgDB instances
func (backRepoSvg *BackRepoSvgStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSvgid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Svg"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSvg.rowVisitorSvg)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSvg *BackRepoSvgStruct) rowVisitorSvg(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var svgWOP SvgWOP
		row.ReadStruct(&svgWOP)

		// add the unmarshalled struct to the stage
		svgDB := new(SvgDB)
		svgDB.CopyBasicFieldsFromSvgWOP(&svgWOP)

		svgDB_ID_atBackupTime := svgDB.ID
		svgDB.ID = 0
		_, err := backRepoSvg.db.Create(svgDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSvg.Map_SvgDBID_SvgDB[svgDB.ID] = svgDB
		BackRepoSvgid_atBckpTime_newID[svgDB_ID_atBackupTime] = svgDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SvgDB.json" in dirPath that stores an array
// of SvgDB and stores it in the database
// the map BackRepoSvgid_atBckpTime_newID is updated accordingly
func (backRepoSvg *BackRepoSvgStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSvgid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SvgDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Svg file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SvgDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SvgDBID_SvgDB
	for _, svgDB := range forRestore {

		svgDB_ID_atBackupTime := svgDB.ID
		svgDB.ID = 0
		_, err := backRepoSvg.db.Create(svgDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSvg.Map_SvgDBID_SvgDB[svgDB.ID] = svgDB
		BackRepoSvgid_atBckpTime_newID[svgDB_ID_atBackupTime] = svgDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Svg file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Svg>id_atBckpTime_newID
// to compute new index
func (backRepoSvg *BackRepoSvgStruct) RestorePhaseTwo() {

	for _, svgDB := range backRepoSvg.Map_SvgDBID_SvgDB {

		// next line of code is to avert unused variable compilation error
		_ = svgDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoSvg.db.Model(svgDB)
		_, err := db.Updates(*svgDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSvg.ResetReversePointers commits all staged instances of Svg to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSvg *BackRepoSvgStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, svg := range backRepoSvg.Map_SvgDBID_SvgPtr {
		backRepoSvg.ResetReversePointersInstance(backRepo, idx, svg)
	}

	return
}

func (backRepoSvg *BackRepoSvgStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, svg *models.Svg) (Error error) {

	// fetch matching svgDB
	if svgDB, ok := backRepoSvg.Map_SvgDBID_SvgDB[idx]; ok {
		_ = svgDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSvgid_atBckpTime_newID map[uint]uint
