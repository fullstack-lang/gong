// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Logo_sql sql.NullBool
var dummy_Logo_time time.Duration
var dummy_Logo_sort sort.Float64Slice

// LogoAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model logoAPI
type LogoAPI struct {
	gorm.Model

	models.Logo_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LogoPointersEncoding LogoPointersEncoding
}

// LogoPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LogoPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// LogoDB describes a logo in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model logoDB
type LogoDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field logoDB.Name
	Name_Data sql.NullString

	// Declation for basic field logoDB.Width
	Width_Data sql.NullInt64

	// Declation for basic field logoDB.Height
	Height_Data sql.NullInt64

	// Declation for basic field logoDB.SVG
	SVG_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LogoPointersEncoding
}

// LogoDBs arrays logoDBs
// swagger:response logoDBsResponse
type LogoDBs []LogoDB

// LogoDBResponse provides response
// swagger:response logoDBResponse
type LogoDBResponse struct {
	LogoDB
}

// LogoWOP is a Logo without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LogoWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Width int `xlsx:"2"`

	Height int `xlsx:"3"`

	SVG string `xlsx:"4"`
	// insertion for WOP pointer fields
}

var Logo_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Width",
	"Height",
	"SVG",
}

type BackRepoLogoStruct struct {
	// stores LogoDB according to their gorm ID
	Map_LogoDBID_LogoDB map[uint]*LogoDB

	// stores LogoDB ID according to Logo address
	Map_LogoPtr_LogoDBID map[*models.Logo]uint

	// stores Logo according to their gorm ID
	Map_LogoDBID_LogoPtr map[uint]*models.Logo

	db db.DBInterface

	stage *models.Stage
}

func (backRepoLogo *BackRepoLogoStruct) GetStage() (stage *models.Stage) {
	stage = backRepoLogo.stage
	return
}

func (backRepoLogo *BackRepoLogoStruct) GetDB() db.DBInterface {
	return backRepoLogo.db
}

// GetLogoDBFromLogoPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLogo *BackRepoLogoStruct) GetLogoDBFromLogoPtr(logo *models.Logo) (logoDB *LogoDB) {
	id := backRepoLogo.Map_LogoPtr_LogoDBID[logo]
	logoDB = backRepoLogo.Map_LogoDBID_LogoDB[id]
	return
}

// BackRepoLogo.CommitPhaseOne commits all staged instances of Logo to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLogo *BackRepoLogoStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var logos []*models.Logo
	for logo := range stage.Logos {
		logos = append(logos, logo)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(logos, func(i, j int) bool {
		return stage.LogoMap_Staged_Order[logos[i]] < stage.LogoMap_Staged_Order[logos[j]]
	})

	for _, logo := range logos {
		backRepoLogo.CommitPhaseOneInstance(logo)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, logo := range backRepoLogo.Map_LogoDBID_LogoPtr {
		if _, ok := stage.Logos[logo]; !ok {
			backRepoLogo.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLogo.CommitDeleteInstance commits deletion of Logo to the BackRepo
func (backRepoLogo *BackRepoLogoStruct) CommitDeleteInstance(id uint) (Error error) {

	logo := backRepoLogo.Map_LogoDBID_LogoPtr[id]

	// logo is not staged anymore, remove logoDB
	logoDB := backRepoLogo.Map_LogoDBID_LogoDB[id]
	db, _ := backRepoLogo.db.Unscoped()
	_, err := db.Delete(logoDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoLogo.Map_LogoPtr_LogoDBID, logo)
	delete(backRepoLogo.Map_LogoDBID_LogoPtr, id)
	delete(backRepoLogo.Map_LogoDBID_LogoDB, id)

	return
}

// BackRepoLogo.CommitPhaseOneInstance commits logo staged instances of Logo to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLogo *BackRepoLogoStruct) CommitPhaseOneInstance(logo *models.Logo) (Error error) {

	// check if the logo is not commited yet
	if _, ok := backRepoLogo.Map_LogoPtr_LogoDBID[logo]; ok {
		return
	}

	// initiate logo
	var logoDB LogoDB
	logoDB.CopyBasicFieldsFromLogo(logo)

	_, err := backRepoLogo.db.Create(&logoDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoLogo.Map_LogoPtr_LogoDBID[logo] = logoDB.ID
	backRepoLogo.Map_LogoDBID_LogoPtr[logoDB.ID] = logo
	backRepoLogo.Map_LogoDBID_LogoDB[logoDB.ID] = &logoDB

	return
}

// BackRepoLogo.CommitPhaseTwo commits all staged instances of Logo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogo *BackRepoLogoStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, logo := range backRepoLogo.Map_LogoDBID_LogoPtr {
		backRepoLogo.CommitPhaseTwoInstance(backRepo, idx, logo)
	}

	return
}

// BackRepoLogo.CommitPhaseTwoInstance commits {{structname }} of models.Logo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogo *BackRepoLogoStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, logo *models.Logo) (Error error) {

	// fetch matching logoDB
	if logoDB, ok := backRepoLogo.Map_LogoDBID_LogoDB[idx]; ok {

		logoDB.CopyBasicFieldsFromLogo(logo)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoLogo.db.Save(logoDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Logo intance %s", logo.Name))
		return err
	}

	return
}

// BackRepoLogo.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLogo *BackRepoLogoStruct) CheckoutPhaseOne() (Error error) {

	logoDBArray := make([]LogoDB, 0)
	_, err := backRepoLogo.db.Find(&logoDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	logoInstancesToBeRemovedFromTheStage := make(map[*models.Logo]any)
	for key, value := range backRepoLogo.stage.Logos {
		logoInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, logoDB := range logoDBArray {
		backRepoLogo.CheckoutPhaseOneInstance(&logoDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		logo, ok := backRepoLogo.Map_LogoDBID_LogoPtr[logoDB.ID]
		if ok {
			delete(logoInstancesToBeRemovedFromTheStage, logo)
		}
	}

	// remove from stage and back repo's 3 maps all logos that are not in the checkout
	for logo := range logoInstancesToBeRemovedFromTheStage {
		logo.Unstage(backRepoLogo.GetStage())

		// remove instance from the back repo 3 maps
		logoID := backRepoLogo.Map_LogoPtr_LogoDBID[logo]
		delete(backRepoLogo.Map_LogoPtr_LogoDBID, logo)
		delete(backRepoLogo.Map_LogoDBID_LogoDB, logoID)
		delete(backRepoLogo.Map_LogoDBID_LogoPtr, logoID)
	}

	return
}

// CheckoutPhaseOneInstance takes a logoDB that has been found in the DB, updates the backRepo and stages the
// models version of the logoDB
func (backRepoLogo *BackRepoLogoStruct) CheckoutPhaseOneInstance(logoDB *LogoDB) (Error error) {

	logo, ok := backRepoLogo.Map_LogoDBID_LogoPtr[logoDB.ID]
	if !ok {
		logo = new(models.Logo)

		backRepoLogo.Map_LogoDBID_LogoPtr[logoDB.ID] = logo
		backRepoLogo.Map_LogoPtr_LogoDBID[logo] = logoDB.ID

		// append model store with the new element
		logo.Name = logoDB.Name_Data.String
		logo.Stage(backRepoLogo.GetStage())
	}
	logoDB.CopyBasicFieldsToLogo(logo)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	logo.Stage(backRepoLogo.GetStage())

	// preserve pointer to logoDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LogoDBID_LogoDB)[logoDB hold variable pointers
	logoDB_Data := *logoDB
	preservedPtrToLogo := &logoDB_Data
	backRepoLogo.Map_LogoDBID_LogoDB[logoDB.ID] = preservedPtrToLogo

	return
}

// BackRepoLogo.CheckoutPhaseTwo Checkouts all staged instances of Logo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogo *BackRepoLogoStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, logoDB := range backRepoLogo.Map_LogoDBID_LogoDB {
		backRepoLogo.CheckoutPhaseTwoInstance(backRepo, logoDB)
	}
	return
}

// BackRepoLogo.CheckoutPhaseTwoInstance Checkouts staged instances of Logo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogo *BackRepoLogoStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, logoDB *LogoDB) (Error error) {

	logo := backRepoLogo.Map_LogoDBID_LogoPtr[logoDB.ID]

	logoDB.DecodePointers(backRepo, logo)

	return
}

func (logoDB *LogoDB) DecodePointers(backRepo *BackRepoStruct, logo *models.Logo) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLogo allows commit of a single logo (if already staged)
func (backRepo *BackRepoStruct) CommitLogo(logo *models.Logo) {
	backRepo.BackRepoLogo.CommitPhaseOneInstance(logo)
	if id, ok := backRepo.BackRepoLogo.Map_LogoPtr_LogoDBID[logo]; ok {
		backRepo.BackRepoLogo.CommitPhaseTwoInstance(backRepo, id, logo)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLogo allows checkout of a single logo (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLogo(logo *models.Logo) {
	// check if the logo is staged
	if _, ok := backRepo.BackRepoLogo.Map_LogoPtr_LogoDBID[logo]; ok {

		if id, ok := backRepo.BackRepoLogo.Map_LogoPtr_LogoDBID[logo]; ok {
			var logoDB LogoDB
			logoDB.ID = id

			if _, err := backRepo.BackRepoLogo.db.First(&logoDB, id); err != nil {
				log.Fatalln("CheckoutLogo : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLogo.CheckoutPhaseOneInstance(&logoDB)
			backRepo.BackRepoLogo.CheckoutPhaseTwoInstance(backRepo, &logoDB)
		}
	}
}

// CopyBasicFieldsFromLogo
func (logoDB *LogoDB) CopyBasicFieldsFromLogo(logo *models.Logo) {
	// insertion point for fields commit

	logoDB.Name_Data.String = logo.Name
	logoDB.Name_Data.Valid = true

	logoDB.Width_Data.Int64 = int64(logo.Width)
	logoDB.Width_Data.Valid = true

	logoDB.Height_Data.Int64 = int64(logo.Height)
	logoDB.Height_Data.Valid = true

	logoDB.SVG_Data.String = logo.SVG
	logoDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromLogo_WOP
func (logoDB *LogoDB) CopyBasicFieldsFromLogo_WOP(logo *models.Logo_WOP) {
	// insertion point for fields commit

	logoDB.Name_Data.String = logo.Name
	logoDB.Name_Data.Valid = true

	logoDB.Width_Data.Int64 = int64(logo.Width)
	logoDB.Width_Data.Valid = true

	logoDB.Height_Data.Int64 = int64(logo.Height)
	logoDB.Height_Data.Valid = true

	logoDB.SVG_Data.String = logo.SVG
	logoDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromLogoWOP
func (logoDB *LogoDB) CopyBasicFieldsFromLogoWOP(logo *LogoWOP) {
	// insertion point for fields commit

	logoDB.Name_Data.String = logo.Name
	logoDB.Name_Data.Valid = true

	logoDB.Width_Data.Int64 = int64(logo.Width)
	logoDB.Width_Data.Valid = true

	logoDB.Height_Data.Int64 = int64(logo.Height)
	logoDB.Height_Data.Valid = true

	logoDB.SVG_Data.String = logo.SVG
	logoDB.SVG_Data.Valid = true
}

// CopyBasicFieldsToLogo
func (logoDB *LogoDB) CopyBasicFieldsToLogo(logo *models.Logo) {
	// insertion point for checkout of basic fields (back repo to stage)
	logo.Name = logoDB.Name_Data.String
	logo.Width = int(logoDB.Width_Data.Int64)
	logo.Height = int(logoDB.Height_Data.Int64)
	logo.SVG = logoDB.SVG_Data.String
}

// CopyBasicFieldsToLogo_WOP
func (logoDB *LogoDB) CopyBasicFieldsToLogo_WOP(logo *models.Logo_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	logo.Name = logoDB.Name_Data.String
	logo.Width = int(logoDB.Width_Data.Int64)
	logo.Height = int(logoDB.Height_Data.Int64)
	logo.SVG = logoDB.SVG_Data.String
}

// CopyBasicFieldsToLogoWOP
func (logoDB *LogoDB) CopyBasicFieldsToLogoWOP(logo *LogoWOP) {
	logo.ID = int(logoDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	logo.Name = logoDB.Name_Data.String
	logo.Width = int(logoDB.Width_Data.Int64)
	logo.Height = int(logoDB.Height_Data.Int64)
	logo.SVG = logoDB.SVG_Data.String
}

// Backup generates a json file from a slice of all LogoDB instances in the backrepo
func (backRepoLogo *BackRepoLogoStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LogoDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LogoDB, 0)
	for _, logoDB := range backRepoLogo.Map_LogoDBID_LogoDB {
		forBackup = append(forBackup, logoDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Logo ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Logo file", err.Error())
	}
}

// Backup generates a json file from a slice of all LogoDB instances in the backrepo
func (backRepoLogo *BackRepoLogoStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LogoDB, 0)
	for _, logoDB := range backRepoLogo.Map_LogoDBID_LogoDB {
		forBackup = append(forBackup, logoDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Logo")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Logo_Fields, -1)
	for _, logoDB := range forBackup {

		var logoWOP LogoWOP
		logoDB.CopyBasicFieldsToLogoWOP(&logoWOP)

		row := sh.AddRow()
		row.WriteStruct(&logoWOP, -1)
	}
}

// RestoreXL from the "Logo" sheet all LogoDB instances
func (backRepoLogo *BackRepoLogoStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLogoid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Logo"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLogo.rowVisitorLogo)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLogo *BackRepoLogoStruct) rowVisitorLogo(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var logoWOP LogoWOP
		row.ReadStruct(&logoWOP)

		// add the unmarshalled struct to the stage
		logoDB := new(LogoDB)
		logoDB.CopyBasicFieldsFromLogoWOP(&logoWOP)

		logoDB_ID_atBackupTime := logoDB.ID
		logoDB.ID = 0
		_, err := backRepoLogo.db.Create(logoDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLogo.Map_LogoDBID_LogoDB[logoDB.ID] = logoDB
		BackRepoLogoid_atBckpTime_newID[logoDB_ID_atBackupTime] = logoDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LogoDB.json" in dirPath that stores an array
// of LogoDB and stores it in the database
// the map BackRepoLogoid_atBckpTime_newID is updated accordingly
func (backRepoLogo *BackRepoLogoStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLogoid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LogoDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Logo file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LogoDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LogoDBID_LogoDB
	for _, logoDB := range forRestore {

		logoDB_ID_atBackupTime := logoDB.ID
		logoDB.ID = 0
		_, err := backRepoLogo.db.Create(logoDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLogo.Map_LogoDBID_LogoDB[logoDB.ID] = logoDB
		BackRepoLogoid_atBckpTime_newID[logoDB_ID_atBackupTime] = logoDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Logo file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Logo>id_atBckpTime_newID
// to compute new index
func (backRepoLogo *BackRepoLogoStruct) RestorePhaseTwo() {

	for _, logoDB := range backRepoLogo.Map_LogoDBID_LogoDB {

		// next line of code is to avert unused variable compilation error
		_ = logoDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoLogo.db.Model(logoDB)
		_, err := db.Updates(*logoDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoLogo.ResetReversePointers commits all staged instances of Logo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogo *BackRepoLogoStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, logo := range backRepoLogo.Map_LogoDBID_LogoPtr {
		backRepoLogo.ResetReversePointersInstance(backRepo, idx, logo)
	}

	return
}

func (backRepoLogo *BackRepoLogoStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, logo *models.Logo) (Error error) {

	// fetch matching logoDB
	if logoDB, ok := backRepoLogo.Map_LogoDBID_LogoDB[idx]; ok {
		_ = logoDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLogoid_atBckpTime_newID map[uint]uint
