// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FavIcon_sql sql.NullBool
var dummy_FavIcon_time time.Duration
var dummy_FavIcon_sort sort.Float64Slice

// FavIconAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model faviconAPI
type FavIconAPI struct {
	gorm.Model

	models.FavIcon_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FavIconPointersEncoding FavIconPointersEncoding
}

// FavIconPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FavIconPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FavIconDB describes a favicon in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model faviconDB
type FavIconDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field faviconDB.Name
	Name_Data sql.NullString

	// Declation for basic field faviconDB.SVG
	SVG_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FavIconPointersEncoding
}

// FavIconDBs arrays faviconDBs
// swagger:response faviconDBsResponse
type FavIconDBs []FavIconDB

// FavIconDBResponse provides response
// swagger:response faviconDBResponse
type FavIconDBResponse struct {
	FavIconDB
}

// FavIconWOP is a FavIcon without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FavIconWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SVG string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FavIcon_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SVG",
}

type BackRepoFavIconStruct struct {
	// stores FavIconDB according to their gorm ID
	Map_FavIconDBID_FavIconDB map[uint]*FavIconDB

	// stores FavIconDB ID according to FavIcon address
	Map_FavIconPtr_FavIconDBID map[*models.FavIcon]uint

	// stores FavIcon according to their gorm ID
	Map_FavIconDBID_FavIconPtr map[uint]*models.FavIcon

	db db.DBInterface

	stage *models.Stage
}

func (backRepoFavIcon *BackRepoFavIconStruct) GetStage() (stage *models.Stage) {
	stage = backRepoFavIcon.stage
	return
}

func (backRepoFavIcon *BackRepoFavIconStruct) GetDB() db.DBInterface {
	return backRepoFavIcon.db
}

// GetFavIconDBFromFavIconPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFavIcon *BackRepoFavIconStruct) GetFavIconDBFromFavIconPtr(favicon *models.FavIcon) (faviconDB *FavIconDB) {
	id := backRepoFavIcon.Map_FavIconPtr_FavIconDBID[favicon]
	faviconDB = backRepoFavIcon.Map_FavIconDBID_FavIconDB[id]
	return
}

// BackRepoFavIcon.CommitPhaseOne commits all staged instances of FavIcon to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFavIcon *BackRepoFavIconStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var favicons []*models.FavIcon
	for favicon := range stage.FavIcons {
		favicons = append(favicons, favicon)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(favicons, func(i, j int) bool {
		return stage.FavIconMap_Staged_Order[favicons[i]] < stage.FavIconMap_Staged_Order[favicons[j]]
	})

	for _, favicon := range favicons {
		backRepoFavIcon.CommitPhaseOneInstance(favicon)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, favicon := range backRepoFavIcon.Map_FavIconDBID_FavIconPtr {
		if _, ok := stage.FavIcons[favicon]; !ok {
			backRepoFavIcon.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFavIcon.CommitDeleteInstance commits deletion of FavIcon to the BackRepo
func (backRepoFavIcon *BackRepoFavIconStruct) CommitDeleteInstance(id uint) (Error error) {

	favicon := backRepoFavIcon.Map_FavIconDBID_FavIconPtr[id]

	// favicon is not staged anymore, remove faviconDB
	faviconDB := backRepoFavIcon.Map_FavIconDBID_FavIconDB[id]
	db, _ := backRepoFavIcon.db.Unscoped()
	_, err := db.Delete(faviconDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoFavIcon.Map_FavIconPtr_FavIconDBID, favicon)
	delete(backRepoFavIcon.Map_FavIconDBID_FavIconPtr, id)
	delete(backRepoFavIcon.Map_FavIconDBID_FavIconDB, id)

	return
}

// BackRepoFavIcon.CommitPhaseOneInstance commits favicon staged instances of FavIcon to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFavIcon *BackRepoFavIconStruct) CommitPhaseOneInstance(favicon *models.FavIcon) (Error error) {

	// check if the favicon is not commited yet
	if _, ok := backRepoFavIcon.Map_FavIconPtr_FavIconDBID[favicon]; ok {
		return
	}

	// initiate favicon
	var faviconDB FavIconDB
	faviconDB.CopyBasicFieldsFromFavIcon(favicon)

	_, err := backRepoFavIcon.db.Create(&faviconDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoFavIcon.Map_FavIconPtr_FavIconDBID[favicon] = faviconDB.ID
	backRepoFavIcon.Map_FavIconDBID_FavIconPtr[faviconDB.ID] = favicon
	backRepoFavIcon.Map_FavIconDBID_FavIconDB[faviconDB.ID] = &faviconDB

	return
}

// BackRepoFavIcon.CommitPhaseTwo commits all staged instances of FavIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFavIcon *BackRepoFavIconStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, favicon := range backRepoFavIcon.Map_FavIconDBID_FavIconPtr {
		backRepoFavIcon.CommitPhaseTwoInstance(backRepo, idx, favicon)
	}

	return
}

// BackRepoFavIcon.CommitPhaseTwoInstance commits {{structname }} of models.FavIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFavIcon *BackRepoFavIconStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, favicon *models.FavIcon) (Error error) {

	// fetch matching faviconDB
	if faviconDB, ok := backRepoFavIcon.Map_FavIconDBID_FavIconDB[idx]; ok {

		faviconDB.CopyBasicFieldsFromFavIcon(favicon)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoFavIcon.db.Save(faviconDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FavIcon intance %s", favicon.Name))
		return err
	}

	return
}

// BackRepoFavIcon.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFavIcon *BackRepoFavIconStruct) CheckoutPhaseOne() (Error error) {

	faviconDBArray := make([]FavIconDB, 0)
	_, err := backRepoFavIcon.db.Find(&faviconDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	faviconInstancesToBeRemovedFromTheStage := make(map[*models.FavIcon]any)
	for key, value := range backRepoFavIcon.stage.FavIcons {
		faviconInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, faviconDB := range faviconDBArray {
		backRepoFavIcon.CheckoutPhaseOneInstance(&faviconDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		favicon, ok := backRepoFavIcon.Map_FavIconDBID_FavIconPtr[faviconDB.ID]
		if ok {
			delete(faviconInstancesToBeRemovedFromTheStage, favicon)
		}
	}

	// remove from stage and back repo's 3 maps all favicons that are not in the checkout
	for favicon := range faviconInstancesToBeRemovedFromTheStage {
		favicon.Unstage(backRepoFavIcon.GetStage())

		// remove instance from the back repo 3 maps
		faviconID := backRepoFavIcon.Map_FavIconPtr_FavIconDBID[favicon]
		delete(backRepoFavIcon.Map_FavIconPtr_FavIconDBID, favicon)
		delete(backRepoFavIcon.Map_FavIconDBID_FavIconDB, faviconID)
		delete(backRepoFavIcon.Map_FavIconDBID_FavIconPtr, faviconID)
	}

	return
}

// CheckoutPhaseOneInstance takes a faviconDB that has been found in the DB, updates the backRepo and stages the
// models version of the faviconDB
func (backRepoFavIcon *BackRepoFavIconStruct) CheckoutPhaseOneInstance(faviconDB *FavIconDB) (Error error) {

	favicon, ok := backRepoFavIcon.Map_FavIconDBID_FavIconPtr[faviconDB.ID]
	if !ok {
		favicon = new(models.FavIcon)

		backRepoFavIcon.Map_FavIconDBID_FavIconPtr[faviconDB.ID] = favicon
		backRepoFavIcon.Map_FavIconPtr_FavIconDBID[favicon] = faviconDB.ID

		// append model store with the new element
		favicon.Name = faviconDB.Name_Data.String
		favicon.Stage(backRepoFavIcon.GetStage())
	}
	faviconDB.CopyBasicFieldsToFavIcon(favicon)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	favicon.Stage(backRepoFavIcon.GetStage())

	// preserve pointer to faviconDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FavIconDBID_FavIconDB)[faviconDB hold variable pointers
	faviconDB_Data := *faviconDB
	preservedPtrToFavIcon := &faviconDB_Data
	backRepoFavIcon.Map_FavIconDBID_FavIconDB[faviconDB.ID] = preservedPtrToFavIcon

	return
}

// BackRepoFavIcon.CheckoutPhaseTwo Checkouts all staged instances of FavIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFavIcon *BackRepoFavIconStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, faviconDB := range backRepoFavIcon.Map_FavIconDBID_FavIconDB {
		backRepoFavIcon.CheckoutPhaseTwoInstance(backRepo, faviconDB)
	}
	return
}

// BackRepoFavIcon.CheckoutPhaseTwoInstance Checkouts staged instances of FavIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFavIcon *BackRepoFavIconStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, faviconDB *FavIconDB) (Error error) {

	favicon := backRepoFavIcon.Map_FavIconDBID_FavIconPtr[faviconDB.ID]

	faviconDB.DecodePointers(backRepo, favicon)

	return
}

func (faviconDB *FavIconDB) DecodePointers(backRepo *BackRepoStruct, favicon *models.FavIcon) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFavIcon allows commit of a single favicon (if already staged)
func (backRepo *BackRepoStruct) CommitFavIcon(favicon *models.FavIcon) {
	backRepo.BackRepoFavIcon.CommitPhaseOneInstance(favicon)
	if id, ok := backRepo.BackRepoFavIcon.Map_FavIconPtr_FavIconDBID[favicon]; ok {
		backRepo.BackRepoFavIcon.CommitPhaseTwoInstance(backRepo, id, favicon)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFavIcon allows checkout of a single favicon (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFavIcon(favicon *models.FavIcon) {
	// check if the favicon is staged
	if _, ok := backRepo.BackRepoFavIcon.Map_FavIconPtr_FavIconDBID[favicon]; ok {

		if id, ok := backRepo.BackRepoFavIcon.Map_FavIconPtr_FavIconDBID[favicon]; ok {
			var faviconDB FavIconDB
			faviconDB.ID = id

			if _, err := backRepo.BackRepoFavIcon.db.First(&faviconDB, id); err != nil {
				log.Fatalln("CheckoutFavIcon : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFavIcon.CheckoutPhaseOneInstance(&faviconDB)
			backRepo.BackRepoFavIcon.CheckoutPhaseTwoInstance(backRepo, &faviconDB)
		}
	}
}

// CopyBasicFieldsFromFavIcon
func (faviconDB *FavIconDB) CopyBasicFieldsFromFavIcon(favicon *models.FavIcon) {
	// insertion point for fields commit

	faviconDB.Name_Data.String = favicon.Name
	faviconDB.Name_Data.Valid = true

	faviconDB.SVG_Data.String = favicon.SVG
	faviconDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromFavIcon_WOP
func (faviconDB *FavIconDB) CopyBasicFieldsFromFavIcon_WOP(favicon *models.FavIcon_WOP) {
	// insertion point for fields commit

	faviconDB.Name_Data.String = favicon.Name
	faviconDB.Name_Data.Valid = true

	faviconDB.SVG_Data.String = favicon.SVG
	faviconDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromFavIconWOP
func (faviconDB *FavIconDB) CopyBasicFieldsFromFavIconWOP(favicon *FavIconWOP) {
	// insertion point for fields commit

	faviconDB.Name_Data.String = favicon.Name
	faviconDB.Name_Data.Valid = true

	faviconDB.SVG_Data.String = favicon.SVG
	faviconDB.SVG_Data.Valid = true
}

// CopyBasicFieldsToFavIcon
func (faviconDB *FavIconDB) CopyBasicFieldsToFavIcon(favicon *models.FavIcon) {
	// insertion point for checkout of basic fields (back repo to stage)
	favicon.Name = faviconDB.Name_Data.String
	favicon.SVG = faviconDB.SVG_Data.String
}

// CopyBasicFieldsToFavIcon_WOP
func (faviconDB *FavIconDB) CopyBasicFieldsToFavIcon_WOP(favicon *models.FavIcon_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	favicon.Name = faviconDB.Name_Data.String
	favicon.SVG = faviconDB.SVG_Data.String
}

// CopyBasicFieldsToFavIconWOP
func (faviconDB *FavIconDB) CopyBasicFieldsToFavIconWOP(favicon *FavIconWOP) {
	favicon.ID = int(faviconDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	favicon.Name = faviconDB.Name_Data.String
	favicon.SVG = faviconDB.SVG_Data.String
}

// Backup generates a json file from a slice of all FavIconDB instances in the backrepo
func (backRepoFavIcon *BackRepoFavIconStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FavIconDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FavIconDB, 0)
	for _, faviconDB := range backRepoFavIcon.Map_FavIconDBID_FavIconDB {
		forBackup = append(forBackup, faviconDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FavIcon ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FavIcon file", err.Error())
	}
}

// Backup generates a json file from a slice of all FavIconDB instances in the backrepo
func (backRepoFavIcon *BackRepoFavIconStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FavIconDB, 0)
	for _, faviconDB := range backRepoFavIcon.Map_FavIconDBID_FavIconDB {
		forBackup = append(forBackup, faviconDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FavIcon")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FavIcon_Fields, -1)
	for _, faviconDB := range forBackup {

		var faviconWOP FavIconWOP
		faviconDB.CopyBasicFieldsToFavIconWOP(&faviconWOP)

		row := sh.AddRow()
		row.WriteStruct(&faviconWOP, -1)
	}
}

// RestoreXL from the "FavIcon" sheet all FavIconDB instances
func (backRepoFavIcon *BackRepoFavIconStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFavIconid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FavIcon"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFavIcon.rowVisitorFavIcon)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFavIcon *BackRepoFavIconStruct) rowVisitorFavIcon(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var faviconWOP FavIconWOP
		row.ReadStruct(&faviconWOP)

		// add the unmarshalled struct to the stage
		faviconDB := new(FavIconDB)
		faviconDB.CopyBasicFieldsFromFavIconWOP(&faviconWOP)

		faviconDB_ID_atBackupTime := faviconDB.ID
		faviconDB.ID = 0
		_, err := backRepoFavIcon.db.Create(faviconDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFavIcon.Map_FavIconDBID_FavIconDB[faviconDB.ID] = faviconDB
		BackRepoFavIconid_atBckpTime_newID[faviconDB_ID_atBackupTime] = faviconDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FavIconDB.json" in dirPath that stores an array
// of FavIconDB and stores it in the database
// the map BackRepoFavIconid_atBckpTime_newID is updated accordingly
func (backRepoFavIcon *BackRepoFavIconStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFavIconid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FavIconDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FavIcon file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FavIconDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FavIconDBID_FavIconDB
	for _, faviconDB := range forRestore {

		faviconDB_ID_atBackupTime := faviconDB.ID
		faviconDB.ID = 0
		_, err := backRepoFavIcon.db.Create(faviconDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFavIcon.Map_FavIconDBID_FavIconDB[faviconDB.ID] = faviconDB
		BackRepoFavIconid_atBckpTime_newID[faviconDB_ID_atBackupTime] = faviconDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FavIcon file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FavIcon>id_atBckpTime_newID
// to compute new index
func (backRepoFavIcon *BackRepoFavIconStruct) RestorePhaseTwo() {

	for _, faviconDB := range backRepoFavIcon.Map_FavIconDBID_FavIconDB {

		// next line of code is to avert unused variable compilation error
		_ = faviconDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoFavIcon.db.Model(faviconDB)
		_, err := db.Updates(*faviconDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoFavIcon.ResetReversePointers commits all staged instances of FavIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFavIcon *BackRepoFavIconStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, favicon := range backRepoFavIcon.Map_FavIconDBID_FavIconPtr {
		backRepoFavIcon.ResetReversePointersInstance(backRepo, idx, favicon)
	}

	return
}

func (backRepoFavIcon *BackRepoFavIconStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, favicon *models.FavIcon) (Error error) {

	// fetch matching faviconDB
	if faviconDB, ok := backRepoFavIcon.Map_FavIconDBID_FavIconDB[idx]; ok {
		_ = faviconDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFavIconid_atBckpTime_newID map[uint]uint
