// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Title_sql sql.NullBool
var dummy_Title_time time.Duration
var dummy_Title_sort sort.Float64Slice

// TitleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model titleAPI
type TitleAPI struct {
	gorm.Model

	models.Title_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TitlePointersEncoding TitlePointersEncoding
}

// TitlePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TitlePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TitleDB describes a title in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model titleDB
type TitleDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field titleDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TitlePointersEncoding
}

// TitleDBs arrays titleDBs
// swagger:response titleDBsResponse
type TitleDBs []TitleDB

// TitleDBResponse provides response
// swagger:response titleDBResponse
type TitleDBResponse struct {
	TitleDB
}

// TitleWOP is a Title without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TitleWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Title_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTitleStruct struct {
	// stores TitleDB according to their gorm ID
	Map_TitleDBID_TitleDB map[uint]*TitleDB

	// stores TitleDB ID according to Title address
	Map_TitlePtr_TitleDBID map[*models.Title]uint

	// stores Title according to their gorm ID
	Map_TitleDBID_TitlePtr map[uint]*models.Title

	db db.DBInterface

	stage *models.Stage
}

func (backRepoTitle *BackRepoTitleStruct) GetStage() (stage *models.Stage) {
	stage = backRepoTitle.stage
	return
}

func (backRepoTitle *BackRepoTitleStruct) GetDB() db.DBInterface {
	return backRepoTitle.db
}

// GetTitleDBFromTitlePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTitle *BackRepoTitleStruct) GetTitleDBFromTitlePtr(title *models.Title) (titleDB *TitleDB) {
	id := backRepoTitle.Map_TitlePtr_TitleDBID[title]
	titleDB = backRepoTitle.Map_TitleDBID_TitleDB[id]
	return
}

// BackRepoTitle.CommitPhaseOne commits all staged instances of Title to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTitle *BackRepoTitleStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var titles []*models.Title
	for title := range stage.Titles {
		titles = append(titles, title)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(titles, func(i, j int) bool {
		return stage.TitleMap_Staged_Order[titles[i]] < stage.TitleMap_Staged_Order[titles[j]]
	})

	for _, title := range titles {
		backRepoTitle.CommitPhaseOneInstance(title)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, title := range backRepoTitle.Map_TitleDBID_TitlePtr {
		if _, ok := stage.Titles[title]; !ok {
			backRepoTitle.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTitle.CommitDeleteInstance commits deletion of Title to the BackRepo
func (backRepoTitle *BackRepoTitleStruct) CommitDeleteInstance(id uint) (Error error) {

	title := backRepoTitle.Map_TitleDBID_TitlePtr[id]

	// title is not staged anymore, remove titleDB
	titleDB := backRepoTitle.Map_TitleDBID_TitleDB[id]
	db, _ := backRepoTitle.db.Unscoped()
	_, err := db.Delete(titleDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoTitle.Map_TitlePtr_TitleDBID, title)
	delete(backRepoTitle.Map_TitleDBID_TitlePtr, id)
	delete(backRepoTitle.Map_TitleDBID_TitleDB, id)

	return
}

// BackRepoTitle.CommitPhaseOneInstance commits title staged instances of Title to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTitle *BackRepoTitleStruct) CommitPhaseOneInstance(title *models.Title) (Error error) {

	// check if the title is not commited yet
	if _, ok := backRepoTitle.Map_TitlePtr_TitleDBID[title]; ok {
		return
	}

	// initiate title
	var titleDB TitleDB
	titleDB.CopyBasicFieldsFromTitle(title)

	_, err := backRepoTitle.db.Create(&titleDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoTitle.Map_TitlePtr_TitleDBID[title] = titleDB.ID
	backRepoTitle.Map_TitleDBID_TitlePtr[titleDB.ID] = title
	backRepoTitle.Map_TitleDBID_TitleDB[titleDB.ID] = &titleDB

	return
}

// BackRepoTitle.CommitPhaseTwo commits all staged instances of Title to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTitle *BackRepoTitleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, title := range backRepoTitle.Map_TitleDBID_TitlePtr {
		backRepoTitle.CommitPhaseTwoInstance(backRepo, idx, title)
	}

	return
}

// BackRepoTitle.CommitPhaseTwoInstance commits {{structname }} of models.Title to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTitle *BackRepoTitleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, title *models.Title) (Error error) {

	// fetch matching titleDB
	if titleDB, ok := backRepoTitle.Map_TitleDBID_TitleDB[idx]; ok {

		titleDB.CopyBasicFieldsFromTitle(title)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoTitle.db.Save(titleDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Title intance %s", title.Name))
		return err
	}

	return
}

// BackRepoTitle.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTitle *BackRepoTitleStruct) CheckoutPhaseOne() (Error error) {

	titleDBArray := make([]TitleDB, 0)
	_, err := backRepoTitle.db.Find(&titleDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	titleInstancesToBeRemovedFromTheStage := make(map[*models.Title]any)
	for key, value := range backRepoTitle.stage.Titles {
		titleInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, titleDB := range titleDBArray {
		backRepoTitle.CheckoutPhaseOneInstance(&titleDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		title, ok := backRepoTitle.Map_TitleDBID_TitlePtr[titleDB.ID]
		if ok {
			delete(titleInstancesToBeRemovedFromTheStage, title)
		}
	}

	// remove from stage and back repo's 3 maps all titles that are not in the checkout
	for title := range titleInstancesToBeRemovedFromTheStage {
		title.Unstage(backRepoTitle.GetStage())

		// remove instance from the back repo 3 maps
		titleID := backRepoTitle.Map_TitlePtr_TitleDBID[title]
		delete(backRepoTitle.Map_TitlePtr_TitleDBID, title)
		delete(backRepoTitle.Map_TitleDBID_TitleDB, titleID)
		delete(backRepoTitle.Map_TitleDBID_TitlePtr, titleID)
	}

	return
}

// CheckoutPhaseOneInstance takes a titleDB that has been found in the DB, updates the backRepo and stages the
// models version of the titleDB
func (backRepoTitle *BackRepoTitleStruct) CheckoutPhaseOneInstance(titleDB *TitleDB) (Error error) {

	title, ok := backRepoTitle.Map_TitleDBID_TitlePtr[titleDB.ID]
	if !ok {
		title = new(models.Title)

		backRepoTitle.Map_TitleDBID_TitlePtr[titleDB.ID] = title
		backRepoTitle.Map_TitlePtr_TitleDBID[title] = titleDB.ID

		// append model store with the new element
		title.Name = titleDB.Name_Data.String
		title.Stage(backRepoTitle.GetStage())
	}
	titleDB.CopyBasicFieldsToTitle(title)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	title.Stage(backRepoTitle.GetStage())

	// preserve pointer to titleDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TitleDBID_TitleDB)[titleDB hold variable pointers
	titleDB_Data := *titleDB
	preservedPtrToTitle := &titleDB_Data
	backRepoTitle.Map_TitleDBID_TitleDB[titleDB.ID] = preservedPtrToTitle

	return
}

// BackRepoTitle.CheckoutPhaseTwo Checkouts all staged instances of Title to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTitle *BackRepoTitleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, titleDB := range backRepoTitle.Map_TitleDBID_TitleDB {
		backRepoTitle.CheckoutPhaseTwoInstance(backRepo, titleDB)
	}
	return
}

// BackRepoTitle.CheckoutPhaseTwoInstance Checkouts staged instances of Title to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTitle *BackRepoTitleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, titleDB *TitleDB) (Error error) {

	title := backRepoTitle.Map_TitleDBID_TitlePtr[titleDB.ID]

	titleDB.DecodePointers(backRepo, title)

	return
}

func (titleDB *TitleDB) DecodePointers(backRepo *BackRepoStruct, title *models.Title) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTitle allows commit of a single title (if already staged)
func (backRepo *BackRepoStruct) CommitTitle(title *models.Title) {
	backRepo.BackRepoTitle.CommitPhaseOneInstance(title)
	if id, ok := backRepo.BackRepoTitle.Map_TitlePtr_TitleDBID[title]; ok {
		backRepo.BackRepoTitle.CommitPhaseTwoInstance(backRepo, id, title)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTitle allows checkout of a single title (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTitle(title *models.Title) {
	// check if the title is staged
	if _, ok := backRepo.BackRepoTitle.Map_TitlePtr_TitleDBID[title]; ok {

		if id, ok := backRepo.BackRepoTitle.Map_TitlePtr_TitleDBID[title]; ok {
			var titleDB TitleDB
			titleDB.ID = id

			if _, err := backRepo.BackRepoTitle.db.First(&titleDB, id); err != nil {
				log.Fatalln("CheckoutTitle : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTitle.CheckoutPhaseOneInstance(&titleDB)
			backRepo.BackRepoTitle.CheckoutPhaseTwoInstance(backRepo, &titleDB)
		}
	}
}

// CopyBasicFieldsFromTitle
func (titleDB *TitleDB) CopyBasicFieldsFromTitle(title *models.Title) {
	// insertion point for fields commit

	titleDB.Name_Data.String = title.Name
	titleDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTitle_WOP
func (titleDB *TitleDB) CopyBasicFieldsFromTitle_WOP(title *models.Title_WOP) {
	// insertion point for fields commit

	titleDB.Name_Data.String = title.Name
	titleDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTitleWOP
func (titleDB *TitleDB) CopyBasicFieldsFromTitleWOP(title *TitleWOP) {
	// insertion point for fields commit

	titleDB.Name_Data.String = title.Name
	titleDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTitle
func (titleDB *TitleDB) CopyBasicFieldsToTitle(title *models.Title) {
	// insertion point for checkout of basic fields (back repo to stage)
	title.Name = titleDB.Name_Data.String
}

// CopyBasicFieldsToTitle_WOP
func (titleDB *TitleDB) CopyBasicFieldsToTitle_WOP(title *models.Title_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	title.Name = titleDB.Name_Data.String
}

// CopyBasicFieldsToTitleWOP
func (titleDB *TitleDB) CopyBasicFieldsToTitleWOP(title *TitleWOP) {
	title.ID = int(titleDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	title.Name = titleDB.Name_Data.String
}

// Backup generates a json file from a slice of all TitleDB instances in the backrepo
func (backRepoTitle *BackRepoTitleStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TitleDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TitleDB, 0)
	for _, titleDB := range backRepoTitle.Map_TitleDBID_TitleDB {
		forBackup = append(forBackup, titleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Title ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Title file", err.Error())
	}
}

// Backup generates a json file from a slice of all TitleDB instances in the backrepo
func (backRepoTitle *BackRepoTitleStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TitleDB, 0)
	for _, titleDB := range backRepoTitle.Map_TitleDBID_TitleDB {
		forBackup = append(forBackup, titleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Title")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Title_Fields, -1)
	for _, titleDB := range forBackup {

		var titleWOP TitleWOP
		titleDB.CopyBasicFieldsToTitleWOP(&titleWOP)

		row := sh.AddRow()
		row.WriteStruct(&titleWOP, -1)
	}
}

// RestoreXL from the "Title" sheet all TitleDB instances
func (backRepoTitle *BackRepoTitleStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTitleid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Title"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTitle.rowVisitorTitle)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTitle *BackRepoTitleStruct) rowVisitorTitle(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var titleWOP TitleWOP
		row.ReadStruct(&titleWOP)

		// add the unmarshalled struct to the stage
		titleDB := new(TitleDB)
		titleDB.CopyBasicFieldsFromTitleWOP(&titleWOP)

		titleDB_ID_atBackupTime := titleDB.ID
		titleDB.ID = 0
		_, err := backRepoTitle.db.Create(titleDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoTitle.Map_TitleDBID_TitleDB[titleDB.ID] = titleDB
		BackRepoTitleid_atBckpTime_newID[titleDB_ID_atBackupTime] = titleDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TitleDB.json" in dirPath that stores an array
// of TitleDB and stores it in the database
// the map BackRepoTitleid_atBckpTime_newID is updated accordingly
func (backRepoTitle *BackRepoTitleStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTitleid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TitleDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Title file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TitleDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TitleDBID_TitleDB
	for _, titleDB := range forRestore {

		titleDB_ID_atBackupTime := titleDB.ID
		titleDB.ID = 0
		_, err := backRepoTitle.db.Create(titleDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoTitle.Map_TitleDBID_TitleDB[titleDB.ID] = titleDB
		BackRepoTitleid_atBckpTime_newID[titleDB_ID_atBackupTime] = titleDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Title file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Title>id_atBckpTime_newID
// to compute new index
func (backRepoTitle *BackRepoTitleStruct) RestorePhaseTwo() {

	for _, titleDB := range backRepoTitle.Map_TitleDBID_TitleDB {

		// next line of code is to avert unused variable compilation error
		_ = titleDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoTitle.db.Model(titleDB)
		_, err := db.Updates(*titleDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoTitle.ResetReversePointers commits all staged instances of Title to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTitle *BackRepoTitleStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, title := range backRepoTitle.Map_TitleDBID_TitlePtr {
		backRepoTitle.ResetReversePointersInstance(backRepo, idx, title)
	}

	return
}

func (backRepoTitle *BackRepoTitleStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, title *models.Title) (Error error) {

	// fetch matching titleDB
	if titleDB, ok := backRepoTitle.Map_TitleDBID_TitleDB[idx]; ok {
		_ = titleDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTitleid_atBckpTime_newID map[uint]uint
