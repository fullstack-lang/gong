// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_LogoOnTheLeft_sql sql.NullBool
var dummy_LogoOnTheLeft_time time.Duration
var dummy_LogoOnTheLeft_sort sort.Float64Slice

// LogoOnTheLeftAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model logoontheleftAPI
type LogoOnTheLeftAPI struct {
	gorm.Model

	models.LogoOnTheLeft_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LogoOnTheLeftPointersEncoding LogoOnTheLeftPointersEncoding
}

// LogoOnTheLeftPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LogoOnTheLeftPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// LogoOnTheLeftDB describes a logoontheleft in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model logoontheleftDB
type LogoOnTheLeftDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field logoontheleftDB.Name
	Name_Data sql.NullString

	// Declation for basic field logoontheleftDB.Width
	Width_Data sql.NullInt64

	// Declation for basic field logoontheleftDB.Height
	Height_Data sql.NullInt64

	// Declation for basic field logoontheleftDB.SVG
	SVG_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LogoOnTheLeftPointersEncoding
}

// LogoOnTheLeftDBs arrays logoontheleftDBs
// swagger:response logoontheleftDBsResponse
type LogoOnTheLeftDBs []LogoOnTheLeftDB

// LogoOnTheLeftDBResponse provides response
// swagger:response logoontheleftDBResponse
type LogoOnTheLeftDBResponse struct {
	LogoOnTheLeftDB
}

// LogoOnTheLeftWOP is a LogoOnTheLeft without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LogoOnTheLeftWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Width int `xlsx:"2"`

	Height int `xlsx:"3"`

	SVG string `xlsx:"4"`
	// insertion for WOP pointer fields
}

var LogoOnTheLeft_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Width",
	"Height",
	"SVG",
}

type BackRepoLogoOnTheLeftStruct struct {
	// stores LogoOnTheLeftDB according to their gorm ID
	Map_LogoOnTheLeftDBID_LogoOnTheLeftDB map[uint]*LogoOnTheLeftDB

	// stores LogoOnTheLeftDB ID according to LogoOnTheLeft address
	Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID map[*models.LogoOnTheLeft]uint

	// stores LogoOnTheLeft according to their gorm ID
	Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr map[uint]*models.LogoOnTheLeft

	db db.DBInterface

	stage *models.Stage
}

func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) GetStage() (stage *models.Stage) {
	stage = backRepoLogoOnTheLeft.stage
	return
}

func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) GetDB() db.DBInterface {
	return backRepoLogoOnTheLeft.db
}

// GetLogoOnTheLeftDBFromLogoOnTheLeftPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) GetLogoOnTheLeftDBFromLogoOnTheLeftPtr(logoontheleft *models.LogoOnTheLeft) (logoontheleftDB *LogoOnTheLeftDB) {
	id := backRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID[logoontheleft]
	logoontheleftDB = backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB[id]
	return
}

// BackRepoLogoOnTheLeft.CommitPhaseOne commits all staged instances of LogoOnTheLeft to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var logoonthelefts []*models.LogoOnTheLeft
	for logoontheleft := range stage.LogoOnTheLefts {
		logoonthelefts = append(logoonthelefts, logoontheleft)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(logoonthelefts, func(i, j int) bool {
		return stage.LogoOnTheLeftMap_Staged_Order[logoonthelefts[i]] < stage.LogoOnTheLeftMap_Staged_Order[logoonthelefts[j]]
	})

	for _, logoontheleft := range logoonthelefts {
		backRepoLogoOnTheLeft.CommitPhaseOneInstance(logoontheleft)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, logoontheleft := range backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr {
		if _, ok := stage.LogoOnTheLefts[logoontheleft]; !ok {
			backRepoLogoOnTheLeft.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLogoOnTheLeft.CommitDeleteInstance commits deletion of LogoOnTheLeft to the BackRepo
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CommitDeleteInstance(id uint) (Error error) {

	logoontheleft := backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr[id]

	// logoontheleft is not staged anymore, remove logoontheleftDB
	logoontheleftDB := backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB[id]
	db, _ := backRepoLogoOnTheLeft.db.Unscoped()
	_, err := db.Delete(logoontheleftDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID, logoontheleft)
	delete(backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr, id)
	delete(backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB, id)

	return
}

// BackRepoLogoOnTheLeft.CommitPhaseOneInstance commits logoontheleft staged instances of LogoOnTheLeft to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CommitPhaseOneInstance(logoontheleft *models.LogoOnTheLeft) (Error error) {

	// check if the logoontheleft is not commited yet
	if _, ok := backRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID[logoontheleft]; ok {
		return
	}

	// initiate logoontheleft
	var logoontheleftDB LogoOnTheLeftDB
	logoontheleftDB.CopyBasicFieldsFromLogoOnTheLeft(logoontheleft)

	_, err := backRepoLogoOnTheLeft.db.Create(&logoontheleftDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID[logoontheleft] = logoontheleftDB.ID
	backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr[logoontheleftDB.ID] = logoontheleft
	backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB[logoontheleftDB.ID] = &logoontheleftDB

	return
}

// BackRepoLogoOnTheLeft.CommitPhaseTwo commits all staged instances of LogoOnTheLeft to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, logoontheleft := range backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr {
		backRepoLogoOnTheLeft.CommitPhaseTwoInstance(backRepo, idx, logoontheleft)
	}

	return
}

// BackRepoLogoOnTheLeft.CommitPhaseTwoInstance commits {{structname }} of models.LogoOnTheLeft to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, logoontheleft *models.LogoOnTheLeft) (Error error) {

	// fetch matching logoontheleftDB
	if logoontheleftDB, ok := backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB[idx]; ok {

		logoontheleftDB.CopyBasicFieldsFromLogoOnTheLeft(logoontheleft)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoLogoOnTheLeft.db.Save(logoontheleftDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown LogoOnTheLeft intance %s", logoontheleft.Name))
		return err
	}

	return
}

// BackRepoLogoOnTheLeft.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CheckoutPhaseOne() (Error error) {

	logoontheleftDBArray := make([]LogoOnTheLeftDB, 0)
	_, err := backRepoLogoOnTheLeft.db.Find(&logoontheleftDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	logoontheleftInstancesToBeRemovedFromTheStage := make(map[*models.LogoOnTheLeft]any)
	for key, value := range backRepoLogoOnTheLeft.stage.LogoOnTheLefts {
		logoontheleftInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, logoontheleftDB := range logoontheleftDBArray {
		backRepoLogoOnTheLeft.CheckoutPhaseOneInstance(&logoontheleftDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		logoontheleft, ok := backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr[logoontheleftDB.ID]
		if ok {
			delete(logoontheleftInstancesToBeRemovedFromTheStage, logoontheleft)
		}
	}

	// remove from stage and back repo's 3 maps all logoonthelefts that are not in the checkout
	for logoontheleft := range logoontheleftInstancesToBeRemovedFromTheStage {
		logoontheleft.Unstage(backRepoLogoOnTheLeft.GetStage())

		// remove instance from the back repo 3 maps
		logoontheleftID := backRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID[logoontheleft]
		delete(backRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID, logoontheleft)
		delete(backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB, logoontheleftID)
		delete(backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr, logoontheleftID)
	}

	return
}

// CheckoutPhaseOneInstance takes a logoontheleftDB that has been found in the DB, updates the backRepo and stages the
// models version of the logoontheleftDB
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CheckoutPhaseOneInstance(logoontheleftDB *LogoOnTheLeftDB) (Error error) {

	logoontheleft, ok := backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr[logoontheleftDB.ID]
	if !ok {
		logoontheleft = new(models.LogoOnTheLeft)

		backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr[logoontheleftDB.ID] = logoontheleft
		backRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID[logoontheleft] = logoontheleftDB.ID

		// append model store with the new element
		logoontheleft.Name = logoontheleftDB.Name_Data.String
		logoontheleft.Stage(backRepoLogoOnTheLeft.GetStage())
	}
	logoontheleftDB.CopyBasicFieldsToLogoOnTheLeft(logoontheleft)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	logoontheleft.Stage(backRepoLogoOnTheLeft.GetStage())

	// preserve pointer to logoontheleftDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LogoOnTheLeftDBID_LogoOnTheLeftDB)[logoontheleftDB hold variable pointers
	logoontheleftDB_Data := *logoontheleftDB
	preservedPtrToLogoOnTheLeft := &logoontheleftDB_Data
	backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB[logoontheleftDB.ID] = preservedPtrToLogoOnTheLeft

	return
}

// BackRepoLogoOnTheLeft.CheckoutPhaseTwo Checkouts all staged instances of LogoOnTheLeft to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, logoontheleftDB := range backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB {
		backRepoLogoOnTheLeft.CheckoutPhaseTwoInstance(backRepo, logoontheleftDB)
	}
	return
}

// BackRepoLogoOnTheLeft.CheckoutPhaseTwoInstance Checkouts staged instances of LogoOnTheLeft to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, logoontheleftDB *LogoOnTheLeftDB) (Error error) {

	logoontheleft := backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr[logoontheleftDB.ID]

	logoontheleftDB.DecodePointers(backRepo, logoontheleft)

	return
}

func (logoontheleftDB *LogoOnTheLeftDB) DecodePointers(backRepo *BackRepoStruct, logoontheleft *models.LogoOnTheLeft) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLogoOnTheLeft allows commit of a single logoontheleft (if already staged)
func (backRepo *BackRepoStruct) CommitLogoOnTheLeft(logoontheleft *models.LogoOnTheLeft) {
	backRepo.BackRepoLogoOnTheLeft.CommitPhaseOneInstance(logoontheleft)
	if id, ok := backRepo.BackRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID[logoontheleft]; ok {
		backRepo.BackRepoLogoOnTheLeft.CommitPhaseTwoInstance(backRepo, id, logoontheleft)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLogoOnTheLeft allows checkout of a single logoontheleft (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLogoOnTheLeft(logoontheleft *models.LogoOnTheLeft) {
	// check if the logoontheleft is staged
	if _, ok := backRepo.BackRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID[logoontheleft]; ok {

		if id, ok := backRepo.BackRepoLogoOnTheLeft.Map_LogoOnTheLeftPtr_LogoOnTheLeftDBID[logoontheleft]; ok {
			var logoontheleftDB LogoOnTheLeftDB
			logoontheleftDB.ID = id

			if _, err := backRepo.BackRepoLogoOnTheLeft.db.First(&logoontheleftDB, id); err != nil {
				log.Fatalln("CheckoutLogoOnTheLeft : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLogoOnTheLeft.CheckoutPhaseOneInstance(&logoontheleftDB)
			backRepo.BackRepoLogoOnTheLeft.CheckoutPhaseTwoInstance(backRepo, &logoontheleftDB)
		}
	}
}

// CopyBasicFieldsFromLogoOnTheLeft
func (logoontheleftDB *LogoOnTheLeftDB) CopyBasicFieldsFromLogoOnTheLeft(logoontheleft *models.LogoOnTheLeft) {
	// insertion point for fields commit

	logoontheleftDB.Name_Data.String = logoontheleft.Name
	logoontheleftDB.Name_Data.Valid = true

	logoontheleftDB.Width_Data.Int64 = int64(logoontheleft.Width)
	logoontheleftDB.Width_Data.Valid = true

	logoontheleftDB.Height_Data.Int64 = int64(logoontheleft.Height)
	logoontheleftDB.Height_Data.Valid = true

	logoontheleftDB.SVG_Data.String = logoontheleft.SVG
	logoontheleftDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromLogoOnTheLeft_WOP
func (logoontheleftDB *LogoOnTheLeftDB) CopyBasicFieldsFromLogoOnTheLeft_WOP(logoontheleft *models.LogoOnTheLeft_WOP) {
	// insertion point for fields commit

	logoontheleftDB.Name_Data.String = logoontheleft.Name
	logoontheleftDB.Name_Data.Valid = true

	logoontheleftDB.Width_Data.Int64 = int64(logoontheleft.Width)
	logoontheleftDB.Width_Data.Valid = true

	logoontheleftDB.Height_Data.Int64 = int64(logoontheleft.Height)
	logoontheleftDB.Height_Data.Valid = true

	logoontheleftDB.SVG_Data.String = logoontheleft.SVG
	logoontheleftDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromLogoOnTheLeftWOP
func (logoontheleftDB *LogoOnTheLeftDB) CopyBasicFieldsFromLogoOnTheLeftWOP(logoontheleft *LogoOnTheLeftWOP) {
	// insertion point for fields commit

	logoontheleftDB.Name_Data.String = logoontheleft.Name
	logoontheleftDB.Name_Data.Valid = true

	logoontheleftDB.Width_Data.Int64 = int64(logoontheleft.Width)
	logoontheleftDB.Width_Data.Valid = true

	logoontheleftDB.Height_Data.Int64 = int64(logoontheleft.Height)
	logoontheleftDB.Height_Data.Valid = true

	logoontheleftDB.SVG_Data.String = logoontheleft.SVG
	logoontheleftDB.SVG_Data.Valid = true
}

// CopyBasicFieldsToLogoOnTheLeft
func (logoontheleftDB *LogoOnTheLeftDB) CopyBasicFieldsToLogoOnTheLeft(logoontheleft *models.LogoOnTheLeft) {
	// insertion point for checkout of basic fields (back repo to stage)
	logoontheleft.Name = logoontheleftDB.Name_Data.String
	logoontheleft.Width = int(logoontheleftDB.Width_Data.Int64)
	logoontheleft.Height = int(logoontheleftDB.Height_Data.Int64)
	logoontheleft.SVG = logoontheleftDB.SVG_Data.String
}

// CopyBasicFieldsToLogoOnTheLeft_WOP
func (logoontheleftDB *LogoOnTheLeftDB) CopyBasicFieldsToLogoOnTheLeft_WOP(logoontheleft *models.LogoOnTheLeft_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	logoontheleft.Name = logoontheleftDB.Name_Data.String
	logoontheleft.Width = int(logoontheleftDB.Width_Data.Int64)
	logoontheleft.Height = int(logoontheleftDB.Height_Data.Int64)
	logoontheleft.SVG = logoontheleftDB.SVG_Data.String
}

// CopyBasicFieldsToLogoOnTheLeftWOP
func (logoontheleftDB *LogoOnTheLeftDB) CopyBasicFieldsToLogoOnTheLeftWOP(logoontheleft *LogoOnTheLeftWOP) {
	logoontheleft.ID = int(logoontheleftDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	logoontheleft.Name = logoontheleftDB.Name_Data.String
	logoontheleft.Width = int(logoontheleftDB.Width_Data.Int64)
	logoontheleft.Height = int(logoontheleftDB.Height_Data.Int64)
	logoontheleft.SVG = logoontheleftDB.SVG_Data.String
}

// Backup generates a json file from a slice of all LogoOnTheLeftDB instances in the backrepo
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LogoOnTheLeftDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LogoOnTheLeftDB, 0)
	for _, logoontheleftDB := range backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB {
		forBackup = append(forBackup, logoontheleftDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json LogoOnTheLeft ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json LogoOnTheLeft file", err.Error())
	}
}

// Backup generates a json file from a slice of all LogoOnTheLeftDB instances in the backrepo
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LogoOnTheLeftDB, 0)
	for _, logoontheleftDB := range backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB {
		forBackup = append(forBackup, logoontheleftDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("LogoOnTheLeft")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&LogoOnTheLeft_Fields, -1)
	for _, logoontheleftDB := range forBackup {

		var logoontheleftWOP LogoOnTheLeftWOP
		logoontheleftDB.CopyBasicFieldsToLogoOnTheLeftWOP(&logoontheleftWOP)

		row := sh.AddRow()
		row.WriteStruct(&logoontheleftWOP, -1)
	}
}

// RestoreXL from the "LogoOnTheLeft" sheet all LogoOnTheLeftDB instances
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLogoOnTheLeftid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["LogoOnTheLeft"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLogoOnTheLeft.rowVisitorLogoOnTheLeft)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) rowVisitorLogoOnTheLeft(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var logoontheleftWOP LogoOnTheLeftWOP
		row.ReadStruct(&logoontheleftWOP)

		// add the unmarshalled struct to the stage
		logoontheleftDB := new(LogoOnTheLeftDB)
		logoontheleftDB.CopyBasicFieldsFromLogoOnTheLeftWOP(&logoontheleftWOP)

		logoontheleftDB_ID_atBackupTime := logoontheleftDB.ID
		logoontheleftDB.ID = 0
		_, err := backRepoLogoOnTheLeft.db.Create(logoontheleftDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB[logoontheleftDB.ID] = logoontheleftDB
		BackRepoLogoOnTheLeftid_atBckpTime_newID[logoontheleftDB_ID_atBackupTime] = logoontheleftDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LogoOnTheLeftDB.json" in dirPath that stores an array
// of LogoOnTheLeftDB and stores it in the database
// the map BackRepoLogoOnTheLeftid_atBckpTime_newID is updated accordingly
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLogoOnTheLeftid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LogoOnTheLeftDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json LogoOnTheLeft file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LogoOnTheLeftDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LogoOnTheLeftDBID_LogoOnTheLeftDB
	for _, logoontheleftDB := range forRestore {

		logoontheleftDB_ID_atBackupTime := logoontheleftDB.ID
		logoontheleftDB.ID = 0
		_, err := backRepoLogoOnTheLeft.db.Create(logoontheleftDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB[logoontheleftDB.ID] = logoontheleftDB
		BackRepoLogoOnTheLeftid_atBckpTime_newID[logoontheleftDB_ID_atBackupTime] = logoontheleftDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json LogoOnTheLeft file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<LogoOnTheLeft>id_atBckpTime_newID
// to compute new index
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) RestorePhaseTwo() {

	for _, logoontheleftDB := range backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB {

		// next line of code is to avert unused variable compilation error
		_ = logoontheleftDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoLogoOnTheLeft.db.Model(logoontheleftDB)
		_, err := db.Updates(*logoontheleftDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoLogoOnTheLeft.ResetReversePointers commits all staged instances of LogoOnTheLeft to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, logoontheleft := range backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftPtr {
		backRepoLogoOnTheLeft.ResetReversePointersInstance(backRepo, idx, logoontheleft)
	}

	return
}

func (backRepoLogoOnTheLeft *BackRepoLogoOnTheLeftStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, logoontheleft *models.LogoOnTheLeft) (Error error) {

	// fetch matching logoontheleftDB
	if logoontheleftDB, ok := backRepoLogoOnTheLeft.Map_LogoOnTheLeftDBID_LogoOnTheLeftDB[idx]; ok {
		_ = logoontheleftDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLogoOnTheLeftid_atBckpTime_newID map[uint]uint
