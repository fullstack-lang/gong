// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AsSplit_sql sql.NullBool
var dummy_AsSplit_time time.Duration
var dummy_AsSplit_sort sort.Float64Slice

// AsSplitAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model assplitAPI
type AsSplitAPI struct {
	gorm.Model

	models.AsSplit_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AsSplitPointersEncoding AsSplitPointersEncoding
}

// AsSplitPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AsSplitPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field AsSplitAreas is a slice of pointers to another Struct (optional or 0..1)
	AsSplitAreas IntSlice `gorm:"type:TEXT"`
}

// AsSplitDB describes a assplit in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model assplitDB
type AsSplitDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field assplitDB.Name
	Name_Data sql.NullString

	// Declation for basic field assplitDB.Direction
	Direction_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AsSplitPointersEncoding
}

// AsSplitDBs arrays assplitDBs
// swagger:response assplitDBsResponse
type AsSplitDBs []AsSplitDB

// AsSplitDBResponse provides response
// swagger:response assplitDBResponse
type AsSplitDBResponse struct {
	AsSplitDB
}

// AsSplitWOP is a AsSplit without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AsSplitWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Direction models.Direction `xlsx:"2"`
	// insertion for WOP pointer fields
}

var AsSplit_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Direction",
}

type BackRepoAsSplitStruct struct {
	// stores AsSplitDB according to their gorm ID
	Map_AsSplitDBID_AsSplitDB map[uint]*AsSplitDB

	// stores AsSplitDB ID according to AsSplit address
	Map_AsSplitPtr_AsSplitDBID map[*models.AsSplit]uint

	// stores AsSplit according to their gorm ID
	Map_AsSplitDBID_AsSplitPtr map[uint]*models.AsSplit

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoAsSplit *BackRepoAsSplitStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAsSplit.stage
	return
}

func (backRepoAsSplit *BackRepoAsSplitStruct) GetDB() db.DBInterface {
	return backRepoAsSplit.db
}

// GetAsSplitDBFromAsSplitPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAsSplit *BackRepoAsSplitStruct) GetAsSplitDBFromAsSplitPtr(assplit *models.AsSplit) (assplitDB *AsSplitDB) {
	id := backRepoAsSplit.Map_AsSplitPtr_AsSplitDBID[assplit]
	assplitDB = backRepoAsSplit.Map_AsSplitDBID_AsSplitDB[id]
	return
}

// BackRepoAsSplit.CommitPhaseOne commits all staged instances of AsSplit to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAsSplit *BackRepoAsSplitStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var assplits []*models.AsSplit
	for assplit := range stage.AsSplits {
		assplits = append(assplits, assplit)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(assplits, func(i, j int) bool {
		return stage.Map_Staged_Order[assplits[i]] < stage.Map_Staged_Order[assplits[j]]
	})

	for _, assplit := range assplits {
		backRepoAsSplit.CommitPhaseOneInstance(assplit)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, assplit := range backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr {
		if _, ok := stage.AsSplits[assplit]; !ok {
			backRepoAsSplit.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAsSplit.CommitDeleteInstance commits deletion of AsSplit to the BackRepo
func (backRepoAsSplit *BackRepoAsSplitStruct) CommitDeleteInstance(id uint) (Error error) {

	assplit := backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr[id]

	// assplit is not staged anymore, remove assplitDB
	assplitDB := backRepoAsSplit.Map_AsSplitDBID_AsSplitDB[id]
	db, _ := backRepoAsSplit.db.Unscoped()
	_, err := db.Delete(assplitDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoAsSplit.Map_AsSplitPtr_AsSplitDBID, assplit)
	delete(backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr, id)
	delete(backRepoAsSplit.Map_AsSplitDBID_AsSplitDB, id)

	return
}

// BackRepoAsSplit.CommitPhaseOneInstance commits assplit staged instances of AsSplit to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAsSplit *BackRepoAsSplitStruct) CommitPhaseOneInstance(assplit *models.AsSplit) (Error error) {

	// check if the assplit is not commited yet
	if _, ok := backRepoAsSplit.Map_AsSplitPtr_AsSplitDBID[assplit]; ok {
		return
	}

	// initiate assplit
	var assplitDB AsSplitDB
	assplitDB.CopyBasicFieldsFromAsSplit(assplit)

	_, err := backRepoAsSplit.db.Create(&assplitDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoAsSplit.Map_AsSplitPtr_AsSplitDBID[assplit] = assplitDB.ID
	backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr[assplitDB.ID] = assplit
	backRepoAsSplit.Map_AsSplitDBID_AsSplitDB[assplitDB.ID] = &assplitDB

	return
}

// BackRepoAsSplit.CommitPhaseTwo commits all staged instances of AsSplit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplit *BackRepoAsSplitStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, assplit := range backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr {
		backRepoAsSplit.CommitPhaseTwoInstance(backRepo, idx, assplit)
	}

	return
}

// BackRepoAsSplit.CommitPhaseTwoInstance commits {{structname }} of models.AsSplit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplit *BackRepoAsSplitStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, assplit *models.AsSplit) (Error error) {

	// fetch matching assplitDB
	if assplitDB, ok := backRepoAsSplit.Map_AsSplitDBID_AsSplitDB[idx]; ok {

		assplitDB.CopyBasicFieldsFromAsSplit(assplit)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		assplitDB.AsSplitPointersEncoding.AsSplitAreas = make([]int, 0)
		// 2. encode
		for _, assplitareaAssocEnd := range assplit.AsSplitAreas {
			assplitareaAssocEnd_DB :=
				backRepo.BackRepoAsSplitArea.GetAsSplitAreaDBFromAsSplitAreaPtr(assplitareaAssocEnd)
			
			// the stage might be inconsistant, meaning that the assplitareaAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if assplitareaAssocEnd_DB == nil {
				continue
			}
			
			assplitDB.AsSplitPointersEncoding.AsSplitAreas =
				append(assplitDB.AsSplitPointersEncoding.AsSplitAreas, int(assplitareaAssocEnd_DB.ID))
		}

		_, err := backRepoAsSplit.db.Save(assplitDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AsSplit intance %s", assplit.Name))
		return err
	}

	return
}

// BackRepoAsSplit.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAsSplit *BackRepoAsSplitStruct) CheckoutPhaseOne() (Error error) {

	assplitDBArray := make([]AsSplitDB, 0)
	_, err := backRepoAsSplit.db.Find(&assplitDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	assplitInstancesToBeRemovedFromTheStage := make(map[*models.AsSplit]any)
	for key, value := range backRepoAsSplit.stage.AsSplits {
		assplitInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, assplitDB := range assplitDBArray {
		backRepoAsSplit.CheckoutPhaseOneInstance(&assplitDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		assplit, ok := backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr[assplitDB.ID]
		if ok {
			delete(assplitInstancesToBeRemovedFromTheStage, assplit)
		}
	}

	// remove from stage and back repo's 3 maps all assplits that are not in the checkout
	for assplit := range assplitInstancesToBeRemovedFromTheStage {
		assplit.Unstage(backRepoAsSplit.GetStage())

		// remove instance from the back repo 3 maps
		assplitID := backRepoAsSplit.Map_AsSplitPtr_AsSplitDBID[assplit]
		delete(backRepoAsSplit.Map_AsSplitPtr_AsSplitDBID, assplit)
		delete(backRepoAsSplit.Map_AsSplitDBID_AsSplitDB, assplitID)
		delete(backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr, assplitID)
	}

	return
}

// CheckoutPhaseOneInstance takes a assplitDB that has been found in the DB, updates the backRepo and stages the
// models version of the assplitDB
func (backRepoAsSplit *BackRepoAsSplitStruct) CheckoutPhaseOneInstance(assplitDB *AsSplitDB) (Error error) {

	assplit, ok := backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr[assplitDB.ID]
	if !ok {
		assplit = new(models.AsSplit)

		backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr[assplitDB.ID] = assplit
		backRepoAsSplit.Map_AsSplitPtr_AsSplitDBID[assplit] = assplitDB.ID

		// append model store with the new element
		assplit.Name = assplitDB.Name_Data.String
		assplit.Stage(backRepoAsSplit.GetStage())
	}
	assplitDB.CopyBasicFieldsToAsSplit(assplit)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	assplit.Stage(backRepoAsSplit.GetStage())

	// preserve pointer to assplitDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AsSplitDBID_AsSplitDB)[assplitDB hold variable pointers
	assplitDB_Data := *assplitDB
	preservedPtrToAsSplit := &assplitDB_Data
	backRepoAsSplit.Map_AsSplitDBID_AsSplitDB[assplitDB.ID] = preservedPtrToAsSplit

	return
}

// BackRepoAsSplit.CheckoutPhaseTwo Checkouts all staged instances of AsSplit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplit *BackRepoAsSplitStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, assplitDB := range backRepoAsSplit.Map_AsSplitDBID_AsSplitDB {
		backRepoAsSplit.CheckoutPhaseTwoInstance(backRepo, assplitDB)
	}
	return
}

// BackRepoAsSplit.CheckoutPhaseTwoInstance Checkouts staged instances of AsSplit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplit *BackRepoAsSplitStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, assplitDB *AsSplitDB) (Error error) {

	assplit := backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr[assplitDB.ID]

	assplitDB.DecodePointers(backRepo, assplit)

	return
}

func (assplitDB *AsSplitDB) DecodePointers(backRepo *BackRepoStruct, assplit *models.AsSplit) {

	// insertion point for checkout of pointer encoding
	// This loop redeem assplit.AsSplitAreas in the stage from the encode in the back repo
	// It parses all AsSplitAreaDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	assplit.AsSplitAreas = assplit.AsSplitAreas[:0]
	for _, _AsSplitAreaid := range assplitDB.AsSplitPointersEncoding.AsSplitAreas {
		assplit.AsSplitAreas = append(assplit.AsSplitAreas, backRepo.BackRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr[uint(_AsSplitAreaid)])
	}

	return
}

// CommitAsSplit allows commit of a single assplit (if already staged)
func (backRepo *BackRepoStruct) CommitAsSplit(assplit *models.AsSplit) {
	backRepo.BackRepoAsSplit.CommitPhaseOneInstance(assplit)
	if id, ok := backRepo.BackRepoAsSplit.Map_AsSplitPtr_AsSplitDBID[assplit]; ok {
		backRepo.BackRepoAsSplit.CommitPhaseTwoInstance(backRepo, id, assplit)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAsSplit allows checkout of a single assplit (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAsSplit(assplit *models.AsSplit) {
	// check if the assplit is staged
	if _, ok := backRepo.BackRepoAsSplit.Map_AsSplitPtr_AsSplitDBID[assplit]; ok {

		if id, ok := backRepo.BackRepoAsSplit.Map_AsSplitPtr_AsSplitDBID[assplit]; ok {
			var assplitDB AsSplitDB
			assplitDB.ID = id

			if _, err := backRepo.BackRepoAsSplit.db.First(&assplitDB, id); err != nil {
				log.Fatalln("CheckoutAsSplit : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAsSplit.CheckoutPhaseOneInstance(&assplitDB)
			backRepo.BackRepoAsSplit.CheckoutPhaseTwoInstance(backRepo, &assplitDB)
		}
	}
}

// CopyBasicFieldsFromAsSplit
func (assplitDB *AsSplitDB) CopyBasicFieldsFromAsSplit(assplit *models.AsSplit) {
	// insertion point for fields commit

	assplitDB.Name_Data.String = assplit.Name
	assplitDB.Name_Data.Valid = true

	assplitDB.Direction_Data.String = assplit.Direction.ToString()
	assplitDB.Direction_Data.Valid = true
}

// CopyBasicFieldsFromAsSplit_WOP
func (assplitDB *AsSplitDB) CopyBasicFieldsFromAsSplit_WOP(assplit *models.AsSplit_WOP) {
	// insertion point for fields commit

	assplitDB.Name_Data.String = assplit.Name
	assplitDB.Name_Data.Valid = true

	assplitDB.Direction_Data.String = assplit.Direction.ToString()
	assplitDB.Direction_Data.Valid = true
}

// CopyBasicFieldsFromAsSplitWOP
func (assplitDB *AsSplitDB) CopyBasicFieldsFromAsSplitWOP(assplit *AsSplitWOP) {
	// insertion point for fields commit

	assplitDB.Name_Data.String = assplit.Name
	assplitDB.Name_Data.Valid = true

	assplitDB.Direction_Data.String = assplit.Direction.ToString()
	assplitDB.Direction_Data.Valid = true
}

// CopyBasicFieldsToAsSplit
func (assplitDB *AsSplitDB) CopyBasicFieldsToAsSplit(assplit *models.AsSplit) {
	// insertion point for checkout of basic fields (back repo to stage)
	assplit.Name = assplitDB.Name_Data.String
	assplit.Direction.FromString(assplitDB.Direction_Data.String)
}

// CopyBasicFieldsToAsSplit_WOP
func (assplitDB *AsSplitDB) CopyBasicFieldsToAsSplit_WOP(assplit *models.AsSplit_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	assplit.Name = assplitDB.Name_Data.String
	assplit.Direction.FromString(assplitDB.Direction_Data.String)
}

// CopyBasicFieldsToAsSplitWOP
func (assplitDB *AsSplitDB) CopyBasicFieldsToAsSplitWOP(assplit *AsSplitWOP) {
	assplit.ID = int(assplitDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	assplit.Name = assplitDB.Name_Data.String
	assplit.Direction.FromString(assplitDB.Direction_Data.String)
}

// Backup generates a json file from a slice of all AsSplitDB instances in the backrepo
func (backRepoAsSplit *BackRepoAsSplitStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AsSplitDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AsSplitDB, 0)
	for _, assplitDB := range backRepoAsSplit.Map_AsSplitDBID_AsSplitDB {
		forBackup = append(forBackup, assplitDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json AsSplit ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json AsSplit file", err.Error())
	}
}

// Backup generates a json file from a slice of all AsSplitDB instances in the backrepo
func (backRepoAsSplit *BackRepoAsSplitStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AsSplitDB, 0)
	for _, assplitDB := range backRepoAsSplit.Map_AsSplitDBID_AsSplitDB {
		forBackup = append(forBackup, assplitDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AsSplit")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AsSplit_Fields, -1)
	for _, assplitDB := range forBackup {

		var assplitWOP AsSplitWOP
		assplitDB.CopyBasicFieldsToAsSplitWOP(&assplitWOP)

		row := sh.AddRow()
		row.WriteStruct(&assplitWOP, -1)
	}
}

// RestoreXL from the "AsSplit" sheet all AsSplitDB instances
func (backRepoAsSplit *BackRepoAsSplitStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAsSplitid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AsSplit"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAsSplit.rowVisitorAsSplit)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAsSplit *BackRepoAsSplitStruct) rowVisitorAsSplit(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var assplitWOP AsSplitWOP
		row.ReadStruct(&assplitWOP)

		// add the unmarshalled struct to the stage
		assplitDB := new(AsSplitDB)
		assplitDB.CopyBasicFieldsFromAsSplitWOP(&assplitWOP)

		assplitDB_ID_atBackupTime := assplitDB.ID
		assplitDB.ID = 0
		_, err := backRepoAsSplit.db.Create(assplitDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAsSplit.Map_AsSplitDBID_AsSplitDB[assplitDB.ID] = assplitDB
		BackRepoAsSplitid_atBckpTime_newID[assplitDB_ID_atBackupTime] = assplitDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AsSplitDB.json" in dirPath that stores an array
// of AsSplitDB and stores it in the database
// the map BackRepoAsSplitid_atBckpTime_newID is updated accordingly
func (backRepoAsSplit *BackRepoAsSplitStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAsSplitid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AsSplitDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json AsSplit file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AsSplitDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AsSplitDBID_AsSplitDB
	for _, assplitDB := range forRestore {

		assplitDB_ID_atBackupTime := assplitDB.ID
		assplitDB.ID = 0
		_, err := backRepoAsSplit.db.Create(assplitDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAsSplit.Map_AsSplitDBID_AsSplitDB[assplitDB.ID] = assplitDB
		BackRepoAsSplitid_atBckpTime_newID[assplitDB_ID_atBackupTime] = assplitDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json AsSplit file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AsSplit>id_atBckpTime_newID
// to compute new index
func (backRepoAsSplit *BackRepoAsSplitStruct) RestorePhaseTwo() {

	for _, assplitDB := range backRepoAsSplit.Map_AsSplitDBID_AsSplitDB {

		// next line of code is to avert unused variable compilation error
		_ = assplitDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoAsSplit.db.Model(assplitDB)
		_, err := db.Updates(*assplitDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoAsSplit.ResetReversePointers commits all staged instances of AsSplit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplit *BackRepoAsSplitStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, assplit := range backRepoAsSplit.Map_AsSplitDBID_AsSplitPtr {
		backRepoAsSplit.ResetReversePointersInstance(backRepo, idx, assplit)
	}

	return
}

func (backRepoAsSplit *BackRepoAsSplitStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, assplit *models.AsSplit) (Error error) {

	// fetch matching assplitDB
	if assplitDB, ok := backRepoAsSplit.Map_AsSplitDBID_AsSplitDB[idx]; ok {
		_ = assplitDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAsSplitid_atBckpTime_newID map[uint]uint
