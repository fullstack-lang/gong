// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_LogoOnTheRight_sql sql.NullBool
var dummy_LogoOnTheRight_time time.Duration
var dummy_LogoOnTheRight_sort sort.Float64Slice

// LogoOnTheRightAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model logoontherightAPI
type LogoOnTheRightAPI struct {
	gorm.Model

	models.LogoOnTheRight_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LogoOnTheRightPointersEncoding LogoOnTheRightPointersEncoding
}

// LogoOnTheRightPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LogoOnTheRightPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// LogoOnTheRightDB describes a logoontheright in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model logoontherightDB
type LogoOnTheRightDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field logoontherightDB.Name
	Name_Data sql.NullString

	// Declation for basic field logoontherightDB.Width
	Width_Data sql.NullInt64

	// Declation for basic field logoontherightDB.Height
	Height_Data sql.NullInt64

	// Declation for basic field logoontherightDB.SVG
	SVG_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LogoOnTheRightPointersEncoding
}

// LogoOnTheRightDBs arrays logoontherightDBs
// swagger:response logoontherightDBsResponse
type LogoOnTheRightDBs []LogoOnTheRightDB

// LogoOnTheRightDBResponse provides response
// swagger:response logoontherightDBResponse
type LogoOnTheRightDBResponse struct {
	LogoOnTheRightDB
}

// LogoOnTheRightWOP is a LogoOnTheRight without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LogoOnTheRightWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Width int `xlsx:"2"`

	Height int `xlsx:"3"`

	SVG string `xlsx:"4"`
	// insertion for WOP pointer fields
}

var LogoOnTheRight_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Width",
	"Height",
	"SVG",
}

type BackRepoLogoOnTheRightStruct struct {
	// stores LogoOnTheRightDB according to their gorm ID
	Map_LogoOnTheRightDBID_LogoOnTheRightDB map[uint]*LogoOnTheRightDB

	// stores LogoOnTheRightDB ID according to LogoOnTheRight address
	Map_LogoOnTheRightPtr_LogoOnTheRightDBID map[*models.LogoOnTheRight]uint

	// stores LogoOnTheRight according to their gorm ID
	Map_LogoOnTheRightDBID_LogoOnTheRightPtr map[uint]*models.LogoOnTheRight

	db db.DBInterface

	stage *models.Stage
}

func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) GetStage() (stage *models.Stage) {
	stage = backRepoLogoOnTheRight.stage
	return
}

func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) GetDB() db.DBInterface {
	return backRepoLogoOnTheRight.db
}

// GetLogoOnTheRightDBFromLogoOnTheRightPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) GetLogoOnTheRightDBFromLogoOnTheRightPtr(logoontheright *models.LogoOnTheRight) (logoontherightDB *LogoOnTheRightDB) {
	id := backRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID[logoontheright]
	logoontherightDB = backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB[id]
	return
}

// BackRepoLogoOnTheRight.CommitPhaseOne commits all staged instances of LogoOnTheRight to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var logoontherights []*models.LogoOnTheRight
	for logoontheright := range stage.LogoOnTheRights {
		logoontherights = append(logoontherights, logoontheright)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(logoontherights, func(i, j int) bool {
		return stage.LogoOnTheRightMap_Staged_Order[logoontherights[i]] < stage.LogoOnTheRightMap_Staged_Order[logoontherights[j]]
	})

	for _, logoontheright := range logoontherights {
		backRepoLogoOnTheRight.CommitPhaseOneInstance(logoontheright)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, logoontheright := range backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr {
		if _, ok := stage.LogoOnTheRights[logoontheright]; !ok {
			backRepoLogoOnTheRight.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLogoOnTheRight.CommitDeleteInstance commits deletion of LogoOnTheRight to the BackRepo
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CommitDeleteInstance(id uint) (Error error) {

	logoontheright := backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr[id]

	// logoontheright is not staged anymore, remove logoontherightDB
	logoontherightDB := backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB[id]
	db, _ := backRepoLogoOnTheRight.db.Unscoped()
	_, err := db.Delete(logoontherightDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID, logoontheright)
	delete(backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr, id)
	delete(backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB, id)

	return
}

// BackRepoLogoOnTheRight.CommitPhaseOneInstance commits logoontheright staged instances of LogoOnTheRight to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CommitPhaseOneInstance(logoontheright *models.LogoOnTheRight) (Error error) {

	// check if the logoontheright is not commited yet
	if _, ok := backRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID[logoontheright]; ok {
		return
	}

	// initiate logoontheright
	var logoontherightDB LogoOnTheRightDB
	logoontherightDB.CopyBasicFieldsFromLogoOnTheRight(logoontheright)

	_, err := backRepoLogoOnTheRight.db.Create(&logoontherightDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID[logoontheright] = logoontherightDB.ID
	backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr[logoontherightDB.ID] = logoontheright
	backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB[logoontherightDB.ID] = &logoontherightDB

	return
}

// BackRepoLogoOnTheRight.CommitPhaseTwo commits all staged instances of LogoOnTheRight to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, logoontheright := range backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr {
		backRepoLogoOnTheRight.CommitPhaseTwoInstance(backRepo, idx, logoontheright)
	}

	return
}

// BackRepoLogoOnTheRight.CommitPhaseTwoInstance commits {{structname }} of models.LogoOnTheRight to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, logoontheright *models.LogoOnTheRight) (Error error) {

	// fetch matching logoontherightDB
	if logoontherightDB, ok := backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB[idx]; ok {

		logoontherightDB.CopyBasicFieldsFromLogoOnTheRight(logoontheright)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoLogoOnTheRight.db.Save(logoontherightDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown LogoOnTheRight intance %s", logoontheright.Name))
		return err
	}

	return
}

// BackRepoLogoOnTheRight.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CheckoutPhaseOne() (Error error) {

	logoontherightDBArray := make([]LogoOnTheRightDB, 0)
	_, err := backRepoLogoOnTheRight.db.Find(&logoontherightDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	logoontherightInstancesToBeRemovedFromTheStage := make(map[*models.LogoOnTheRight]any)
	for key, value := range backRepoLogoOnTheRight.stage.LogoOnTheRights {
		logoontherightInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, logoontherightDB := range logoontherightDBArray {
		backRepoLogoOnTheRight.CheckoutPhaseOneInstance(&logoontherightDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		logoontheright, ok := backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr[logoontherightDB.ID]
		if ok {
			delete(logoontherightInstancesToBeRemovedFromTheStage, logoontheright)
		}
	}

	// remove from stage and back repo's 3 maps all logoontherights that are not in the checkout
	for logoontheright := range logoontherightInstancesToBeRemovedFromTheStage {
		logoontheright.Unstage(backRepoLogoOnTheRight.GetStage())

		// remove instance from the back repo 3 maps
		logoontherightID := backRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID[logoontheright]
		delete(backRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID, logoontheright)
		delete(backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB, logoontherightID)
		delete(backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr, logoontherightID)
	}

	return
}

// CheckoutPhaseOneInstance takes a logoontherightDB that has been found in the DB, updates the backRepo and stages the
// models version of the logoontherightDB
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CheckoutPhaseOneInstance(logoontherightDB *LogoOnTheRightDB) (Error error) {

	logoontheright, ok := backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr[logoontherightDB.ID]
	if !ok {
		logoontheright = new(models.LogoOnTheRight)

		backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr[logoontherightDB.ID] = logoontheright
		backRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID[logoontheright] = logoontherightDB.ID

		// append model store with the new element
		logoontheright.Name = logoontherightDB.Name_Data.String
		logoontheright.Stage(backRepoLogoOnTheRight.GetStage())
	}
	logoontherightDB.CopyBasicFieldsToLogoOnTheRight(logoontheright)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	logoontheright.Stage(backRepoLogoOnTheRight.GetStage())

	// preserve pointer to logoontherightDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LogoOnTheRightDBID_LogoOnTheRightDB)[logoontherightDB hold variable pointers
	logoontherightDB_Data := *logoontherightDB
	preservedPtrToLogoOnTheRight := &logoontherightDB_Data
	backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB[logoontherightDB.ID] = preservedPtrToLogoOnTheRight

	return
}

// BackRepoLogoOnTheRight.CheckoutPhaseTwo Checkouts all staged instances of LogoOnTheRight to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, logoontherightDB := range backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB {
		backRepoLogoOnTheRight.CheckoutPhaseTwoInstance(backRepo, logoontherightDB)
	}
	return
}

// BackRepoLogoOnTheRight.CheckoutPhaseTwoInstance Checkouts staged instances of LogoOnTheRight to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, logoontherightDB *LogoOnTheRightDB) (Error error) {

	logoontheright := backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr[logoontherightDB.ID]

	logoontherightDB.DecodePointers(backRepo, logoontheright)

	return
}

func (logoontherightDB *LogoOnTheRightDB) DecodePointers(backRepo *BackRepoStruct, logoontheright *models.LogoOnTheRight) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLogoOnTheRight allows commit of a single logoontheright (if already staged)
func (backRepo *BackRepoStruct) CommitLogoOnTheRight(logoontheright *models.LogoOnTheRight) {
	backRepo.BackRepoLogoOnTheRight.CommitPhaseOneInstance(logoontheright)
	if id, ok := backRepo.BackRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID[logoontheright]; ok {
		backRepo.BackRepoLogoOnTheRight.CommitPhaseTwoInstance(backRepo, id, logoontheright)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLogoOnTheRight allows checkout of a single logoontheright (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLogoOnTheRight(logoontheright *models.LogoOnTheRight) {
	// check if the logoontheright is staged
	if _, ok := backRepo.BackRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID[logoontheright]; ok {

		if id, ok := backRepo.BackRepoLogoOnTheRight.Map_LogoOnTheRightPtr_LogoOnTheRightDBID[logoontheright]; ok {
			var logoontherightDB LogoOnTheRightDB
			logoontherightDB.ID = id

			if _, err := backRepo.BackRepoLogoOnTheRight.db.First(&logoontherightDB, id); err != nil {
				log.Fatalln("CheckoutLogoOnTheRight : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLogoOnTheRight.CheckoutPhaseOneInstance(&logoontherightDB)
			backRepo.BackRepoLogoOnTheRight.CheckoutPhaseTwoInstance(backRepo, &logoontherightDB)
		}
	}
}

// CopyBasicFieldsFromLogoOnTheRight
func (logoontherightDB *LogoOnTheRightDB) CopyBasicFieldsFromLogoOnTheRight(logoontheright *models.LogoOnTheRight) {
	// insertion point for fields commit

	logoontherightDB.Name_Data.String = logoontheright.Name
	logoontherightDB.Name_Data.Valid = true

	logoontherightDB.Width_Data.Int64 = int64(logoontheright.Width)
	logoontherightDB.Width_Data.Valid = true

	logoontherightDB.Height_Data.Int64 = int64(logoontheright.Height)
	logoontherightDB.Height_Data.Valid = true

	logoontherightDB.SVG_Data.String = logoontheright.SVG
	logoontherightDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromLogoOnTheRight_WOP
func (logoontherightDB *LogoOnTheRightDB) CopyBasicFieldsFromLogoOnTheRight_WOP(logoontheright *models.LogoOnTheRight_WOP) {
	// insertion point for fields commit

	logoontherightDB.Name_Data.String = logoontheright.Name
	logoontherightDB.Name_Data.Valid = true

	logoontherightDB.Width_Data.Int64 = int64(logoontheright.Width)
	logoontherightDB.Width_Data.Valid = true

	logoontherightDB.Height_Data.Int64 = int64(logoontheright.Height)
	logoontherightDB.Height_Data.Valid = true

	logoontherightDB.SVG_Data.String = logoontheright.SVG
	logoontherightDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromLogoOnTheRightWOP
func (logoontherightDB *LogoOnTheRightDB) CopyBasicFieldsFromLogoOnTheRightWOP(logoontheright *LogoOnTheRightWOP) {
	// insertion point for fields commit

	logoontherightDB.Name_Data.String = logoontheright.Name
	logoontherightDB.Name_Data.Valid = true

	logoontherightDB.Width_Data.Int64 = int64(logoontheright.Width)
	logoontherightDB.Width_Data.Valid = true

	logoontherightDB.Height_Data.Int64 = int64(logoontheright.Height)
	logoontherightDB.Height_Data.Valid = true

	logoontherightDB.SVG_Data.String = logoontheright.SVG
	logoontherightDB.SVG_Data.Valid = true
}

// CopyBasicFieldsToLogoOnTheRight
func (logoontherightDB *LogoOnTheRightDB) CopyBasicFieldsToLogoOnTheRight(logoontheright *models.LogoOnTheRight) {
	// insertion point for checkout of basic fields (back repo to stage)
	logoontheright.Name = logoontherightDB.Name_Data.String
	logoontheright.Width = int(logoontherightDB.Width_Data.Int64)
	logoontheright.Height = int(logoontherightDB.Height_Data.Int64)
	logoontheright.SVG = logoontherightDB.SVG_Data.String
}

// CopyBasicFieldsToLogoOnTheRight_WOP
func (logoontherightDB *LogoOnTheRightDB) CopyBasicFieldsToLogoOnTheRight_WOP(logoontheright *models.LogoOnTheRight_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	logoontheright.Name = logoontherightDB.Name_Data.String
	logoontheright.Width = int(logoontherightDB.Width_Data.Int64)
	logoontheright.Height = int(logoontherightDB.Height_Data.Int64)
	logoontheright.SVG = logoontherightDB.SVG_Data.String
}

// CopyBasicFieldsToLogoOnTheRightWOP
func (logoontherightDB *LogoOnTheRightDB) CopyBasicFieldsToLogoOnTheRightWOP(logoontheright *LogoOnTheRightWOP) {
	logoontheright.ID = int(logoontherightDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	logoontheright.Name = logoontherightDB.Name_Data.String
	logoontheright.Width = int(logoontherightDB.Width_Data.Int64)
	logoontheright.Height = int(logoontherightDB.Height_Data.Int64)
	logoontheright.SVG = logoontherightDB.SVG_Data.String
}

// Backup generates a json file from a slice of all LogoOnTheRightDB instances in the backrepo
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LogoOnTheRightDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LogoOnTheRightDB, 0)
	for _, logoontherightDB := range backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB {
		forBackup = append(forBackup, logoontherightDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json LogoOnTheRight ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json LogoOnTheRight file", err.Error())
	}
}

// Backup generates a json file from a slice of all LogoOnTheRightDB instances in the backrepo
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LogoOnTheRightDB, 0)
	for _, logoontherightDB := range backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB {
		forBackup = append(forBackup, logoontherightDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("LogoOnTheRight")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&LogoOnTheRight_Fields, -1)
	for _, logoontherightDB := range forBackup {

		var logoontherightWOP LogoOnTheRightWOP
		logoontherightDB.CopyBasicFieldsToLogoOnTheRightWOP(&logoontherightWOP)

		row := sh.AddRow()
		row.WriteStruct(&logoontherightWOP, -1)
	}
}

// RestoreXL from the "LogoOnTheRight" sheet all LogoOnTheRightDB instances
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLogoOnTheRightid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["LogoOnTheRight"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLogoOnTheRight.rowVisitorLogoOnTheRight)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) rowVisitorLogoOnTheRight(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var logoontherightWOP LogoOnTheRightWOP
		row.ReadStruct(&logoontherightWOP)

		// add the unmarshalled struct to the stage
		logoontherightDB := new(LogoOnTheRightDB)
		logoontherightDB.CopyBasicFieldsFromLogoOnTheRightWOP(&logoontherightWOP)

		logoontherightDB_ID_atBackupTime := logoontherightDB.ID
		logoontherightDB.ID = 0
		_, err := backRepoLogoOnTheRight.db.Create(logoontherightDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB[logoontherightDB.ID] = logoontherightDB
		BackRepoLogoOnTheRightid_atBckpTime_newID[logoontherightDB_ID_atBackupTime] = logoontherightDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LogoOnTheRightDB.json" in dirPath that stores an array
// of LogoOnTheRightDB and stores it in the database
// the map BackRepoLogoOnTheRightid_atBckpTime_newID is updated accordingly
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLogoOnTheRightid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LogoOnTheRightDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json LogoOnTheRight file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LogoOnTheRightDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LogoOnTheRightDBID_LogoOnTheRightDB
	for _, logoontherightDB := range forRestore {

		logoontherightDB_ID_atBackupTime := logoontherightDB.ID
		logoontherightDB.ID = 0
		_, err := backRepoLogoOnTheRight.db.Create(logoontherightDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB[logoontherightDB.ID] = logoontherightDB
		BackRepoLogoOnTheRightid_atBckpTime_newID[logoontherightDB_ID_atBackupTime] = logoontherightDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json LogoOnTheRight file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<LogoOnTheRight>id_atBckpTime_newID
// to compute new index
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) RestorePhaseTwo() {

	for _, logoontherightDB := range backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB {

		// next line of code is to avert unused variable compilation error
		_ = logoontherightDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoLogoOnTheRight.db.Model(logoontherightDB)
		_, err := db.Updates(*logoontherightDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoLogoOnTheRight.ResetReversePointers commits all staged instances of LogoOnTheRight to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, logoontheright := range backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightPtr {
		backRepoLogoOnTheRight.ResetReversePointersInstance(backRepo, idx, logoontheright)
	}

	return
}

func (backRepoLogoOnTheRight *BackRepoLogoOnTheRightStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, logoontheright *models.LogoOnTheRight) (Error error) {

	// fetch matching logoontherightDB
	if logoontherightDB, ok := backRepoLogoOnTheRight.Map_LogoOnTheRightDBID_LogoOnTheRightDB[idx]; ok {
		_ = logoontherightDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLogoOnTheRightid_atBckpTime_newID map[uint]uint
