// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Xlsx_sql sql.NullBool
var dummy_Xlsx_time time.Duration
var dummy_Xlsx_sort sort.Float64Slice

// XlsxAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xlsxAPI
type XlsxAPI struct {
	gorm.Model

	models.Xlsx_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	XlsxPointersEncoding XlsxPointersEncoding
}

// XlsxPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type XlsxPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// XlsxDB describes a xlsx in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model xlsxDB
type XlsxDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field xlsxDB.Name
	Name_Data sql.NullString

	// Declation for basic field xlsxDB.StackName
	StackName_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	XlsxPointersEncoding
}

// XlsxDBs arrays xlsxDBs
// swagger:response xlsxDBsResponse
type XlsxDBs []XlsxDB

// XlsxDBResponse provides response
// swagger:response xlsxDBResponse
type XlsxDBResponse struct {
	XlsxDB
}

// XlsxWOP is a Xlsx without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type XlsxWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StackName string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Xlsx_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StackName",
}

type BackRepoXlsxStruct struct {
	// stores XlsxDB according to their gorm ID
	Map_XlsxDBID_XlsxDB map[uint]*XlsxDB

	// stores XlsxDB ID according to Xlsx address
	Map_XlsxPtr_XlsxDBID map[*models.Xlsx]uint

	// stores Xlsx according to their gorm ID
	Map_XlsxDBID_XlsxPtr map[uint]*models.Xlsx

	db db.DBInterface

	stage *models.Stage
}

func (backRepoXlsx *BackRepoXlsxStruct) GetStage() (stage *models.Stage) {
	stage = backRepoXlsx.stage
	return
}

func (backRepoXlsx *BackRepoXlsxStruct) GetDB() db.DBInterface {
	return backRepoXlsx.db
}

// GetXlsxDBFromXlsxPtr is a handy function to access the back repo instance from the stage instance
func (backRepoXlsx *BackRepoXlsxStruct) GetXlsxDBFromXlsxPtr(xlsx *models.Xlsx) (xlsxDB *XlsxDB) {
	id := backRepoXlsx.Map_XlsxPtr_XlsxDBID[xlsx]
	xlsxDB = backRepoXlsx.Map_XlsxDBID_XlsxDB[id]
	return
}

// BackRepoXlsx.CommitPhaseOne commits all staged instances of Xlsx to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXlsx *BackRepoXlsxStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var xlsxs []*models.Xlsx
	for xlsx := range stage.Xlsxs {
		xlsxs = append(xlsxs, xlsx)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(xlsxs, func(i, j int) bool {
		return stage.XlsxMap_Staged_Order[xlsxs[i]] < stage.XlsxMap_Staged_Order[xlsxs[j]]
	})

	for _, xlsx := range xlsxs {
		backRepoXlsx.CommitPhaseOneInstance(xlsx)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xlsx := range backRepoXlsx.Map_XlsxDBID_XlsxPtr {
		if _, ok := stage.Xlsxs[xlsx]; !ok {
			backRepoXlsx.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXlsx.CommitDeleteInstance commits deletion of Xlsx to the BackRepo
func (backRepoXlsx *BackRepoXlsxStruct) CommitDeleteInstance(id uint) (Error error) {

	xlsx := backRepoXlsx.Map_XlsxDBID_XlsxPtr[id]

	// xlsx is not staged anymore, remove xlsxDB
	xlsxDB := backRepoXlsx.Map_XlsxDBID_XlsxDB[id]
	db, _ := backRepoXlsx.db.Unscoped()
	_, err := db.Delete(xlsxDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoXlsx.Map_XlsxPtr_XlsxDBID, xlsx)
	delete(backRepoXlsx.Map_XlsxDBID_XlsxPtr, id)
	delete(backRepoXlsx.Map_XlsxDBID_XlsxDB, id)

	return
}

// BackRepoXlsx.CommitPhaseOneInstance commits xlsx staged instances of Xlsx to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXlsx *BackRepoXlsxStruct) CommitPhaseOneInstance(xlsx *models.Xlsx) (Error error) {

	// check if the xlsx is not commited yet
	if _, ok := backRepoXlsx.Map_XlsxPtr_XlsxDBID[xlsx]; ok {
		return
	}

	// initiate xlsx
	var xlsxDB XlsxDB
	xlsxDB.CopyBasicFieldsFromXlsx(xlsx)

	_, err := backRepoXlsx.db.Create(&xlsxDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoXlsx.Map_XlsxPtr_XlsxDBID[xlsx] = xlsxDB.ID
	backRepoXlsx.Map_XlsxDBID_XlsxPtr[xlsxDB.ID] = xlsx
	backRepoXlsx.Map_XlsxDBID_XlsxDB[xlsxDB.ID] = &xlsxDB

	return
}

// BackRepoXlsx.CommitPhaseTwo commits all staged instances of Xlsx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXlsx *BackRepoXlsxStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xlsx := range backRepoXlsx.Map_XlsxDBID_XlsxPtr {
		backRepoXlsx.CommitPhaseTwoInstance(backRepo, idx, xlsx)
	}

	return
}

// BackRepoXlsx.CommitPhaseTwoInstance commits {{structname }} of models.Xlsx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXlsx *BackRepoXlsxStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xlsx *models.Xlsx) (Error error) {

	// fetch matching xlsxDB
	if xlsxDB, ok := backRepoXlsx.Map_XlsxDBID_XlsxDB[idx]; ok {

		xlsxDB.CopyBasicFieldsFromXlsx(xlsx)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoXlsx.db.Save(xlsxDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Xlsx intance %s", xlsx.Name))
		return err
	}

	return
}

// BackRepoXlsx.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoXlsx *BackRepoXlsxStruct) CheckoutPhaseOne() (Error error) {

	xlsxDBArray := make([]XlsxDB, 0)
	_, err := backRepoXlsx.db.Find(&xlsxDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	xlsxInstancesToBeRemovedFromTheStage := make(map[*models.Xlsx]any)
	for key, value := range backRepoXlsx.stage.Xlsxs {
		xlsxInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, xlsxDB := range xlsxDBArray {
		backRepoXlsx.CheckoutPhaseOneInstance(&xlsxDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		xlsx, ok := backRepoXlsx.Map_XlsxDBID_XlsxPtr[xlsxDB.ID]
		if ok {
			delete(xlsxInstancesToBeRemovedFromTheStage, xlsx)
		}
	}

	// remove from stage and back repo's 3 maps all xlsxs that are not in the checkout
	for xlsx := range xlsxInstancesToBeRemovedFromTheStage {
		xlsx.Unstage(backRepoXlsx.GetStage())

		// remove instance from the back repo 3 maps
		xlsxID := backRepoXlsx.Map_XlsxPtr_XlsxDBID[xlsx]
		delete(backRepoXlsx.Map_XlsxPtr_XlsxDBID, xlsx)
		delete(backRepoXlsx.Map_XlsxDBID_XlsxDB, xlsxID)
		delete(backRepoXlsx.Map_XlsxDBID_XlsxPtr, xlsxID)
	}

	return
}

// CheckoutPhaseOneInstance takes a xlsxDB that has been found in the DB, updates the backRepo and stages the
// models version of the xlsxDB
func (backRepoXlsx *BackRepoXlsxStruct) CheckoutPhaseOneInstance(xlsxDB *XlsxDB) (Error error) {

	xlsx, ok := backRepoXlsx.Map_XlsxDBID_XlsxPtr[xlsxDB.ID]
	if !ok {
		xlsx = new(models.Xlsx)

		backRepoXlsx.Map_XlsxDBID_XlsxPtr[xlsxDB.ID] = xlsx
		backRepoXlsx.Map_XlsxPtr_XlsxDBID[xlsx] = xlsxDB.ID

		// append model store with the new element
		xlsx.Name = xlsxDB.Name_Data.String
		xlsx.Stage(backRepoXlsx.GetStage())
	}
	xlsxDB.CopyBasicFieldsToXlsx(xlsx)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	xlsx.Stage(backRepoXlsx.GetStage())

	// preserve pointer to xlsxDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_XlsxDBID_XlsxDB)[xlsxDB hold variable pointers
	xlsxDB_Data := *xlsxDB
	preservedPtrToXlsx := &xlsxDB_Data
	backRepoXlsx.Map_XlsxDBID_XlsxDB[xlsxDB.ID] = preservedPtrToXlsx

	return
}

// BackRepoXlsx.CheckoutPhaseTwo Checkouts all staged instances of Xlsx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXlsx *BackRepoXlsxStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xlsxDB := range backRepoXlsx.Map_XlsxDBID_XlsxDB {
		backRepoXlsx.CheckoutPhaseTwoInstance(backRepo, xlsxDB)
	}
	return
}

// BackRepoXlsx.CheckoutPhaseTwoInstance Checkouts staged instances of Xlsx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXlsx *BackRepoXlsxStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xlsxDB *XlsxDB) (Error error) {

	xlsx := backRepoXlsx.Map_XlsxDBID_XlsxPtr[xlsxDB.ID]

	xlsxDB.DecodePointers(backRepo, xlsx)

	return
}

func (xlsxDB *XlsxDB) DecodePointers(backRepo *BackRepoStruct, xlsx *models.Xlsx) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitXlsx allows commit of a single xlsx (if already staged)
func (backRepo *BackRepoStruct) CommitXlsx(xlsx *models.Xlsx) {
	backRepo.BackRepoXlsx.CommitPhaseOneInstance(xlsx)
	if id, ok := backRepo.BackRepoXlsx.Map_XlsxPtr_XlsxDBID[xlsx]; ok {
		backRepo.BackRepoXlsx.CommitPhaseTwoInstance(backRepo, id, xlsx)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitXlsx allows checkout of a single xlsx (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXlsx(xlsx *models.Xlsx) {
	// check if the xlsx is staged
	if _, ok := backRepo.BackRepoXlsx.Map_XlsxPtr_XlsxDBID[xlsx]; ok {

		if id, ok := backRepo.BackRepoXlsx.Map_XlsxPtr_XlsxDBID[xlsx]; ok {
			var xlsxDB XlsxDB
			xlsxDB.ID = id

			if _, err := backRepo.BackRepoXlsx.db.First(&xlsxDB, id); err != nil {
				log.Fatalln("CheckoutXlsx : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXlsx.CheckoutPhaseOneInstance(&xlsxDB)
			backRepo.BackRepoXlsx.CheckoutPhaseTwoInstance(backRepo, &xlsxDB)
		}
	}
}

// CopyBasicFieldsFromXlsx
func (xlsxDB *XlsxDB) CopyBasicFieldsFromXlsx(xlsx *models.Xlsx) {
	// insertion point for fields commit

	xlsxDB.Name_Data.String = xlsx.Name
	xlsxDB.Name_Data.Valid = true

	xlsxDB.StackName_Data.String = xlsx.StackName
	xlsxDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromXlsx_WOP
func (xlsxDB *XlsxDB) CopyBasicFieldsFromXlsx_WOP(xlsx *models.Xlsx_WOP) {
	// insertion point for fields commit

	xlsxDB.Name_Data.String = xlsx.Name
	xlsxDB.Name_Data.Valid = true

	xlsxDB.StackName_Data.String = xlsx.StackName
	xlsxDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromXlsxWOP
func (xlsxDB *XlsxDB) CopyBasicFieldsFromXlsxWOP(xlsx *XlsxWOP) {
	// insertion point for fields commit

	xlsxDB.Name_Data.String = xlsx.Name
	xlsxDB.Name_Data.Valid = true

	xlsxDB.StackName_Data.String = xlsx.StackName
	xlsxDB.StackName_Data.Valid = true
}

// CopyBasicFieldsToXlsx
func (xlsxDB *XlsxDB) CopyBasicFieldsToXlsx(xlsx *models.Xlsx) {
	// insertion point for checkout of basic fields (back repo to stage)
	xlsx.Name = xlsxDB.Name_Data.String
	xlsx.StackName = xlsxDB.StackName_Data.String
}

// CopyBasicFieldsToXlsx_WOP
func (xlsxDB *XlsxDB) CopyBasicFieldsToXlsx_WOP(xlsx *models.Xlsx_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	xlsx.Name = xlsxDB.Name_Data.String
	xlsx.StackName = xlsxDB.StackName_Data.String
}

// CopyBasicFieldsToXlsxWOP
func (xlsxDB *XlsxDB) CopyBasicFieldsToXlsxWOP(xlsx *XlsxWOP) {
	xlsx.ID = int(xlsxDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	xlsx.Name = xlsxDB.Name_Data.String
	xlsx.StackName = xlsxDB.StackName_Data.String
}

// Backup generates a json file from a slice of all XlsxDB instances in the backrepo
func (backRepoXlsx *BackRepoXlsxStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "XlsxDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XlsxDB, 0)
	for _, xlsxDB := range backRepoXlsx.Map_XlsxDBID_XlsxDB {
		forBackup = append(forBackup, xlsxDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Xlsx ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Xlsx file", err.Error())
	}
}

// Backup generates a json file from a slice of all XlsxDB instances in the backrepo
func (backRepoXlsx *BackRepoXlsxStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XlsxDB, 0)
	for _, xlsxDB := range backRepoXlsx.Map_XlsxDBID_XlsxDB {
		forBackup = append(forBackup, xlsxDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Xlsx")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Xlsx_Fields, -1)
	for _, xlsxDB := range forBackup {

		var xlsxWOP XlsxWOP
		xlsxDB.CopyBasicFieldsToXlsxWOP(&xlsxWOP)

		row := sh.AddRow()
		row.WriteStruct(&xlsxWOP, -1)
	}
}

// RestoreXL from the "Xlsx" sheet all XlsxDB instances
func (backRepoXlsx *BackRepoXlsxStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoXlsxid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Xlsx"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoXlsx.rowVisitorXlsx)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoXlsx *BackRepoXlsxStruct) rowVisitorXlsx(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var xlsxWOP XlsxWOP
		row.ReadStruct(&xlsxWOP)

		// add the unmarshalled struct to the stage
		xlsxDB := new(XlsxDB)
		xlsxDB.CopyBasicFieldsFromXlsxWOP(&xlsxWOP)

		xlsxDB_ID_atBackupTime := xlsxDB.ID
		xlsxDB.ID = 0
		_, err := backRepoXlsx.db.Create(xlsxDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoXlsx.Map_XlsxDBID_XlsxDB[xlsxDB.ID] = xlsxDB
		BackRepoXlsxid_atBckpTime_newID[xlsxDB_ID_atBackupTime] = xlsxDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "XlsxDB.json" in dirPath that stores an array
// of XlsxDB and stores it in the database
// the map BackRepoXlsxid_atBckpTime_newID is updated accordingly
func (backRepoXlsx *BackRepoXlsxStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoXlsxid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "XlsxDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Xlsx file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*XlsxDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_XlsxDBID_XlsxDB
	for _, xlsxDB := range forRestore {

		xlsxDB_ID_atBackupTime := xlsxDB.ID
		xlsxDB.ID = 0
		_, err := backRepoXlsx.db.Create(xlsxDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoXlsx.Map_XlsxDBID_XlsxDB[xlsxDB.ID] = xlsxDB
		BackRepoXlsxid_atBckpTime_newID[xlsxDB_ID_atBackupTime] = xlsxDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Xlsx file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Xlsx>id_atBckpTime_newID
// to compute new index
func (backRepoXlsx *BackRepoXlsxStruct) RestorePhaseTwo() {

	for _, xlsxDB := range backRepoXlsx.Map_XlsxDBID_XlsxDB {

		// next line of code is to avert unused variable compilation error
		_ = xlsxDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoXlsx.db.Model(xlsxDB)
		_, err := db.Updates(*xlsxDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoXlsx.ResetReversePointers commits all staged instances of Xlsx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXlsx *BackRepoXlsxStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, xlsx := range backRepoXlsx.Map_XlsxDBID_XlsxPtr {
		backRepoXlsx.ResetReversePointersInstance(backRepo, idx, xlsx)
	}

	return
}

func (backRepoXlsx *BackRepoXlsxStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, xlsx *models.Xlsx) (Error error) {

	// fetch matching xlsxDB
	if xlsxDB, ok := backRepoXlsx.Map_XlsxDBID_XlsxDB[idx]; ok {
		_ = xlsxDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoXlsxid_atBckpTime_newID map[uint]uint
