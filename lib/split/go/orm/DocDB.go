// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Doc_sql sql.NullBool
var dummy_Doc_time time.Duration
var dummy_Doc_sort sort.Float64Slice

// DocAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model docAPI
type DocAPI struct {
	gorm.Model

	models.Doc_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DocPointersEncoding DocPointersEncoding
}

// DocPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DocPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// DocDB describes a doc in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model docDB
type DocDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field docDB.Name
	Name_Data sql.NullString

	// Declation for basic field docDB.StackName
	StackName_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DocPointersEncoding
}

// DocDBs arrays docDBs
// swagger:response docDBsResponse
type DocDBs []DocDB

// DocDBResponse provides response
// swagger:response docDBResponse
type DocDBResponse struct {
	DocDB
}

// DocWOP is a Doc without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DocWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StackName string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Doc_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StackName",
}

type BackRepoDocStruct struct {
	// stores DocDB according to their gorm ID
	Map_DocDBID_DocDB map[uint]*DocDB

	// stores DocDB ID according to Doc address
	Map_DocPtr_DocDBID map[*models.Doc]uint

	// stores Doc according to their gorm ID
	Map_DocDBID_DocPtr map[uint]*models.Doc

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoDoc *BackRepoDocStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDoc.stage
	return
}

func (backRepoDoc *BackRepoDocStruct) GetDB() db.DBInterface {
	return backRepoDoc.db
}

// GetDocDBFromDocPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDoc *BackRepoDocStruct) GetDocDBFromDocPtr(doc *models.Doc) (docDB *DocDB) {
	id := backRepoDoc.Map_DocPtr_DocDBID[doc]
	docDB = backRepoDoc.Map_DocDBID_DocDB[id]
	return
}

// BackRepoDoc.CommitPhaseOne commits all staged instances of Doc to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDoc *BackRepoDocStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var docs []*models.Doc
	for doc := range stage.Docs {
		docs = append(docs, doc)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(docs, func(i, j int) bool {
		return stage.Map_Staged_Order[docs[i]] < stage.Map_Staged_Order[docs[j]]
	})

	for _, doc := range docs {
		backRepoDoc.CommitPhaseOneInstance(doc)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, doc := range backRepoDoc.Map_DocDBID_DocPtr {
		if _, ok := stage.Docs[doc]; !ok {
			backRepoDoc.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDoc.CommitDeleteInstance commits deletion of Doc to the BackRepo
func (backRepoDoc *BackRepoDocStruct) CommitDeleteInstance(id uint) (Error error) {

	doc := backRepoDoc.Map_DocDBID_DocPtr[id]

	// doc is not staged anymore, remove docDB
	docDB := backRepoDoc.Map_DocDBID_DocDB[id]
	db, _ := backRepoDoc.db.Unscoped()
	_, err := db.Delete(docDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoDoc.Map_DocPtr_DocDBID, doc)
	delete(backRepoDoc.Map_DocDBID_DocPtr, id)
	delete(backRepoDoc.Map_DocDBID_DocDB, id)

	return
}

// BackRepoDoc.CommitPhaseOneInstance commits doc staged instances of Doc to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDoc *BackRepoDocStruct) CommitPhaseOneInstance(doc *models.Doc) (Error error) {

	// check if the doc is not commited yet
	if _, ok := backRepoDoc.Map_DocPtr_DocDBID[doc]; ok {
		return
	}

	// initiate doc
	var docDB DocDB
	docDB.CopyBasicFieldsFromDoc(doc)

	_, err := backRepoDoc.db.Create(&docDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoDoc.Map_DocPtr_DocDBID[doc] = docDB.ID
	backRepoDoc.Map_DocDBID_DocPtr[docDB.ID] = doc
	backRepoDoc.Map_DocDBID_DocDB[docDB.ID] = &docDB

	return
}

// BackRepoDoc.CommitPhaseTwo commits all staged instances of Doc to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDoc *BackRepoDocStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, doc := range backRepoDoc.Map_DocDBID_DocPtr {
		backRepoDoc.CommitPhaseTwoInstance(backRepo, idx, doc)
	}

	return
}

// BackRepoDoc.CommitPhaseTwoInstance commits {{structname }} of models.Doc to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDoc *BackRepoDocStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, doc *models.Doc) (Error error) {

	// fetch matching docDB
	if docDB, ok := backRepoDoc.Map_DocDBID_DocDB[idx]; ok {

		docDB.CopyBasicFieldsFromDoc(doc)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoDoc.db.Save(docDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Doc intance %s", doc.Name))
		return err
	}

	return
}

// BackRepoDoc.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDoc *BackRepoDocStruct) CheckoutPhaseOne() (Error error) {

	docDBArray := make([]DocDB, 0)
	_, err := backRepoDoc.db.Find(&docDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	docInstancesToBeRemovedFromTheStage := make(map[*models.Doc]any)
	for key, value := range backRepoDoc.stage.Docs {
		docInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, docDB := range docDBArray {
		backRepoDoc.CheckoutPhaseOneInstance(&docDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		doc, ok := backRepoDoc.Map_DocDBID_DocPtr[docDB.ID]
		if ok {
			delete(docInstancesToBeRemovedFromTheStage, doc)
		}
	}

	// remove from stage and back repo's 3 maps all docs that are not in the checkout
	for doc := range docInstancesToBeRemovedFromTheStage {
		doc.Unstage(backRepoDoc.GetStage())

		// remove instance from the back repo 3 maps
		docID := backRepoDoc.Map_DocPtr_DocDBID[doc]
		delete(backRepoDoc.Map_DocPtr_DocDBID, doc)
		delete(backRepoDoc.Map_DocDBID_DocDB, docID)
		delete(backRepoDoc.Map_DocDBID_DocPtr, docID)
	}

	return
}

// CheckoutPhaseOneInstance takes a docDB that has been found in the DB, updates the backRepo and stages the
// models version of the docDB
func (backRepoDoc *BackRepoDocStruct) CheckoutPhaseOneInstance(docDB *DocDB) (Error error) {

	doc, ok := backRepoDoc.Map_DocDBID_DocPtr[docDB.ID]
	if !ok {
		doc = new(models.Doc)

		backRepoDoc.Map_DocDBID_DocPtr[docDB.ID] = doc
		backRepoDoc.Map_DocPtr_DocDBID[doc] = docDB.ID

		// append model store with the new element
		doc.Name = docDB.Name_Data.String
		doc.Stage(backRepoDoc.GetStage())
	}
	docDB.CopyBasicFieldsToDoc(doc)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	doc.Stage(backRepoDoc.GetStage())

	// preserve pointer to docDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DocDBID_DocDB)[docDB hold variable pointers
	docDB_Data := *docDB
	preservedPtrToDoc := &docDB_Data
	backRepoDoc.Map_DocDBID_DocDB[docDB.ID] = preservedPtrToDoc

	return
}

// BackRepoDoc.CheckoutPhaseTwo Checkouts all staged instances of Doc to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDoc *BackRepoDocStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, docDB := range backRepoDoc.Map_DocDBID_DocDB {
		backRepoDoc.CheckoutPhaseTwoInstance(backRepo, docDB)
	}
	return
}

// BackRepoDoc.CheckoutPhaseTwoInstance Checkouts staged instances of Doc to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDoc *BackRepoDocStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, docDB *DocDB) (Error error) {

	doc := backRepoDoc.Map_DocDBID_DocPtr[docDB.ID]

	docDB.DecodePointers(backRepo, doc)

	return
}

func (docDB *DocDB) DecodePointers(backRepo *BackRepoStruct, doc *models.Doc) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDoc allows commit of a single doc (if already staged)
func (backRepo *BackRepoStruct) CommitDoc(doc *models.Doc) {
	backRepo.BackRepoDoc.CommitPhaseOneInstance(doc)
	if id, ok := backRepo.BackRepoDoc.Map_DocPtr_DocDBID[doc]; ok {
		backRepo.BackRepoDoc.CommitPhaseTwoInstance(backRepo, id, doc)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDoc allows checkout of a single doc (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDoc(doc *models.Doc) {
	// check if the doc is staged
	if _, ok := backRepo.BackRepoDoc.Map_DocPtr_DocDBID[doc]; ok {

		if id, ok := backRepo.BackRepoDoc.Map_DocPtr_DocDBID[doc]; ok {
			var docDB DocDB
			docDB.ID = id

			if _, err := backRepo.BackRepoDoc.db.First(&docDB, id); err != nil {
				log.Fatalln("CheckoutDoc : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDoc.CheckoutPhaseOneInstance(&docDB)
			backRepo.BackRepoDoc.CheckoutPhaseTwoInstance(backRepo, &docDB)
		}
	}
}

// CopyBasicFieldsFromDoc
func (docDB *DocDB) CopyBasicFieldsFromDoc(doc *models.Doc) {
	// insertion point for fields commit

	docDB.Name_Data.String = doc.Name
	docDB.Name_Data.Valid = true

	docDB.StackName_Data.String = doc.StackName
	docDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromDoc_WOP
func (docDB *DocDB) CopyBasicFieldsFromDoc_WOP(doc *models.Doc_WOP) {
	// insertion point for fields commit

	docDB.Name_Data.String = doc.Name
	docDB.Name_Data.Valid = true

	docDB.StackName_Data.String = doc.StackName
	docDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromDocWOP
func (docDB *DocDB) CopyBasicFieldsFromDocWOP(doc *DocWOP) {
	// insertion point for fields commit

	docDB.Name_Data.String = doc.Name
	docDB.Name_Data.Valid = true

	docDB.StackName_Data.String = doc.StackName
	docDB.StackName_Data.Valid = true
}

// CopyBasicFieldsToDoc
func (docDB *DocDB) CopyBasicFieldsToDoc(doc *models.Doc) {
	// insertion point for checkout of basic fields (back repo to stage)
	doc.Name = docDB.Name_Data.String
	doc.StackName = docDB.StackName_Data.String
}

// CopyBasicFieldsToDoc_WOP
func (docDB *DocDB) CopyBasicFieldsToDoc_WOP(doc *models.Doc_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	doc.Name = docDB.Name_Data.String
	doc.StackName = docDB.StackName_Data.String
}

// CopyBasicFieldsToDocWOP
func (docDB *DocDB) CopyBasicFieldsToDocWOP(doc *DocWOP) {
	doc.ID = int(docDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	doc.Name = docDB.Name_Data.String
	doc.StackName = docDB.StackName_Data.String
}

// Backup generates a json file from a slice of all DocDB instances in the backrepo
func (backRepoDoc *BackRepoDocStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DocDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DocDB, 0)
	for _, docDB := range backRepoDoc.Map_DocDBID_DocDB {
		forBackup = append(forBackup, docDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Doc ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Doc file", err.Error())
	}
}

// Backup generates a json file from a slice of all DocDB instances in the backrepo
func (backRepoDoc *BackRepoDocStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DocDB, 0)
	for _, docDB := range backRepoDoc.Map_DocDBID_DocDB {
		forBackup = append(forBackup, docDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Doc")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Doc_Fields, -1)
	for _, docDB := range forBackup {

		var docWOP DocWOP
		docDB.CopyBasicFieldsToDocWOP(&docWOP)

		row := sh.AddRow()
		row.WriteStruct(&docWOP, -1)
	}
}

// RestoreXL from the "Doc" sheet all DocDB instances
func (backRepoDoc *BackRepoDocStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDocid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Doc"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDoc.rowVisitorDoc)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDoc *BackRepoDocStruct) rowVisitorDoc(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var docWOP DocWOP
		row.ReadStruct(&docWOP)

		// add the unmarshalled struct to the stage
		docDB := new(DocDB)
		docDB.CopyBasicFieldsFromDocWOP(&docWOP)

		docDB_ID_atBackupTime := docDB.ID
		docDB.ID = 0
		_, err := backRepoDoc.db.Create(docDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoDoc.Map_DocDBID_DocDB[docDB.ID] = docDB
		BackRepoDocid_atBckpTime_newID[docDB_ID_atBackupTime] = docDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DocDB.json" in dirPath that stores an array
// of DocDB and stores it in the database
// the map BackRepoDocid_atBckpTime_newID is updated accordingly
func (backRepoDoc *BackRepoDocStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDocid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DocDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Doc file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DocDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DocDBID_DocDB
	for _, docDB := range forRestore {

		docDB_ID_atBackupTime := docDB.ID
		docDB.ID = 0
		_, err := backRepoDoc.db.Create(docDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoDoc.Map_DocDBID_DocDB[docDB.ID] = docDB
		BackRepoDocid_atBckpTime_newID[docDB_ID_atBackupTime] = docDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Doc file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Doc>id_atBckpTime_newID
// to compute new index
func (backRepoDoc *BackRepoDocStruct) RestorePhaseTwo() {

	for _, docDB := range backRepoDoc.Map_DocDBID_DocDB {

		// next line of code is to avert unused variable compilation error
		_ = docDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoDoc.db.Model(docDB)
		_, err := db.Updates(*docDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoDoc.ResetReversePointers commits all staged instances of Doc to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDoc *BackRepoDocStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, doc := range backRepoDoc.Map_DocDBID_DocPtr {
		backRepoDoc.ResetReversePointersInstance(backRepo, idx, doc)
	}

	return
}

func (backRepoDoc *BackRepoDocStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, doc *models.Doc) (Error error) {

	// fetch matching docDB
	if docDB, ok := backRepoDoc.Map_DocDBID_DocDB[idx]; ok {
		_ = docDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDocid_atBckpTime_newID map[uint]uint
