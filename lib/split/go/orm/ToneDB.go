// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tone_sql sql.NullBool
var dummy_Tone_time time.Duration
var dummy_Tone_sort sort.Float64Slice

// ToneAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model toneAPI
type ToneAPI struct {
	gorm.Model

	models.Tone_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TonePointersEncoding TonePointersEncoding
}

// TonePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TonePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ToneDB describes a tone in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model toneDB
type ToneDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field toneDB.Name
	Name_Data sql.NullString

	// Declation for basic field toneDB.StackName
	StackName_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TonePointersEncoding
}

// ToneDBs arrays toneDBs
// swagger:response toneDBsResponse
type ToneDBs []ToneDB

// ToneDBResponse provides response
// swagger:response toneDBResponse
type ToneDBResponse struct {
	ToneDB
}

// ToneWOP is a Tone without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ToneWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StackName string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Tone_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StackName",
}

type BackRepoToneStruct struct {
	// stores ToneDB according to their gorm ID
	Map_ToneDBID_ToneDB map[uint]*ToneDB

	// stores ToneDB ID according to Tone address
	Map_TonePtr_ToneDBID map[*models.Tone]uint

	// stores Tone according to their gorm ID
	Map_ToneDBID_TonePtr map[uint]*models.Tone

	db db.DBInterface

	stage *models.Stage
}

func (backRepoTone *BackRepoToneStruct) GetStage() (stage *models.Stage) {
	stage = backRepoTone.stage
	return
}

func (backRepoTone *BackRepoToneStruct) GetDB() db.DBInterface {
	return backRepoTone.db
}

// GetToneDBFromTonePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTone *BackRepoToneStruct) GetToneDBFromTonePtr(tone *models.Tone) (toneDB *ToneDB) {
	id := backRepoTone.Map_TonePtr_ToneDBID[tone]
	toneDB = backRepoTone.Map_ToneDBID_ToneDB[id]
	return
}

// BackRepoTone.CommitPhaseOne commits all staged instances of Tone to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTone *BackRepoToneStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var tones []*models.Tone
	for tone := range stage.Tones {
		tones = append(tones, tone)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(tones, func(i, j int) bool {
		return stage.ToneMap_Staged_Order[tones[i]] < stage.ToneMap_Staged_Order[tones[j]]
	})

	for _, tone := range tones {
		backRepoTone.CommitPhaseOneInstance(tone)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tone := range backRepoTone.Map_ToneDBID_TonePtr {
		if _, ok := stage.Tones[tone]; !ok {
			backRepoTone.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTone.CommitDeleteInstance commits deletion of Tone to the BackRepo
func (backRepoTone *BackRepoToneStruct) CommitDeleteInstance(id uint) (Error error) {

	tone := backRepoTone.Map_ToneDBID_TonePtr[id]

	// tone is not staged anymore, remove toneDB
	toneDB := backRepoTone.Map_ToneDBID_ToneDB[id]
	db, _ := backRepoTone.db.Unscoped()
	_, err := db.Delete(toneDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoTone.Map_TonePtr_ToneDBID, tone)
	delete(backRepoTone.Map_ToneDBID_TonePtr, id)
	delete(backRepoTone.Map_ToneDBID_ToneDB, id)

	return
}

// BackRepoTone.CommitPhaseOneInstance commits tone staged instances of Tone to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTone *BackRepoToneStruct) CommitPhaseOneInstance(tone *models.Tone) (Error error) {

	// check if the tone is not commited yet
	if _, ok := backRepoTone.Map_TonePtr_ToneDBID[tone]; ok {
		return
	}

	// initiate tone
	var toneDB ToneDB
	toneDB.CopyBasicFieldsFromTone(tone)

	_, err := backRepoTone.db.Create(&toneDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoTone.Map_TonePtr_ToneDBID[tone] = toneDB.ID
	backRepoTone.Map_ToneDBID_TonePtr[toneDB.ID] = tone
	backRepoTone.Map_ToneDBID_ToneDB[toneDB.ID] = &toneDB

	return
}

// BackRepoTone.CommitPhaseTwo commits all staged instances of Tone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTone *BackRepoToneStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tone := range backRepoTone.Map_ToneDBID_TonePtr {
		backRepoTone.CommitPhaseTwoInstance(backRepo, idx, tone)
	}

	return
}

// BackRepoTone.CommitPhaseTwoInstance commits {{structname }} of models.Tone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTone *BackRepoToneStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tone *models.Tone) (Error error) {

	// fetch matching toneDB
	if toneDB, ok := backRepoTone.Map_ToneDBID_ToneDB[idx]; ok {

		toneDB.CopyBasicFieldsFromTone(tone)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoTone.db.Save(toneDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tone intance %s", tone.Name))
		return err
	}

	return
}

// BackRepoTone.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTone *BackRepoToneStruct) CheckoutPhaseOne() (Error error) {

	toneDBArray := make([]ToneDB, 0)
	_, err := backRepoTone.db.Find(&toneDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	toneInstancesToBeRemovedFromTheStage := make(map[*models.Tone]any)
	for key, value := range backRepoTone.stage.Tones {
		toneInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, toneDB := range toneDBArray {
		backRepoTone.CheckoutPhaseOneInstance(&toneDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tone, ok := backRepoTone.Map_ToneDBID_TonePtr[toneDB.ID]
		if ok {
			delete(toneInstancesToBeRemovedFromTheStage, tone)
		}
	}

	// remove from stage and back repo's 3 maps all tones that are not in the checkout
	for tone := range toneInstancesToBeRemovedFromTheStage {
		tone.Unstage(backRepoTone.GetStage())

		// remove instance from the back repo 3 maps
		toneID := backRepoTone.Map_TonePtr_ToneDBID[tone]
		delete(backRepoTone.Map_TonePtr_ToneDBID, tone)
		delete(backRepoTone.Map_ToneDBID_ToneDB, toneID)
		delete(backRepoTone.Map_ToneDBID_TonePtr, toneID)
	}

	return
}

// CheckoutPhaseOneInstance takes a toneDB that has been found in the DB, updates the backRepo and stages the
// models version of the toneDB
func (backRepoTone *BackRepoToneStruct) CheckoutPhaseOneInstance(toneDB *ToneDB) (Error error) {

	tone, ok := backRepoTone.Map_ToneDBID_TonePtr[toneDB.ID]
	if !ok {
		tone = new(models.Tone)

		backRepoTone.Map_ToneDBID_TonePtr[toneDB.ID] = tone
		backRepoTone.Map_TonePtr_ToneDBID[tone] = toneDB.ID

		// append model store with the new element
		tone.Name = toneDB.Name_Data.String
		tone.Stage(backRepoTone.GetStage())
	}
	toneDB.CopyBasicFieldsToTone(tone)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tone.Stage(backRepoTone.GetStage())

	// preserve pointer to toneDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ToneDBID_ToneDB)[toneDB hold variable pointers
	toneDB_Data := *toneDB
	preservedPtrToTone := &toneDB_Data
	backRepoTone.Map_ToneDBID_ToneDB[toneDB.ID] = preservedPtrToTone

	return
}

// BackRepoTone.CheckoutPhaseTwo Checkouts all staged instances of Tone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTone *BackRepoToneStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, toneDB := range backRepoTone.Map_ToneDBID_ToneDB {
		backRepoTone.CheckoutPhaseTwoInstance(backRepo, toneDB)
	}
	return
}

// BackRepoTone.CheckoutPhaseTwoInstance Checkouts staged instances of Tone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTone *BackRepoToneStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, toneDB *ToneDB) (Error error) {

	tone := backRepoTone.Map_ToneDBID_TonePtr[toneDB.ID]

	toneDB.DecodePointers(backRepo, tone)

	return
}

func (toneDB *ToneDB) DecodePointers(backRepo *BackRepoStruct, tone *models.Tone) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTone allows commit of a single tone (if already staged)
func (backRepo *BackRepoStruct) CommitTone(tone *models.Tone) {
	backRepo.BackRepoTone.CommitPhaseOneInstance(tone)
	if id, ok := backRepo.BackRepoTone.Map_TonePtr_ToneDBID[tone]; ok {
		backRepo.BackRepoTone.CommitPhaseTwoInstance(backRepo, id, tone)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTone allows checkout of a single tone (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTone(tone *models.Tone) {
	// check if the tone is staged
	if _, ok := backRepo.BackRepoTone.Map_TonePtr_ToneDBID[tone]; ok {

		if id, ok := backRepo.BackRepoTone.Map_TonePtr_ToneDBID[tone]; ok {
			var toneDB ToneDB
			toneDB.ID = id

			if _, err := backRepo.BackRepoTone.db.First(&toneDB, id); err != nil {
				log.Fatalln("CheckoutTone : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTone.CheckoutPhaseOneInstance(&toneDB)
			backRepo.BackRepoTone.CheckoutPhaseTwoInstance(backRepo, &toneDB)
		}
	}
}

// CopyBasicFieldsFromTone
func (toneDB *ToneDB) CopyBasicFieldsFromTone(tone *models.Tone) {
	// insertion point for fields commit

	toneDB.Name_Data.String = tone.Name
	toneDB.Name_Data.Valid = true

	toneDB.StackName_Data.String = tone.StackName
	toneDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromTone_WOP
func (toneDB *ToneDB) CopyBasicFieldsFromTone_WOP(tone *models.Tone_WOP) {
	// insertion point for fields commit

	toneDB.Name_Data.String = tone.Name
	toneDB.Name_Data.Valid = true

	toneDB.StackName_Data.String = tone.StackName
	toneDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromToneWOP
func (toneDB *ToneDB) CopyBasicFieldsFromToneWOP(tone *ToneWOP) {
	// insertion point for fields commit

	toneDB.Name_Data.String = tone.Name
	toneDB.Name_Data.Valid = true

	toneDB.StackName_Data.String = tone.StackName
	toneDB.StackName_Data.Valid = true
}

// CopyBasicFieldsToTone
func (toneDB *ToneDB) CopyBasicFieldsToTone(tone *models.Tone) {
	// insertion point for checkout of basic fields (back repo to stage)
	tone.Name = toneDB.Name_Data.String
	tone.StackName = toneDB.StackName_Data.String
}

// CopyBasicFieldsToTone_WOP
func (toneDB *ToneDB) CopyBasicFieldsToTone_WOP(tone *models.Tone_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tone.Name = toneDB.Name_Data.String
	tone.StackName = toneDB.StackName_Data.String
}

// CopyBasicFieldsToToneWOP
func (toneDB *ToneDB) CopyBasicFieldsToToneWOP(tone *ToneWOP) {
	tone.ID = int(toneDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tone.Name = toneDB.Name_Data.String
	tone.StackName = toneDB.StackName_Data.String
}

// Backup generates a json file from a slice of all ToneDB instances in the backrepo
func (backRepoTone *BackRepoToneStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ToneDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ToneDB, 0)
	for _, toneDB := range backRepoTone.Map_ToneDBID_ToneDB {
		forBackup = append(forBackup, toneDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tone ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tone file", err.Error())
	}
}

// Backup generates a json file from a slice of all ToneDB instances in the backrepo
func (backRepoTone *BackRepoToneStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ToneDB, 0)
	for _, toneDB := range backRepoTone.Map_ToneDBID_ToneDB {
		forBackup = append(forBackup, toneDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tone")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tone_Fields, -1)
	for _, toneDB := range forBackup {

		var toneWOP ToneWOP
		toneDB.CopyBasicFieldsToToneWOP(&toneWOP)

		row := sh.AddRow()
		row.WriteStruct(&toneWOP, -1)
	}
}

// RestoreXL from the "Tone" sheet all ToneDB instances
func (backRepoTone *BackRepoToneStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoToneid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tone"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTone.rowVisitorTone)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTone *BackRepoToneStruct) rowVisitorTone(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var toneWOP ToneWOP
		row.ReadStruct(&toneWOP)

		// add the unmarshalled struct to the stage
		toneDB := new(ToneDB)
		toneDB.CopyBasicFieldsFromToneWOP(&toneWOP)

		toneDB_ID_atBackupTime := toneDB.ID
		toneDB.ID = 0
		_, err := backRepoTone.db.Create(toneDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoTone.Map_ToneDBID_ToneDB[toneDB.ID] = toneDB
		BackRepoToneid_atBckpTime_newID[toneDB_ID_atBackupTime] = toneDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ToneDB.json" in dirPath that stores an array
// of ToneDB and stores it in the database
// the map BackRepoToneid_atBckpTime_newID is updated accordingly
func (backRepoTone *BackRepoToneStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoToneid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ToneDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tone file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ToneDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ToneDBID_ToneDB
	for _, toneDB := range forRestore {

		toneDB_ID_atBackupTime := toneDB.ID
		toneDB.ID = 0
		_, err := backRepoTone.db.Create(toneDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoTone.Map_ToneDBID_ToneDB[toneDB.ID] = toneDB
		BackRepoToneid_atBckpTime_newID[toneDB_ID_atBackupTime] = toneDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tone file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tone>id_atBckpTime_newID
// to compute new index
func (backRepoTone *BackRepoToneStruct) RestorePhaseTwo() {

	for _, toneDB := range backRepoTone.Map_ToneDBID_ToneDB {

		// next line of code is to avert unused variable compilation error
		_ = toneDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoTone.db.Model(toneDB)
		_, err := db.Updates(*toneDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoTone.ResetReversePointers commits all staged instances of Tone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTone *BackRepoToneStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tone := range backRepoTone.Map_ToneDBID_TonePtr {
		backRepoTone.ResetReversePointersInstance(backRepo, idx, tone)
	}

	return
}

func (backRepoTone *BackRepoToneStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tone *models.Tone) (Error error) {

	// fetch matching toneDB
	if toneDB, ok := backRepoTone.Map_ToneDBID_ToneDB[idx]; ok {
		_ = toneDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoToneid_atBckpTime_newID map[uint]uint
