// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AsSplitArea_sql sql.NullBool
var dummy_AsSplitArea_time time.Duration
var dummy_AsSplitArea_sort sort.Float64Slice

// AsSplitAreaAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model assplitareaAPI
type AsSplitAreaAPI struct {
	gorm.Model

	models.AsSplitArea_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AsSplitAreaPointersEncoding AsSplitAreaPointersEncoding
}

// AsSplitAreaPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AsSplitAreaPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field AsSplits is a slice of pointers to another Struct (optional or 0..1)
	AsSplits IntSlice `gorm:"type:TEXT"`

	// field Tree is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TreeID sql.NullInt64

	// field Table is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TableID sql.NullInt64

	// field Form is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FormID sql.NullInt64

	// field Svg is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SvgID sql.NullInt64

	// field Doc is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DocID sql.NullInt64
}

// AsSplitAreaDB describes a assplitarea in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model assplitareaDB
type AsSplitAreaDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field assplitareaDB.Name
	Name_Data sql.NullString

	// Declation for basic field assplitareaDB.Size
	Size_Data sql.NullFloat64

	// Declation for basic field assplitareaDB.IsAny
	// provide the sql storage for the boolan
	IsAny_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AsSplitAreaPointersEncoding
}

// AsSplitAreaDBs arrays assplitareaDBs
// swagger:response assplitareaDBsResponse
type AsSplitAreaDBs []AsSplitAreaDB

// AsSplitAreaDBResponse provides response
// swagger:response assplitareaDBResponse
type AsSplitAreaDBResponse struct {
	AsSplitAreaDB
}

// AsSplitAreaWOP is a AsSplitArea without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AsSplitAreaWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Size float64 `xlsx:"2"`

	IsAny bool `xlsx:"3"`
	// insertion for WOP pointer fields
}

var AsSplitArea_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Size",
	"IsAny",
}

type BackRepoAsSplitAreaStruct struct {
	// stores AsSplitAreaDB according to their gorm ID
	Map_AsSplitAreaDBID_AsSplitAreaDB map[uint]*AsSplitAreaDB

	// stores AsSplitAreaDB ID according to AsSplitArea address
	Map_AsSplitAreaPtr_AsSplitAreaDBID map[*models.AsSplitArea]uint

	// stores AsSplitArea according to their gorm ID
	Map_AsSplitAreaDBID_AsSplitAreaPtr map[uint]*models.AsSplitArea

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAsSplitArea.stage
	return
}

func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) GetDB() db.DBInterface {
	return backRepoAsSplitArea.db
}

// GetAsSplitAreaDBFromAsSplitAreaPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) GetAsSplitAreaDBFromAsSplitAreaPtr(assplitarea *models.AsSplitArea) (assplitareaDB *AsSplitAreaDB) {
	id := backRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID[assplitarea]
	assplitareaDB = backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB[id]
	return
}

// BackRepoAsSplitArea.CommitPhaseOne commits all staged instances of AsSplitArea to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var assplitareas []*models.AsSplitArea
	for assplitarea := range stage.AsSplitAreas {
		assplitareas = append(assplitareas, assplitarea)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(assplitareas, func(i, j int) bool {
		return stage.Map_Staged_Order[assplitareas[i]] < stage.Map_Staged_Order[assplitareas[j]]
	})

	for _, assplitarea := range assplitareas {
		backRepoAsSplitArea.CommitPhaseOneInstance(assplitarea)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, assplitarea := range backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr {
		if _, ok := stage.AsSplitAreas[assplitarea]; !ok {
			backRepoAsSplitArea.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAsSplitArea.CommitDeleteInstance commits deletion of AsSplitArea to the BackRepo
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CommitDeleteInstance(id uint) (Error error) {

	assplitarea := backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr[id]

	// assplitarea is not staged anymore, remove assplitareaDB
	assplitareaDB := backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB[id]
	db, _ := backRepoAsSplitArea.db.Unscoped()
	_, err := db.Delete(assplitareaDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID, assplitarea)
	delete(backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr, id)
	delete(backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB, id)

	return
}

// BackRepoAsSplitArea.CommitPhaseOneInstance commits assplitarea staged instances of AsSplitArea to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CommitPhaseOneInstance(assplitarea *models.AsSplitArea) (Error error) {

	// check if the assplitarea is not commited yet
	if _, ok := backRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID[assplitarea]; ok {
		return
	}

	// initiate assplitarea
	var assplitareaDB AsSplitAreaDB
	assplitareaDB.CopyBasicFieldsFromAsSplitArea(assplitarea)

	_, err := backRepoAsSplitArea.db.Create(&assplitareaDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID[assplitarea] = assplitareaDB.ID
	backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr[assplitareaDB.ID] = assplitarea
	backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB[assplitareaDB.ID] = &assplitareaDB

	return
}

// BackRepoAsSplitArea.CommitPhaseTwo commits all staged instances of AsSplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, assplitarea := range backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr {
		backRepoAsSplitArea.CommitPhaseTwoInstance(backRepo, idx, assplitarea)
	}

	return
}

// BackRepoAsSplitArea.CommitPhaseTwoInstance commits {{structname }} of models.AsSplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, assplitarea *models.AsSplitArea) (Error error) {

	// fetch matching assplitareaDB
	if assplitareaDB, ok := backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB[idx]; ok {

		assplitareaDB.CopyBasicFieldsFromAsSplitArea(assplitarea)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		assplitareaDB.AsSplitAreaPointersEncoding.AsSplits = make([]int, 0)
		// 2. encode
		for _, assplitAssocEnd := range assplitarea.AsSplits {
			assplitAssocEnd_DB :=
				backRepo.BackRepoAsSplit.GetAsSplitDBFromAsSplitPtr(assplitAssocEnd)
			
			// the stage might be inconsistant, meaning that the assplitAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if assplitAssocEnd_DB == nil {
				continue
			}
			
			assplitareaDB.AsSplitAreaPointersEncoding.AsSplits =
				append(assplitareaDB.AsSplitAreaPointersEncoding.AsSplits, int(assplitAssocEnd_DB.ID))
		}

		// commit pointer value assplitarea.Tree translates to updating the assplitarea.TreeID
		assplitareaDB.TreeID.Valid = true // allow for a 0 value (nil association)
		if assplitarea.Tree != nil {
			if TreeId, ok := backRepo.BackRepoTree.Map_TreePtr_TreeDBID[assplitarea.Tree]; ok {
				assplitareaDB.TreeID.Int64 = int64(TreeId)
				assplitareaDB.TreeID.Valid = true
			}
		} else {
			assplitareaDB.TreeID.Int64 = 0
			assplitareaDB.TreeID.Valid = true
		}

		// commit pointer value assplitarea.Table translates to updating the assplitarea.TableID
		assplitareaDB.TableID.Valid = true // allow for a 0 value (nil association)
		if assplitarea.Table != nil {
			if TableId, ok := backRepo.BackRepoTable.Map_TablePtr_TableDBID[assplitarea.Table]; ok {
				assplitareaDB.TableID.Int64 = int64(TableId)
				assplitareaDB.TableID.Valid = true
			}
		} else {
			assplitareaDB.TableID.Int64 = 0
			assplitareaDB.TableID.Valid = true
		}

		// commit pointer value assplitarea.Form translates to updating the assplitarea.FormID
		assplitareaDB.FormID.Valid = true // allow for a 0 value (nil association)
		if assplitarea.Form != nil {
			if FormId, ok := backRepo.BackRepoForm.Map_FormPtr_FormDBID[assplitarea.Form]; ok {
				assplitareaDB.FormID.Int64 = int64(FormId)
				assplitareaDB.FormID.Valid = true
			}
		} else {
			assplitareaDB.FormID.Int64 = 0
			assplitareaDB.FormID.Valid = true
		}

		// commit pointer value assplitarea.Svg translates to updating the assplitarea.SvgID
		assplitareaDB.SvgID.Valid = true // allow for a 0 value (nil association)
		if assplitarea.Svg != nil {
			if SvgId, ok := backRepo.BackRepoSvg.Map_SvgPtr_SvgDBID[assplitarea.Svg]; ok {
				assplitareaDB.SvgID.Int64 = int64(SvgId)
				assplitareaDB.SvgID.Valid = true
			}
		} else {
			assplitareaDB.SvgID.Int64 = 0
			assplitareaDB.SvgID.Valid = true
		}

		// commit pointer value assplitarea.Doc translates to updating the assplitarea.DocID
		assplitareaDB.DocID.Valid = true // allow for a 0 value (nil association)
		if assplitarea.Doc != nil {
			if DocId, ok := backRepo.BackRepoDoc.Map_DocPtr_DocDBID[assplitarea.Doc]; ok {
				assplitareaDB.DocID.Int64 = int64(DocId)
				assplitareaDB.DocID.Valid = true
			}
		} else {
			assplitareaDB.DocID.Int64 = 0
			assplitareaDB.DocID.Valid = true
		}

		_, err := backRepoAsSplitArea.db.Save(assplitareaDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AsSplitArea intance %s", assplitarea.Name))
		return err
	}

	return
}

// BackRepoAsSplitArea.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CheckoutPhaseOne() (Error error) {

	assplitareaDBArray := make([]AsSplitAreaDB, 0)
	_, err := backRepoAsSplitArea.db.Find(&assplitareaDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	assplitareaInstancesToBeRemovedFromTheStage := make(map[*models.AsSplitArea]any)
	for key, value := range backRepoAsSplitArea.stage.AsSplitAreas {
		assplitareaInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, assplitareaDB := range assplitareaDBArray {
		backRepoAsSplitArea.CheckoutPhaseOneInstance(&assplitareaDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		assplitarea, ok := backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr[assplitareaDB.ID]
		if ok {
			delete(assplitareaInstancesToBeRemovedFromTheStage, assplitarea)
		}
	}

	// remove from stage and back repo's 3 maps all assplitareas that are not in the checkout
	for assplitarea := range assplitareaInstancesToBeRemovedFromTheStage {
		assplitarea.Unstage(backRepoAsSplitArea.GetStage())

		// remove instance from the back repo 3 maps
		assplitareaID := backRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID[assplitarea]
		delete(backRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID, assplitarea)
		delete(backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB, assplitareaID)
		delete(backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr, assplitareaID)
	}

	return
}

// CheckoutPhaseOneInstance takes a assplitareaDB that has been found in the DB, updates the backRepo and stages the
// models version of the assplitareaDB
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CheckoutPhaseOneInstance(assplitareaDB *AsSplitAreaDB) (Error error) {

	assplitarea, ok := backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr[assplitareaDB.ID]
	if !ok {
		assplitarea = new(models.AsSplitArea)

		backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr[assplitareaDB.ID] = assplitarea
		backRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID[assplitarea] = assplitareaDB.ID

		// append model store with the new element
		assplitarea.Name = assplitareaDB.Name_Data.String
		assplitarea.Stage(backRepoAsSplitArea.GetStage())
	}
	assplitareaDB.CopyBasicFieldsToAsSplitArea(assplitarea)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	assplitarea.Stage(backRepoAsSplitArea.GetStage())

	// preserve pointer to assplitareaDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AsSplitAreaDBID_AsSplitAreaDB)[assplitareaDB hold variable pointers
	assplitareaDB_Data := *assplitareaDB
	preservedPtrToAsSplitArea := &assplitareaDB_Data
	backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB[assplitareaDB.ID] = preservedPtrToAsSplitArea

	return
}

// BackRepoAsSplitArea.CheckoutPhaseTwo Checkouts all staged instances of AsSplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, assplitareaDB := range backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB {
		backRepoAsSplitArea.CheckoutPhaseTwoInstance(backRepo, assplitareaDB)
	}
	return
}

// BackRepoAsSplitArea.CheckoutPhaseTwoInstance Checkouts staged instances of AsSplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, assplitareaDB *AsSplitAreaDB) (Error error) {

	assplitarea := backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr[assplitareaDB.ID]

	assplitareaDB.DecodePointers(backRepo, assplitarea)

	return
}

func (assplitareaDB *AsSplitAreaDB) DecodePointers(backRepo *BackRepoStruct, assplitarea *models.AsSplitArea) {

	// insertion point for checkout of pointer encoding
	// This loop redeem assplitarea.AsSplits in the stage from the encode in the back repo
	// It parses all AsSplitDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	assplitarea.AsSplits = assplitarea.AsSplits[:0]
	for _, _AsSplitid := range assplitareaDB.AsSplitAreaPointersEncoding.AsSplits {
		assplitarea.AsSplits = append(assplitarea.AsSplits, backRepo.BackRepoAsSplit.Map_AsSplitDBID_AsSplitPtr[uint(_AsSplitid)])
	}

	// Tree field	
	{
		id := assplitareaDB.TreeID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoTree.Map_TreeDBID_TreePtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: assplitarea.Tree, unknown pointer id", id)
				assplitarea.Tree = nil
			} else {
				// updates only if field has changed
				if assplitarea.Tree == nil || assplitarea.Tree != tmp {
					assplitarea.Tree = tmp
				}
			}
		} else {
			assplitarea.Tree = nil
		}
	}
	
	// Table field	
	{
		id := assplitareaDB.TableID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoTable.Map_TableDBID_TablePtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: assplitarea.Table, unknown pointer id", id)
				assplitarea.Table = nil
			} else {
				// updates only if field has changed
				if assplitarea.Table == nil || assplitarea.Table != tmp {
					assplitarea.Table = tmp
				}
			}
		} else {
			assplitarea.Table = nil
		}
	}
	
	// Form field	
	{
		id := assplitareaDB.FormID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoForm.Map_FormDBID_FormPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: assplitarea.Form, unknown pointer id", id)
				assplitarea.Form = nil
			} else {
				// updates only if field has changed
				if assplitarea.Form == nil || assplitarea.Form != tmp {
					assplitarea.Form = tmp
				}
			}
		} else {
			assplitarea.Form = nil
		}
	}
	
	// Svg field	
	{
		id := assplitareaDB.SvgID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoSvg.Map_SvgDBID_SvgPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: assplitarea.Svg, unknown pointer id", id)
				assplitarea.Svg = nil
			} else {
				// updates only if field has changed
				if assplitarea.Svg == nil || assplitarea.Svg != tmp {
					assplitarea.Svg = tmp
				}
			}
		} else {
			assplitarea.Svg = nil
		}
	}
	
	// Doc field	
	{
		id := assplitareaDB.DocID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoDoc.Map_DocDBID_DocPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: assplitarea.Doc, unknown pointer id", id)
				assplitarea.Doc = nil
			} else {
				// updates only if field has changed
				if assplitarea.Doc == nil || assplitarea.Doc != tmp {
					assplitarea.Doc = tmp
				}
			}
		} else {
			assplitarea.Doc = nil
		}
	}
	
	return
}

// CommitAsSplitArea allows commit of a single assplitarea (if already staged)
func (backRepo *BackRepoStruct) CommitAsSplitArea(assplitarea *models.AsSplitArea) {
	backRepo.BackRepoAsSplitArea.CommitPhaseOneInstance(assplitarea)
	if id, ok := backRepo.BackRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID[assplitarea]; ok {
		backRepo.BackRepoAsSplitArea.CommitPhaseTwoInstance(backRepo, id, assplitarea)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAsSplitArea allows checkout of a single assplitarea (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAsSplitArea(assplitarea *models.AsSplitArea) {
	// check if the assplitarea is staged
	if _, ok := backRepo.BackRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID[assplitarea]; ok {

		if id, ok := backRepo.BackRepoAsSplitArea.Map_AsSplitAreaPtr_AsSplitAreaDBID[assplitarea]; ok {
			var assplitareaDB AsSplitAreaDB
			assplitareaDB.ID = id

			if _, err := backRepo.BackRepoAsSplitArea.db.First(&assplitareaDB, id); err != nil {
				log.Fatalln("CheckoutAsSplitArea : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAsSplitArea.CheckoutPhaseOneInstance(&assplitareaDB)
			backRepo.BackRepoAsSplitArea.CheckoutPhaseTwoInstance(backRepo, &assplitareaDB)
		}
	}
}

// CopyBasicFieldsFromAsSplitArea
func (assplitareaDB *AsSplitAreaDB) CopyBasicFieldsFromAsSplitArea(assplitarea *models.AsSplitArea) {
	// insertion point for fields commit

	assplitareaDB.Name_Data.String = assplitarea.Name
	assplitareaDB.Name_Data.Valid = true

	assplitareaDB.Size_Data.Float64 = assplitarea.Size
	assplitareaDB.Size_Data.Valid = true

	assplitareaDB.IsAny_Data.Bool = assplitarea.IsAny
	assplitareaDB.IsAny_Data.Valid = true
}

// CopyBasicFieldsFromAsSplitArea_WOP
func (assplitareaDB *AsSplitAreaDB) CopyBasicFieldsFromAsSplitArea_WOP(assplitarea *models.AsSplitArea_WOP) {
	// insertion point for fields commit

	assplitareaDB.Name_Data.String = assplitarea.Name
	assplitareaDB.Name_Data.Valid = true

	assplitareaDB.Size_Data.Float64 = assplitarea.Size
	assplitareaDB.Size_Data.Valid = true

	assplitareaDB.IsAny_Data.Bool = assplitarea.IsAny
	assplitareaDB.IsAny_Data.Valid = true
}

// CopyBasicFieldsFromAsSplitAreaWOP
func (assplitareaDB *AsSplitAreaDB) CopyBasicFieldsFromAsSplitAreaWOP(assplitarea *AsSplitAreaWOP) {
	// insertion point for fields commit

	assplitareaDB.Name_Data.String = assplitarea.Name
	assplitareaDB.Name_Data.Valid = true

	assplitareaDB.Size_Data.Float64 = assplitarea.Size
	assplitareaDB.Size_Data.Valid = true

	assplitareaDB.IsAny_Data.Bool = assplitarea.IsAny
	assplitareaDB.IsAny_Data.Valid = true
}

// CopyBasicFieldsToAsSplitArea
func (assplitareaDB *AsSplitAreaDB) CopyBasicFieldsToAsSplitArea(assplitarea *models.AsSplitArea) {
	// insertion point for checkout of basic fields (back repo to stage)
	assplitarea.Name = assplitareaDB.Name_Data.String
	assplitarea.Size = assplitareaDB.Size_Data.Float64
	assplitarea.IsAny = assplitareaDB.IsAny_Data.Bool
}

// CopyBasicFieldsToAsSplitArea_WOP
func (assplitareaDB *AsSplitAreaDB) CopyBasicFieldsToAsSplitArea_WOP(assplitarea *models.AsSplitArea_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	assplitarea.Name = assplitareaDB.Name_Data.String
	assplitarea.Size = assplitareaDB.Size_Data.Float64
	assplitarea.IsAny = assplitareaDB.IsAny_Data.Bool
}

// CopyBasicFieldsToAsSplitAreaWOP
func (assplitareaDB *AsSplitAreaDB) CopyBasicFieldsToAsSplitAreaWOP(assplitarea *AsSplitAreaWOP) {
	assplitarea.ID = int(assplitareaDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	assplitarea.Name = assplitareaDB.Name_Data.String
	assplitarea.Size = assplitareaDB.Size_Data.Float64
	assplitarea.IsAny = assplitareaDB.IsAny_Data.Bool
}

// Backup generates a json file from a slice of all AsSplitAreaDB instances in the backrepo
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AsSplitAreaDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AsSplitAreaDB, 0)
	for _, assplitareaDB := range backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB {
		forBackup = append(forBackup, assplitareaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json AsSplitArea ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json AsSplitArea file", err.Error())
	}
}

// Backup generates a json file from a slice of all AsSplitAreaDB instances in the backrepo
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AsSplitAreaDB, 0)
	for _, assplitareaDB := range backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB {
		forBackup = append(forBackup, assplitareaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AsSplitArea")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AsSplitArea_Fields, -1)
	for _, assplitareaDB := range forBackup {

		var assplitareaWOP AsSplitAreaWOP
		assplitareaDB.CopyBasicFieldsToAsSplitAreaWOP(&assplitareaWOP)

		row := sh.AddRow()
		row.WriteStruct(&assplitareaWOP, -1)
	}
}

// RestoreXL from the "AsSplitArea" sheet all AsSplitAreaDB instances
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAsSplitAreaid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AsSplitArea"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAsSplitArea.rowVisitorAsSplitArea)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) rowVisitorAsSplitArea(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var assplitareaWOP AsSplitAreaWOP
		row.ReadStruct(&assplitareaWOP)

		// add the unmarshalled struct to the stage
		assplitareaDB := new(AsSplitAreaDB)
		assplitareaDB.CopyBasicFieldsFromAsSplitAreaWOP(&assplitareaWOP)

		assplitareaDB_ID_atBackupTime := assplitareaDB.ID
		assplitareaDB.ID = 0
		_, err := backRepoAsSplitArea.db.Create(assplitareaDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB[assplitareaDB.ID] = assplitareaDB
		BackRepoAsSplitAreaid_atBckpTime_newID[assplitareaDB_ID_atBackupTime] = assplitareaDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AsSplitAreaDB.json" in dirPath that stores an array
// of AsSplitAreaDB and stores it in the database
// the map BackRepoAsSplitAreaid_atBckpTime_newID is updated accordingly
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAsSplitAreaid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AsSplitAreaDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json AsSplitArea file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AsSplitAreaDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AsSplitAreaDBID_AsSplitAreaDB
	for _, assplitareaDB := range forRestore {

		assplitareaDB_ID_atBackupTime := assplitareaDB.ID
		assplitareaDB.ID = 0
		_, err := backRepoAsSplitArea.db.Create(assplitareaDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB[assplitareaDB.ID] = assplitareaDB
		BackRepoAsSplitAreaid_atBckpTime_newID[assplitareaDB_ID_atBackupTime] = assplitareaDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json AsSplitArea file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AsSplitArea>id_atBckpTime_newID
// to compute new index
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) RestorePhaseTwo() {

	for _, assplitareaDB := range backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB {

		// next line of code is to avert unused variable compilation error
		_ = assplitareaDB

		// insertion point for reindexing pointers encoding
		// reindexing Tree field
		if assplitareaDB.TreeID.Int64 != 0 {
			assplitareaDB.TreeID.Int64 = int64(BackRepoTreeid_atBckpTime_newID[uint(assplitareaDB.TreeID.Int64)])
			assplitareaDB.TreeID.Valid = true
		}

		// reindexing Table field
		if assplitareaDB.TableID.Int64 != 0 {
			assplitareaDB.TableID.Int64 = int64(BackRepoTableid_atBckpTime_newID[uint(assplitareaDB.TableID.Int64)])
			assplitareaDB.TableID.Valid = true
		}

		// reindexing Form field
		if assplitareaDB.FormID.Int64 != 0 {
			assplitareaDB.FormID.Int64 = int64(BackRepoFormid_atBckpTime_newID[uint(assplitareaDB.FormID.Int64)])
			assplitareaDB.FormID.Valid = true
		}

		// reindexing Svg field
		if assplitareaDB.SvgID.Int64 != 0 {
			assplitareaDB.SvgID.Int64 = int64(BackRepoSvgid_atBckpTime_newID[uint(assplitareaDB.SvgID.Int64)])
			assplitareaDB.SvgID.Valid = true
		}

		// reindexing Doc field
		if assplitareaDB.DocID.Int64 != 0 {
			assplitareaDB.DocID.Int64 = int64(BackRepoDocid_atBckpTime_newID[uint(assplitareaDB.DocID.Int64)])
			assplitareaDB.DocID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoAsSplitArea.db.Model(assplitareaDB)
		_, err := db.Updates(*assplitareaDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoAsSplitArea.ResetReversePointers commits all staged instances of AsSplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, assplitarea := range backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaPtr {
		backRepoAsSplitArea.ResetReversePointersInstance(backRepo, idx, assplitarea)
	}

	return
}

func (backRepoAsSplitArea *BackRepoAsSplitAreaStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, assplitarea *models.AsSplitArea) (Error error) {

	// fetch matching assplitareaDB
	if assplitareaDB, ok := backRepoAsSplitArea.Map_AsSplitAreaDBID_AsSplitAreaDB[idx]; ok {
		_ = assplitareaDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAsSplitAreaid_atBckpTime_newID map[uint]uint
