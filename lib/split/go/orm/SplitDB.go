// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Split_sql sql.NullBool
var dummy_Split_time time.Duration
var dummy_Split_sort sort.Float64Slice

// SplitAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model splitAPI
type SplitAPI struct {
	gorm.Model

	models.Split_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SplitPointersEncoding SplitPointersEncoding
}

// SplitPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SplitPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SplitDB describes a split in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model splitDB
type SplitDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field splitDB.Name
	Name_Data sql.NullString

	// Declation for basic field splitDB.StackName
	StackName_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SplitPointersEncoding
}

// SplitDBs arrays splitDBs
// swagger:response splitDBsResponse
type SplitDBs []SplitDB

// SplitDBResponse provides response
// swagger:response splitDBResponse
type SplitDBResponse struct {
	SplitDB
}

// SplitWOP is a Split without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SplitWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StackName string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Split_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StackName",
}

type BackRepoSplitStruct struct {
	// stores SplitDB according to their gorm ID
	Map_SplitDBID_SplitDB map[uint]*SplitDB

	// stores SplitDB ID according to Split address
	Map_SplitPtr_SplitDBID map[*models.Split]uint

	// stores Split according to their gorm ID
	Map_SplitDBID_SplitPtr map[uint]*models.Split

	db db.DBInterface

	stage *models.Stage
}

func (backRepoSplit *BackRepoSplitStruct) GetStage() (stage *models.Stage) {
	stage = backRepoSplit.stage
	return
}

func (backRepoSplit *BackRepoSplitStruct) GetDB() db.DBInterface {
	return backRepoSplit.db
}

// GetSplitDBFromSplitPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSplit *BackRepoSplitStruct) GetSplitDBFromSplitPtr(split *models.Split) (splitDB *SplitDB) {
	id := backRepoSplit.Map_SplitPtr_SplitDBID[split]
	splitDB = backRepoSplit.Map_SplitDBID_SplitDB[id]
	return
}

// BackRepoSplit.CommitPhaseOne commits all staged instances of Split to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSplit *BackRepoSplitStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var splits []*models.Split
	for split := range stage.Splits {
		splits = append(splits, split)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(splits, func(i, j int) bool {
		return stage.SplitMap_Staged_Order[splits[i]] < stage.SplitMap_Staged_Order[splits[j]]
	})

	for _, split := range splits {
		backRepoSplit.CommitPhaseOneInstance(split)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, split := range backRepoSplit.Map_SplitDBID_SplitPtr {
		if _, ok := stage.Splits[split]; !ok {
			backRepoSplit.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSplit.CommitDeleteInstance commits deletion of Split to the BackRepo
func (backRepoSplit *BackRepoSplitStruct) CommitDeleteInstance(id uint) (Error error) {

	split := backRepoSplit.Map_SplitDBID_SplitPtr[id]

	// split is not staged anymore, remove splitDB
	splitDB := backRepoSplit.Map_SplitDBID_SplitDB[id]
	db, _ := backRepoSplit.db.Unscoped()
	_, err := db.Delete(splitDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSplit.Map_SplitPtr_SplitDBID, split)
	delete(backRepoSplit.Map_SplitDBID_SplitPtr, id)
	delete(backRepoSplit.Map_SplitDBID_SplitDB, id)

	return
}

// BackRepoSplit.CommitPhaseOneInstance commits split staged instances of Split to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSplit *BackRepoSplitStruct) CommitPhaseOneInstance(split *models.Split) (Error error) {

	// check if the split is not commited yet
	if _, ok := backRepoSplit.Map_SplitPtr_SplitDBID[split]; ok {
		return
	}

	// initiate split
	var splitDB SplitDB
	splitDB.CopyBasicFieldsFromSplit(split)

	_, err := backRepoSplit.db.Create(&splitDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSplit.Map_SplitPtr_SplitDBID[split] = splitDB.ID
	backRepoSplit.Map_SplitDBID_SplitPtr[splitDB.ID] = split
	backRepoSplit.Map_SplitDBID_SplitDB[splitDB.ID] = &splitDB

	return
}

// BackRepoSplit.CommitPhaseTwo commits all staged instances of Split to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplit *BackRepoSplitStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, split := range backRepoSplit.Map_SplitDBID_SplitPtr {
		backRepoSplit.CommitPhaseTwoInstance(backRepo, idx, split)
	}

	return
}

// BackRepoSplit.CommitPhaseTwoInstance commits {{structname }} of models.Split to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplit *BackRepoSplitStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, split *models.Split) (Error error) {

	// fetch matching splitDB
	if splitDB, ok := backRepoSplit.Map_SplitDBID_SplitDB[idx]; ok {

		splitDB.CopyBasicFieldsFromSplit(split)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoSplit.db.Save(splitDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Split intance %s", split.Name))
		return err
	}

	return
}

// BackRepoSplit.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSplit *BackRepoSplitStruct) CheckoutPhaseOne() (Error error) {

	splitDBArray := make([]SplitDB, 0)
	_, err := backRepoSplit.db.Find(&splitDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	splitInstancesToBeRemovedFromTheStage := make(map[*models.Split]any)
	for key, value := range backRepoSplit.stage.Splits {
		splitInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, splitDB := range splitDBArray {
		backRepoSplit.CheckoutPhaseOneInstance(&splitDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		split, ok := backRepoSplit.Map_SplitDBID_SplitPtr[splitDB.ID]
		if ok {
			delete(splitInstancesToBeRemovedFromTheStage, split)
		}
	}

	// remove from stage and back repo's 3 maps all splits that are not in the checkout
	for split := range splitInstancesToBeRemovedFromTheStage {
		split.Unstage(backRepoSplit.GetStage())

		// remove instance from the back repo 3 maps
		splitID := backRepoSplit.Map_SplitPtr_SplitDBID[split]
		delete(backRepoSplit.Map_SplitPtr_SplitDBID, split)
		delete(backRepoSplit.Map_SplitDBID_SplitDB, splitID)
		delete(backRepoSplit.Map_SplitDBID_SplitPtr, splitID)
	}

	return
}

// CheckoutPhaseOneInstance takes a splitDB that has been found in the DB, updates the backRepo and stages the
// models version of the splitDB
func (backRepoSplit *BackRepoSplitStruct) CheckoutPhaseOneInstance(splitDB *SplitDB) (Error error) {

	split, ok := backRepoSplit.Map_SplitDBID_SplitPtr[splitDB.ID]
	if !ok {
		split = new(models.Split)

		backRepoSplit.Map_SplitDBID_SplitPtr[splitDB.ID] = split
		backRepoSplit.Map_SplitPtr_SplitDBID[split] = splitDB.ID

		// append model store with the new element
		split.Name = splitDB.Name_Data.String
		split.Stage(backRepoSplit.GetStage())
	}
	splitDB.CopyBasicFieldsToSplit(split)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	split.Stage(backRepoSplit.GetStage())

	// preserve pointer to splitDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SplitDBID_SplitDB)[splitDB hold variable pointers
	splitDB_Data := *splitDB
	preservedPtrToSplit := &splitDB_Data
	backRepoSplit.Map_SplitDBID_SplitDB[splitDB.ID] = preservedPtrToSplit

	return
}

// BackRepoSplit.CheckoutPhaseTwo Checkouts all staged instances of Split to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplit *BackRepoSplitStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, splitDB := range backRepoSplit.Map_SplitDBID_SplitDB {
		backRepoSplit.CheckoutPhaseTwoInstance(backRepo, splitDB)
	}
	return
}

// BackRepoSplit.CheckoutPhaseTwoInstance Checkouts staged instances of Split to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplit *BackRepoSplitStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, splitDB *SplitDB) (Error error) {

	split := backRepoSplit.Map_SplitDBID_SplitPtr[splitDB.ID]

	splitDB.DecodePointers(backRepo, split)

	return
}

func (splitDB *SplitDB) DecodePointers(backRepo *BackRepoStruct, split *models.Split) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSplit allows commit of a single split (if already staged)
func (backRepo *BackRepoStruct) CommitSplit(split *models.Split) {
	backRepo.BackRepoSplit.CommitPhaseOneInstance(split)
	if id, ok := backRepo.BackRepoSplit.Map_SplitPtr_SplitDBID[split]; ok {
		backRepo.BackRepoSplit.CommitPhaseTwoInstance(backRepo, id, split)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSplit allows checkout of a single split (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSplit(split *models.Split) {
	// check if the split is staged
	if _, ok := backRepo.BackRepoSplit.Map_SplitPtr_SplitDBID[split]; ok {

		if id, ok := backRepo.BackRepoSplit.Map_SplitPtr_SplitDBID[split]; ok {
			var splitDB SplitDB
			splitDB.ID = id

			if _, err := backRepo.BackRepoSplit.db.First(&splitDB, id); err != nil {
				log.Fatalln("CheckoutSplit : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSplit.CheckoutPhaseOneInstance(&splitDB)
			backRepo.BackRepoSplit.CheckoutPhaseTwoInstance(backRepo, &splitDB)
		}
	}
}

// CopyBasicFieldsFromSplit
func (splitDB *SplitDB) CopyBasicFieldsFromSplit(split *models.Split) {
	// insertion point for fields commit

	splitDB.Name_Data.String = split.Name
	splitDB.Name_Data.Valid = true

	splitDB.StackName_Data.String = split.StackName
	splitDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromSplit_WOP
func (splitDB *SplitDB) CopyBasicFieldsFromSplit_WOP(split *models.Split_WOP) {
	// insertion point for fields commit

	splitDB.Name_Data.String = split.Name
	splitDB.Name_Data.Valid = true

	splitDB.StackName_Data.String = split.StackName
	splitDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromSplitWOP
func (splitDB *SplitDB) CopyBasicFieldsFromSplitWOP(split *SplitWOP) {
	// insertion point for fields commit

	splitDB.Name_Data.String = split.Name
	splitDB.Name_Data.Valid = true

	splitDB.StackName_Data.String = split.StackName
	splitDB.StackName_Data.Valid = true
}

// CopyBasicFieldsToSplit
func (splitDB *SplitDB) CopyBasicFieldsToSplit(split *models.Split) {
	// insertion point for checkout of basic fields (back repo to stage)
	split.Name = splitDB.Name_Data.String
	split.StackName = splitDB.StackName_Data.String
}

// CopyBasicFieldsToSplit_WOP
func (splitDB *SplitDB) CopyBasicFieldsToSplit_WOP(split *models.Split_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	split.Name = splitDB.Name_Data.String
	split.StackName = splitDB.StackName_Data.String
}

// CopyBasicFieldsToSplitWOP
func (splitDB *SplitDB) CopyBasicFieldsToSplitWOP(split *SplitWOP) {
	split.ID = int(splitDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	split.Name = splitDB.Name_Data.String
	split.StackName = splitDB.StackName_Data.String
}

// Backup generates a json file from a slice of all SplitDB instances in the backrepo
func (backRepoSplit *BackRepoSplitStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SplitDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SplitDB, 0)
	for _, splitDB := range backRepoSplit.Map_SplitDBID_SplitDB {
		forBackup = append(forBackup, splitDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Split ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Split file", err.Error())
	}
}

// Backup generates a json file from a slice of all SplitDB instances in the backrepo
func (backRepoSplit *BackRepoSplitStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SplitDB, 0)
	for _, splitDB := range backRepoSplit.Map_SplitDBID_SplitDB {
		forBackup = append(forBackup, splitDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Split")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Split_Fields, -1)
	for _, splitDB := range forBackup {

		var splitWOP SplitWOP
		splitDB.CopyBasicFieldsToSplitWOP(&splitWOP)

		row := sh.AddRow()
		row.WriteStruct(&splitWOP, -1)
	}
}

// RestoreXL from the "Split" sheet all SplitDB instances
func (backRepoSplit *BackRepoSplitStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSplitid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Split"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSplit.rowVisitorSplit)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSplit *BackRepoSplitStruct) rowVisitorSplit(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var splitWOP SplitWOP
		row.ReadStruct(&splitWOP)

		// add the unmarshalled struct to the stage
		splitDB := new(SplitDB)
		splitDB.CopyBasicFieldsFromSplitWOP(&splitWOP)

		splitDB_ID_atBackupTime := splitDB.ID
		splitDB.ID = 0
		_, err := backRepoSplit.db.Create(splitDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSplit.Map_SplitDBID_SplitDB[splitDB.ID] = splitDB
		BackRepoSplitid_atBckpTime_newID[splitDB_ID_atBackupTime] = splitDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SplitDB.json" in dirPath that stores an array
// of SplitDB and stores it in the database
// the map BackRepoSplitid_atBckpTime_newID is updated accordingly
func (backRepoSplit *BackRepoSplitStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSplitid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SplitDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Split file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SplitDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SplitDBID_SplitDB
	for _, splitDB := range forRestore {

		splitDB_ID_atBackupTime := splitDB.ID
		splitDB.ID = 0
		_, err := backRepoSplit.db.Create(splitDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSplit.Map_SplitDBID_SplitDB[splitDB.ID] = splitDB
		BackRepoSplitid_atBckpTime_newID[splitDB_ID_atBackupTime] = splitDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Split file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Split>id_atBckpTime_newID
// to compute new index
func (backRepoSplit *BackRepoSplitStruct) RestorePhaseTwo() {

	for _, splitDB := range backRepoSplit.Map_SplitDBID_SplitDB {

		// next line of code is to avert unused variable compilation error
		_ = splitDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoSplit.db.Model(splitDB)
		_, err := db.Updates(*splitDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSplit.ResetReversePointers commits all staged instances of Split to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplit *BackRepoSplitStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, split := range backRepoSplit.Map_SplitDBID_SplitPtr {
		backRepoSplit.ResetReversePointersInstance(backRepo, idx, split)
	}

	return
}

func (backRepoSplit *BackRepoSplitStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, split *models.Split) (Error error) {

	// fetch matching splitDB
	if splitDB, ok := backRepoSplit.Map_SplitDBID_SplitDB[idx]; ok {
		_ = splitDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSplitid_atBckpTime_newID map[uint]uint
