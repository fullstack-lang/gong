// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Load_sql sql.NullBool
var dummy_Load_time time.Duration
var dummy_Load_sort sort.Float64Slice

// LoadAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model loadAPI
type LoadAPI struct {
	gorm.Model

	models.Load_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LoadPointersEncoding LoadPointersEncoding
}

// LoadPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LoadPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// LoadDB describes a load in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model loadDB
type LoadDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field loadDB.Name
	Name_Data sql.NullString

	// Declation for basic field loadDB.StackName
	StackName_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LoadPointersEncoding
}

// LoadDBs arrays loadDBs
// swagger:response loadDBsResponse
type LoadDBs []LoadDB

// LoadDBResponse provides response
// swagger:response loadDBResponse
type LoadDBResponse struct {
	LoadDB
}

// LoadWOP is a Load without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LoadWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StackName string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Load_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StackName",
}

type BackRepoLoadStruct struct {
	// stores LoadDB according to their gorm ID
	Map_LoadDBID_LoadDB map[uint]*LoadDB

	// stores LoadDB ID according to Load address
	Map_LoadPtr_LoadDBID map[*models.Load]uint

	// stores Load according to their gorm ID
	Map_LoadDBID_LoadPtr map[uint]*models.Load

	db db.DBInterface

	stage *models.Stage
}

func (backRepoLoad *BackRepoLoadStruct) GetStage() (stage *models.Stage) {
	stage = backRepoLoad.stage
	return
}

func (backRepoLoad *BackRepoLoadStruct) GetDB() db.DBInterface {
	return backRepoLoad.db
}

// GetLoadDBFromLoadPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLoad *BackRepoLoadStruct) GetLoadDBFromLoadPtr(load *models.Load) (loadDB *LoadDB) {
	id := backRepoLoad.Map_LoadPtr_LoadDBID[load]
	loadDB = backRepoLoad.Map_LoadDBID_LoadDB[id]
	return
}

// BackRepoLoad.CommitPhaseOne commits all staged instances of Load to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLoad *BackRepoLoadStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var loads []*models.Load
	for load := range stage.Loads {
		loads = append(loads, load)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(loads, func(i, j int) bool {
		return stage.LoadMap_Staged_Order[loads[i]] < stage.LoadMap_Staged_Order[loads[j]]
	})

	for _, load := range loads {
		backRepoLoad.CommitPhaseOneInstance(load)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, load := range backRepoLoad.Map_LoadDBID_LoadPtr {
		if _, ok := stage.Loads[load]; !ok {
			backRepoLoad.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLoad.CommitDeleteInstance commits deletion of Load to the BackRepo
func (backRepoLoad *BackRepoLoadStruct) CommitDeleteInstance(id uint) (Error error) {

	load := backRepoLoad.Map_LoadDBID_LoadPtr[id]

	// load is not staged anymore, remove loadDB
	loadDB := backRepoLoad.Map_LoadDBID_LoadDB[id]
	db, _ := backRepoLoad.db.Unscoped()
	_, err := db.Delete(loadDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoLoad.Map_LoadPtr_LoadDBID, load)
	delete(backRepoLoad.Map_LoadDBID_LoadPtr, id)
	delete(backRepoLoad.Map_LoadDBID_LoadDB, id)

	return
}

// BackRepoLoad.CommitPhaseOneInstance commits load staged instances of Load to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLoad *BackRepoLoadStruct) CommitPhaseOneInstance(load *models.Load) (Error error) {

	// check if the load is not commited yet
	if _, ok := backRepoLoad.Map_LoadPtr_LoadDBID[load]; ok {
		return
	}

	// initiate load
	var loadDB LoadDB
	loadDB.CopyBasicFieldsFromLoad(load)

	_, err := backRepoLoad.db.Create(&loadDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoLoad.Map_LoadPtr_LoadDBID[load] = loadDB.ID
	backRepoLoad.Map_LoadDBID_LoadPtr[loadDB.ID] = load
	backRepoLoad.Map_LoadDBID_LoadDB[loadDB.ID] = &loadDB

	return
}

// BackRepoLoad.CommitPhaseTwo commits all staged instances of Load to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLoad *BackRepoLoadStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, load := range backRepoLoad.Map_LoadDBID_LoadPtr {
		backRepoLoad.CommitPhaseTwoInstance(backRepo, idx, load)
	}

	return
}

// BackRepoLoad.CommitPhaseTwoInstance commits {{structname }} of models.Load to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLoad *BackRepoLoadStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, load *models.Load) (Error error) {

	// fetch matching loadDB
	if loadDB, ok := backRepoLoad.Map_LoadDBID_LoadDB[idx]; ok {

		loadDB.CopyBasicFieldsFromLoad(load)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoLoad.db.Save(loadDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Load intance %s", load.Name))
		return err
	}

	return
}

// BackRepoLoad.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLoad *BackRepoLoadStruct) CheckoutPhaseOne() (Error error) {

	loadDBArray := make([]LoadDB, 0)
	_, err := backRepoLoad.db.Find(&loadDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	loadInstancesToBeRemovedFromTheStage := make(map[*models.Load]any)
	for key, value := range backRepoLoad.stage.Loads {
		loadInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, loadDB := range loadDBArray {
		backRepoLoad.CheckoutPhaseOneInstance(&loadDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		load, ok := backRepoLoad.Map_LoadDBID_LoadPtr[loadDB.ID]
		if ok {
			delete(loadInstancesToBeRemovedFromTheStage, load)
		}
	}

	// remove from stage and back repo's 3 maps all loads that are not in the checkout
	for load := range loadInstancesToBeRemovedFromTheStage {
		load.Unstage(backRepoLoad.GetStage())

		// remove instance from the back repo 3 maps
		loadID := backRepoLoad.Map_LoadPtr_LoadDBID[load]
		delete(backRepoLoad.Map_LoadPtr_LoadDBID, load)
		delete(backRepoLoad.Map_LoadDBID_LoadDB, loadID)
		delete(backRepoLoad.Map_LoadDBID_LoadPtr, loadID)
	}

	return
}

// CheckoutPhaseOneInstance takes a loadDB that has been found in the DB, updates the backRepo and stages the
// models version of the loadDB
func (backRepoLoad *BackRepoLoadStruct) CheckoutPhaseOneInstance(loadDB *LoadDB) (Error error) {

	load, ok := backRepoLoad.Map_LoadDBID_LoadPtr[loadDB.ID]
	if !ok {
		load = new(models.Load)

		backRepoLoad.Map_LoadDBID_LoadPtr[loadDB.ID] = load
		backRepoLoad.Map_LoadPtr_LoadDBID[load] = loadDB.ID

		// append model store with the new element
		load.Name = loadDB.Name_Data.String
		load.Stage(backRepoLoad.GetStage())
	}
	loadDB.CopyBasicFieldsToLoad(load)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	load.Stage(backRepoLoad.GetStage())

	// preserve pointer to loadDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LoadDBID_LoadDB)[loadDB hold variable pointers
	loadDB_Data := *loadDB
	preservedPtrToLoad := &loadDB_Data
	backRepoLoad.Map_LoadDBID_LoadDB[loadDB.ID] = preservedPtrToLoad

	return
}

// BackRepoLoad.CheckoutPhaseTwo Checkouts all staged instances of Load to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLoad *BackRepoLoadStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, loadDB := range backRepoLoad.Map_LoadDBID_LoadDB {
		backRepoLoad.CheckoutPhaseTwoInstance(backRepo, loadDB)
	}
	return
}

// BackRepoLoad.CheckoutPhaseTwoInstance Checkouts staged instances of Load to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLoad *BackRepoLoadStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, loadDB *LoadDB) (Error error) {

	load := backRepoLoad.Map_LoadDBID_LoadPtr[loadDB.ID]

	loadDB.DecodePointers(backRepo, load)

	return
}

func (loadDB *LoadDB) DecodePointers(backRepo *BackRepoStruct, load *models.Load) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLoad allows commit of a single load (if already staged)
func (backRepo *BackRepoStruct) CommitLoad(load *models.Load) {
	backRepo.BackRepoLoad.CommitPhaseOneInstance(load)
	if id, ok := backRepo.BackRepoLoad.Map_LoadPtr_LoadDBID[load]; ok {
		backRepo.BackRepoLoad.CommitPhaseTwoInstance(backRepo, id, load)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLoad allows checkout of a single load (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLoad(load *models.Load) {
	// check if the load is staged
	if _, ok := backRepo.BackRepoLoad.Map_LoadPtr_LoadDBID[load]; ok {

		if id, ok := backRepo.BackRepoLoad.Map_LoadPtr_LoadDBID[load]; ok {
			var loadDB LoadDB
			loadDB.ID = id

			if _, err := backRepo.BackRepoLoad.db.First(&loadDB, id); err != nil {
				log.Fatalln("CheckoutLoad : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLoad.CheckoutPhaseOneInstance(&loadDB)
			backRepo.BackRepoLoad.CheckoutPhaseTwoInstance(backRepo, &loadDB)
		}
	}
}

// CopyBasicFieldsFromLoad
func (loadDB *LoadDB) CopyBasicFieldsFromLoad(load *models.Load) {
	// insertion point for fields commit

	loadDB.Name_Data.String = load.Name
	loadDB.Name_Data.Valid = true

	loadDB.StackName_Data.String = load.StackName
	loadDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromLoad_WOP
func (loadDB *LoadDB) CopyBasicFieldsFromLoad_WOP(load *models.Load_WOP) {
	// insertion point for fields commit

	loadDB.Name_Data.String = load.Name
	loadDB.Name_Data.Valid = true

	loadDB.StackName_Data.String = load.StackName
	loadDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromLoadWOP
func (loadDB *LoadDB) CopyBasicFieldsFromLoadWOP(load *LoadWOP) {
	// insertion point for fields commit

	loadDB.Name_Data.String = load.Name
	loadDB.Name_Data.Valid = true

	loadDB.StackName_Data.String = load.StackName
	loadDB.StackName_Data.Valid = true
}

// CopyBasicFieldsToLoad
func (loadDB *LoadDB) CopyBasicFieldsToLoad(load *models.Load) {
	// insertion point for checkout of basic fields (back repo to stage)
	load.Name = loadDB.Name_Data.String
	load.StackName = loadDB.StackName_Data.String
}

// CopyBasicFieldsToLoad_WOP
func (loadDB *LoadDB) CopyBasicFieldsToLoad_WOP(load *models.Load_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	load.Name = loadDB.Name_Data.String
	load.StackName = loadDB.StackName_Data.String
}

// CopyBasicFieldsToLoadWOP
func (loadDB *LoadDB) CopyBasicFieldsToLoadWOP(load *LoadWOP) {
	load.ID = int(loadDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	load.Name = loadDB.Name_Data.String
	load.StackName = loadDB.StackName_Data.String
}

// Backup generates a json file from a slice of all LoadDB instances in the backrepo
func (backRepoLoad *BackRepoLoadStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LoadDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LoadDB, 0)
	for _, loadDB := range backRepoLoad.Map_LoadDBID_LoadDB {
		forBackup = append(forBackup, loadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Load ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Load file", err.Error())
	}
}

// Backup generates a json file from a slice of all LoadDB instances in the backrepo
func (backRepoLoad *BackRepoLoadStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LoadDB, 0)
	for _, loadDB := range backRepoLoad.Map_LoadDBID_LoadDB {
		forBackup = append(forBackup, loadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Load")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Load_Fields, -1)
	for _, loadDB := range forBackup {

		var loadWOP LoadWOP
		loadDB.CopyBasicFieldsToLoadWOP(&loadWOP)

		row := sh.AddRow()
		row.WriteStruct(&loadWOP, -1)
	}
}

// RestoreXL from the "Load" sheet all LoadDB instances
func (backRepoLoad *BackRepoLoadStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLoadid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Load"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLoad.rowVisitorLoad)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLoad *BackRepoLoadStruct) rowVisitorLoad(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var loadWOP LoadWOP
		row.ReadStruct(&loadWOP)

		// add the unmarshalled struct to the stage
		loadDB := new(LoadDB)
		loadDB.CopyBasicFieldsFromLoadWOP(&loadWOP)

		loadDB_ID_atBackupTime := loadDB.ID
		loadDB.ID = 0
		_, err := backRepoLoad.db.Create(loadDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLoad.Map_LoadDBID_LoadDB[loadDB.ID] = loadDB
		BackRepoLoadid_atBckpTime_newID[loadDB_ID_atBackupTime] = loadDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LoadDB.json" in dirPath that stores an array
// of LoadDB and stores it in the database
// the map BackRepoLoadid_atBckpTime_newID is updated accordingly
func (backRepoLoad *BackRepoLoadStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLoadid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LoadDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Load file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LoadDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LoadDBID_LoadDB
	for _, loadDB := range forRestore {

		loadDB_ID_atBackupTime := loadDB.ID
		loadDB.ID = 0
		_, err := backRepoLoad.db.Create(loadDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLoad.Map_LoadDBID_LoadDB[loadDB.ID] = loadDB
		BackRepoLoadid_atBckpTime_newID[loadDB_ID_atBackupTime] = loadDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Load file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Load>id_atBckpTime_newID
// to compute new index
func (backRepoLoad *BackRepoLoadStruct) RestorePhaseTwo() {

	for _, loadDB := range backRepoLoad.Map_LoadDBID_LoadDB {

		// next line of code is to avert unused variable compilation error
		_ = loadDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoLoad.db.Model(loadDB)
		_, err := db.Updates(*loadDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoLoad.ResetReversePointers commits all staged instances of Load to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLoad *BackRepoLoadStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, load := range backRepoLoad.Map_LoadDBID_LoadPtr {
		backRepoLoad.ResetReversePointersInstance(backRepo, idx, load)
	}

	return
}

func (backRepoLoad *BackRepoLoadStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, load *models.Load) (Error error) {

	// fetch matching loadDB
	if loadDB, ok := backRepoLoad.Map_LoadDBID_LoadDB[idx]; ok {
		_ = loadDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLoadid_atBckpTime_newID map[uint]uint
