// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SplitArea_sql sql.NullBool
var dummy_SplitArea_time time.Duration
var dummy_SplitArea_sort sort.Float64Slice

// SplitAreaAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model splitareaAPI
type SplitAreaAPI struct {
	gorm.Model

	models.SplitArea_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SplitAreaPointersEncoding SplitAreaPointersEncoding
}

// SplitAreaPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SplitAreaPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SplitAreaDB describes a splitarea in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model splitareaDB
type SplitAreaDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field splitareaDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SplitAreaPointersEncoding
}

// SplitAreaDBs arrays splitareaDBs
// swagger:response splitareaDBsResponse
type SplitAreaDBs []SplitAreaDB

// SplitAreaDBResponse provides response
// swagger:response splitareaDBResponse
type SplitAreaDBResponse struct {
	SplitAreaDB
}

// SplitAreaWOP is a SplitArea without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SplitAreaWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var SplitArea_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSplitAreaStruct struct {
	// stores SplitAreaDB according to their gorm ID
	Map_SplitAreaDBID_SplitAreaDB map[uint]*SplitAreaDB

	// stores SplitAreaDB ID according to SplitArea address
	Map_SplitAreaPtr_SplitAreaDBID map[*models.SplitArea]uint

	// stores SplitArea according to their gorm ID
	Map_SplitAreaDBID_SplitAreaPtr map[uint]*models.SplitArea

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSplitArea *BackRepoSplitAreaStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSplitArea.stage
	return
}

func (backRepoSplitArea *BackRepoSplitAreaStruct) GetDB() db.DBInterface {
	return backRepoSplitArea.db
}

// GetSplitAreaDBFromSplitAreaPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSplitArea *BackRepoSplitAreaStruct) GetSplitAreaDBFromSplitAreaPtr(splitarea *models.SplitArea) (splitareaDB *SplitAreaDB) {
	id := backRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID[splitarea]
	splitareaDB = backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB[id]
	return
}

// BackRepoSplitArea.CommitPhaseOne commits all staged instances of SplitArea to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSplitArea *BackRepoSplitAreaStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for splitarea := range stage.SplitAreas {
		backRepoSplitArea.CommitPhaseOneInstance(splitarea)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, splitarea := range backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr {
		if _, ok := stage.SplitAreas[splitarea]; !ok {
			backRepoSplitArea.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSplitArea.CommitDeleteInstance commits deletion of SplitArea to the BackRepo
func (backRepoSplitArea *BackRepoSplitAreaStruct) CommitDeleteInstance(id uint) (Error error) {

	splitarea := backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr[id]

	// splitarea is not staged anymore, remove splitareaDB
	splitareaDB := backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB[id]
	db, _ := backRepoSplitArea.db.Unscoped()
	_, err := db.Delete(splitareaDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID, splitarea)
	delete(backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr, id)
	delete(backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB, id)

	return
}

// BackRepoSplitArea.CommitPhaseOneInstance commits splitarea staged instances of SplitArea to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSplitArea *BackRepoSplitAreaStruct) CommitPhaseOneInstance(splitarea *models.SplitArea) (Error error) {

	// check if the splitarea is not commited yet
	if _, ok := backRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID[splitarea]; ok {
		return
	}

	// initiate splitarea
	var splitareaDB SplitAreaDB
	splitareaDB.CopyBasicFieldsFromSplitArea(splitarea)

	_, err := backRepoSplitArea.db.Create(&splitareaDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID[splitarea] = splitareaDB.ID
	backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr[splitareaDB.ID] = splitarea
	backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB[splitareaDB.ID] = &splitareaDB

	return
}

// BackRepoSplitArea.CommitPhaseTwo commits all staged instances of SplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplitArea *BackRepoSplitAreaStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, splitarea := range backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr {
		backRepoSplitArea.CommitPhaseTwoInstance(backRepo, idx, splitarea)
	}

	return
}

// BackRepoSplitArea.CommitPhaseTwoInstance commits {{structname }} of models.SplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplitArea *BackRepoSplitAreaStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, splitarea *models.SplitArea) (Error error) {

	// fetch matching splitareaDB
	if splitareaDB, ok := backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB[idx]; ok {

		splitareaDB.CopyBasicFieldsFromSplitArea(splitarea)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoSplitArea.db.Save(splitareaDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SplitArea intance %s", splitarea.Name))
		return err
	}

	return
}

// BackRepoSplitArea.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSplitArea *BackRepoSplitAreaStruct) CheckoutPhaseOne() (Error error) {

	splitareaDBArray := make([]SplitAreaDB, 0)
	_, err := backRepoSplitArea.db.Find(&splitareaDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	splitareaInstancesToBeRemovedFromTheStage := make(map[*models.SplitArea]any)
	for key, value := range backRepoSplitArea.stage.SplitAreas {
		splitareaInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, splitareaDB := range splitareaDBArray {
		backRepoSplitArea.CheckoutPhaseOneInstance(&splitareaDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		splitarea, ok := backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr[splitareaDB.ID]
		if ok {
			delete(splitareaInstancesToBeRemovedFromTheStage, splitarea)
		}
	}

	// remove from stage and back repo's 3 maps all splitareas that are not in the checkout
	for splitarea := range splitareaInstancesToBeRemovedFromTheStage {
		splitarea.Unstage(backRepoSplitArea.GetStage())

		// remove instance from the back repo 3 maps
		splitareaID := backRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID[splitarea]
		delete(backRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID, splitarea)
		delete(backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB, splitareaID)
		delete(backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr, splitareaID)
	}

	return
}

// CheckoutPhaseOneInstance takes a splitareaDB that has been found in the DB, updates the backRepo and stages the
// models version of the splitareaDB
func (backRepoSplitArea *BackRepoSplitAreaStruct) CheckoutPhaseOneInstance(splitareaDB *SplitAreaDB) (Error error) {

	splitarea, ok := backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr[splitareaDB.ID]
	if !ok {
		splitarea = new(models.SplitArea)

		backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr[splitareaDB.ID] = splitarea
		backRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID[splitarea] = splitareaDB.ID

		// append model store with the new element
		splitarea.Name = splitareaDB.Name_Data.String
		splitarea.Stage(backRepoSplitArea.GetStage())
	}
	splitareaDB.CopyBasicFieldsToSplitArea(splitarea)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	splitarea.Stage(backRepoSplitArea.GetStage())

	// preserve pointer to splitareaDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SplitAreaDBID_SplitAreaDB)[splitareaDB hold variable pointers
	splitareaDB_Data := *splitareaDB
	preservedPtrToSplitArea := &splitareaDB_Data
	backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB[splitareaDB.ID] = preservedPtrToSplitArea

	return
}

// BackRepoSplitArea.CheckoutPhaseTwo Checkouts all staged instances of SplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplitArea *BackRepoSplitAreaStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, splitareaDB := range backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB {
		backRepoSplitArea.CheckoutPhaseTwoInstance(backRepo, splitareaDB)
	}
	return
}

// BackRepoSplitArea.CheckoutPhaseTwoInstance Checkouts staged instances of SplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplitArea *BackRepoSplitAreaStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, splitareaDB *SplitAreaDB) (Error error) {

	splitarea := backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr[splitareaDB.ID]

	splitareaDB.DecodePointers(backRepo, splitarea)

	return
}

func (splitareaDB *SplitAreaDB) DecodePointers(backRepo *BackRepoStruct, splitarea *models.SplitArea) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSplitArea allows commit of a single splitarea (if already staged)
func (backRepo *BackRepoStruct) CommitSplitArea(splitarea *models.SplitArea) {
	backRepo.BackRepoSplitArea.CommitPhaseOneInstance(splitarea)
	if id, ok := backRepo.BackRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID[splitarea]; ok {
		backRepo.BackRepoSplitArea.CommitPhaseTwoInstance(backRepo, id, splitarea)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSplitArea allows checkout of a single splitarea (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSplitArea(splitarea *models.SplitArea) {
	// check if the splitarea is staged
	if _, ok := backRepo.BackRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID[splitarea]; ok {

		if id, ok := backRepo.BackRepoSplitArea.Map_SplitAreaPtr_SplitAreaDBID[splitarea]; ok {
			var splitareaDB SplitAreaDB
			splitareaDB.ID = id

			if _, err := backRepo.BackRepoSplitArea.db.First(&splitareaDB, id); err != nil {
				log.Fatalln("CheckoutSplitArea : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSplitArea.CheckoutPhaseOneInstance(&splitareaDB)
			backRepo.BackRepoSplitArea.CheckoutPhaseTwoInstance(backRepo, &splitareaDB)
		}
	}
}

// CopyBasicFieldsFromSplitArea
func (splitareaDB *SplitAreaDB) CopyBasicFieldsFromSplitArea(splitarea *models.SplitArea) {
	// insertion point for fields commit

	splitareaDB.Name_Data.String = splitarea.Name
	splitareaDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSplitArea_WOP
func (splitareaDB *SplitAreaDB) CopyBasicFieldsFromSplitArea_WOP(splitarea *models.SplitArea_WOP) {
	// insertion point for fields commit

	splitareaDB.Name_Data.String = splitarea.Name
	splitareaDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSplitAreaWOP
func (splitareaDB *SplitAreaDB) CopyBasicFieldsFromSplitAreaWOP(splitarea *SplitAreaWOP) {
	// insertion point for fields commit

	splitareaDB.Name_Data.String = splitarea.Name
	splitareaDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSplitArea
func (splitareaDB *SplitAreaDB) CopyBasicFieldsToSplitArea(splitarea *models.SplitArea) {
	// insertion point for checkout of basic fields (back repo to stage)
	splitarea.Name = splitareaDB.Name_Data.String
}

// CopyBasicFieldsToSplitArea_WOP
func (splitareaDB *SplitAreaDB) CopyBasicFieldsToSplitArea_WOP(splitarea *models.SplitArea_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	splitarea.Name = splitareaDB.Name_Data.String
}

// CopyBasicFieldsToSplitAreaWOP
func (splitareaDB *SplitAreaDB) CopyBasicFieldsToSplitAreaWOP(splitarea *SplitAreaWOP) {
	splitarea.ID = int(splitareaDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	splitarea.Name = splitareaDB.Name_Data.String
}

// Backup generates a json file from a slice of all SplitAreaDB instances in the backrepo
func (backRepoSplitArea *BackRepoSplitAreaStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SplitAreaDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SplitAreaDB, 0)
	for _, splitareaDB := range backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB {
		forBackup = append(forBackup, splitareaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SplitArea ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SplitArea file", err.Error())
	}
}

// Backup generates a json file from a slice of all SplitAreaDB instances in the backrepo
func (backRepoSplitArea *BackRepoSplitAreaStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SplitAreaDB, 0)
	for _, splitareaDB := range backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB {
		forBackup = append(forBackup, splitareaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SplitArea")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SplitArea_Fields, -1)
	for _, splitareaDB := range forBackup {

		var splitareaWOP SplitAreaWOP
		splitareaDB.CopyBasicFieldsToSplitAreaWOP(&splitareaWOP)

		row := sh.AddRow()
		row.WriteStruct(&splitareaWOP, -1)
	}
}

// RestoreXL from the "SplitArea" sheet all SplitAreaDB instances
func (backRepoSplitArea *BackRepoSplitAreaStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSplitAreaid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SplitArea"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSplitArea.rowVisitorSplitArea)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSplitArea *BackRepoSplitAreaStruct) rowVisitorSplitArea(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var splitareaWOP SplitAreaWOP
		row.ReadStruct(&splitareaWOP)

		// add the unmarshalled struct to the stage
		splitareaDB := new(SplitAreaDB)
		splitareaDB.CopyBasicFieldsFromSplitAreaWOP(&splitareaWOP)

		splitareaDB_ID_atBackupTime := splitareaDB.ID
		splitareaDB.ID = 0
		_, err := backRepoSplitArea.db.Create(splitareaDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB[splitareaDB.ID] = splitareaDB
		BackRepoSplitAreaid_atBckpTime_newID[splitareaDB_ID_atBackupTime] = splitareaDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SplitAreaDB.json" in dirPath that stores an array
// of SplitAreaDB and stores it in the database
// the map BackRepoSplitAreaid_atBckpTime_newID is updated accordingly
func (backRepoSplitArea *BackRepoSplitAreaStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSplitAreaid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SplitAreaDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SplitArea file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SplitAreaDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SplitAreaDBID_SplitAreaDB
	for _, splitareaDB := range forRestore {

		splitareaDB_ID_atBackupTime := splitareaDB.ID
		splitareaDB.ID = 0
		_, err := backRepoSplitArea.db.Create(splitareaDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB[splitareaDB.ID] = splitareaDB
		BackRepoSplitAreaid_atBckpTime_newID[splitareaDB_ID_atBackupTime] = splitareaDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SplitArea file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SplitArea>id_atBckpTime_newID
// to compute new index
func (backRepoSplitArea *BackRepoSplitAreaStruct) RestorePhaseTwo() {

	for _, splitareaDB := range backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB {

		// next line of code is to avert unused variable compilation error
		_ = splitareaDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoSplitArea.db.Model(splitareaDB)
		_, err := db.Updates(*splitareaDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSplitArea.ResetReversePointers commits all staged instances of SplitArea to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSplitArea *BackRepoSplitAreaStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, splitarea := range backRepoSplitArea.Map_SplitAreaDBID_SplitAreaPtr {
		backRepoSplitArea.ResetReversePointersInstance(backRepo, idx, splitarea)
	}

	return
}

func (backRepoSplitArea *BackRepoSplitAreaStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, splitarea *models.SplitArea) (Error error) {

	// fetch matching splitareaDB
	if splitareaDB, ok := backRepoSplitArea.Map_SplitAreaDBID_SplitAreaDB[idx]; ok {
		_ = splitareaDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSplitAreaid_atBckpTime_newID map[uint]uint
