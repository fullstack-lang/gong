// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/split/go/db"
	"github.com/fullstack-lang/gong/lib/split/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Markdown_sql sql.NullBool
var dummy_Markdown_time time.Duration
var dummy_Markdown_sort sort.Float64Slice

// MarkdownAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model markdownAPI
type MarkdownAPI struct {
	gorm.Model

	models.Markdown_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MarkdownPointersEncoding MarkdownPointersEncoding
}

// MarkdownPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MarkdownPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// MarkdownDB describes a markdown in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model markdownDB
type MarkdownDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field markdownDB.Name
	Name_Data sql.NullString

	// Declation for basic field markdownDB.StackName
	StackName_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MarkdownPointersEncoding
}

// MarkdownDBs arrays markdownDBs
// swagger:response markdownDBsResponse
type MarkdownDBs []MarkdownDB

// MarkdownDBResponse provides response
// swagger:response markdownDBResponse
type MarkdownDBResponse struct {
	MarkdownDB
}

// MarkdownWOP is a Markdown without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MarkdownWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StackName string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Markdown_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StackName",
}

type BackRepoMarkdownStruct struct {
	// stores MarkdownDB according to their gorm ID
	Map_MarkdownDBID_MarkdownDB map[uint]*MarkdownDB

	// stores MarkdownDB ID according to Markdown address
	Map_MarkdownPtr_MarkdownDBID map[*models.Markdown]uint

	// stores Markdown according to their gorm ID
	Map_MarkdownDBID_MarkdownPtr map[uint]*models.Markdown

	db db.DBInterface

	stage *models.Stage
}

func (backRepoMarkdown *BackRepoMarkdownStruct) GetStage() (stage *models.Stage) {
	stage = backRepoMarkdown.stage
	return
}

func (backRepoMarkdown *BackRepoMarkdownStruct) GetDB() db.DBInterface {
	return backRepoMarkdown.db
}

// GetMarkdownDBFromMarkdownPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMarkdown *BackRepoMarkdownStruct) GetMarkdownDBFromMarkdownPtr(markdown *models.Markdown) (markdownDB *MarkdownDB) {
	id := backRepoMarkdown.Map_MarkdownPtr_MarkdownDBID[markdown]
	markdownDB = backRepoMarkdown.Map_MarkdownDBID_MarkdownDB[id]
	return
}

// BackRepoMarkdown.CommitPhaseOne commits all staged instances of Markdown to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMarkdown *BackRepoMarkdownStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var markdowns []*models.Markdown
	for markdown := range stage.Markdowns {
		markdowns = append(markdowns, markdown)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(markdowns, func(i, j int) bool {
		return stage.MarkdownMap_Staged_Order[markdowns[i]] < stage.MarkdownMap_Staged_Order[markdowns[j]]
	})

	for _, markdown := range markdowns {
		backRepoMarkdown.CommitPhaseOneInstance(markdown)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, markdown := range backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr {
		if _, ok := stage.Markdowns[markdown]; !ok {
			backRepoMarkdown.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMarkdown.CommitDeleteInstance commits deletion of Markdown to the BackRepo
func (backRepoMarkdown *BackRepoMarkdownStruct) CommitDeleteInstance(id uint) (Error error) {

	markdown := backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr[id]

	// markdown is not staged anymore, remove markdownDB
	markdownDB := backRepoMarkdown.Map_MarkdownDBID_MarkdownDB[id]
	db, _ := backRepoMarkdown.db.Unscoped()
	_, err := db.Delete(markdownDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoMarkdown.Map_MarkdownPtr_MarkdownDBID, markdown)
	delete(backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr, id)
	delete(backRepoMarkdown.Map_MarkdownDBID_MarkdownDB, id)

	return
}

// BackRepoMarkdown.CommitPhaseOneInstance commits markdown staged instances of Markdown to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMarkdown *BackRepoMarkdownStruct) CommitPhaseOneInstance(markdown *models.Markdown) (Error error) {

	// check if the markdown is not commited yet
	if _, ok := backRepoMarkdown.Map_MarkdownPtr_MarkdownDBID[markdown]; ok {
		return
	}

	// initiate markdown
	var markdownDB MarkdownDB
	markdownDB.CopyBasicFieldsFromMarkdown(markdown)

	_, err := backRepoMarkdown.db.Create(&markdownDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoMarkdown.Map_MarkdownPtr_MarkdownDBID[markdown] = markdownDB.ID
	backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr[markdownDB.ID] = markdown
	backRepoMarkdown.Map_MarkdownDBID_MarkdownDB[markdownDB.ID] = &markdownDB

	return
}

// BackRepoMarkdown.CommitPhaseTwo commits all staged instances of Markdown to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdown *BackRepoMarkdownStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, markdown := range backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr {
		backRepoMarkdown.CommitPhaseTwoInstance(backRepo, idx, markdown)
	}

	return
}

// BackRepoMarkdown.CommitPhaseTwoInstance commits {{structname }} of models.Markdown to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdown *BackRepoMarkdownStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, markdown *models.Markdown) (Error error) {

	// fetch matching markdownDB
	if markdownDB, ok := backRepoMarkdown.Map_MarkdownDBID_MarkdownDB[idx]; ok {

		markdownDB.CopyBasicFieldsFromMarkdown(markdown)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoMarkdown.db.Save(markdownDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Markdown intance %s", markdown.Name))
		return err
	}

	return
}

// BackRepoMarkdown.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMarkdown *BackRepoMarkdownStruct) CheckoutPhaseOne() (Error error) {

	markdownDBArray := make([]MarkdownDB, 0)
	_, err := backRepoMarkdown.db.Find(&markdownDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	markdownInstancesToBeRemovedFromTheStage := make(map[*models.Markdown]any)
	for key, value := range backRepoMarkdown.stage.Markdowns {
		markdownInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, markdownDB := range markdownDBArray {
		backRepoMarkdown.CheckoutPhaseOneInstance(&markdownDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		markdown, ok := backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr[markdownDB.ID]
		if ok {
			delete(markdownInstancesToBeRemovedFromTheStage, markdown)
		}
	}

	// remove from stage and back repo's 3 maps all markdowns that are not in the checkout
	for markdown := range markdownInstancesToBeRemovedFromTheStage {
		markdown.Unstage(backRepoMarkdown.GetStage())

		// remove instance from the back repo 3 maps
		markdownID := backRepoMarkdown.Map_MarkdownPtr_MarkdownDBID[markdown]
		delete(backRepoMarkdown.Map_MarkdownPtr_MarkdownDBID, markdown)
		delete(backRepoMarkdown.Map_MarkdownDBID_MarkdownDB, markdownID)
		delete(backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr, markdownID)
	}

	return
}

// CheckoutPhaseOneInstance takes a markdownDB that has been found in the DB, updates the backRepo and stages the
// models version of the markdownDB
func (backRepoMarkdown *BackRepoMarkdownStruct) CheckoutPhaseOneInstance(markdownDB *MarkdownDB) (Error error) {

	markdown, ok := backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr[markdownDB.ID]
	if !ok {
		markdown = new(models.Markdown)

		backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr[markdownDB.ID] = markdown
		backRepoMarkdown.Map_MarkdownPtr_MarkdownDBID[markdown] = markdownDB.ID

		// append model store with the new element
		markdown.Name = markdownDB.Name_Data.String
		markdown.Stage(backRepoMarkdown.GetStage())
	}
	markdownDB.CopyBasicFieldsToMarkdown(markdown)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	markdown.Stage(backRepoMarkdown.GetStage())

	// preserve pointer to markdownDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MarkdownDBID_MarkdownDB)[markdownDB hold variable pointers
	markdownDB_Data := *markdownDB
	preservedPtrToMarkdown := &markdownDB_Data
	backRepoMarkdown.Map_MarkdownDBID_MarkdownDB[markdownDB.ID] = preservedPtrToMarkdown

	return
}

// BackRepoMarkdown.CheckoutPhaseTwo Checkouts all staged instances of Markdown to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdown *BackRepoMarkdownStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, markdownDB := range backRepoMarkdown.Map_MarkdownDBID_MarkdownDB {
		backRepoMarkdown.CheckoutPhaseTwoInstance(backRepo, markdownDB)
	}
	return
}

// BackRepoMarkdown.CheckoutPhaseTwoInstance Checkouts staged instances of Markdown to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdown *BackRepoMarkdownStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, markdownDB *MarkdownDB) (Error error) {

	markdown := backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr[markdownDB.ID]

	markdownDB.DecodePointers(backRepo, markdown)

	return
}

func (markdownDB *MarkdownDB) DecodePointers(backRepo *BackRepoStruct, markdown *models.Markdown) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMarkdown allows commit of a single markdown (if already staged)
func (backRepo *BackRepoStruct) CommitMarkdown(markdown *models.Markdown) {
	backRepo.BackRepoMarkdown.CommitPhaseOneInstance(markdown)
	if id, ok := backRepo.BackRepoMarkdown.Map_MarkdownPtr_MarkdownDBID[markdown]; ok {
		backRepo.BackRepoMarkdown.CommitPhaseTwoInstance(backRepo, id, markdown)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMarkdown allows checkout of a single markdown (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMarkdown(markdown *models.Markdown) {
	// check if the markdown is staged
	if _, ok := backRepo.BackRepoMarkdown.Map_MarkdownPtr_MarkdownDBID[markdown]; ok {

		if id, ok := backRepo.BackRepoMarkdown.Map_MarkdownPtr_MarkdownDBID[markdown]; ok {
			var markdownDB MarkdownDB
			markdownDB.ID = id

			if _, err := backRepo.BackRepoMarkdown.db.First(&markdownDB, id); err != nil {
				log.Fatalln("CheckoutMarkdown : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMarkdown.CheckoutPhaseOneInstance(&markdownDB)
			backRepo.BackRepoMarkdown.CheckoutPhaseTwoInstance(backRepo, &markdownDB)
		}
	}
}

// CopyBasicFieldsFromMarkdown
func (markdownDB *MarkdownDB) CopyBasicFieldsFromMarkdown(markdown *models.Markdown) {
	// insertion point for fields commit

	markdownDB.Name_Data.String = markdown.Name
	markdownDB.Name_Data.Valid = true

	markdownDB.StackName_Data.String = markdown.StackName
	markdownDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromMarkdown_WOP
func (markdownDB *MarkdownDB) CopyBasicFieldsFromMarkdown_WOP(markdown *models.Markdown_WOP) {
	// insertion point for fields commit

	markdownDB.Name_Data.String = markdown.Name
	markdownDB.Name_Data.Valid = true

	markdownDB.StackName_Data.String = markdown.StackName
	markdownDB.StackName_Data.Valid = true
}

// CopyBasicFieldsFromMarkdownWOP
func (markdownDB *MarkdownDB) CopyBasicFieldsFromMarkdownWOP(markdown *MarkdownWOP) {
	// insertion point for fields commit

	markdownDB.Name_Data.String = markdown.Name
	markdownDB.Name_Data.Valid = true

	markdownDB.StackName_Data.String = markdown.StackName
	markdownDB.StackName_Data.Valid = true
}

// CopyBasicFieldsToMarkdown
func (markdownDB *MarkdownDB) CopyBasicFieldsToMarkdown(markdown *models.Markdown) {
	// insertion point for checkout of basic fields (back repo to stage)
	markdown.Name = markdownDB.Name_Data.String
	markdown.StackName = markdownDB.StackName_Data.String
}

// CopyBasicFieldsToMarkdown_WOP
func (markdownDB *MarkdownDB) CopyBasicFieldsToMarkdown_WOP(markdown *models.Markdown_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	markdown.Name = markdownDB.Name_Data.String
	markdown.StackName = markdownDB.StackName_Data.String
}

// CopyBasicFieldsToMarkdownWOP
func (markdownDB *MarkdownDB) CopyBasicFieldsToMarkdownWOP(markdown *MarkdownWOP) {
	markdown.ID = int(markdownDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	markdown.Name = markdownDB.Name_Data.String
	markdown.StackName = markdownDB.StackName_Data.String
}

// Backup generates a json file from a slice of all MarkdownDB instances in the backrepo
func (backRepoMarkdown *BackRepoMarkdownStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MarkdownDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MarkdownDB, 0)
	for _, markdownDB := range backRepoMarkdown.Map_MarkdownDBID_MarkdownDB {
		forBackup = append(forBackup, markdownDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Markdown ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Markdown file", err.Error())
	}
}

// Backup generates a json file from a slice of all MarkdownDB instances in the backrepo
func (backRepoMarkdown *BackRepoMarkdownStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MarkdownDB, 0)
	for _, markdownDB := range backRepoMarkdown.Map_MarkdownDBID_MarkdownDB {
		forBackup = append(forBackup, markdownDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Markdown")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Markdown_Fields, -1)
	for _, markdownDB := range forBackup {

		var markdownWOP MarkdownWOP
		markdownDB.CopyBasicFieldsToMarkdownWOP(&markdownWOP)

		row := sh.AddRow()
		row.WriteStruct(&markdownWOP, -1)
	}
}

// RestoreXL from the "Markdown" sheet all MarkdownDB instances
func (backRepoMarkdown *BackRepoMarkdownStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMarkdownid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Markdown"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMarkdown.rowVisitorMarkdown)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMarkdown *BackRepoMarkdownStruct) rowVisitorMarkdown(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var markdownWOP MarkdownWOP
		row.ReadStruct(&markdownWOP)

		// add the unmarshalled struct to the stage
		markdownDB := new(MarkdownDB)
		markdownDB.CopyBasicFieldsFromMarkdownWOP(&markdownWOP)

		markdownDB_ID_atBackupTime := markdownDB.ID
		markdownDB.ID = 0
		_, err := backRepoMarkdown.db.Create(markdownDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMarkdown.Map_MarkdownDBID_MarkdownDB[markdownDB.ID] = markdownDB
		BackRepoMarkdownid_atBckpTime_newID[markdownDB_ID_atBackupTime] = markdownDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MarkdownDB.json" in dirPath that stores an array
// of MarkdownDB and stores it in the database
// the map BackRepoMarkdownid_atBckpTime_newID is updated accordingly
func (backRepoMarkdown *BackRepoMarkdownStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMarkdownid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MarkdownDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Markdown file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MarkdownDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MarkdownDBID_MarkdownDB
	for _, markdownDB := range forRestore {

		markdownDB_ID_atBackupTime := markdownDB.ID
		markdownDB.ID = 0
		_, err := backRepoMarkdown.db.Create(markdownDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMarkdown.Map_MarkdownDBID_MarkdownDB[markdownDB.ID] = markdownDB
		BackRepoMarkdownid_atBckpTime_newID[markdownDB_ID_atBackupTime] = markdownDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Markdown file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Markdown>id_atBckpTime_newID
// to compute new index
func (backRepoMarkdown *BackRepoMarkdownStruct) RestorePhaseTwo() {

	for _, markdownDB := range backRepoMarkdown.Map_MarkdownDBID_MarkdownDB {

		// next line of code is to avert unused variable compilation error
		_ = markdownDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoMarkdown.db.Model(markdownDB)
		_, err := db.Updates(*markdownDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoMarkdown.ResetReversePointers commits all staged instances of Markdown to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdown *BackRepoMarkdownStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, markdown := range backRepoMarkdown.Map_MarkdownDBID_MarkdownPtr {
		backRepoMarkdown.ResetReversePointersInstance(backRepo, idx, markdown)
	}

	return
}

func (backRepoMarkdown *BackRepoMarkdownStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, markdown *models.Markdown) (Error error) {

	// fetch matching markdownDB
	if markdownDB, ok := backRepoMarkdown.Map_MarkdownDBID_MarkdownDB[idx]; ok {
		_ = markdownDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMarkdownid_atBckpTime_newID map[uint]uint
