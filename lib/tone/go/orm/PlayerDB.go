// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/tone/go/db"
	"github.com/fullstack-lang/gong/lib/tone/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Player_sql sql.NullBool
var dummy_Player_time time.Duration
var dummy_Player_sort sort.Float64Slice

// PlayerAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model playerAPI
type PlayerAPI struct {
	gorm.Model

	models.Player_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PlayerPointersEncoding PlayerPointersEncoding
}

// PlayerPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PlayerPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// PlayerDB describes a player in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model playerDB
type PlayerDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field playerDB.Name
	Name_Data sql.NullString

	// Declation for basic field playerDB.Status
	Status_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PlayerPointersEncoding
}

// PlayerDBs arrays playerDBs
// swagger:response playerDBsResponse
type PlayerDBs []PlayerDB

// PlayerDBResponse provides response
// swagger:response playerDBResponse
type PlayerDBResponse struct {
	PlayerDB
}

// PlayerWOP is a Player without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PlayerWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Status models.Status `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Player_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Status",
}

type BackRepoPlayerStruct struct {
	// stores PlayerDB according to their gorm ID
	Map_PlayerDBID_PlayerDB map[uint]*PlayerDB

	// stores PlayerDB ID according to Player address
	Map_PlayerPtr_PlayerDBID map[*models.Player]uint

	// stores Player according to their gorm ID
	Map_PlayerDBID_PlayerPtr map[uint]*models.Player

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoPlayer *BackRepoPlayerStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPlayer.stage
	return
}

func (backRepoPlayer *BackRepoPlayerStruct) GetDB() db.DBInterface {
	return backRepoPlayer.db
}

// GetPlayerDBFromPlayerPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPlayer *BackRepoPlayerStruct) GetPlayerDBFromPlayerPtr(player *models.Player) (playerDB *PlayerDB) {
	id := backRepoPlayer.Map_PlayerPtr_PlayerDBID[player]
	playerDB = backRepoPlayer.Map_PlayerDBID_PlayerDB[id]
	return
}

// BackRepoPlayer.CommitPhaseOne commits all staged instances of Player to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPlayer *BackRepoPlayerStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var players []*models.Player
	for player := range stage.Players {
		players = append(players, player)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(players, func(i, j int) bool {
		return stage.Map_Staged_Order[players[i]] < stage.Map_Staged_Order[players[j]]
	})

	for _, player := range players {
		backRepoPlayer.CommitPhaseOneInstance(player)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, player := range backRepoPlayer.Map_PlayerDBID_PlayerPtr {
		if _, ok := stage.Players[player]; !ok {
			backRepoPlayer.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPlayer.CommitDeleteInstance commits deletion of Player to the BackRepo
func (backRepoPlayer *BackRepoPlayerStruct) CommitDeleteInstance(id uint) (Error error) {

	player := backRepoPlayer.Map_PlayerDBID_PlayerPtr[id]

	// player is not staged anymore, remove playerDB
	playerDB := backRepoPlayer.Map_PlayerDBID_PlayerDB[id]
	db, _ := backRepoPlayer.db.Unscoped()
	_, err := db.Delete(playerDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoPlayer.Map_PlayerPtr_PlayerDBID, player)
	delete(backRepoPlayer.Map_PlayerDBID_PlayerPtr, id)
	delete(backRepoPlayer.Map_PlayerDBID_PlayerDB, id)

	return
}

// BackRepoPlayer.CommitPhaseOneInstance commits player staged instances of Player to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPlayer *BackRepoPlayerStruct) CommitPhaseOneInstance(player *models.Player) (Error error) {

	// check if the player is not commited yet
	if _, ok := backRepoPlayer.Map_PlayerPtr_PlayerDBID[player]; ok {
		return
	}

	// initiate player
	var playerDB PlayerDB
	playerDB.CopyBasicFieldsFromPlayer(player)

	_, err := backRepoPlayer.db.Create(&playerDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoPlayer.Map_PlayerPtr_PlayerDBID[player] = playerDB.ID
	backRepoPlayer.Map_PlayerDBID_PlayerPtr[playerDB.ID] = player
	backRepoPlayer.Map_PlayerDBID_PlayerDB[playerDB.ID] = &playerDB

	return
}

// BackRepoPlayer.CommitPhaseTwo commits all staged instances of Player to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlayer *BackRepoPlayerStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, player := range backRepoPlayer.Map_PlayerDBID_PlayerPtr {
		backRepoPlayer.CommitPhaseTwoInstance(backRepo, idx, player)
	}

	return
}

// BackRepoPlayer.CommitPhaseTwoInstance commits {{structname }} of models.Player to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlayer *BackRepoPlayerStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, player *models.Player) (Error error) {

	// fetch matching playerDB
	if playerDB, ok := backRepoPlayer.Map_PlayerDBID_PlayerDB[idx]; ok {

		playerDB.CopyBasicFieldsFromPlayer(player)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoPlayer.db.Save(playerDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Player intance %s", player.Name))
		return err
	}

	return
}

// BackRepoPlayer.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPlayer *BackRepoPlayerStruct) CheckoutPhaseOne() (Error error) {

	playerDBArray := make([]PlayerDB, 0)
	_, err := backRepoPlayer.db.Find(&playerDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	playerInstancesToBeRemovedFromTheStage := make(map[*models.Player]any)
	for key, value := range backRepoPlayer.stage.Players {
		playerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, playerDB := range playerDBArray {
		backRepoPlayer.CheckoutPhaseOneInstance(&playerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		player, ok := backRepoPlayer.Map_PlayerDBID_PlayerPtr[playerDB.ID]
		if ok {
			delete(playerInstancesToBeRemovedFromTheStage, player)
		}
	}

	// remove from stage and back repo's 3 maps all players that are not in the checkout
	for player := range playerInstancesToBeRemovedFromTheStage {
		player.Unstage(backRepoPlayer.GetStage())

		// remove instance from the back repo 3 maps
		playerID := backRepoPlayer.Map_PlayerPtr_PlayerDBID[player]
		delete(backRepoPlayer.Map_PlayerPtr_PlayerDBID, player)
		delete(backRepoPlayer.Map_PlayerDBID_PlayerDB, playerID)
		delete(backRepoPlayer.Map_PlayerDBID_PlayerPtr, playerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a playerDB that has been found in the DB, updates the backRepo and stages the
// models version of the playerDB
func (backRepoPlayer *BackRepoPlayerStruct) CheckoutPhaseOneInstance(playerDB *PlayerDB) (Error error) {

	player, ok := backRepoPlayer.Map_PlayerDBID_PlayerPtr[playerDB.ID]
	if !ok {
		player = new(models.Player)

		backRepoPlayer.Map_PlayerDBID_PlayerPtr[playerDB.ID] = player
		backRepoPlayer.Map_PlayerPtr_PlayerDBID[player] = playerDB.ID

		// append model store with the new element
		player.Name = playerDB.Name_Data.String
		player.Stage(backRepoPlayer.GetStage())
	}
	playerDB.CopyBasicFieldsToPlayer(player)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	player.Stage(backRepoPlayer.GetStage())

	// preserve pointer to playerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PlayerDBID_PlayerDB)[playerDB hold variable pointers
	playerDB_Data := *playerDB
	preservedPtrToPlayer := &playerDB_Data
	backRepoPlayer.Map_PlayerDBID_PlayerDB[playerDB.ID] = preservedPtrToPlayer

	return
}

// BackRepoPlayer.CheckoutPhaseTwo Checkouts all staged instances of Player to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlayer *BackRepoPlayerStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, playerDB := range backRepoPlayer.Map_PlayerDBID_PlayerDB {
		backRepoPlayer.CheckoutPhaseTwoInstance(backRepo, playerDB)
	}
	return
}

// BackRepoPlayer.CheckoutPhaseTwoInstance Checkouts staged instances of Player to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlayer *BackRepoPlayerStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, playerDB *PlayerDB) (Error error) {

	player := backRepoPlayer.Map_PlayerDBID_PlayerPtr[playerDB.ID]

	playerDB.DecodePointers(backRepo, player)

	return
}

func (playerDB *PlayerDB) DecodePointers(backRepo *BackRepoStruct, player *models.Player) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPlayer allows commit of a single player (if already staged)
func (backRepo *BackRepoStruct) CommitPlayer(player *models.Player) {
	backRepo.BackRepoPlayer.CommitPhaseOneInstance(player)
	if id, ok := backRepo.BackRepoPlayer.Map_PlayerPtr_PlayerDBID[player]; ok {
		backRepo.BackRepoPlayer.CommitPhaseTwoInstance(backRepo, id, player)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPlayer allows checkout of a single player (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPlayer(player *models.Player) {
	// check if the player is staged
	if _, ok := backRepo.BackRepoPlayer.Map_PlayerPtr_PlayerDBID[player]; ok {

		if id, ok := backRepo.BackRepoPlayer.Map_PlayerPtr_PlayerDBID[player]; ok {
			var playerDB PlayerDB
			playerDB.ID = id

			if _, err := backRepo.BackRepoPlayer.db.First(&playerDB, id); err != nil {
				log.Fatalln("CheckoutPlayer : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPlayer.CheckoutPhaseOneInstance(&playerDB)
			backRepo.BackRepoPlayer.CheckoutPhaseTwoInstance(backRepo, &playerDB)
		}
	}
}

// CopyBasicFieldsFromPlayer
func (playerDB *PlayerDB) CopyBasicFieldsFromPlayer(player *models.Player) {
	// insertion point for fields commit

	playerDB.Name_Data.String = player.Name
	playerDB.Name_Data.Valid = true

	playerDB.Status_Data.String = player.Status.ToString()
	playerDB.Status_Data.Valid = true
}

// CopyBasicFieldsFromPlayer_WOP
func (playerDB *PlayerDB) CopyBasicFieldsFromPlayer_WOP(player *models.Player_WOP) {
	// insertion point for fields commit

	playerDB.Name_Data.String = player.Name
	playerDB.Name_Data.Valid = true

	playerDB.Status_Data.String = player.Status.ToString()
	playerDB.Status_Data.Valid = true
}

// CopyBasicFieldsFromPlayerWOP
func (playerDB *PlayerDB) CopyBasicFieldsFromPlayerWOP(player *PlayerWOP) {
	// insertion point for fields commit

	playerDB.Name_Data.String = player.Name
	playerDB.Name_Data.Valid = true

	playerDB.Status_Data.String = player.Status.ToString()
	playerDB.Status_Data.Valid = true
}

// CopyBasicFieldsToPlayer
func (playerDB *PlayerDB) CopyBasicFieldsToPlayer(player *models.Player) {
	// insertion point for checkout of basic fields (back repo to stage)
	player.Name = playerDB.Name_Data.String
	player.Status.FromString(playerDB.Status_Data.String)
}

// CopyBasicFieldsToPlayer_WOP
func (playerDB *PlayerDB) CopyBasicFieldsToPlayer_WOP(player *models.Player_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	player.Name = playerDB.Name_Data.String
	player.Status.FromString(playerDB.Status_Data.String)
}

// CopyBasicFieldsToPlayerWOP
func (playerDB *PlayerDB) CopyBasicFieldsToPlayerWOP(player *PlayerWOP) {
	player.ID = int(playerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	player.Name = playerDB.Name_Data.String
	player.Status.FromString(playerDB.Status_Data.String)
}

// Backup generates a json file from a slice of all PlayerDB instances in the backrepo
func (backRepoPlayer *BackRepoPlayerStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PlayerDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PlayerDB, 0)
	for _, playerDB := range backRepoPlayer.Map_PlayerDBID_PlayerDB {
		forBackup = append(forBackup, playerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Player ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Player file", err.Error())
	}
}

// Backup generates a json file from a slice of all PlayerDB instances in the backrepo
func (backRepoPlayer *BackRepoPlayerStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PlayerDB, 0)
	for _, playerDB := range backRepoPlayer.Map_PlayerDBID_PlayerDB {
		forBackup = append(forBackup, playerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Player")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Player_Fields, -1)
	for _, playerDB := range forBackup {

		var playerWOP PlayerWOP
		playerDB.CopyBasicFieldsToPlayerWOP(&playerWOP)

		row := sh.AddRow()
		row.WriteStruct(&playerWOP, -1)
	}
}

// RestoreXL from the "Player" sheet all PlayerDB instances
func (backRepoPlayer *BackRepoPlayerStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPlayerid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Player"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPlayer.rowVisitorPlayer)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPlayer *BackRepoPlayerStruct) rowVisitorPlayer(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var playerWOP PlayerWOP
		row.ReadStruct(&playerWOP)

		// add the unmarshalled struct to the stage
		playerDB := new(PlayerDB)
		playerDB.CopyBasicFieldsFromPlayerWOP(&playerWOP)

		playerDB_ID_atBackupTime := playerDB.ID
		playerDB.ID = 0
		_, err := backRepoPlayer.db.Create(playerDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPlayer.Map_PlayerDBID_PlayerDB[playerDB.ID] = playerDB
		BackRepoPlayerid_atBckpTime_newID[playerDB_ID_atBackupTime] = playerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PlayerDB.json" in dirPath that stores an array
// of PlayerDB and stores it in the database
// the map BackRepoPlayerid_atBckpTime_newID is updated accordingly
func (backRepoPlayer *BackRepoPlayerStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPlayerid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PlayerDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Player file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PlayerDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PlayerDBID_PlayerDB
	for _, playerDB := range forRestore {

		playerDB_ID_atBackupTime := playerDB.ID
		playerDB.ID = 0
		_, err := backRepoPlayer.db.Create(playerDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPlayer.Map_PlayerDBID_PlayerDB[playerDB.ID] = playerDB
		BackRepoPlayerid_atBckpTime_newID[playerDB_ID_atBackupTime] = playerDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Player file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Player>id_atBckpTime_newID
// to compute new index
func (backRepoPlayer *BackRepoPlayerStruct) RestorePhaseTwo() {

	for _, playerDB := range backRepoPlayer.Map_PlayerDBID_PlayerDB {

		// next line of code is to avert unused variable compilation error
		_ = playerDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoPlayer.db.Model(playerDB)
		_, err := db.Updates(*playerDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoPlayer.ResetReversePointers commits all staged instances of Player to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlayer *BackRepoPlayerStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, player := range backRepoPlayer.Map_PlayerDBID_PlayerPtr {
		backRepoPlayer.ResetReversePointersInstance(backRepo, idx, player)
	}

	return
}

func (backRepoPlayer *BackRepoPlayerStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, player *models.Player) (Error error) {

	// fetch matching playerDB
	if playerDB, ok := backRepoPlayer.Map_PlayerDBID_PlayerDB[idx]; ok {
		_ = playerDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPlayerid_atBckpTime_newID map[uint]uint
