// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/slider/go/db"
	"github.com/fullstack-lang/gong/lib/slider/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Checkbox_sql sql.NullBool
var dummy_Checkbox_time time.Duration
var dummy_Checkbox_sort sort.Float64Slice

// CheckboxAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model checkboxAPI
type CheckboxAPI struct {
	gorm.Model

	models.Checkbox_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CheckboxPointersEncoding CheckboxPointersEncoding
}

// CheckboxPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CheckboxPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CheckboxDB describes a checkbox in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model checkboxDB
type CheckboxDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field checkboxDB.Name
	Name_Data sql.NullString

	// Declation for basic field checkboxDB.ValueBool
	// provide the sql storage for the boolan
	ValueBool_Data sql.NullBool

	// Declation for basic field checkboxDB.LabelForTrue
	LabelForTrue_Data sql.NullString

	// Declation for basic field checkboxDB.LabelForFalse
	LabelForFalse_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CheckboxPointersEncoding
}

// CheckboxDBs arrays checkboxDBs
// swagger:response checkboxDBsResponse
type CheckboxDBs []CheckboxDB

// CheckboxDBResponse provides response
// swagger:response checkboxDBResponse
type CheckboxDBResponse struct {
	CheckboxDB
}

// CheckboxWOP is a Checkbox without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CheckboxWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ValueBool bool `xlsx:"2"`

	LabelForTrue string `xlsx:"3"`

	LabelForFalse string `xlsx:"4"`
	// insertion for WOP pointer fields
}

var Checkbox_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ValueBool",
	"LabelForTrue",
	"LabelForFalse",
}

type BackRepoCheckboxStruct struct {
	// stores CheckboxDB according to their gorm ID
	Map_CheckboxDBID_CheckboxDB map[uint]*CheckboxDB

	// stores CheckboxDB ID according to Checkbox address
	Map_CheckboxPtr_CheckboxDBID map[*models.Checkbox]uint

	// stores Checkbox according to their gorm ID
	Map_CheckboxDBID_CheckboxPtr map[uint]*models.Checkbox

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoCheckbox *BackRepoCheckboxStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCheckbox.stage
	return
}

func (backRepoCheckbox *BackRepoCheckboxStruct) GetDB() db.DBInterface {
	return backRepoCheckbox.db
}

// GetCheckboxDBFromCheckboxPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCheckbox *BackRepoCheckboxStruct) GetCheckboxDBFromCheckboxPtr(checkbox *models.Checkbox) (checkboxDB *CheckboxDB) {
	id := backRepoCheckbox.Map_CheckboxPtr_CheckboxDBID[checkbox]
	checkboxDB = backRepoCheckbox.Map_CheckboxDBID_CheckboxDB[id]
	return
}

// BackRepoCheckbox.CommitPhaseOne commits all staged instances of Checkbox to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCheckbox *BackRepoCheckboxStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var checkboxs []*models.Checkbox
	for checkbox := range stage.Checkboxs {
		checkboxs = append(checkboxs, checkbox)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(checkboxs, func(i, j int) bool {
		return stage.CheckboxMap_Staged_Order[checkboxs[i]] < stage.CheckboxMap_Staged_Order[checkboxs[j]]
	})

	for _, checkbox := range checkboxs {
		backRepoCheckbox.CommitPhaseOneInstance(checkbox)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, checkbox := range backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr {
		if _, ok := stage.Checkboxs[checkbox]; !ok {
			backRepoCheckbox.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCheckbox.CommitDeleteInstance commits deletion of Checkbox to the BackRepo
func (backRepoCheckbox *BackRepoCheckboxStruct) CommitDeleteInstance(id uint) (Error error) {

	checkbox := backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr[id]

	// checkbox is not staged anymore, remove checkboxDB
	checkboxDB := backRepoCheckbox.Map_CheckboxDBID_CheckboxDB[id]
	db, _ := backRepoCheckbox.db.Unscoped()
	_, err := db.Delete(checkboxDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoCheckbox.Map_CheckboxPtr_CheckboxDBID, checkbox)
	delete(backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr, id)
	delete(backRepoCheckbox.Map_CheckboxDBID_CheckboxDB, id)

	return
}

// BackRepoCheckbox.CommitPhaseOneInstance commits checkbox staged instances of Checkbox to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCheckbox *BackRepoCheckboxStruct) CommitPhaseOneInstance(checkbox *models.Checkbox) (Error error) {

	// check if the checkbox is not commited yet
	if _, ok := backRepoCheckbox.Map_CheckboxPtr_CheckboxDBID[checkbox]; ok {
		return
	}

	// initiate checkbox
	var checkboxDB CheckboxDB
	checkboxDB.CopyBasicFieldsFromCheckbox(checkbox)

	_, err := backRepoCheckbox.db.Create(&checkboxDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoCheckbox.Map_CheckboxPtr_CheckboxDBID[checkbox] = checkboxDB.ID
	backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr[checkboxDB.ID] = checkbox
	backRepoCheckbox.Map_CheckboxDBID_CheckboxDB[checkboxDB.ID] = &checkboxDB

	return
}

// BackRepoCheckbox.CommitPhaseTwo commits all staged instances of Checkbox to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckbox *BackRepoCheckboxStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, checkbox := range backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr {
		backRepoCheckbox.CommitPhaseTwoInstance(backRepo, idx, checkbox)
	}

	return
}

// BackRepoCheckbox.CommitPhaseTwoInstance commits {{structname }} of models.Checkbox to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckbox *BackRepoCheckboxStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, checkbox *models.Checkbox) (Error error) {

	// fetch matching checkboxDB
	if checkboxDB, ok := backRepoCheckbox.Map_CheckboxDBID_CheckboxDB[idx]; ok {

		checkboxDB.CopyBasicFieldsFromCheckbox(checkbox)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoCheckbox.db.Save(checkboxDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Checkbox intance %s", checkbox.Name))
		return err
	}

	return
}

// BackRepoCheckbox.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCheckbox *BackRepoCheckboxStruct) CheckoutPhaseOne() (Error error) {

	checkboxDBArray := make([]CheckboxDB, 0)
	_, err := backRepoCheckbox.db.Find(&checkboxDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	checkboxInstancesToBeRemovedFromTheStage := make(map[*models.Checkbox]any)
	for key, value := range backRepoCheckbox.stage.Checkboxs {
		checkboxInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, checkboxDB := range checkboxDBArray {
		backRepoCheckbox.CheckoutPhaseOneInstance(&checkboxDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		checkbox, ok := backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr[checkboxDB.ID]
		if ok {
			delete(checkboxInstancesToBeRemovedFromTheStage, checkbox)
		}
	}

	// remove from stage and back repo's 3 maps all checkboxs that are not in the checkout
	for checkbox := range checkboxInstancesToBeRemovedFromTheStage {
		checkbox.Unstage(backRepoCheckbox.GetStage())

		// remove instance from the back repo 3 maps
		checkboxID := backRepoCheckbox.Map_CheckboxPtr_CheckboxDBID[checkbox]
		delete(backRepoCheckbox.Map_CheckboxPtr_CheckboxDBID, checkbox)
		delete(backRepoCheckbox.Map_CheckboxDBID_CheckboxDB, checkboxID)
		delete(backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr, checkboxID)
	}

	return
}

// CheckoutPhaseOneInstance takes a checkboxDB that has been found in the DB, updates the backRepo and stages the
// models version of the checkboxDB
func (backRepoCheckbox *BackRepoCheckboxStruct) CheckoutPhaseOneInstance(checkboxDB *CheckboxDB) (Error error) {

	checkbox, ok := backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr[checkboxDB.ID]
	if !ok {
		checkbox = new(models.Checkbox)

		backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr[checkboxDB.ID] = checkbox
		backRepoCheckbox.Map_CheckboxPtr_CheckboxDBID[checkbox] = checkboxDB.ID

		// append model store with the new element
		checkbox.Name = checkboxDB.Name_Data.String
		checkbox.Stage(backRepoCheckbox.GetStage())
	}
	checkboxDB.CopyBasicFieldsToCheckbox(checkbox)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	checkbox.Stage(backRepoCheckbox.GetStage())

	// preserve pointer to checkboxDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CheckboxDBID_CheckboxDB)[checkboxDB hold variable pointers
	checkboxDB_Data := *checkboxDB
	preservedPtrToCheckbox := &checkboxDB_Data
	backRepoCheckbox.Map_CheckboxDBID_CheckboxDB[checkboxDB.ID] = preservedPtrToCheckbox

	return
}

// BackRepoCheckbox.CheckoutPhaseTwo Checkouts all staged instances of Checkbox to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckbox *BackRepoCheckboxStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, checkboxDB := range backRepoCheckbox.Map_CheckboxDBID_CheckboxDB {
		backRepoCheckbox.CheckoutPhaseTwoInstance(backRepo, checkboxDB)
	}
	return
}

// BackRepoCheckbox.CheckoutPhaseTwoInstance Checkouts staged instances of Checkbox to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckbox *BackRepoCheckboxStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, checkboxDB *CheckboxDB) (Error error) {

	checkbox := backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr[checkboxDB.ID]

	checkboxDB.DecodePointers(backRepo, checkbox)

	return
}

func (checkboxDB *CheckboxDB) DecodePointers(backRepo *BackRepoStruct, checkbox *models.Checkbox) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCheckbox allows commit of a single checkbox (if already staged)
func (backRepo *BackRepoStruct) CommitCheckbox(checkbox *models.Checkbox) {
	backRepo.BackRepoCheckbox.CommitPhaseOneInstance(checkbox)
	if id, ok := backRepo.BackRepoCheckbox.Map_CheckboxPtr_CheckboxDBID[checkbox]; ok {
		backRepo.BackRepoCheckbox.CommitPhaseTwoInstance(backRepo, id, checkbox)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCheckbox allows checkout of a single checkbox (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCheckbox(checkbox *models.Checkbox) {
	// check if the checkbox is staged
	if _, ok := backRepo.BackRepoCheckbox.Map_CheckboxPtr_CheckboxDBID[checkbox]; ok {

		if id, ok := backRepo.BackRepoCheckbox.Map_CheckboxPtr_CheckboxDBID[checkbox]; ok {
			var checkboxDB CheckboxDB
			checkboxDB.ID = id

			if _, err := backRepo.BackRepoCheckbox.db.First(&checkboxDB, id); err != nil {
				log.Fatalln("CheckoutCheckbox : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCheckbox.CheckoutPhaseOneInstance(&checkboxDB)
			backRepo.BackRepoCheckbox.CheckoutPhaseTwoInstance(backRepo, &checkboxDB)
		}
	}
}

// CopyBasicFieldsFromCheckbox
func (checkboxDB *CheckboxDB) CopyBasicFieldsFromCheckbox(checkbox *models.Checkbox) {
	// insertion point for fields commit

	checkboxDB.Name_Data.String = checkbox.Name
	checkboxDB.Name_Data.Valid = true

	checkboxDB.ValueBool_Data.Bool = checkbox.ValueBool
	checkboxDB.ValueBool_Data.Valid = true

	checkboxDB.LabelForTrue_Data.String = checkbox.LabelForTrue
	checkboxDB.LabelForTrue_Data.Valid = true

	checkboxDB.LabelForFalse_Data.String = checkbox.LabelForFalse
	checkboxDB.LabelForFalse_Data.Valid = true
}

// CopyBasicFieldsFromCheckbox_WOP
func (checkboxDB *CheckboxDB) CopyBasicFieldsFromCheckbox_WOP(checkbox *models.Checkbox_WOP) {
	// insertion point for fields commit

	checkboxDB.Name_Data.String = checkbox.Name
	checkboxDB.Name_Data.Valid = true

	checkboxDB.ValueBool_Data.Bool = checkbox.ValueBool
	checkboxDB.ValueBool_Data.Valid = true

	checkboxDB.LabelForTrue_Data.String = checkbox.LabelForTrue
	checkboxDB.LabelForTrue_Data.Valid = true

	checkboxDB.LabelForFalse_Data.String = checkbox.LabelForFalse
	checkboxDB.LabelForFalse_Data.Valid = true
}

// CopyBasicFieldsFromCheckboxWOP
func (checkboxDB *CheckboxDB) CopyBasicFieldsFromCheckboxWOP(checkbox *CheckboxWOP) {
	// insertion point for fields commit

	checkboxDB.Name_Data.String = checkbox.Name
	checkboxDB.Name_Data.Valid = true

	checkboxDB.ValueBool_Data.Bool = checkbox.ValueBool
	checkboxDB.ValueBool_Data.Valid = true

	checkboxDB.LabelForTrue_Data.String = checkbox.LabelForTrue
	checkboxDB.LabelForTrue_Data.Valid = true

	checkboxDB.LabelForFalse_Data.String = checkbox.LabelForFalse
	checkboxDB.LabelForFalse_Data.Valid = true
}

// CopyBasicFieldsToCheckbox
func (checkboxDB *CheckboxDB) CopyBasicFieldsToCheckbox(checkbox *models.Checkbox) {
	// insertion point for checkout of basic fields (back repo to stage)
	checkbox.Name = checkboxDB.Name_Data.String
	checkbox.ValueBool = checkboxDB.ValueBool_Data.Bool
	checkbox.LabelForTrue = checkboxDB.LabelForTrue_Data.String
	checkbox.LabelForFalse = checkboxDB.LabelForFalse_Data.String
}

// CopyBasicFieldsToCheckbox_WOP
func (checkboxDB *CheckboxDB) CopyBasicFieldsToCheckbox_WOP(checkbox *models.Checkbox_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	checkbox.Name = checkboxDB.Name_Data.String
	checkbox.ValueBool = checkboxDB.ValueBool_Data.Bool
	checkbox.LabelForTrue = checkboxDB.LabelForTrue_Data.String
	checkbox.LabelForFalse = checkboxDB.LabelForFalse_Data.String
}

// CopyBasicFieldsToCheckboxWOP
func (checkboxDB *CheckboxDB) CopyBasicFieldsToCheckboxWOP(checkbox *CheckboxWOP) {
	checkbox.ID = int(checkboxDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	checkbox.Name = checkboxDB.Name_Data.String
	checkbox.ValueBool = checkboxDB.ValueBool_Data.Bool
	checkbox.LabelForTrue = checkboxDB.LabelForTrue_Data.String
	checkbox.LabelForFalse = checkboxDB.LabelForFalse_Data.String
}

// Backup generates a json file from a slice of all CheckboxDB instances in the backrepo
func (backRepoCheckbox *BackRepoCheckboxStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CheckboxDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CheckboxDB, 0)
	for _, checkboxDB := range backRepoCheckbox.Map_CheckboxDBID_CheckboxDB {
		forBackup = append(forBackup, checkboxDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Checkbox ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Checkbox file", err.Error())
	}
}

// Backup generates a json file from a slice of all CheckboxDB instances in the backrepo
func (backRepoCheckbox *BackRepoCheckboxStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CheckboxDB, 0)
	for _, checkboxDB := range backRepoCheckbox.Map_CheckboxDBID_CheckboxDB {
		forBackup = append(forBackup, checkboxDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Checkbox")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Checkbox_Fields, -1)
	for _, checkboxDB := range forBackup {

		var checkboxWOP CheckboxWOP
		checkboxDB.CopyBasicFieldsToCheckboxWOP(&checkboxWOP)

		row := sh.AddRow()
		row.WriteStruct(&checkboxWOP, -1)
	}
}

// RestoreXL from the "Checkbox" sheet all CheckboxDB instances
func (backRepoCheckbox *BackRepoCheckboxStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCheckboxid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Checkbox"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCheckbox.rowVisitorCheckbox)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCheckbox *BackRepoCheckboxStruct) rowVisitorCheckbox(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var checkboxWOP CheckboxWOP
		row.ReadStruct(&checkboxWOP)

		// add the unmarshalled struct to the stage
		checkboxDB := new(CheckboxDB)
		checkboxDB.CopyBasicFieldsFromCheckboxWOP(&checkboxWOP)

		checkboxDB_ID_atBackupTime := checkboxDB.ID
		checkboxDB.ID = 0
		_, err := backRepoCheckbox.db.Create(checkboxDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCheckbox.Map_CheckboxDBID_CheckboxDB[checkboxDB.ID] = checkboxDB
		BackRepoCheckboxid_atBckpTime_newID[checkboxDB_ID_atBackupTime] = checkboxDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CheckboxDB.json" in dirPath that stores an array
// of CheckboxDB and stores it in the database
// the map BackRepoCheckboxid_atBckpTime_newID is updated accordingly
func (backRepoCheckbox *BackRepoCheckboxStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCheckboxid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CheckboxDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Checkbox file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CheckboxDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CheckboxDBID_CheckboxDB
	for _, checkboxDB := range forRestore {

		checkboxDB_ID_atBackupTime := checkboxDB.ID
		checkboxDB.ID = 0
		_, err := backRepoCheckbox.db.Create(checkboxDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCheckbox.Map_CheckboxDBID_CheckboxDB[checkboxDB.ID] = checkboxDB
		BackRepoCheckboxid_atBckpTime_newID[checkboxDB_ID_atBackupTime] = checkboxDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Checkbox file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Checkbox>id_atBckpTime_newID
// to compute new index
func (backRepoCheckbox *BackRepoCheckboxStruct) RestorePhaseTwo() {

	for _, checkboxDB := range backRepoCheckbox.Map_CheckboxDBID_CheckboxDB {

		// next line of code is to avert unused variable compilation error
		_ = checkboxDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoCheckbox.db.Model(checkboxDB)
		_, err := db.Updates(*checkboxDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoCheckbox.ResetReversePointers commits all staged instances of Checkbox to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckbox *BackRepoCheckboxStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, checkbox := range backRepoCheckbox.Map_CheckboxDBID_CheckboxPtr {
		backRepoCheckbox.ResetReversePointersInstance(backRepo, idx, checkbox)
	}

	return
}

func (backRepoCheckbox *BackRepoCheckboxStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, checkbox *models.Checkbox) (Error error) {

	// fetch matching checkboxDB
	if checkboxDB, ok := backRepoCheckbox.Map_CheckboxDBID_CheckboxDB[idx]; ok {
		_ = checkboxDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCheckboxid_atBckpTime_newID map[uint]uint
