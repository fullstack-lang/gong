// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { LayoutAPI } from './layout-api'
import { Layout, CopyLayoutToLayoutAPI } from './layout'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { GroupAPI } from './group-api'

@Injectable({
  providedIn: 'root'
})
export class LayoutService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  LayoutServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private layoutsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.layoutsUrl = origin + '/api/github.com/fullstack-lang/gong/lib/slider/go/v1/layouts';
  }

  /** GET layouts from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<LayoutAPI[]> {
    return this.getLayouts(Name, frontRepo)
  }
  getLayouts(Name: string, frontRepo: FrontRepo): Observable<LayoutAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<LayoutAPI[]>(this.layoutsUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<LayoutAPI[]>('getLayouts', []))
      );
  }

  /** GET layout by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<LayoutAPI> {
    return this.getLayout(id, Name, frontRepo)
  }
  getLayout(id: number, Name: string, frontRepo: FrontRepo): Observable<LayoutAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.layoutsUrl}/${id}`;
    return this.http.get<LayoutAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched layout id=${id}`)),
      catchError(this.handleError<LayoutAPI>(`getLayout id=${id}`))
    );
  }

  // postFront copy layout to a version with encoded pointers and post to the back
  postFront(layout: Layout, Name: string): Observable<LayoutAPI> {
    let layoutAPI = new LayoutAPI
    CopyLayoutToLayoutAPI(layout, layoutAPI)
    const id = typeof layoutAPI === 'number' ? layoutAPI : layoutAPI.ID
    const url = `${this.layoutsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<LayoutAPI>(url, layoutAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<LayoutAPI>('postLayout'))
    );
  }
  
  /** POST: add a new layout to the server */
  post(layoutdb: LayoutAPI, Name: string, frontRepo: FrontRepo): Observable<LayoutAPI> {
    return this.postLayout(layoutdb, Name, frontRepo)
  }
  postLayout(layoutdb: LayoutAPI, Name: string, frontRepo: FrontRepo): Observable<LayoutAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<LayoutAPI>(this.layoutsUrl, layoutdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted layoutdb id=${layoutdb.ID}`)
      }),
      catchError(this.handleError<LayoutAPI>('postLayout'))
    );
  }

  /** DELETE: delete the layoutdb from the server */
  delete(layoutdb: LayoutAPI | number, Name: string): Observable<LayoutAPI> {
    return this.deleteLayout(layoutdb, Name)
  }
  deleteLayout(layoutdb: LayoutAPI | number, Name: string): Observable<LayoutAPI> {
    const id = typeof layoutdb === 'number' ? layoutdb : layoutdb.ID;
    const url = `${this.layoutsUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<LayoutAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted layoutdb id=${id}`)),
      catchError(this.handleError<LayoutAPI>('deleteLayout'))
    );
  }

  // updateFront copy layout to a version with encoded pointers and update to the back
  updateFront(layout: Layout, Name: string): Observable<LayoutAPI> {
    let layoutAPI = new LayoutAPI
    CopyLayoutToLayoutAPI(layout, layoutAPI)
    const id = typeof layoutAPI === 'number' ? layoutAPI : layoutAPI.ID
    const url = `${this.layoutsUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<LayoutAPI>(url, layoutAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<LayoutAPI>('updateLayout'))
    );
  }

  /** PUT: update the layoutdb on the server */
  update(layoutdb: LayoutAPI, Name: string, frontRepo: FrontRepo): Observable<LayoutAPI> {
    return this.updateLayout(layoutdb, Name, frontRepo)
  }
  updateLayout(layoutdb: LayoutAPI, Name: string, frontRepo: FrontRepo): Observable<LayoutAPI> {
    const id = typeof layoutdb === 'number' ? layoutdb : layoutdb.ID;
    const url = `${this.layoutsUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<LayoutAPI>(url, layoutdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated layoutdb id=${layoutdb.ID}`)
      }),
      catchError(this.handleError<LayoutAPI>('updateLayout'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in LayoutService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("LayoutService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
