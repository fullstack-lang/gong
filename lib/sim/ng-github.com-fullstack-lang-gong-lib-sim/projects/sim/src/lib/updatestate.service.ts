// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { UpdateStateAPI } from './updatestate-api'
import { UpdateState, CopyUpdateStateToUpdateStateAPI } from './updatestate'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class UpdateStateService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  UpdateStateServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private updatestatesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.updatestatesUrl = origin + '/api/github.com/fullstack-lang/gong/lib/sim/go/v1/updatestates';
  }

  /** GET updatestates from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<UpdateStateAPI[]> {
    return this.getUpdateStates(Name, frontRepo)
  }
  getUpdateStates(Name: string, frontRepo: FrontRepo): Observable<UpdateStateAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<UpdateStateAPI[]>(this.updatestatesUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<UpdateStateAPI[]>('getUpdateStates', []))
      );
  }

  /** GET updatestate by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<UpdateStateAPI> {
    return this.getUpdateState(id, Name, frontRepo)
  }
  getUpdateState(id: number, Name: string, frontRepo: FrontRepo): Observable<UpdateStateAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.updatestatesUrl}/${id}`;
    return this.http.get<UpdateStateAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched updatestate id=${id}`)),
      catchError(this.handleError<UpdateStateAPI>(`getUpdateState id=${id}`))
    );
  }

  // postFront copy updatestate to a version with encoded pointers and post to the back
  postFront(updatestate: UpdateState, Name: string): Observable<UpdateStateAPI> {
    let updatestateAPI = new UpdateStateAPI
    CopyUpdateStateToUpdateStateAPI(updatestate, updatestateAPI)
    const id = typeof updatestateAPI === 'number' ? updatestateAPI : updatestateAPI.ID
    const url = `${this.updatestatesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<UpdateStateAPI>(url, updatestateAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<UpdateStateAPI>('postUpdateState'))
    );
  }
  
  /** POST: add a new updatestate to the server */
  post(updatestatedb: UpdateStateAPI, Name: string, frontRepo: FrontRepo): Observable<UpdateStateAPI> {
    return this.postUpdateState(updatestatedb, Name, frontRepo)
  }
  postUpdateState(updatestatedb: UpdateStateAPI, Name: string, frontRepo: FrontRepo): Observable<UpdateStateAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<UpdateStateAPI>(this.updatestatesUrl, updatestatedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted updatestatedb id=${updatestatedb.ID}`)
      }),
      catchError(this.handleError<UpdateStateAPI>('postUpdateState'))
    );
  }

  /** DELETE: delete the updatestatedb from the server */
  delete(updatestatedb: UpdateStateAPI | number, Name: string): Observable<UpdateStateAPI> {
    return this.deleteUpdateState(updatestatedb, Name)
  }
  deleteUpdateState(updatestatedb: UpdateStateAPI | number, Name: string): Observable<UpdateStateAPI> {
    const id = typeof updatestatedb === 'number' ? updatestatedb : updatestatedb.ID;
    const url = `${this.updatestatesUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<UpdateStateAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted updatestatedb id=${id}`)),
      catchError(this.handleError<UpdateStateAPI>('deleteUpdateState'))
    );
  }

  // updateFront copy updatestate to a version with encoded pointers and update to the back
  updateFront(updatestate: UpdateState, Name: string): Observable<UpdateStateAPI> {
    let updatestateAPI = new UpdateStateAPI
    CopyUpdateStateToUpdateStateAPI(updatestate, updatestateAPI)
    const id = typeof updatestateAPI === 'number' ? updatestateAPI : updatestateAPI.ID
    const url = `${this.updatestatesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<UpdateStateAPI>(url, updatestateAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<UpdateStateAPI>('updateUpdateState'))
    );
  }

  /** PUT: update the updatestatedb on the server */
  update(updatestatedb: UpdateStateAPI, Name: string, frontRepo: FrontRepo): Observable<UpdateStateAPI> {
    return this.updateUpdateState(updatestatedb, Name, frontRepo)
  }
  updateUpdateState(updatestatedb: UpdateStateAPI, Name: string, frontRepo: FrontRepo): Observable<UpdateStateAPI> {
    const id = typeof updatestatedb === 'number' ? updatestatedb : updatestatedb.ID;
    const url = `${this.updatestatesUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<UpdateStateAPI>(url, updatestatedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated updatestatedb id=${updatestatedb.ID}`)
      }),
      catchError(this.handleError<UpdateStateAPI>('updateUpdateState'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in UpdateStateService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("UpdateStateService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
