// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { EngineAPI } from './engine-api'
import { Engine, CopyEngineToEngineAPI } from './engine'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class EngineService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  EngineServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private enginesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.enginesUrl = origin + '/api/github.com/fullstack-lang/gong/lib/sim/go/v1/engines';
  }

  /** GET engines from the server */
  // gets is more robust to refactoring
  gets(Name: string, frontRepo: FrontRepo): Observable<EngineAPI[]> {
    return this.getEngines(Name, frontRepo)
  }
  getEngines(Name: string, frontRepo: FrontRepo): Observable<EngineAPI[]> {

    let params = new HttpParams().set("Name", Name)

    return this.http.get<EngineAPI[]>(this.enginesUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<EngineAPI[]>('getEngines', []))
      );
  }

  /** GET engine by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, Name: string, frontRepo: FrontRepo): Observable<EngineAPI> {
    return this.getEngine(id, Name, frontRepo)
  }
  getEngine(id: number, Name: string, frontRepo: FrontRepo): Observable<EngineAPI> {

    let params = new HttpParams().set("Name", Name)

    const url = `${this.enginesUrl}/${id}`;
    return this.http.get<EngineAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched engine id=${id}`)),
      catchError(this.handleError<EngineAPI>(`getEngine id=${id}`))
    );
  }

  // postFront copy engine to a version with encoded pointers and post to the back
  postFront(engine: Engine, Name: string): Observable<EngineAPI> {
    let engineAPI = new EngineAPI
    CopyEngineToEngineAPI(engine, engineAPI)
    const id = typeof engineAPI === 'number' ? engineAPI : engineAPI.ID
    const url = `${this.enginesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<EngineAPI>(url, engineAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<EngineAPI>('postEngine'))
    );
  }
  
  /** POST: add a new engine to the server */
  post(enginedb: EngineAPI, Name: string, frontRepo: FrontRepo): Observable<EngineAPI> {
    return this.postEngine(enginedb, Name, frontRepo)
  }
  postEngine(enginedb: EngineAPI, Name: string, frontRepo: FrontRepo): Observable<EngineAPI> {

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<EngineAPI>(this.enginesUrl, enginedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted enginedb id=${enginedb.ID}`)
      }),
      catchError(this.handleError<EngineAPI>('postEngine'))
    );
  }

  /** DELETE: delete the enginedb from the server */
  delete(enginedb: EngineAPI | number, Name: string): Observable<EngineAPI> {
    return this.deleteEngine(enginedb, Name)
  }
  deleteEngine(enginedb: EngineAPI | number, Name: string): Observable<EngineAPI> {
    const id = typeof enginedb === 'number' ? enginedb : enginedb.ID;
    const url = `${this.enginesUrl}/${id}`;

    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<EngineAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted enginedb id=${id}`)),
      catchError(this.handleError<EngineAPI>('deleteEngine'))
    );
  }

  // updateFront copy engine to a version with encoded pointers and update to the back
  updateFront(engine: Engine, Name: string): Observable<EngineAPI> {
    let engineAPI = new EngineAPI
    CopyEngineToEngineAPI(engine, engineAPI)
    const id = typeof engineAPI === 'number' ? engineAPI : engineAPI.ID
    const url = `${this.enginesUrl}/${id}`;
    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<EngineAPI>(url, engineAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<EngineAPI>('updateEngine'))
    );
  }

  /** PUT: update the enginedb on the server */
  update(enginedb: EngineAPI, Name: string, frontRepo: FrontRepo): Observable<EngineAPI> {
    return this.updateEngine(enginedb, Name, frontRepo)
  }
  updateEngine(enginedb: EngineAPI, Name: string, frontRepo: FrontRepo): Observable<EngineAPI> {
    const id = typeof enginedb === 'number' ? enginedb : enginedb.ID;
    const url = `${this.enginesUrl}/${id}`;


    let params = new HttpParams().set("Name", Name)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<EngineAPI>(url, enginedb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated enginedb id=${enginedb.ID}`)
      }),
      catchError(this.handleError<EngineAPI>('updateEngine'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in EngineService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("EngineService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
