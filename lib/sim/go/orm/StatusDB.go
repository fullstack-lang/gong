// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/sim/go/db"
	"github.com/fullstack-lang/gong/lib/sim/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Status_sql sql.NullBool
var dummy_Status_time time.Duration
var dummy_Status_sort sort.Float64Slice

// StatusAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model statusAPI
type StatusAPI struct {
	gorm.Model

	models.Status_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	StatusPointersEncoding StatusPointersEncoding
}

// StatusPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type StatusPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// StatusDB describes a status in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model statusDB
type StatusDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field statusDB.Name
	Name_Data sql.NullString

	// Declation for basic field statusDB.CurrentCommand
	CurrentCommand_Data sql.NullString

	// Declation for basic field statusDB.CompletionDate
	CompletionDate_Data sql.NullString

	// Declation for basic field statusDB.CurrentSpeedCommand
	CurrentSpeedCommand_Data sql.NullString

	// Declation for basic field statusDB.SpeedCommandCompletionDate
	SpeedCommandCompletionDate_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	StatusPointersEncoding
}

// StatusDBs arrays statusDBs
// swagger:response statusDBsResponse
type StatusDBs []StatusDB

// StatusDBResponse provides response
// swagger:response statusDBResponse
type StatusDBResponse struct {
	StatusDB
}

// StatusWOP is a Status without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type StatusWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	CurrentCommand models.CommandType `xlsx:"2"`

	CompletionDate string `xlsx:"3"`

	CurrentSpeedCommand models.SpeedCommandType `xlsx:"4"`

	SpeedCommandCompletionDate string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var Status_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"CurrentCommand",
	"CompletionDate",
	"CurrentSpeedCommand",
	"SpeedCommandCompletionDate",
}

type BackRepoStatusStruct struct {
	// stores StatusDB according to their gorm ID
	Map_StatusDBID_StatusDB map[uint]*StatusDB

	// stores StatusDB ID according to Status address
	Map_StatusPtr_StatusDBID map[*models.Status]uint

	// stores Status according to their gorm ID
	Map_StatusDBID_StatusPtr map[uint]*models.Status

	db db.DBInterface

	stage *models.Stage
}

func (backRepoStatus *BackRepoStatusStruct) GetStage() (stage *models.Stage) {
	stage = backRepoStatus.stage
	return
}

func (backRepoStatus *BackRepoStatusStruct) GetDB() db.DBInterface {
	return backRepoStatus.db
}

// GetStatusDBFromStatusPtr is a handy function to access the back repo instance from the stage instance
func (backRepoStatus *BackRepoStatusStruct) GetStatusDBFromStatusPtr(status *models.Status) (statusDB *StatusDB) {
	id := backRepoStatus.Map_StatusPtr_StatusDBID[status]
	statusDB = backRepoStatus.Map_StatusDBID_StatusDB[id]
	return
}

// BackRepoStatus.CommitPhaseOne commits all staged instances of Status to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStatus *BackRepoStatusStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var statuss []*models.Status
	for status := range stage.Statuss {
		statuss = append(statuss, status)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(statuss, func(i, j int) bool {
		return stage.StatusMap_Staged_Order[statuss[i]] < stage.StatusMap_Staged_Order[statuss[j]]
	})

	for _, status := range statuss {
		backRepoStatus.CommitPhaseOneInstance(status)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, status := range backRepoStatus.Map_StatusDBID_StatusPtr {
		if _, ok := stage.Statuss[status]; !ok {
			backRepoStatus.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStatus.CommitDeleteInstance commits deletion of Status to the BackRepo
func (backRepoStatus *BackRepoStatusStruct) CommitDeleteInstance(id uint) (Error error) {

	status := backRepoStatus.Map_StatusDBID_StatusPtr[id]

	// status is not staged anymore, remove statusDB
	statusDB := backRepoStatus.Map_StatusDBID_StatusDB[id]
	db, _ := backRepoStatus.db.Unscoped()
	_, err := db.Delete(statusDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoStatus.Map_StatusPtr_StatusDBID, status)
	delete(backRepoStatus.Map_StatusDBID_StatusPtr, id)
	delete(backRepoStatus.Map_StatusDBID_StatusDB, id)

	return
}

// BackRepoStatus.CommitPhaseOneInstance commits status staged instances of Status to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStatus *BackRepoStatusStruct) CommitPhaseOneInstance(status *models.Status) (Error error) {

	// check if the status is not commited yet
	if _, ok := backRepoStatus.Map_StatusPtr_StatusDBID[status]; ok {
		return
	}

	// initiate status
	var statusDB StatusDB
	statusDB.CopyBasicFieldsFromStatus(status)

	_, err := backRepoStatus.db.Create(&statusDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoStatus.Map_StatusPtr_StatusDBID[status] = statusDB.ID
	backRepoStatus.Map_StatusDBID_StatusPtr[statusDB.ID] = status
	backRepoStatus.Map_StatusDBID_StatusDB[statusDB.ID] = &statusDB

	return
}

// BackRepoStatus.CommitPhaseTwo commits all staged instances of Status to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStatus *BackRepoStatusStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, status := range backRepoStatus.Map_StatusDBID_StatusPtr {
		backRepoStatus.CommitPhaseTwoInstance(backRepo, idx, status)
	}

	return
}

// BackRepoStatus.CommitPhaseTwoInstance commits {{structname }} of models.Status to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStatus *BackRepoStatusStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, status *models.Status) (Error error) {

	// fetch matching statusDB
	if statusDB, ok := backRepoStatus.Map_StatusDBID_StatusDB[idx]; ok {

		statusDB.CopyBasicFieldsFromStatus(status)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoStatus.db.Save(statusDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Status intance %s", status.Name))
		return err
	}

	return
}

// BackRepoStatus.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStatus *BackRepoStatusStruct) CheckoutPhaseOne() (Error error) {

	statusDBArray := make([]StatusDB, 0)
	_, err := backRepoStatus.db.Find(&statusDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	statusInstancesToBeRemovedFromTheStage := make(map[*models.Status]any)
	for key, value := range backRepoStatus.stage.Statuss {
		statusInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, statusDB := range statusDBArray {
		backRepoStatus.CheckoutPhaseOneInstance(&statusDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		status, ok := backRepoStatus.Map_StatusDBID_StatusPtr[statusDB.ID]
		if ok {
			delete(statusInstancesToBeRemovedFromTheStage, status)
		}
	}

	// remove from stage and back repo's 3 maps all statuss that are not in the checkout
	for status := range statusInstancesToBeRemovedFromTheStage {
		status.Unstage(backRepoStatus.GetStage())

		// remove instance from the back repo 3 maps
		statusID := backRepoStatus.Map_StatusPtr_StatusDBID[status]
		delete(backRepoStatus.Map_StatusPtr_StatusDBID, status)
		delete(backRepoStatus.Map_StatusDBID_StatusDB, statusID)
		delete(backRepoStatus.Map_StatusDBID_StatusPtr, statusID)
	}

	return
}

// CheckoutPhaseOneInstance takes a statusDB that has been found in the DB, updates the backRepo and stages the
// models version of the statusDB
func (backRepoStatus *BackRepoStatusStruct) CheckoutPhaseOneInstance(statusDB *StatusDB) (Error error) {

	status, ok := backRepoStatus.Map_StatusDBID_StatusPtr[statusDB.ID]
	if !ok {
		status = new(models.Status)

		backRepoStatus.Map_StatusDBID_StatusPtr[statusDB.ID] = status
		backRepoStatus.Map_StatusPtr_StatusDBID[status] = statusDB.ID

		// append model store with the new element
		status.Name = statusDB.Name_Data.String
		status.Stage(backRepoStatus.GetStage())
	}
	statusDB.CopyBasicFieldsToStatus(status)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	status.Stage(backRepoStatus.GetStage())

	// preserve pointer to statusDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_StatusDBID_StatusDB)[statusDB hold variable pointers
	statusDB_Data := *statusDB
	preservedPtrToStatus := &statusDB_Data
	backRepoStatus.Map_StatusDBID_StatusDB[statusDB.ID] = preservedPtrToStatus

	return
}

// BackRepoStatus.CheckoutPhaseTwo Checkouts all staged instances of Status to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStatus *BackRepoStatusStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, statusDB := range backRepoStatus.Map_StatusDBID_StatusDB {
		backRepoStatus.CheckoutPhaseTwoInstance(backRepo, statusDB)
	}
	return
}

// BackRepoStatus.CheckoutPhaseTwoInstance Checkouts staged instances of Status to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStatus *BackRepoStatusStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, statusDB *StatusDB) (Error error) {

	status := backRepoStatus.Map_StatusDBID_StatusPtr[statusDB.ID]

	statusDB.DecodePointers(backRepo, status)

	return
}

func (statusDB *StatusDB) DecodePointers(backRepo *BackRepoStruct, status *models.Status) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStatus allows commit of a single status (if already staged)
func (backRepo *BackRepoStruct) CommitStatus(status *models.Status) {
	backRepo.BackRepoStatus.CommitPhaseOneInstance(status)
	if id, ok := backRepo.BackRepoStatus.Map_StatusPtr_StatusDBID[status]; ok {
		backRepo.BackRepoStatus.CommitPhaseTwoInstance(backRepo, id, status)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStatus allows checkout of a single status (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStatus(status *models.Status) {
	// check if the status is staged
	if _, ok := backRepo.BackRepoStatus.Map_StatusPtr_StatusDBID[status]; ok {

		if id, ok := backRepo.BackRepoStatus.Map_StatusPtr_StatusDBID[status]; ok {
			var statusDB StatusDB
			statusDB.ID = id

			if _, err := backRepo.BackRepoStatus.db.First(&statusDB, id); err != nil {
				log.Fatalln("CheckoutStatus : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStatus.CheckoutPhaseOneInstance(&statusDB)
			backRepo.BackRepoStatus.CheckoutPhaseTwoInstance(backRepo, &statusDB)
		}
	}
}

// CopyBasicFieldsFromStatus
func (statusDB *StatusDB) CopyBasicFieldsFromStatus(status *models.Status) {
	// insertion point for fields commit

	statusDB.Name_Data.String = status.Name
	statusDB.Name_Data.Valid = true

	statusDB.CurrentCommand_Data.String = status.CurrentCommand.ToString()
	statusDB.CurrentCommand_Data.Valid = true

	statusDB.CompletionDate_Data.String = status.CompletionDate
	statusDB.CompletionDate_Data.Valid = true

	statusDB.CurrentSpeedCommand_Data.String = status.CurrentSpeedCommand.ToString()
	statusDB.CurrentSpeedCommand_Data.Valid = true

	statusDB.SpeedCommandCompletionDate_Data.String = status.SpeedCommandCompletionDate
	statusDB.SpeedCommandCompletionDate_Data.Valid = true
}

// CopyBasicFieldsFromStatus_WOP
func (statusDB *StatusDB) CopyBasicFieldsFromStatus_WOP(status *models.Status_WOP) {
	// insertion point for fields commit

	statusDB.Name_Data.String = status.Name
	statusDB.Name_Data.Valid = true

	statusDB.CurrentCommand_Data.String = status.CurrentCommand.ToString()
	statusDB.CurrentCommand_Data.Valid = true

	statusDB.CompletionDate_Data.String = status.CompletionDate
	statusDB.CompletionDate_Data.Valid = true

	statusDB.CurrentSpeedCommand_Data.String = status.CurrentSpeedCommand.ToString()
	statusDB.CurrentSpeedCommand_Data.Valid = true

	statusDB.SpeedCommandCompletionDate_Data.String = status.SpeedCommandCompletionDate
	statusDB.SpeedCommandCompletionDate_Data.Valid = true
}

// CopyBasicFieldsFromStatusWOP
func (statusDB *StatusDB) CopyBasicFieldsFromStatusWOP(status *StatusWOP) {
	// insertion point for fields commit

	statusDB.Name_Data.String = status.Name
	statusDB.Name_Data.Valid = true

	statusDB.CurrentCommand_Data.String = status.CurrentCommand.ToString()
	statusDB.CurrentCommand_Data.Valid = true

	statusDB.CompletionDate_Data.String = status.CompletionDate
	statusDB.CompletionDate_Data.Valid = true

	statusDB.CurrentSpeedCommand_Data.String = status.CurrentSpeedCommand.ToString()
	statusDB.CurrentSpeedCommand_Data.Valid = true

	statusDB.SpeedCommandCompletionDate_Data.String = status.SpeedCommandCompletionDate
	statusDB.SpeedCommandCompletionDate_Data.Valid = true
}

// CopyBasicFieldsToStatus
func (statusDB *StatusDB) CopyBasicFieldsToStatus(status *models.Status) {
	// insertion point for checkout of basic fields (back repo to stage)
	status.Name = statusDB.Name_Data.String
	status.CurrentCommand.FromString(statusDB.CurrentCommand_Data.String)
	status.CompletionDate = statusDB.CompletionDate_Data.String
	status.CurrentSpeedCommand.FromString(statusDB.CurrentSpeedCommand_Data.String)
	status.SpeedCommandCompletionDate = statusDB.SpeedCommandCompletionDate_Data.String
}

// CopyBasicFieldsToStatus_WOP
func (statusDB *StatusDB) CopyBasicFieldsToStatus_WOP(status *models.Status_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	status.Name = statusDB.Name_Data.String
	status.CurrentCommand.FromString(statusDB.CurrentCommand_Data.String)
	status.CompletionDate = statusDB.CompletionDate_Data.String
	status.CurrentSpeedCommand.FromString(statusDB.CurrentSpeedCommand_Data.String)
	status.SpeedCommandCompletionDate = statusDB.SpeedCommandCompletionDate_Data.String
}

// CopyBasicFieldsToStatusWOP
func (statusDB *StatusDB) CopyBasicFieldsToStatusWOP(status *StatusWOP) {
	status.ID = int(statusDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	status.Name = statusDB.Name_Data.String
	status.CurrentCommand.FromString(statusDB.CurrentCommand_Data.String)
	status.CompletionDate = statusDB.CompletionDate_Data.String
	status.CurrentSpeedCommand.FromString(statusDB.CurrentSpeedCommand_Data.String)
	status.SpeedCommandCompletionDate = statusDB.SpeedCommandCompletionDate_Data.String
}

// Backup generates a json file from a slice of all StatusDB instances in the backrepo
func (backRepoStatus *BackRepoStatusStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "StatusDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StatusDB, 0)
	for _, statusDB := range backRepoStatus.Map_StatusDBID_StatusDB {
		forBackup = append(forBackup, statusDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Status ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Status file", err.Error())
	}
}

// Backup generates a json file from a slice of all StatusDB instances in the backrepo
func (backRepoStatus *BackRepoStatusStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StatusDB, 0)
	for _, statusDB := range backRepoStatus.Map_StatusDBID_StatusDB {
		forBackup = append(forBackup, statusDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Status")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Status_Fields, -1)
	for _, statusDB := range forBackup {

		var statusWOP StatusWOP
		statusDB.CopyBasicFieldsToStatusWOP(&statusWOP)

		row := sh.AddRow()
		row.WriteStruct(&statusWOP, -1)
	}
}

// RestoreXL from the "Status" sheet all StatusDB instances
func (backRepoStatus *BackRepoStatusStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStatusid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Status"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStatus.rowVisitorStatus)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStatus *BackRepoStatusStruct) rowVisitorStatus(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var statusWOP StatusWOP
		row.ReadStruct(&statusWOP)

		// add the unmarshalled struct to the stage
		statusDB := new(StatusDB)
		statusDB.CopyBasicFieldsFromStatusWOP(&statusWOP)

		statusDB_ID_atBackupTime := statusDB.ID
		statusDB.ID = 0
		_, err := backRepoStatus.db.Create(statusDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStatus.Map_StatusDBID_StatusDB[statusDB.ID] = statusDB
		BackRepoStatusid_atBckpTime_newID[statusDB_ID_atBackupTime] = statusDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "StatusDB.json" in dirPath that stores an array
// of StatusDB and stores it in the database
// the map BackRepoStatusid_atBckpTime_newID is updated accordingly
func (backRepoStatus *BackRepoStatusStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStatusid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "StatusDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Status file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*StatusDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_StatusDBID_StatusDB
	for _, statusDB := range forRestore {

		statusDB_ID_atBackupTime := statusDB.ID
		statusDB.ID = 0
		_, err := backRepoStatus.db.Create(statusDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStatus.Map_StatusDBID_StatusDB[statusDB.ID] = statusDB
		BackRepoStatusid_atBckpTime_newID[statusDB_ID_atBackupTime] = statusDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Status file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Status>id_atBckpTime_newID
// to compute new index
func (backRepoStatus *BackRepoStatusStruct) RestorePhaseTwo() {

	for _, statusDB := range backRepoStatus.Map_StatusDBID_StatusDB {

		// next line of code is to avert unused variable compilation error
		_ = statusDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoStatus.db.Model(statusDB)
		_, err := db.Updates(*statusDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoStatus.ResetReversePointers commits all staged instances of Status to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStatus *BackRepoStatusStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, status := range backRepoStatus.Map_StatusDBID_StatusPtr {
		backRepoStatus.ResetReversePointersInstance(backRepo, idx, status)
	}

	return
}

func (backRepoStatus *BackRepoStatusStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, status *models.Status) (Error error) {

	// fetch matching statusDB
	if statusDB, ok := backRepoStatus.Map_StatusDBID_StatusDB[idx]; ok {
		_ = statusDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStatusid_atBckpTime_newID map[uint]uint
