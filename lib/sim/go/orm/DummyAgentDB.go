// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/sim/go/db"
	"github.com/fullstack-lang/gong/lib/sim/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DummyAgent_sql sql.NullBool
var dummy_DummyAgent_time time.Duration
var dummy_DummyAgent_sort sort.Float64Slice

// DummyAgentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model dummyagentAPI
type DummyAgentAPI struct {
	gorm.Model

	models.DummyAgent_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DummyAgentPointersEncoding DummyAgentPointersEncoding
}

// DummyAgentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DummyAgentPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// DummyAgentDB describes a dummyagent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model dummyagentDB
type DummyAgentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field dummyagentDB.TechName
	TechName_Data sql.NullString

	// Declation for basic field dummyagentDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DummyAgentPointersEncoding
}

// DummyAgentDBs arrays dummyagentDBs
// swagger:response dummyagentDBsResponse
type DummyAgentDBs []DummyAgentDB

// DummyAgentDBResponse provides response
// swagger:response dummyagentDBResponse
type DummyAgentDBResponse struct {
	DummyAgentDB
}

// DummyAgentWOP is a DummyAgent without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DummyAgentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	TechName string `xlsx:"1"`

	Name string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var DummyAgent_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"TechName",
	"Name",
}

type BackRepoDummyAgentStruct struct {
	// stores DummyAgentDB according to their gorm ID
	Map_DummyAgentDBID_DummyAgentDB map[uint]*DummyAgentDB

	// stores DummyAgentDB ID according to DummyAgent address
	Map_DummyAgentPtr_DummyAgentDBID map[*models.DummyAgent]uint

	// stores DummyAgent according to their gorm ID
	Map_DummyAgentDBID_DummyAgentPtr map[uint]*models.DummyAgent

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoDummyAgent *BackRepoDummyAgentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDummyAgent.stage
	return
}

func (backRepoDummyAgent *BackRepoDummyAgentStruct) GetDB() db.DBInterface {
	return backRepoDummyAgent.db
}

// GetDummyAgentDBFromDummyAgentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDummyAgent *BackRepoDummyAgentStruct) GetDummyAgentDBFromDummyAgentPtr(dummyagent *models.DummyAgent) (dummyagentDB *DummyAgentDB) {
	id := backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID[dummyagent]
	dummyagentDB = backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB[id]
	return
}

// BackRepoDummyAgent.CommitPhaseOne commits all staged instances of DummyAgent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var dummyagents []*models.DummyAgent
	for dummyagent := range stage.DummyAgents {
		dummyagents = append(dummyagents, dummyagent)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(dummyagents, func(i, j int) bool {
		return stage.Map_Staged_Order[dummyagents[i]] < stage.Map_Staged_Order[dummyagents[j]]
	})

	for _, dummyagent := range dummyagents {
		backRepoDummyAgent.CommitPhaseOneInstance(dummyagent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, dummyagent := range backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr {
		if _, ok := stage.DummyAgents[dummyagent]; !ok {
			backRepoDummyAgent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDummyAgent.CommitDeleteInstance commits deletion of DummyAgent to the BackRepo
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitDeleteInstance(id uint) (Error error) {

	dummyagent := backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr[id]

	// dummyagent is not staged anymore, remove dummyagentDB
	dummyagentDB := backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB[id]
	db, _ := backRepoDummyAgent.db.Unscoped()
	_, err := db.Delete(dummyagentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID, dummyagent)
	delete(backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr, id)
	delete(backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB, id)

	return
}

// BackRepoDummyAgent.CommitPhaseOneInstance commits dummyagent staged instances of DummyAgent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitPhaseOneInstance(dummyagent *models.DummyAgent) (Error error) {

	// check if the dummyagent is not commited yet
	if _, ok := backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID[dummyagent]; ok {
		return
	}

	// initiate dummyagent
	var dummyagentDB DummyAgentDB
	dummyagentDB.CopyBasicFieldsFromDummyAgent(dummyagent)

	_, err := backRepoDummyAgent.db.Create(&dummyagentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID[dummyagent] = dummyagentDB.ID
	backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr[dummyagentDB.ID] = dummyagent
	backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB[dummyagentDB.ID] = &dummyagentDB

	return
}

// BackRepoDummyAgent.CommitPhaseTwo commits all staged instances of DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, dummyagent := range backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr {
		backRepoDummyAgent.CommitPhaseTwoInstance(backRepo, idx, dummyagent)
	}

	return
}

// BackRepoDummyAgent.CommitPhaseTwoInstance commits {{structname }} of models.DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, dummyagent *models.DummyAgent) (Error error) {

	// fetch matching dummyagentDB
	if dummyagentDB, ok := backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB[idx]; ok {

		dummyagentDB.CopyBasicFieldsFromDummyAgent(dummyagent)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoDummyAgent.db.Save(dummyagentDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DummyAgent intance %s", dummyagent.Name))
		return err
	}

	return
}

// BackRepoDummyAgent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CheckoutPhaseOne() (Error error) {

	dummyagentDBArray := make([]DummyAgentDB, 0)
	_, err := backRepoDummyAgent.db.Find(&dummyagentDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	dummyagentInstancesToBeRemovedFromTheStage := make(map[*models.DummyAgent]any)
	for key, value := range backRepoDummyAgent.stage.DummyAgents {
		dummyagentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, dummyagentDB := range dummyagentDBArray {
		backRepoDummyAgent.CheckoutPhaseOneInstance(&dummyagentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		dummyagent, ok := backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr[dummyagentDB.ID]
		if ok {
			delete(dummyagentInstancesToBeRemovedFromTheStage, dummyagent)
		}
	}

	// remove from stage and back repo's 3 maps all dummyagents that are not in the checkout
	for dummyagent := range dummyagentInstancesToBeRemovedFromTheStage {
		dummyagent.Unstage(backRepoDummyAgent.GetStage())

		// remove instance from the back repo 3 maps
		dummyagentID := backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID[dummyagent]
		delete(backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID, dummyagent)
		delete(backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB, dummyagentID)
		delete(backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr, dummyagentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a dummyagentDB that has been found in the DB, updates the backRepo and stages the
// models version of the dummyagentDB
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CheckoutPhaseOneInstance(dummyagentDB *DummyAgentDB) (Error error) {

	dummyagent, ok := backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr[dummyagentDB.ID]
	if !ok {
		dummyagent = new(models.DummyAgent)

		backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr[dummyagentDB.ID] = dummyagent
		backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID[dummyagent] = dummyagentDB.ID

		// append model store with the new element
		dummyagent.Name = dummyagentDB.Name_Data.String
		dummyagent.Stage(backRepoDummyAgent.GetStage())
	}
	dummyagentDB.CopyBasicFieldsToDummyAgent(dummyagent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	dummyagent.Stage(backRepoDummyAgent.GetStage())

	// preserve pointer to dummyagentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DummyAgentDBID_DummyAgentDB)[dummyagentDB hold variable pointers
	dummyagentDB_Data := *dummyagentDB
	preservedPtrToDummyAgent := &dummyagentDB_Data
	backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB[dummyagentDB.ID] = preservedPtrToDummyAgent

	return
}

// BackRepoDummyAgent.CheckoutPhaseTwo Checkouts all staged instances of DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, dummyagentDB := range backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB {
		backRepoDummyAgent.CheckoutPhaseTwoInstance(backRepo, dummyagentDB)
	}
	return
}

// BackRepoDummyAgent.CheckoutPhaseTwoInstance Checkouts staged instances of DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, dummyagentDB *DummyAgentDB) (Error error) {

	dummyagent := backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr[dummyagentDB.ID]

	dummyagentDB.DecodePointers(backRepo, dummyagent)

	return
}

func (dummyagentDB *DummyAgentDB) DecodePointers(backRepo *BackRepoStruct, dummyagent *models.DummyAgent) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDummyAgent allows commit of a single dummyagent (if already staged)
func (backRepo *BackRepoStruct) CommitDummyAgent(dummyagent *models.DummyAgent) {
	backRepo.BackRepoDummyAgent.CommitPhaseOneInstance(dummyagent)
	if id, ok := backRepo.BackRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID[dummyagent]; ok {
		backRepo.BackRepoDummyAgent.CommitPhaseTwoInstance(backRepo, id, dummyagent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDummyAgent allows checkout of a single dummyagent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDummyAgent(dummyagent *models.DummyAgent) {
	// check if the dummyagent is staged
	if _, ok := backRepo.BackRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID[dummyagent]; ok {

		if id, ok := backRepo.BackRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID[dummyagent]; ok {
			var dummyagentDB DummyAgentDB
			dummyagentDB.ID = id

			if _, err := backRepo.BackRepoDummyAgent.db.First(&dummyagentDB, id); err != nil {
				log.Fatalln("CheckoutDummyAgent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDummyAgent.CheckoutPhaseOneInstance(&dummyagentDB)
			backRepo.BackRepoDummyAgent.CheckoutPhaseTwoInstance(backRepo, &dummyagentDB)
		}
	}
}

// CopyBasicFieldsFromDummyAgent
func (dummyagentDB *DummyAgentDB) CopyBasicFieldsFromDummyAgent(dummyagent *models.DummyAgent) {
	// insertion point for fields commit

	dummyagentDB.TechName_Data.String = dummyagent.TechName
	dummyagentDB.TechName_Data.Valid = true

	dummyagentDB.Name_Data.String = dummyagent.Name
	dummyagentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDummyAgent_WOP
func (dummyagentDB *DummyAgentDB) CopyBasicFieldsFromDummyAgent_WOP(dummyagent *models.DummyAgent_WOP) {
	// insertion point for fields commit

	dummyagentDB.TechName_Data.String = dummyagent.TechName
	dummyagentDB.TechName_Data.Valid = true

	dummyagentDB.Name_Data.String = dummyagent.Name
	dummyagentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDummyAgentWOP
func (dummyagentDB *DummyAgentDB) CopyBasicFieldsFromDummyAgentWOP(dummyagent *DummyAgentWOP) {
	// insertion point for fields commit

	dummyagentDB.TechName_Data.String = dummyagent.TechName
	dummyagentDB.TechName_Data.Valid = true

	dummyagentDB.Name_Data.String = dummyagent.Name
	dummyagentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDummyAgent
func (dummyagentDB *DummyAgentDB) CopyBasicFieldsToDummyAgent(dummyagent *models.DummyAgent) {
	// insertion point for checkout of basic fields (back repo to stage)
	dummyagent.TechName = dummyagentDB.TechName_Data.String
	dummyagent.Name = dummyagentDB.Name_Data.String
}

// CopyBasicFieldsToDummyAgent_WOP
func (dummyagentDB *DummyAgentDB) CopyBasicFieldsToDummyAgent_WOP(dummyagent *models.DummyAgent_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	dummyagent.TechName = dummyagentDB.TechName_Data.String
	dummyagent.Name = dummyagentDB.Name_Data.String
}

// CopyBasicFieldsToDummyAgentWOP
func (dummyagentDB *DummyAgentDB) CopyBasicFieldsToDummyAgentWOP(dummyagent *DummyAgentWOP) {
	dummyagent.ID = int(dummyagentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	dummyagent.TechName = dummyagentDB.TechName_Data.String
	dummyagent.Name = dummyagentDB.Name_Data.String
}

// Backup generates a json file from a slice of all DummyAgentDB instances in the backrepo
func (backRepoDummyAgent *BackRepoDummyAgentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DummyAgentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DummyAgentDB, 0)
	for _, dummyagentDB := range backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB {
		forBackup = append(forBackup, dummyagentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DummyAgent ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DummyAgent file", err.Error())
	}
}

// Backup generates a json file from a slice of all DummyAgentDB instances in the backrepo
func (backRepoDummyAgent *BackRepoDummyAgentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DummyAgentDB, 0)
	for _, dummyagentDB := range backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB {
		forBackup = append(forBackup, dummyagentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DummyAgent")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DummyAgent_Fields, -1)
	for _, dummyagentDB := range forBackup {

		var dummyagentWOP DummyAgentWOP
		dummyagentDB.CopyBasicFieldsToDummyAgentWOP(&dummyagentWOP)

		row := sh.AddRow()
		row.WriteStruct(&dummyagentWOP, -1)
	}
}

// RestoreXL from the "DummyAgent" sheet all DummyAgentDB instances
func (backRepoDummyAgent *BackRepoDummyAgentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDummyAgentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DummyAgent"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDummyAgent.rowVisitorDummyAgent)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDummyAgent *BackRepoDummyAgentStruct) rowVisitorDummyAgent(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var dummyagentWOP DummyAgentWOP
		row.ReadStruct(&dummyagentWOP)

		// add the unmarshalled struct to the stage
		dummyagentDB := new(DummyAgentDB)
		dummyagentDB.CopyBasicFieldsFromDummyAgentWOP(&dummyagentWOP)

		dummyagentDB_ID_atBackupTime := dummyagentDB.ID
		dummyagentDB.ID = 0
		_, err := backRepoDummyAgent.db.Create(dummyagentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB[dummyagentDB.ID] = dummyagentDB
		BackRepoDummyAgentid_atBckpTime_newID[dummyagentDB_ID_atBackupTime] = dummyagentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DummyAgentDB.json" in dirPath that stores an array
// of DummyAgentDB and stores it in the database
// the map BackRepoDummyAgentid_atBckpTime_newID is updated accordingly
func (backRepoDummyAgent *BackRepoDummyAgentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDummyAgentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DummyAgentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DummyAgent file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DummyAgentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DummyAgentDBID_DummyAgentDB
	for _, dummyagentDB := range forRestore {

		dummyagentDB_ID_atBackupTime := dummyagentDB.ID
		dummyagentDB.ID = 0
		_, err := backRepoDummyAgent.db.Create(dummyagentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB[dummyagentDB.ID] = dummyagentDB
		BackRepoDummyAgentid_atBckpTime_newID[dummyagentDB_ID_atBackupTime] = dummyagentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DummyAgent file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DummyAgent>id_atBckpTime_newID
// to compute new index
func (backRepoDummyAgent *BackRepoDummyAgentStruct) RestorePhaseTwo() {

	for _, dummyagentDB := range backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB {

		// next line of code is to avert unused variable compilation error
		_ = dummyagentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoDummyAgent.db.Model(dummyagentDB)
		_, err := db.Updates(*dummyagentDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoDummyAgent.ResetReversePointers commits all staged instances of DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, dummyagent := range backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr {
		backRepoDummyAgent.ResetReversePointersInstance(backRepo, idx, dummyagent)
	}

	return
}

func (backRepoDummyAgent *BackRepoDummyAgentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, dummyagent *models.DummyAgent) (Error error) {

	// fetch matching dummyagentDB
	if dummyagentDB, ok := backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB[idx]; ok {
		_ = dummyagentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDummyAgentid_atBckpTime_newID map[uint]uint
