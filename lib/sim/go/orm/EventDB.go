// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/sim/go/db"
	"github.com/fullstack-lang/gong/lib/sim/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Event_sql sql.NullBool
var dummy_Event_time time.Duration
var dummy_Event_sort sort.Float64Slice

// EventAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model eventAPI
type EventAPI struct {
	gorm.Model

	models.Event_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EventPointersEncoding EventPointersEncoding
}

// EventPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EventPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EventDB describes a event in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model eventDB
type EventDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field eventDB.Name
	Name_Data sql.NullString

	// Declation for basic field eventDB.Duration
	Duration_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EventPointersEncoding
}

// EventDBs arrays eventDBs
// swagger:response eventDBsResponse
type EventDBs []EventDB

// EventDBResponse provides response
// swagger:response eventDBResponse
type EventDBResponse struct {
	EventDB
}

// EventWOP is a Event without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EventWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Duration time.Duration `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Event_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Duration",
}

type BackRepoEventStruct struct {
	// stores EventDB according to their gorm ID
	Map_EventDBID_EventDB map[uint]*EventDB

	// stores EventDB ID according to Event address
	Map_EventPtr_EventDBID map[*models.Event]uint

	// stores Event according to their gorm ID
	Map_EventDBID_EventPtr map[uint]*models.Event

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoEvent *BackRepoEventStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEvent.stage
	return
}

func (backRepoEvent *BackRepoEventStruct) GetDB() db.DBInterface {
	return backRepoEvent.db
}

// GetEventDBFromEventPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEvent *BackRepoEventStruct) GetEventDBFromEventPtr(event *models.Event) (eventDB *EventDB) {
	id := backRepoEvent.Map_EventPtr_EventDBID[event]
	eventDB = backRepoEvent.Map_EventDBID_EventDB[id]
	return
}

// BackRepoEvent.CommitPhaseOne commits all staged instances of Event to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEvent *BackRepoEventStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var events []*models.Event
	for event := range stage.Events {
		events = append(events, event)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(events, func(i, j int) bool {
		return stage.EventMap_Staged_Order[events[i]] < stage.EventMap_Staged_Order[events[j]]
	})

	for _, event := range events {
		backRepoEvent.CommitPhaseOneInstance(event)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, event := range backRepoEvent.Map_EventDBID_EventPtr {
		if _, ok := stage.Events[event]; !ok {
			backRepoEvent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEvent.CommitDeleteInstance commits deletion of Event to the BackRepo
func (backRepoEvent *BackRepoEventStruct) CommitDeleteInstance(id uint) (Error error) {

	event := backRepoEvent.Map_EventDBID_EventPtr[id]

	// event is not staged anymore, remove eventDB
	eventDB := backRepoEvent.Map_EventDBID_EventDB[id]
	db, _ := backRepoEvent.db.Unscoped()
	_, err := db.Delete(eventDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoEvent.Map_EventPtr_EventDBID, event)
	delete(backRepoEvent.Map_EventDBID_EventPtr, id)
	delete(backRepoEvent.Map_EventDBID_EventDB, id)

	return
}

// BackRepoEvent.CommitPhaseOneInstance commits event staged instances of Event to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEvent *BackRepoEventStruct) CommitPhaseOneInstance(event *models.Event) (Error error) {

	// check if the event is not commited yet
	if _, ok := backRepoEvent.Map_EventPtr_EventDBID[event]; ok {
		return
	}

	// initiate event
	var eventDB EventDB
	eventDB.CopyBasicFieldsFromEvent(event)

	_, err := backRepoEvent.db.Create(&eventDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoEvent.Map_EventPtr_EventDBID[event] = eventDB.ID
	backRepoEvent.Map_EventDBID_EventPtr[eventDB.ID] = event
	backRepoEvent.Map_EventDBID_EventDB[eventDB.ID] = &eventDB

	return
}

// BackRepoEvent.CommitPhaseTwo commits all staged instances of Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, event := range backRepoEvent.Map_EventDBID_EventPtr {
		backRepoEvent.CommitPhaseTwoInstance(backRepo, idx, event)
	}

	return
}

// BackRepoEvent.CommitPhaseTwoInstance commits {{structname }} of models.Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, event *models.Event) (Error error) {

	// fetch matching eventDB
	if eventDB, ok := backRepoEvent.Map_EventDBID_EventDB[idx]; ok {

		eventDB.CopyBasicFieldsFromEvent(event)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoEvent.db.Save(eventDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Event intance %s", event.Name))
		return err
	}

	return
}

// BackRepoEvent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEvent *BackRepoEventStruct) CheckoutPhaseOne() (Error error) {

	eventDBArray := make([]EventDB, 0)
	_, err := backRepoEvent.db.Find(&eventDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	eventInstancesToBeRemovedFromTheStage := make(map[*models.Event]any)
	for key, value := range backRepoEvent.stage.Events {
		eventInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, eventDB := range eventDBArray {
		backRepoEvent.CheckoutPhaseOneInstance(&eventDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		event, ok := backRepoEvent.Map_EventDBID_EventPtr[eventDB.ID]
		if ok {
			delete(eventInstancesToBeRemovedFromTheStage, event)
		}
	}

	// remove from stage and back repo's 3 maps all events that are not in the checkout
	for event := range eventInstancesToBeRemovedFromTheStage {
		event.Unstage(backRepoEvent.GetStage())

		// remove instance from the back repo 3 maps
		eventID := backRepoEvent.Map_EventPtr_EventDBID[event]
		delete(backRepoEvent.Map_EventPtr_EventDBID, event)
		delete(backRepoEvent.Map_EventDBID_EventDB, eventID)
		delete(backRepoEvent.Map_EventDBID_EventPtr, eventID)
	}

	return
}

// CheckoutPhaseOneInstance takes a eventDB that has been found in the DB, updates the backRepo and stages the
// models version of the eventDB
func (backRepoEvent *BackRepoEventStruct) CheckoutPhaseOneInstance(eventDB *EventDB) (Error error) {

	event, ok := backRepoEvent.Map_EventDBID_EventPtr[eventDB.ID]
	if !ok {
		event = new(models.Event)

		backRepoEvent.Map_EventDBID_EventPtr[eventDB.ID] = event
		backRepoEvent.Map_EventPtr_EventDBID[event] = eventDB.ID

		// append model store with the new element
		event.Name = eventDB.Name_Data.String
		event.Stage(backRepoEvent.GetStage())
	}
	eventDB.CopyBasicFieldsToEvent(event)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	event.Stage(backRepoEvent.GetStage())

	// preserve pointer to eventDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EventDBID_EventDB)[eventDB hold variable pointers
	eventDB_Data := *eventDB
	preservedPtrToEvent := &eventDB_Data
	backRepoEvent.Map_EventDBID_EventDB[eventDB.ID] = preservedPtrToEvent

	return
}

// BackRepoEvent.CheckoutPhaseTwo Checkouts all staged instances of Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, eventDB := range backRepoEvent.Map_EventDBID_EventDB {
		backRepoEvent.CheckoutPhaseTwoInstance(backRepo, eventDB)
	}
	return
}

// BackRepoEvent.CheckoutPhaseTwoInstance Checkouts staged instances of Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, eventDB *EventDB) (Error error) {

	event := backRepoEvent.Map_EventDBID_EventPtr[eventDB.ID]

	eventDB.DecodePointers(backRepo, event)

	return
}

func (eventDB *EventDB) DecodePointers(backRepo *BackRepoStruct, event *models.Event) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEvent allows commit of a single event (if already staged)
func (backRepo *BackRepoStruct) CommitEvent(event *models.Event) {
	backRepo.BackRepoEvent.CommitPhaseOneInstance(event)
	if id, ok := backRepo.BackRepoEvent.Map_EventPtr_EventDBID[event]; ok {
		backRepo.BackRepoEvent.CommitPhaseTwoInstance(backRepo, id, event)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEvent allows checkout of a single event (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEvent(event *models.Event) {
	// check if the event is staged
	if _, ok := backRepo.BackRepoEvent.Map_EventPtr_EventDBID[event]; ok {

		if id, ok := backRepo.BackRepoEvent.Map_EventPtr_EventDBID[event]; ok {
			var eventDB EventDB
			eventDB.ID = id

			if _, err := backRepo.BackRepoEvent.db.First(&eventDB, id); err != nil {
				log.Fatalln("CheckoutEvent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEvent.CheckoutPhaseOneInstance(&eventDB)
			backRepo.BackRepoEvent.CheckoutPhaseTwoInstance(backRepo, &eventDB)
		}
	}
}

// CopyBasicFieldsFromEvent
func (eventDB *EventDB) CopyBasicFieldsFromEvent(event *models.Event) {
	// insertion point for fields commit

	eventDB.Name_Data.String = event.Name
	eventDB.Name_Data.Valid = true

	eventDB.Duration_Data.Int64 = int64(event.Duration)
	eventDB.Duration_Data.Valid = true
}

// CopyBasicFieldsFromEvent_WOP
func (eventDB *EventDB) CopyBasicFieldsFromEvent_WOP(event *models.Event_WOP) {
	// insertion point for fields commit

	eventDB.Name_Data.String = event.Name
	eventDB.Name_Data.Valid = true

	eventDB.Duration_Data.Int64 = int64(event.Duration)
	eventDB.Duration_Data.Valid = true
}

// CopyBasicFieldsFromEventWOP
func (eventDB *EventDB) CopyBasicFieldsFromEventWOP(event *EventWOP) {
	// insertion point for fields commit

	eventDB.Name_Data.String = event.Name
	eventDB.Name_Data.Valid = true

	eventDB.Duration_Data.Int64 = int64(event.Duration)
	eventDB.Duration_Data.Valid = true
}

// CopyBasicFieldsToEvent
func (eventDB *EventDB) CopyBasicFieldsToEvent(event *models.Event) {
	// insertion point for checkout of basic fields (back repo to stage)
	event.Name = eventDB.Name_Data.String
	event.Duration = time.Duration(eventDB.Duration_Data.Int64)
}

// CopyBasicFieldsToEvent_WOP
func (eventDB *EventDB) CopyBasicFieldsToEvent_WOP(event *models.Event_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	event.Name = eventDB.Name_Data.String
	event.Duration = time.Duration(eventDB.Duration_Data.Int64)
}

// CopyBasicFieldsToEventWOP
func (eventDB *EventDB) CopyBasicFieldsToEventWOP(event *EventWOP) {
	event.ID = int(eventDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	event.Name = eventDB.Name_Data.String
	event.Duration = time.Duration(eventDB.Duration_Data.Int64)
}

// Backup generates a json file from a slice of all EventDB instances in the backrepo
func (backRepoEvent *BackRepoEventStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EventDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EventDB, 0)
	for _, eventDB := range backRepoEvent.Map_EventDBID_EventDB {
		forBackup = append(forBackup, eventDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Event ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Event file", err.Error())
	}
}

// Backup generates a json file from a slice of all EventDB instances in the backrepo
func (backRepoEvent *BackRepoEventStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EventDB, 0)
	for _, eventDB := range backRepoEvent.Map_EventDBID_EventDB {
		forBackup = append(forBackup, eventDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Event")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Event_Fields, -1)
	for _, eventDB := range forBackup {

		var eventWOP EventWOP
		eventDB.CopyBasicFieldsToEventWOP(&eventWOP)

		row := sh.AddRow()
		row.WriteStruct(&eventWOP, -1)
	}
}

// RestoreXL from the "Event" sheet all EventDB instances
func (backRepoEvent *BackRepoEventStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEventid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Event"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEvent.rowVisitorEvent)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEvent *BackRepoEventStruct) rowVisitorEvent(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var eventWOP EventWOP
		row.ReadStruct(&eventWOP)

		// add the unmarshalled struct to the stage
		eventDB := new(EventDB)
		eventDB.CopyBasicFieldsFromEventWOP(&eventWOP)

		eventDB_ID_atBackupTime := eventDB.ID
		eventDB.ID = 0
		_, err := backRepoEvent.db.Create(eventDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEvent.Map_EventDBID_EventDB[eventDB.ID] = eventDB
		BackRepoEventid_atBckpTime_newID[eventDB_ID_atBackupTime] = eventDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EventDB.json" in dirPath that stores an array
// of EventDB and stores it in the database
// the map BackRepoEventid_atBckpTime_newID is updated accordingly
func (backRepoEvent *BackRepoEventStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEventid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EventDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Event file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EventDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EventDBID_EventDB
	for _, eventDB := range forRestore {

		eventDB_ID_atBackupTime := eventDB.ID
		eventDB.ID = 0
		_, err := backRepoEvent.db.Create(eventDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEvent.Map_EventDBID_EventDB[eventDB.ID] = eventDB
		BackRepoEventid_atBckpTime_newID[eventDB_ID_atBackupTime] = eventDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Event file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Event>id_atBckpTime_newID
// to compute new index
func (backRepoEvent *BackRepoEventStruct) RestorePhaseTwo() {

	for _, eventDB := range backRepoEvent.Map_EventDBID_EventDB {

		// next line of code is to avert unused variable compilation error
		_ = eventDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoEvent.db.Model(eventDB)
		_, err := db.Updates(*eventDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoEvent.ResetReversePointers commits all staged instances of Event to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEvent *BackRepoEventStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, event := range backRepoEvent.Map_EventDBID_EventPtr {
		backRepoEvent.ResetReversePointersInstance(backRepo, idx, event)
	}

	return
}

func (backRepoEvent *BackRepoEventStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, event *models.Event) (Error error) {

	// fetch matching eventDB
	if eventDB, ok := backRepoEvent.Map_EventDBID_EventDB[idx]; ok {
		_ = eventDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEventid_atBckpTime_newID map[uint]uint
