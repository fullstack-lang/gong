// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/sim/go/db"
	"github.com/fullstack-lang/gong/lib/sim/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_UpdateState_sql sql.NullBool
var dummy_UpdateState_time time.Duration
var dummy_UpdateState_sort sort.Float64Slice

// UpdateStateAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model updatestateAPI
type UpdateStateAPI struct {
	gorm.Model

	models.UpdateState_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	UpdateStatePointersEncoding UpdateStatePointersEncoding
}

// UpdateStatePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type UpdateStatePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// UpdateStateDB describes a updatestate in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model updatestateDB
type UpdateStateDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field updatestateDB.Name
	Name_Data sql.NullString

	// Declation for basic field updatestateDB.Duration
	Duration_Data sql.NullInt64

	// Declation for basic field updatestateDB.Period
	Period_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	UpdateStatePointersEncoding
}

// UpdateStateDBs arrays updatestateDBs
// swagger:response updatestateDBsResponse
type UpdateStateDBs []UpdateStateDB

// UpdateStateDBResponse provides response
// swagger:response updatestateDBResponse
type UpdateStateDBResponse struct {
	UpdateStateDB
}

// UpdateStateWOP is a UpdateState without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type UpdateStateWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Duration time.Duration `xlsx:"2"`

	Period time.Duration `xlsx:"3"`
	// insertion for WOP pointer fields
}

var UpdateState_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Duration",
	"Period",
}

type BackRepoUpdateStateStruct struct {
	// stores UpdateStateDB according to their gorm ID
	Map_UpdateStateDBID_UpdateStateDB map[uint]*UpdateStateDB

	// stores UpdateStateDB ID according to UpdateState address
	Map_UpdateStatePtr_UpdateStateDBID map[*models.UpdateState]uint

	// stores UpdateState according to their gorm ID
	Map_UpdateStateDBID_UpdateStatePtr map[uint]*models.UpdateState

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoUpdateState *BackRepoUpdateStateStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoUpdateState.stage
	return
}

func (backRepoUpdateState *BackRepoUpdateStateStruct) GetDB() db.DBInterface {
	return backRepoUpdateState.db
}

// GetUpdateStateDBFromUpdateStatePtr is a handy function to access the back repo instance from the stage instance
func (backRepoUpdateState *BackRepoUpdateStateStruct) GetUpdateStateDBFromUpdateStatePtr(updatestate *models.UpdateState) (updatestateDB *UpdateStateDB) {
	id := backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID[updatestate]
	updatestateDB = backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB[id]
	return
}

// BackRepoUpdateState.CommitPhaseOne commits all staged instances of UpdateState to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var updatestates []*models.UpdateState
	for updatestate := range stage.UpdateStates {
		updatestates = append(updatestates, updatestate)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(updatestates, func(i, j int) bool {
		return stage.UpdateStateMap_Staged_Order[updatestates[i]] < stage.UpdateStateMap_Staged_Order[updatestates[j]]
	})

	for _, updatestate := range updatestates {
		backRepoUpdateState.CommitPhaseOneInstance(updatestate)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, updatestate := range backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr {
		if _, ok := stage.UpdateStates[updatestate]; !ok {
			backRepoUpdateState.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoUpdateState.CommitDeleteInstance commits deletion of UpdateState to the BackRepo
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitDeleteInstance(id uint) (Error error) {

	updatestate := backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr[id]

	// updatestate is not staged anymore, remove updatestateDB
	updatestateDB := backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB[id]
	db, _ := backRepoUpdateState.db.Unscoped()
	_, err := db.Delete(updatestateDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID, updatestate)
	delete(backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr, id)
	delete(backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB, id)

	return
}

// BackRepoUpdateState.CommitPhaseOneInstance commits updatestate staged instances of UpdateState to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitPhaseOneInstance(updatestate *models.UpdateState) (Error error) {

	// check if the updatestate is not commited yet
	if _, ok := backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID[updatestate]; ok {
		return
	}

	// initiate updatestate
	var updatestateDB UpdateStateDB
	updatestateDB.CopyBasicFieldsFromUpdateState(updatestate)

	_, err := backRepoUpdateState.db.Create(&updatestateDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID[updatestate] = updatestateDB.ID
	backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr[updatestateDB.ID] = updatestate
	backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB[updatestateDB.ID] = &updatestateDB

	return
}

// BackRepoUpdateState.CommitPhaseTwo commits all staged instances of UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, updatestate := range backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr {
		backRepoUpdateState.CommitPhaseTwoInstance(backRepo, idx, updatestate)
	}

	return
}

// BackRepoUpdateState.CommitPhaseTwoInstance commits {{structname }} of models.UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, updatestate *models.UpdateState) (Error error) {

	// fetch matching updatestateDB
	if updatestateDB, ok := backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB[idx]; ok {

		updatestateDB.CopyBasicFieldsFromUpdateState(updatestate)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoUpdateState.db.Save(updatestateDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown UpdateState intance %s", updatestate.Name))
		return err
	}

	return
}

// BackRepoUpdateState.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoUpdateState *BackRepoUpdateStateStruct) CheckoutPhaseOne() (Error error) {

	updatestateDBArray := make([]UpdateStateDB, 0)
	_, err := backRepoUpdateState.db.Find(&updatestateDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	updatestateInstancesToBeRemovedFromTheStage := make(map[*models.UpdateState]any)
	for key, value := range backRepoUpdateState.stage.UpdateStates {
		updatestateInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, updatestateDB := range updatestateDBArray {
		backRepoUpdateState.CheckoutPhaseOneInstance(&updatestateDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		updatestate, ok := backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr[updatestateDB.ID]
		if ok {
			delete(updatestateInstancesToBeRemovedFromTheStage, updatestate)
		}
	}

	// remove from stage and back repo's 3 maps all updatestates that are not in the checkout
	for updatestate := range updatestateInstancesToBeRemovedFromTheStage {
		updatestate.Unstage(backRepoUpdateState.GetStage())

		// remove instance from the back repo 3 maps
		updatestateID := backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID[updatestate]
		delete(backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID, updatestate)
		delete(backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB, updatestateID)
		delete(backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr, updatestateID)
	}

	return
}

// CheckoutPhaseOneInstance takes a updatestateDB that has been found in the DB, updates the backRepo and stages the
// models version of the updatestateDB
func (backRepoUpdateState *BackRepoUpdateStateStruct) CheckoutPhaseOneInstance(updatestateDB *UpdateStateDB) (Error error) {

	updatestate, ok := backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr[updatestateDB.ID]
	if !ok {
		updatestate = new(models.UpdateState)

		backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr[updatestateDB.ID] = updatestate
		backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID[updatestate] = updatestateDB.ID

		// append model store with the new element
		updatestate.Name = updatestateDB.Name_Data.String
		updatestate.Stage(backRepoUpdateState.GetStage())
	}
	updatestateDB.CopyBasicFieldsToUpdateState(updatestate)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	updatestate.Stage(backRepoUpdateState.GetStage())

	// preserve pointer to updatestateDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_UpdateStateDBID_UpdateStateDB)[updatestateDB hold variable pointers
	updatestateDB_Data := *updatestateDB
	preservedPtrToUpdateState := &updatestateDB_Data
	backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB[updatestateDB.ID] = preservedPtrToUpdateState

	return
}

// BackRepoUpdateState.CheckoutPhaseTwo Checkouts all staged instances of UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, updatestateDB := range backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB {
		backRepoUpdateState.CheckoutPhaseTwoInstance(backRepo, updatestateDB)
	}
	return
}

// BackRepoUpdateState.CheckoutPhaseTwoInstance Checkouts staged instances of UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, updatestateDB *UpdateStateDB) (Error error) {

	updatestate := backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr[updatestateDB.ID]

	updatestateDB.DecodePointers(backRepo, updatestate)

	return
}

func (updatestateDB *UpdateStateDB) DecodePointers(backRepo *BackRepoStruct, updatestate *models.UpdateState) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitUpdateState allows commit of a single updatestate (if already staged)
func (backRepo *BackRepoStruct) CommitUpdateState(updatestate *models.UpdateState) {
	backRepo.BackRepoUpdateState.CommitPhaseOneInstance(updatestate)
	if id, ok := backRepo.BackRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID[updatestate]; ok {
		backRepo.BackRepoUpdateState.CommitPhaseTwoInstance(backRepo, id, updatestate)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitUpdateState allows checkout of a single updatestate (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutUpdateState(updatestate *models.UpdateState) {
	// check if the updatestate is staged
	if _, ok := backRepo.BackRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID[updatestate]; ok {

		if id, ok := backRepo.BackRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID[updatestate]; ok {
			var updatestateDB UpdateStateDB
			updatestateDB.ID = id

			if _, err := backRepo.BackRepoUpdateState.db.First(&updatestateDB, id); err != nil {
				log.Fatalln("CheckoutUpdateState : Problem with getting object with id:", id)
			}
			backRepo.BackRepoUpdateState.CheckoutPhaseOneInstance(&updatestateDB)
			backRepo.BackRepoUpdateState.CheckoutPhaseTwoInstance(backRepo, &updatestateDB)
		}
	}
}

// CopyBasicFieldsFromUpdateState
func (updatestateDB *UpdateStateDB) CopyBasicFieldsFromUpdateState(updatestate *models.UpdateState) {
	// insertion point for fields commit

	updatestateDB.Name_Data.String = updatestate.Name
	updatestateDB.Name_Data.Valid = true

	updatestateDB.Duration_Data.Int64 = int64(updatestate.Duration)
	updatestateDB.Duration_Data.Valid = true

	updatestateDB.Period_Data.Int64 = int64(updatestate.Period)
	updatestateDB.Period_Data.Valid = true
}

// CopyBasicFieldsFromUpdateState_WOP
func (updatestateDB *UpdateStateDB) CopyBasicFieldsFromUpdateState_WOP(updatestate *models.UpdateState_WOP) {
	// insertion point for fields commit

	updatestateDB.Name_Data.String = updatestate.Name
	updatestateDB.Name_Data.Valid = true

	updatestateDB.Duration_Data.Int64 = int64(updatestate.Duration)
	updatestateDB.Duration_Data.Valid = true

	updatestateDB.Period_Data.Int64 = int64(updatestate.Period)
	updatestateDB.Period_Data.Valid = true
}

// CopyBasicFieldsFromUpdateStateWOP
func (updatestateDB *UpdateStateDB) CopyBasicFieldsFromUpdateStateWOP(updatestate *UpdateStateWOP) {
	// insertion point for fields commit

	updatestateDB.Name_Data.String = updatestate.Name
	updatestateDB.Name_Data.Valid = true

	updatestateDB.Duration_Data.Int64 = int64(updatestate.Duration)
	updatestateDB.Duration_Data.Valid = true

	updatestateDB.Period_Data.Int64 = int64(updatestate.Period)
	updatestateDB.Period_Data.Valid = true
}

// CopyBasicFieldsToUpdateState
func (updatestateDB *UpdateStateDB) CopyBasicFieldsToUpdateState(updatestate *models.UpdateState) {
	// insertion point for checkout of basic fields (back repo to stage)
	updatestate.Name = updatestateDB.Name_Data.String
	updatestate.Duration = time.Duration(updatestateDB.Duration_Data.Int64)
	updatestate.Period = time.Duration(updatestateDB.Period_Data.Int64)
}

// CopyBasicFieldsToUpdateState_WOP
func (updatestateDB *UpdateStateDB) CopyBasicFieldsToUpdateState_WOP(updatestate *models.UpdateState_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	updatestate.Name = updatestateDB.Name_Data.String
	updatestate.Duration = time.Duration(updatestateDB.Duration_Data.Int64)
	updatestate.Period = time.Duration(updatestateDB.Period_Data.Int64)
}

// CopyBasicFieldsToUpdateStateWOP
func (updatestateDB *UpdateStateDB) CopyBasicFieldsToUpdateStateWOP(updatestate *UpdateStateWOP) {
	updatestate.ID = int(updatestateDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	updatestate.Name = updatestateDB.Name_Data.String
	updatestate.Duration = time.Duration(updatestateDB.Duration_Data.Int64)
	updatestate.Period = time.Duration(updatestateDB.Period_Data.Int64)
}

// Backup generates a json file from a slice of all UpdateStateDB instances in the backrepo
func (backRepoUpdateState *BackRepoUpdateStateStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "UpdateStateDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*UpdateStateDB, 0)
	for _, updatestateDB := range backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB {
		forBackup = append(forBackup, updatestateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json UpdateState ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json UpdateState file", err.Error())
	}
}

// Backup generates a json file from a slice of all UpdateStateDB instances in the backrepo
func (backRepoUpdateState *BackRepoUpdateStateStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*UpdateStateDB, 0)
	for _, updatestateDB := range backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB {
		forBackup = append(forBackup, updatestateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("UpdateState")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&UpdateState_Fields, -1)
	for _, updatestateDB := range forBackup {

		var updatestateWOP UpdateStateWOP
		updatestateDB.CopyBasicFieldsToUpdateStateWOP(&updatestateWOP)

		row := sh.AddRow()
		row.WriteStruct(&updatestateWOP, -1)
	}
}

// RestoreXL from the "UpdateState" sheet all UpdateStateDB instances
func (backRepoUpdateState *BackRepoUpdateStateStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoUpdateStateid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["UpdateState"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoUpdateState.rowVisitorUpdateState)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoUpdateState *BackRepoUpdateStateStruct) rowVisitorUpdateState(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var updatestateWOP UpdateStateWOP
		row.ReadStruct(&updatestateWOP)

		// add the unmarshalled struct to the stage
		updatestateDB := new(UpdateStateDB)
		updatestateDB.CopyBasicFieldsFromUpdateStateWOP(&updatestateWOP)

		updatestateDB_ID_atBackupTime := updatestateDB.ID
		updatestateDB.ID = 0
		_, err := backRepoUpdateState.db.Create(updatestateDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB[updatestateDB.ID] = updatestateDB
		BackRepoUpdateStateid_atBckpTime_newID[updatestateDB_ID_atBackupTime] = updatestateDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "UpdateStateDB.json" in dirPath that stores an array
// of UpdateStateDB and stores it in the database
// the map BackRepoUpdateStateid_atBckpTime_newID is updated accordingly
func (backRepoUpdateState *BackRepoUpdateStateStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoUpdateStateid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "UpdateStateDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json UpdateState file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*UpdateStateDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_UpdateStateDBID_UpdateStateDB
	for _, updatestateDB := range forRestore {

		updatestateDB_ID_atBackupTime := updatestateDB.ID
		updatestateDB.ID = 0
		_, err := backRepoUpdateState.db.Create(updatestateDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB[updatestateDB.ID] = updatestateDB
		BackRepoUpdateStateid_atBckpTime_newID[updatestateDB_ID_atBackupTime] = updatestateDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json UpdateState file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<UpdateState>id_atBckpTime_newID
// to compute new index
func (backRepoUpdateState *BackRepoUpdateStateStruct) RestorePhaseTwo() {

	for _, updatestateDB := range backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB {

		// next line of code is to avert unused variable compilation error
		_ = updatestateDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoUpdateState.db.Model(updatestateDB)
		_, err := db.Updates(*updatestateDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoUpdateState.ResetReversePointers commits all staged instances of UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, updatestate := range backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr {
		backRepoUpdateState.ResetReversePointersInstance(backRepo, idx, updatestate)
	}

	return
}

func (backRepoUpdateState *BackRepoUpdateStateStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, updatestate *models.UpdateState) (Error error) {

	// fetch matching updatestateDB
	if updatestateDB, ok := backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB[idx]; ok {
		_ = updatestateDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoUpdateStateid_atBckpTime_newID map[uint]uint
