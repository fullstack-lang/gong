// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/sim/go/db"
	"github.com/fullstack-lang/gong/lib/sim/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Command_sql sql.NullBool
var dummy_Command_time time.Duration
var dummy_Command_sort sort.Float64Slice

// CommandAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model commandAPI
type CommandAPI struct {
	gorm.Model

	models.Command_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CommandPointersEncoding CommandPointersEncoding
}

// CommandPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CommandPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Engine is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EngineID sql.NullInt64
}

// CommandDB describes a command in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model commandDB
type CommandDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field commandDB.Name
	Name_Data sql.NullString

	// Declation for basic field commandDB.Command
	Command_Data sql.NullString

	// Declation for basic field commandDB.CommandDate
	CommandDate_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CommandPointersEncoding
}

// CommandDBs arrays commandDBs
// swagger:response commandDBsResponse
type CommandDBs []CommandDB

// CommandDBResponse provides response
// swagger:response commandDBResponse
type CommandDBResponse struct {
	CommandDB
}

// CommandWOP is a Command without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CommandWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Command models.CommandType `xlsx:"2"`

	CommandDate string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Command_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Command",
	"CommandDate",
}

type BackRepoCommandStruct struct {
	// stores CommandDB according to their gorm ID
	Map_CommandDBID_CommandDB map[uint]*CommandDB

	// stores CommandDB ID according to Command address
	Map_CommandPtr_CommandDBID map[*models.Command]uint

	// stores Command according to their gorm ID
	Map_CommandDBID_CommandPtr map[uint]*models.Command

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoCommand *BackRepoCommandStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCommand.stage
	return
}

func (backRepoCommand *BackRepoCommandStruct) GetDB() db.DBInterface {
	return backRepoCommand.db
}

// GetCommandDBFromCommandPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCommand *BackRepoCommandStruct) GetCommandDBFromCommandPtr(command *models.Command) (commandDB *CommandDB) {
	id := backRepoCommand.Map_CommandPtr_CommandDBID[command]
	commandDB = backRepoCommand.Map_CommandDBID_CommandDB[id]
	return
}

// BackRepoCommand.CommitPhaseOne commits all staged instances of Command to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCommand *BackRepoCommandStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var commands []*models.Command
	for command := range stage.Commands {
		commands = append(commands, command)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(commands, func(i, j int) bool {
		return stage.CommandMap_Staged_Order[commands[i]] < stage.CommandMap_Staged_Order[commands[j]]
	})

	for _, command := range commands {
		backRepoCommand.CommitPhaseOneInstance(command)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, command := range backRepoCommand.Map_CommandDBID_CommandPtr {
		if _, ok := stage.Commands[command]; !ok {
			backRepoCommand.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCommand.CommitDeleteInstance commits deletion of Command to the BackRepo
func (backRepoCommand *BackRepoCommandStruct) CommitDeleteInstance(id uint) (Error error) {

	command := backRepoCommand.Map_CommandDBID_CommandPtr[id]

	// command is not staged anymore, remove commandDB
	commandDB := backRepoCommand.Map_CommandDBID_CommandDB[id]
	db, _ := backRepoCommand.db.Unscoped()
	_, err := db.Delete(commandDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoCommand.Map_CommandPtr_CommandDBID, command)
	delete(backRepoCommand.Map_CommandDBID_CommandPtr, id)
	delete(backRepoCommand.Map_CommandDBID_CommandDB, id)

	return
}

// BackRepoCommand.CommitPhaseOneInstance commits command staged instances of Command to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCommand *BackRepoCommandStruct) CommitPhaseOneInstance(command *models.Command) (Error error) {

	// check if the command is not commited yet
	if _, ok := backRepoCommand.Map_CommandPtr_CommandDBID[command]; ok {
		return
	}

	// initiate command
	var commandDB CommandDB
	commandDB.CopyBasicFieldsFromCommand(command)

	_, err := backRepoCommand.db.Create(&commandDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoCommand.Map_CommandPtr_CommandDBID[command] = commandDB.ID
	backRepoCommand.Map_CommandDBID_CommandPtr[commandDB.ID] = command
	backRepoCommand.Map_CommandDBID_CommandDB[commandDB.ID] = &commandDB

	return
}

// BackRepoCommand.CommitPhaseTwo commits all staged instances of Command to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommand *BackRepoCommandStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, command := range backRepoCommand.Map_CommandDBID_CommandPtr {
		backRepoCommand.CommitPhaseTwoInstance(backRepo, idx, command)
	}

	return
}

// BackRepoCommand.CommitPhaseTwoInstance commits {{structname }} of models.Command to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommand *BackRepoCommandStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, command *models.Command) (Error error) {

	// fetch matching commandDB
	if commandDB, ok := backRepoCommand.Map_CommandDBID_CommandDB[idx]; ok {

		commandDB.CopyBasicFieldsFromCommand(command)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value command.Engine translates to updating the command.EngineID
		commandDB.EngineID.Valid = true // allow for a 0 value (nil association)
		if command.Engine != nil {
			if EngineId, ok := backRepo.BackRepoEngine.Map_EnginePtr_EngineDBID[command.Engine]; ok {
				commandDB.EngineID.Int64 = int64(EngineId)
				commandDB.EngineID.Valid = true
			}
		} else {
			commandDB.EngineID.Int64 = 0
			commandDB.EngineID.Valid = true
		}

		_, err := backRepoCommand.db.Save(commandDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Command intance %s", command.Name))
		return err
	}

	return
}

// BackRepoCommand.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCommand *BackRepoCommandStruct) CheckoutPhaseOne() (Error error) {

	commandDBArray := make([]CommandDB, 0)
	_, err := backRepoCommand.db.Find(&commandDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	commandInstancesToBeRemovedFromTheStage := make(map[*models.Command]any)
	for key, value := range backRepoCommand.stage.Commands {
		commandInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, commandDB := range commandDBArray {
		backRepoCommand.CheckoutPhaseOneInstance(&commandDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		command, ok := backRepoCommand.Map_CommandDBID_CommandPtr[commandDB.ID]
		if ok {
			delete(commandInstancesToBeRemovedFromTheStage, command)
		}
	}

	// remove from stage and back repo's 3 maps all commands that are not in the checkout
	for command := range commandInstancesToBeRemovedFromTheStage {
		command.Unstage(backRepoCommand.GetStage())

		// remove instance from the back repo 3 maps
		commandID := backRepoCommand.Map_CommandPtr_CommandDBID[command]
		delete(backRepoCommand.Map_CommandPtr_CommandDBID, command)
		delete(backRepoCommand.Map_CommandDBID_CommandDB, commandID)
		delete(backRepoCommand.Map_CommandDBID_CommandPtr, commandID)
	}

	return
}

// CheckoutPhaseOneInstance takes a commandDB that has been found in the DB, updates the backRepo and stages the
// models version of the commandDB
func (backRepoCommand *BackRepoCommandStruct) CheckoutPhaseOneInstance(commandDB *CommandDB) (Error error) {

	command, ok := backRepoCommand.Map_CommandDBID_CommandPtr[commandDB.ID]
	if !ok {
		command = new(models.Command)

		backRepoCommand.Map_CommandDBID_CommandPtr[commandDB.ID] = command
		backRepoCommand.Map_CommandPtr_CommandDBID[command] = commandDB.ID

		// append model store with the new element
		command.Name = commandDB.Name_Data.String
		command.Stage(backRepoCommand.GetStage())
	}
	commandDB.CopyBasicFieldsToCommand(command)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	command.Stage(backRepoCommand.GetStage())

	// preserve pointer to commandDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CommandDBID_CommandDB)[commandDB hold variable pointers
	commandDB_Data := *commandDB
	preservedPtrToCommand := &commandDB_Data
	backRepoCommand.Map_CommandDBID_CommandDB[commandDB.ID] = preservedPtrToCommand

	return
}

// BackRepoCommand.CheckoutPhaseTwo Checkouts all staged instances of Command to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommand *BackRepoCommandStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, commandDB := range backRepoCommand.Map_CommandDBID_CommandDB {
		backRepoCommand.CheckoutPhaseTwoInstance(backRepo, commandDB)
	}
	return
}

// BackRepoCommand.CheckoutPhaseTwoInstance Checkouts staged instances of Command to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommand *BackRepoCommandStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, commandDB *CommandDB) (Error error) {

	command := backRepoCommand.Map_CommandDBID_CommandPtr[commandDB.ID]

	commandDB.DecodePointers(backRepo, command)

	return
}

func (commandDB *CommandDB) DecodePointers(backRepo *BackRepoStruct, command *models.Command) {

	// insertion point for checkout of pointer encoding
	// Engine field	
	{
		id := commandDB.EngineID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoEngine.Map_EngineDBID_EnginePtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: command.Engine, unknown pointer id", id)
				command.Engine = nil
			} else {
				// updates only if field has changed
				if command.Engine == nil || command.Engine != tmp {
					command.Engine = tmp
				}
			}
		} else {
			command.Engine = nil
		}
	}
	
	return
}

// CommitCommand allows commit of a single command (if already staged)
func (backRepo *BackRepoStruct) CommitCommand(command *models.Command) {
	backRepo.BackRepoCommand.CommitPhaseOneInstance(command)
	if id, ok := backRepo.BackRepoCommand.Map_CommandPtr_CommandDBID[command]; ok {
		backRepo.BackRepoCommand.CommitPhaseTwoInstance(backRepo, id, command)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCommand allows checkout of a single command (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCommand(command *models.Command) {
	// check if the command is staged
	if _, ok := backRepo.BackRepoCommand.Map_CommandPtr_CommandDBID[command]; ok {

		if id, ok := backRepo.BackRepoCommand.Map_CommandPtr_CommandDBID[command]; ok {
			var commandDB CommandDB
			commandDB.ID = id

			if _, err := backRepo.BackRepoCommand.db.First(&commandDB, id); err != nil {
				log.Fatalln("CheckoutCommand : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCommand.CheckoutPhaseOneInstance(&commandDB)
			backRepo.BackRepoCommand.CheckoutPhaseTwoInstance(backRepo, &commandDB)
		}
	}
}

// CopyBasicFieldsFromCommand
func (commandDB *CommandDB) CopyBasicFieldsFromCommand(command *models.Command) {
	// insertion point for fields commit

	commandDB.Name_Data.String = command.Name
	commandDB.Name_Data.Valid = true

	commandDB.Command_Data.String = command.Command.ToString()
	commandDB.Command_Data.Valid = true

	commandDB.CommandDate_Data.String = command.CommandDate
	commandDB.CommandDate_Data.Valid = true
}

// CopyBasicFieldsFromCommand_WOP
func (commandDB *CommandDB) CopyBasicFieldsFromCommand_WOP(command *models.Command_WOP) {
	// insertion point for fields commit

	commandDB.Name_Data.String = command.Name
	commandDB.Name_Data.Valid = true

	commandDB.Command_Data.String = command.Command.ToString()
	commandDB.Command_Data.Valid = true

	commandDB.CommandDate_Data.String = command.CommandDate
	commandDB.CommandDate_Data.Valid = true
}

// CopyBasicFieldsFromCommandWOP
func (commandDB *CommandDB) CopyBasicFieldsFromCommandWOP(command *CommandWOP) {
	// insertion point for fields commit

	commandDB.Name_Data.String = command.Name
	commandDB.Name_Data.Valid = true

	commandDB.Command_Data.String = command.Command.ToString()
	commandDB.Command_Data.Valid = true

	commandDB.CommandDate_Data.String = command.CommandDate
	commandDB.CommandDate_Data.Valid = true
}

// CopyBasicFieldsToCommand
func (commandDB *CommandDB) CopyBasicFieldsToCommand(command *models.Command) {
	// insertion point for checkout of basic fields (back repo to stage)
	command.Name = commandDB.Name_Data.String
	command.Command.FromString(commandDB.Command_Data.String)
	command.CommandDate = commandDB.CommandDate_Data.String
}

// CopyBasicFieldsToCommand_WOP
func (commandDB *CommandDB) CopyBasicFieldsToCommand_WOP(command *models.Command_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	command.Name = commandDB.Name_Data.String
	command.Command.FromString(commandDB.Command_Data.String)
	command.CommandDate = commandDB.CommandDate_Data.String
}

// CopyBasicFieldsToCommandWOP
func (commandDB *CommandDB) CopyBasicFieldsToCommandWOP(command *CommandWOP) {
	command.ID = int(commandDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	command.Name = commandDB.Name_Data.String
	command.Command.FromString(commandDB.Command_Data.String)
	command.CommandDate = commandDB.CommandDate_Data.String
}

// Backup generates a json file from a slice of all CommandDB instances in the backrepo
func (backRepoCommand *BackRepoCommandStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CommandDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CommandDB, 0)
	for _, commandDB := range backRepoCommand.Map_CommandDBID_CommandDB {
		forBackup = append(forBackup, commandDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Command ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Command file", err.Error())
	}
}

// Backup generates a json file from a slice of all CommandDB instances in the backrepo
func (backRepoCommand *BackRepoCommandStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CommandDB, 0)
	for _, commandDB := range backRepoCommand.Map_CommandDBID_CommandDB {
		forBackup = append(forBackup, commandDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Command")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Command_Fields, -1)
	for _, commandDB := range forBackup {

		var commandWOP CommandWOP
		commandDB.CopyBasicFieldsToCommandWOP(&commandWOP)

		row := sh.AddRow()
		row.WriteStruct(&commandWOP, -1)
	}
}

// RestoreXL from the "Command" sheet all CommandDB instances
func (backRepoCommand *BackRepoCommandStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCommandid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Command"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCommand.rowVisitorCommand)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCommand *BackRepoCommandStruct) rowVisitorCommand(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var commandWOP CommandWOP
		row.ReadStruct(&commandWOP)

		// add the unmarshalled struct to the stage
		commandDB := new(CommandDB)
		commandDB.CopyBasicFieldsFromCommandWOP(&commandWOP)

		commandDB_ID_atBackupTime := commandDB.ID
		commandDB.ID = 0
		_, err := backRepoCommand.db.Create(commandDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCommand.Map_CommandDBID_CommandDB[commandDB.ID] = commandDB
		BackRepoCommandid_atBckpTime_newID[commandDB_ID_atBackupTime] = commandDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CommandDB.json" in dirPath that stores an array
// of CommandDB and stores it in the database
// the map BackRepoCommandid_atBckpTime_newID is updated accordingly
func (backRepoCommand *BackRepoCommandStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCommandid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CommandDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Command file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CommandDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CommandDBID_CommandDB
	for _, commandDB := range forRestore {

		commandDB_ID_atBackupTime := commandDB.ID
		commandDB.ID = 0
		_, err := backRepoCommand.db.Create(commandDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCommand.Map_CommandDBID_CommandDB[commandDB.ID] = commandDB
		BackRepoCommandid_atBckpTime_newID[commandDB_ID_atBackupTime] = commandDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Command file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Command>id_atBckpTime_newID
// to compute new index
func (backRepoCommand *BackRepoCommandStruct) RestorePhaseTwo() {

	for _, commandDB := range backRepoCommand.Map_CommandDBID_CommandDB {

		// next line of code is to avert unused variable compilation error
		_ = commandDB

		// insertion point for reindexing pointers encoding
		// reindexing Engine field
		if commandDB.EngineID.Int64 != 0 {
			commandDB.EngineID.Int64 = int64(BackRepoEngineid_atBckpTime_newID[uint(commandDB.EngineID.Int64)])
			commandDB.EngineID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoCommand.db.Model(commandDB)
		_, err := db.Updates(*commandDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoCommand.ResetReversePointers commits all staged instances of Command to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommand *BackRepoCommandStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, command := range backRepoCommand.Map_CommandDBID_CommandPtr {
		backRepoCommand.ResetReversePointersInstance(backRepo, idx, command)
	}

	return
}

func (backRepoCommand *BackRepoCommandStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, command *models.Command) (Error error) {

	// fetch matching commandDB
	if commandDB, ok := backRepoCommand.Map_CommandDBID_CommandDB[idx]; ok {
		_ = commandDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCommandid_atBckpTime_newID map[uint]uint
