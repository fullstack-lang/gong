// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/lib/sim/go/db"
	"github.com/fullstack-lang/gong/lib/sim/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Engine_sql sql.NullBool
var dummy_Engine_time time.Duration
var dummy_Engine_sort sort.Float64Slice

// EngineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model engineAPI
type EngineAPI struct {
	gorm.Model

	models.Engine_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EnginePointersEncoding EnginePointersEncoding
}

// EnginePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EnginePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EngineDB describes a engine in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model engineDB
type EngineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field engineDB.Name
	Name_Data sql.NullString

	// Declation for basic field engineDB.EndTime
	EndTime_Data sql.NullString

	// Declation for basic field engineDB.CurrentTime
	CurrentTime_Data sql.NullString

	// Declation for basic field engineDB.DisplayFormat
	DisplayFormat_Data sql.NullString

	// Declation for basic field engineDB.SecondsSinceStart
	SecondsSinceStart_Data sql.NullFloat64

	// Declation for basic field engineDB.Fired
	Fired_Data sql.NullInt64

	// Declation for basic field engineDB.ControlMode
	ControlMode_Data sql.NullString

	// Declation for basic field engineDB.State
	State_Data sql.NullString

	// Declation for basic field engineDB.Speed
	Speed_Data sql.NullFloat64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EnginePointersEncoding
}

// EngineDBs arrays engineDBs
// swagger:response engineDBsResponse
type EngineDBs []EngineDB

// EngineDBResponse provides response
// swagger:response engineDBResponse
type EngineDBResponse struct {
	EngineDB
}

// EngineWOP is a Engine without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EngineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	EndTime string `xlsx:"2"`

	CurrentTime string `xlsx:"3"`

	DisplayFormat string `xlsx:"4"`

	SecondsSinceStart float64 `xlsx:"5"`

	Fired int `xlsx:"6"`

	ControlMode models.ControlMode `xlsx:"7"`

	State models.EngineState `xlsx:"8"`

	Speed float64 `xlsx:"9"`
	// insertion for WOP pointer fields
}

var Engine_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"EndTime",
	"CurrentTime",
	"DisplayFormat",
	"SecondsSinceStart",
	"Fired",
	"ControlMode",
	"State",
	"Speed",
}

type BackRepoEngineStruct struct {
	// stores EngineDB according to their gorm ID
	Map_EngineDBID_EngineDB map[uint]*EngineDB

	// stores EngineDB ID according to Engine address
	Map_EnginePtr_EngineDBID map[*models.Engine]uint

	// stores Engine according to their gorm ID
	Map_EngineDBID_EnginePtr map[uint]*models.Engine

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoEngine *BackRepoEngineStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEngine.stage
	return
}

func (backRepoEngine *BackRepoEngineStruct) GetDB() db.DBInterface {
	return backRepoEngine.db
}

// GetEngineDBFromEnginePtr is a handy function to access the back repo instance from the stage instance
func (backRepoEngine *BackRepoEngineStruct) GetEngineDBFromEnginePtr(engine *models.Engine) (engineDB *EngineDB) {
	id := backRepoEngine.Map_EnginePtr_EngineDBID[engine]
	engineDB = backRepoEngine.Map_EngineDBID_EngineDB[id]
	return
}

// BackRepoEngine.CommitPhaseOne commits all staged instances of Engine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEngine *BackRepoEngineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var engines []*models.Engine
	for engine := range stage.Engines {
		engines = append(engines, engine)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(engines, func(i, j int) bool {
		return stage.EngineMap_Staged_Order[engines[i]] < stage.EngineMap_Staged_Order[engines[j]]
	})

	for _, engine := range engines {
		backRepoEngine.CommitPhaseOneInstance(engine)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, engine := range backRepoEngine.Map_EngineDBID_EnginePtr {
		if _, ok := stage.Engines[engine]; !ok {
			backRepoEngine.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEngine.CommitDeleteInstance commits deletion of Engine to the BackRepo
func (backRepoEngine *BackRepoEngineStruct) CommitDeleteInstance(id uint) (Error error) {

	engine := backRepoEngine.Map_EngineDBID_EnginePtr[id]

	// engine is not staged anymore, remove engineDB
	engineDB := backRepoEngine.Map_EngineDBID_EngineDB[id]
	db, _ := backRepoEngine.db.Unscoped()
	_, err := db.Delete(engineDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoEngine.Map_EnginePtr_EngineDBID, engine)
	delete(backRepoEngine.Map_EngineDBID_EnginePtr, id)
	delete(backRepoEngine.Map_EngineDBID_EngineDB, id)

	return
}

// BackRepoEngine.CommitPhaseOneInstance commits engine staged instances of Engine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEngine *BackRepoEngineStruct) CommitPhaseOneInstance(engine *models.Engine) (Error error) {

	// check if the engine is not commited yet
	if _, ok := backRepoEngine.Map_EnginePtr_EngineDBID[engine]; ok {
		return
	}

	// initiate engine
	var engineDB EngineDB
	engineDB.CopyBasicFieldsFromEngine(engine)

	_, err := backRepoEngine.db.Create(&engineDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoEngine.Map_EnginePtr_EngineDBID[engine] = engineDB.ID
	backRepoEngine.Map_EngineDBID_EnginePtr[engineDB.ID] = engine
	backRepoEngine.Map_EngineDBID_EngineDB[engineDB.ID] = &engineDB

	return
}

// BackRepoEngine.CommitPhaseTwo commits all staged instances of Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, engine := range backRepoEngine.Map_EngineDBID_EnginePtr {
		backRepoEngine.CommitPhaseTwoInstance(backRepo, idx, engine)
	}

	return
}

// BackRepoEngine.CommitPhaseTwoInstance commits {{structname }} of models.Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, engine *models.Engine) (Error error) {

	// fetch matching engineDB
	if engineDB, ok := backRepoEngine.Map_EngineDBID_EngineDB[idx]; ok {

		engineDB.CopyBasicFieldsFromEngine(engine)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoEngine.db.Save(engineDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Engine intance %s", engine.Name))
		return err
	}

	return
}

// BackRepoEngine.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEngine *BackRepoEngineStruct) CheckoutPhaseOne() (Error error) {

	engineDBArray := make([]EngineDB, 0)
	_, err := backRepoEngine.db.Find(&engineDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	engineInstancesToBeRemovedFromTheStage := make(map[*models.Engine]any)
	for key, value := range backRepoEngine.stage.Engines {
		engineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, engineDB := range engineDBArray {
		backRepoEngine.CheckoutPhaseOneInstance(&engineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		engine, ok := backRepoEngine.Map_EngineDBID_EnginePtr[engineDB.ID]
		if ok {
			delete(engineInstancesToBeRemovedFromTheStage, engine)
		}
	}

	// remove from stage and back repo's 3 maps all engines that are not in the checkout
	for engine := range engineInstancesToBeRemovedFromTheStage {
		engine.Unstage(backRepoEngine.GetStage())

		// remove instance from the back repo 3 maps
		engineID := backRepoEngine.Map_EnginePtr_EngineDBID[engine]
		delete(backRepoEngine.Map_EnginePtr_EngineDBID, engine)
		delete(backRepoEngine.Map_EngineDBID_EngineDB, engineID)
		delete(backRepoEngine.Map_EngineDBID_EnginePtr, engineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a engineDB that has been found in the DB, updates the backRepo and stages the
// models version of the engineDB
func (backRepoEngine *BackRepoEngineStruct) CheckoutPhaseOneInstance(engineDB *EngineDB) (Error error) {

	engine, ok := backRepoEngine.Map_EngineDBID_EnginePtr[engineDB.ID]
	if !ok {
		engine = new(models.Engine)

		backRepoEngine.Map_EngineDBID_EnginePtr[engineDB.ID] = engine
		backRepoEngine.Map_EnginePtr_EngineDBID[engine] = engineDB.ID

		// append model store with the new element
		engine.Name = engineDB.Name_Data.String
		engine.Stage(backRepoEngine.GetStage())
	}
	engineDB.CopyBasicFieldsToEngine(engine)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	engine.Stage(backRepoEngine.GetStage())

	// preserve pointer to engineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EngineDBID_EngineDB)[engineDB hold variable pointers
	engineDB_Data := *engineDB
	preservedPtrToEngine := &engineDB_Data
	backRepoEngine.Map_EngineDBID_EngineDB[engineDB.ID] = preservedPtrToEngine

	return
}

// BackRepoEngine.CheckoutPhaseTwo Checkouts all staged instances of Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, engineDB := range backRepoEngine.Map_EngineDBID_EngineDB {
		backRepoEngine.CheckoutPhaseTwoInstance(backRepo, engineDB)
	}
	return
}

// BackRepoEngine.CheckoutPhaseTwoInstance Checkouts staged instances of Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, engineDB *EngineDB) (Error error) {

	engine := backRepoEngine.Map_EngineDBID_EnginePtr[engineDB.ID]

	engineDB.DecodePointers(backRepo, engine)

	return
}

func (engineDB *EngineDB) DecodePointers(backRepo *BackRepoStruct, engine *models.Engine) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEngine allows commit of a single engine (if already staged)
func (backRepo *BackRepoStruct) CommitEngine(engine *models.Engine) {
	backRepo.BackRepoEngine.CommitPhaseOneInstance(engine)
	if id, ok := backRepo.BackRepoEngine.Map_EnginePtr_EngineDBID[engine]; ok {
		backRepo.BackRepoEngine.CommitPhaseTwoInstance(backRepo, id, engine)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEngine allows checkout of a single engine (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEngine(engine *models.Engine) {
	// check if the engine is staged
	if _, ok := backRepo.BackRepoEngine.Map_EnginePtr_EngineDBID[engine]; ok {

		if id, ok := backRepo.BackRepoEngine.Map_EnginePtr_EngineDBID[engine]; ok {
			var engineDB EngineDB
			engineDB.ID = id

			if _, err := backRepo.BackRepoEngine.db.First(&engineDB, id); err != nil {
				log.Fatalln("CheckoutEngine : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEngine.CheckoutPhaseOneInstance(&engineDB)
			backRepo.BackRepoEngine.CheckoutPhaseTwoInstance(backRepo, &engineDB)
		}
	}
}

// CopyBasicFieldsFromEngine
func (engineDB *EngineDB) CopyBasicFieldsFromEngine(engine *models.Engine) {
	// insertion point for fields commit

	engineDB.Name_Data.String = engine.Name
	engineDB.Name_Data.Valid = true

	engineDB.EndTime_Data.String = engine.EndTime
	engineDB.EndTime_Data.Valid = true

	engineDB.CurrentTime_Data.String = engine.CurrentTime
	engineDB.CurrentTime_Data.Valid = true

	engineDB.DisplayFormat_Data.String = engine.DisplayFormat
	engineDB.DisplayFormat_Data.Valid = true

	engineDB.SecondsSinceStart_Data.Float64 = engine.SecondsSinceStart
	engineDB.SecondsSinceStart_Data.Valid = true

	engineDB.Fired_Data.Int64 = int64(engine.Fired)
	engineDB.Fired_Data.Valid = true

	engineDB.ControlMode_Data.String = engine.ControlMode.ToString()
	engineDB.ControlMode_Data.Valid = true

	engineDB.State_Data.String = engine.State.ToString()
	engineDB.State_Data.Valid = true

	engineDB.Speed_Data.Float64 = engine.Speed
	engineDB.Speed_Data.Valid = true
}

// CopyBasicFieldsFromEngine_WOP
func (engineDB *EngineDB) CopyBasicFieldsFromEngine_WOP(engine *models.Engine_WOP) {
	// insertion point for fields commit

	engineDB.Name_Data.String = engine.Name
	engineDB.Name_Data.Valid = true

	engineDB.EndTime_Data.String = engine.EndTime
	engineDB.EndTime_Data.Valid = true

	engineDB.CurrentTime_Data.String = engine.CurrentTime
	engineDB.CurrentTime_Data.Valid = true

	engineDB.DisplayFormat_Data.String = engine.DisplayFormat
	engineDB.DisplayFormat_Data.Valid = true

	engineDB.SecondsSinceStart_Data.Float64 = engine.SecondsSinceStart
	engineDB.SecondsSinceStart_Data.Valid = true

	engineDB.Fired_Data.Int64 = int64(engine.Fired)
	engineDB.Fired_Data.Valid = true

	engineDB.ControlMode_Data.String = engine.ControlMode.ToString()
	engineDB.ControlMode_Data.Valid = true

	engineDB.State_Data.String = engine.State.ToString()
	engineDB.State_Data.Valid = true

	engineDB.Speed_Data.Float64 = engine.Speed
	engineDB.Speed_Data.Valid = true
}

// CopyBasicFieldsFromEngineWOP
func (engineDB *EngineDB) CopyBasicFieldsFromEngineWOP(engine *EngineWOP) {
	// insertion point for fields commit

	engineDB.Name_Data.String = engine.Name
	engineDB.Name_Data.Valid = true

	engineDB.EndTime_Data.String = engine.EndTime
	engineDB.EndTime_Data.Valid = true

	engineDB.CurrentTime_Data.String = engine.CurrentTime
	engineDB.CurrentTime_Data.Valid = true

	engineDB.DisplayFormat_Data.String = engine.DisplayFormat
	engineDB.DisplayFormat_Data.Valid = true

	engineDB.SecondsSinceStart_Data.Float64 = engine.SecondsSinceStart
	engineDB.SecondsSinceStart_Data.Valid = true

	engineDB.Fired_Data.Int64 = int64(engine.Fired)
	engineDB.Fired_Data.Valid = true

	engineDB.ControlMode_Data.String = engine.ControlMode.ToString()
	engineDB.ControlMode_Data.Valid = true

	engineDB.State_Data.String = engine.State.ToString()
	engineDB.State_Data.Valid = true

	engineDB.Speed_Data.Float64 = engine.Speed
	engineDB.Speed_Data.Valid = true
}

// CopyBasicFieldsToEngine
func (engineDB *EngineDB) CopyBasicFieldsToEngine(engine *models.Engine) {
	// insertion point for checkout of basic fields (back repo to stage)
	engine.Name = engineDB.Name_Data.String
	engine.EndTime = engineDB.EndTime_Data.String
	engine.CurrentTime = engineDB.CurrentTime_Data.String
	engine.DisplayFormat = engineDB.DisplayFormat_Data.String
	engine.SecondsSinceStart = engineDB.SecondsSinceStart_Data.Float64
	engine.Fired = int(engineDB.Fired_Data.Int64)
	engine.ControlMode.FromString(engineDB.ControlMode_Data.String)
	engine.State.FromString(engineDB.State_Data.String)
	engine.Speed = engineDB.Speed_Data.Float64
}

// CopyBasicFieldsToEngine_WOP
func (engineDB *EngineDB) CopyBasicFieldsToEngine_WOP(engine *models.Engine_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	engine.Name = engineDB.Name_Data.String
	engine.EndTime = engineDB.EndTime_Data.String
	engine.CurrentTime = engineDB.CurrentTime_Data.String
	engine.DisplayFormat = engineDB.DisplayFormat_Data.String
	engine.SecondsSinceStart = engineDB.SecondsSinceStart_Data.Float64
	engine.Fired = int(engineDB.Fired_Data.Int64)
	engine.ControlMode.FromString(engineDB.ControlMode_Data.String)
	engine.State.FromString(engineDB.State_Data.String)
	engine.Speed = engineDB.Speed_Data.Float64
}

// CopyBasicFieldsToEngineWOP
func (engineDB *EngineDB) CopyBasicFieldsToEngineWOP(engine *EngineWOP) {
	engine.ID = int(engineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	engine.Name = engineDB.Name_Data.String
	engine.EndTime = engineDB.EndTime_Data.String
	engine.CurrentTime = engineDB.CurrentTime_Data.String
	engine.DisplayFormat = engineDB.DisplayFormat_Data.String
	engine.SecondsSinceStart = engineDB.SecondsSinceStart_Data.Float64
	engine.Fired = int(engineDB.Fired_Data.Int64)
	engine.ControlMode.FromString(engineDB.ControlMode_Data.String)
	engine.State.FromString(engineDB.State_Data.String)
	engine.Speed = engineDB.Speed_Data.Float64
}

// Backup generates a json file from a slice of all EngineDB instances in the backrepo
func (backRepoEngine *BackRepoEngineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EngineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EngineDB, 0)
	for _, engineDB := range backRepoEngine.Map_EngineDBID_EngineDB {
		forBackup = append(forBackup, engineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Engine ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Engine file", err.Error())
	}
}

// Backup generates a json file from a slice of all EngineDB instances in the backrepo
func (backRepoEngine *BackRepoEngineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EngineDB, 0)
	for _, engineDB := range backRepoEngine.Map_EngineDBID_EngineDB {
		forBackup = append(forBackup, engineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Engine")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Engine_Fields, -1)
	for _, engineDB := range forBackup {

		var engineWOP EngineWOP
		engineDB.CopyBasicFieldsToEngineWOP(&engineWOP)

		row := sh.AddRow()
		row.WriteStruct(&engineWOP, -1)
	}
}

// RestoreXL from the "Engine" sheet all EngineDB instances
func (backRepoEngine *BackRepoEngineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEngineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Engine"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEngine.rowVisitorEngine)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEngine *BackRepoEngineStruct) rowVisitorEngine(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var engineWOP EngineWOP
		row.ReadStruct(&engineWOP)

		// add the unmarshalled struct to the stage
		engineDB := new(EngineDB)
		engineDB.CopyBasicFieldsFromEngineWOP(&engineWOP)

		engineDB_ID_atBackupTime := engineDB.ID
		engineDB.ID = 0
		_, err := backRepoEngine.db.Create(engineDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEngine.Map_EngineDBID_EngineDB[engineDB.ID] = engineDB
		BackRepoEngineid_atBckpTime_newID[engineDB_ID_atBackupTime] = engineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EngineDB.json" in dirPath that stores an array
// of EngineDB and stores it in the database
// the map BackRepoEngineid_atBckpTime_newID is updated accordingly
func (backRepoEngine *BackRepoEngineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEngineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EngineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Engine file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EngineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EngineDBID_EngineDB
	for _, engineDB := range forRestore {

		engineDB_ID_atBackupTime := engineDB.ID
		engineDB.ID = 0
		_, err := backRepoEngine.db.Create(engineDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEngine.Map_EngineDBID_EngineDB[engineDB.ID] = engineDB
		BackRepoEngineid_atBckpTime_newID[engineDB_ID_atBackupTime] = engineDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Engine file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Engine>id_atBckpTime_newID
// to compute new index
func (backRepoEngine *BackRepoEngineStruct) RestorePhaseTwo() {

	for _, engineDB := range backRepoEngine.Map_EngineDBID_EngineDB {

		// next line of code is to avert unused variable compilation error
		_ = engineDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoEngine.db.Model(engineDB)
		_, err := db.Updates(*engineDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoEngine.ResetReversePointers commits all staged instances of Engine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEngine *BackRepoEngineStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, engine := range backRepoEngine.Map_EngineDBID_EnginePtr {
		backRepoEngine.ResetReversePointersInstance(backRepo, idx, engine)
	}

	return
}

func (backRepoEngine *BackRepoEngineStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, engine *models.Engine) (Error error) {

	// fetch matching engineDB
	if engineDB, ok := backRepoEngine.Map_EngineDBID_EngineDB[idx]; ok {
		_ = engineDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEngineid_atBckpTime_newID map[uint]uint
