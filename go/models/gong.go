// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	GongBasicFields           map[*GongBasicField]struct{}
	GongBasicFields_mapString map[string]*GongBasicField

	GongEnums           map[*GongEnum]struct{}
	GongEnums_mapString map[string]*GongEnum

	GongEnumValues           map[*GongEnumValue]struct{}
	GongEnumValues_mapString map[string]*GongEnumValue

	GongStructs           map[*GongStruct]struct{}
	GongStructs_mapString map[string]*GongStruct

	GongTimeFields           map[*GongTimeField]struct{}
	GongTimeFields_mapString map[string]*GongTimeField

	ModelPkgs           map[*ModelPkg]struct{}
	ModelPkgs_mapString map[string]*ModelPkg

	PointerToGongStructFields           map[*PointerToGongStructField]struct{}
	PointerToGongStructFields_mapString map[string]*PointerToGongStructField

	SliceOfPointerToGongStructFields           map[*SliceOfPointerToGongStructField]struct{}
	SliceOfPointerToGongStructFields_mapString map[string]*SliceOfPointerToGongStructField

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitGongBasicField(gongbasicfield *GongBasicField)
	CheckoutGongBasicField(gongbasicfield *GongBasicField)
	CommitGongEnum(gongenum *GongEnum)
	CheckoutGongEnum(gongenum *GongEnum)
	CommitGongEnumValue(gongenumvalue *GongEnumValue)
	CheckoutGongEnumValue(gongenumvalue *GongEnumValue)
	CommitGongStruct(gongstruct *GongStruct)
	CheckoutGongStruct(gongstruct *GongStruct)
	CommitGongTimeField(gongtimefield *GongTimeField)
	CheckoutGongTimeField(gongtimefield *GongTimeField)
	CommitModelPkg(modelpkg *ModelPkg)
	CheckoutModelPkg(modelpkg *ModelPkg)
	CommitPointerToGongStructField(pointertogongstructfield *PointerToGongStructField)
	CheckoutPointerToGongStructField(pointertogongstructfield *PointerToGongStructField)
	CommitSliceOfPointerToGongStructField(sliceofpointertogongstructfield *SliceOfPointerToGongStructField)
	CheckoutSliceOfPointerToGongStructField(sliceofpointertogongstructfield *SliceOfPointerToGongStructField)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	GongBasicFields:           make(map[*GongBasicField]struct{}),
	GongBasicFields_mapString: make(map[string]*GongBasicField),

	GongEnums:           make(map[*GongEnum]struct{}),
	GongEnums_mapString: make(map[string]*GongEnum),

	GongEnumValues:           make(map[*GongEnumValue]struct{}),
	GongEnumValues_mapString: make(map[string]*GongEnumValue),

	GongStructs:           make(map[*GongStruct]struct{}),
	GongStructs_mapString: make(map[string]*GongStruct),

	GongTimeFields:           make(map[*GongTimeField]struct{}),
	GongTimeFields_mapString: make(map[string]*GongTimeField),

	ModelPkgs:           make(map[*ModelPkg]struct{}),
	ModelPkgs_mapString: make(map[string]*ModelPkg),

	PointerToGongStructFields:           make(map[*PointerToGongStructField]struct{}),
	PointerToGongStructFields_mapString: make(map[string]*PointerToGongStructField),

	SliceOfPointerToGongStructFields:           make(map[*SliceOfPointerToGongStructField]struct{}),
	SliceOfPointerToGongStructFields_mapString: make(map[string]*SliceOfPointerToGongStructField),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["GongBasicField"] = len(stage.GongBasicFields)
	stage.Map_GongStructName_InstancesNb["GongEnum"] = len(stage.GongEnums)
	stage.Map_GongStructName_InstancesNb["GongEnumValue"] = len(stage.GongEnumValues)
	stage.Map_GongStructName_InstancesNb["GongStruct"] = len(stage.GongStructs)
	stage.Map_GongStructName_InstancesNb["GongTimeField"] = len(stage.GongTimeFields)
	stage.Map_GongStructName_InstancesNb["ModelPkg"] = len(stage.ModelPkgs)
	stage.Map_GongStructName_InstancesNb["PointerToGongStructField"] = len(stage.PointerToGongStructFields)
	stage.Map_GongStructName_InstancesNb["SliceOfPointerToGongStructField"] = len(stage.SliceOfPointerToGongStructFields)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getGongBasicFieldOrderedStructWithNameField() []*GongBasicField {
	// have alphabetical order generation
	gongbasicfieldOrdered := []*GongBasicField{}
	for gongbasicfield := range stage.GongBasicFields {
		gongbasicfieldOrdered = append(gongbasicfieldOrdered, gongbasicfield)
	}
	sort.Slice(gongbasicfieldOrdered[:], func(i, j int) bool {
		return gongbasicfieldOrdered[i].Name < gongbasicfieldOrdered[j].Name
	})
	return gongbasicfieldOrdered
}

// Stage puts gongbasicfield to the model stage
func (gongbasicfield *GongBasicField) Stage() *GongBasicField {
	Stage.GongBasicFields[gongbasicfield] = __member
	Stage.GongBasicFields_mapString[gongbasicfield.Name] = gongbasicfield

	return gongbasicfield
}

// Unstage removes gongbasicfield off the model stage
func (gongbasicfield *GongBasicField) Unstage() *GongBasicField {
	delete(Stage.GongBasicFields, gongbasicfield)
	delete(Stage.GongBasicFields_mapString, gongbasicfield.Name)
	return gongbasicfield
}

// commit gongbasicfield to the back repo (if it is already staged)
func (gongbasicfield *GongBasicField) Commit() *GongBasicField {
	if _, ok := Stage.GongBasicFields[gongbasicfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongBasicField(gongbasicfield)
		}
	}
	return gongbasicfield
}

// Checkout gongbasicfield to the back repo (if it is already staged)
func (gongbasicfield *GongBasicField) Checkout() *GongBasicField {
	if _, ok := Stage.GongBasicFields[gongbasicfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongBasicField(gongbasicfield)
		}
	}
	return gongbasicfield
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongbasicfield to the model stage
func (gongbasicfield *GongBasicField) StageCopy() *GongBasicField {
	_gongbasicfield := new(GongBasicField)
	*_gongbasicfield = *gongbasicfield
	_gongbasicfield.Stage()
	return _gongbasicfield
}

// StageAndCommit appends gongbasicfield to the model stage and commit to the orm repo
func (gongbasicfield *GongBasicField) StageAndCommit() *GongBasicField {
	gongbasicfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongBasicField(gongbasicfield)
	}
	return gongbasicfield
}

// DeleteStageAndCommit appends gongbasicfield to the model stage and commit to the orm repo
func (gongbasicfield *GongBasicField) DeleteStageAndCommit() *GongBasicField {
	gongbasicfield.Unstage()
	DeleteORMGongBasicField(gongbasicfield)
	return gongbasicfield
}

// StageCopyAndCommit appends a copy of gongbasicfield to the model stage and commit to the orm repo
func (gongbasicfield *GongBasicField) StageCopyAndCommit() *GongBasicField {
	_gongbasicfield := new(GongBasicField)
	*_gongbasicfield = *gongbasicfield
	_gongbasicfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongBasicField(gongbasicfield)
	}
	return _gongbasicfield
}

// CreateORMGongBasicField enables dynamic staging of a GongBasicField instance
func CreateORMGongBasicField(gongbasicfield *GongBasicField) {
	gongbasicfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongBasicField(gongbasicfield)
	}
}

// DeleteORMGongBasicField enables dynamic staging of a GongBasicField instance
func DeleteORMGongBasicField(gongbasicfield *GongBasicField) {
	gongbasicfield.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongBasicField(gongbasicfield)
	}
}

func (stage *StageStruct) getGongEnumOrderedStructWithNameField() []*GongEnum {
	// have alphabetical order generation
	gongenumOrdered := []*GongEnum{}
	for gongenum := range stage.GongEnums {
		gongenumOrdered = append(gongenumOrdered, gongenum)
	}
	sort.Slice(gongenumOrdered[:], func(i, j int) bool {
		return gongenumOrdered[i].Name < gongenumOrdered[j].Name
	})
	return gongenumOrdered
}

// Stage puts gongenum to the model stage
func (gongenum *GongEnum) Stage() *GongEnum {
	Stage.GongEnums[gongenum] = __member
	Stage.GongEnums_mapString[gongenum.Name] = gongenum

	return gongenum
}

// Unstage removes gongenum off the model stage
func (gongenum *GongEnum) Unstage() *GongEnum {
	delete(Stage.GongEnums, gongenum)
	delete(Stage.GongEnums_mapString, gongenum.Name)
	return gongenum
}

// commit gongenum to the back repo (if it is already staged)
func (gongenum *GongEnum) Commit() *GongEnum {
	if _, ok := Stage.GongEnums[gongenum]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongEnum(gongenum)
		}
	}
	return gongenum
}

// Checkout gongenum to the back repo (if it is already staged)
func (gongenum *GongEnum) Checkout() *GongEnum {
	if _, ok := Stage.GongEnums[gongenum]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongEnum(gongenum)
		}
	}
	return gongenum
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongenum to the model stage
func (gongenum *GongEnum) StageCopy() *GongEnum {
	_gongenum := new(GongEnum)
	*_gongenum = *gongenum
	_gongenum.Stage()
	return _gongenum
}

// StageAndCommit appends gongenum to the model stage and commit to the orm repo
func (gongenum *GongEnum) StageAndCommit() *GongEnum {
	gongenum.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnum(gongenum)
	}
	return gongenum
}

// DeleteStageAndCommit appends gongenum to the model stage and commit to the orm repo
func (gongenum *GongEnum) DeleteStageAndCommit() *GongEnum {
	gongenum.Unstage()
	DeleteORMGongEnum(gongenum)
	return gongenum
}

// StageCopyAndCommit appends a copy of gongenum to the model stage and commit to the orm repo
func (gongenum *GongEnum) StageCopyAndCommit() *GongEnum {
	_gongenum := new(GongEnum)
	*_gongenum = *gongenum
	_gongenum.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnum(gongenum)
	}
	return _gongenum
}

// CreateORMGongEnum enables dynamic staging of a GongEnum instance
func CreateORMGongEnum(gongenum *GongEnum) {
	gongenum.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnum(gongenum)
	}
}

// DeleteORMGongEnum enables dynamic staging of a GongEnum instance
func DeleteORMGongEnum(gongenum *GongEnum) {
	gongenum.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongEnum(gongenum)
	}
}

func (stage *StageStruct) getGongEnumValueOrderedStructWithNameField() []*GongEnumValue {
	// have alphabetical order generation
	gongenumvalueOrdered := []*GongEnumValue{}
	for gongenumvalue := range stage.GongEnumValues {
		gongenumvalueOrdered = append(gongenumvalueOrdered, gongenumvalue)
	}
	sort.Slice(gongenumvalueOrdered[:], func(i, j int) bool {
		return gongenumvalueOrdered[i].Name < gongenumvalueOrdered[j].Name
	})
	return gongenumvalueOrdered
}

// Stage puts gongenumvalue to the model stage
func (gongenumvalue *GongEnumValue) Stage() *GongEnumValue {
	Stage.GongEnumValues[gongenumvalue] = __member
	Stage.GongEnumValues_mapString[gongenumvalue.Name] = gongenumvalue

	return gongenumvalue
}

// Unstage removes gongenumvalue off the model stage
func (gongenumvalue *GongEnumValue) Unstage() *GongEnumValue {
	delete(Stage.GongEnumValues, gongenumvalue)
	delete(Stage.GongEnumValues_mapString, gongenumvalue.Name)
	return gongenumvalue
}

// commit gongenumvalue to the back repo (if it is already staged)
func (gongenumvalue *GongEnumValue) Commit() *GongEnumValue {
	if _, ok := Stage.GongEnumValues[gongenumvalue]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongEnumValue(gongenumvalue)
		}
	}
	return gongenumvalue
}

// Checkout gongenumvalue to the back repo (if it is already staged)
func (gongenumvalue *GongEnumValue) Checkout() *GongEnumValue {
	if _, ok := Stage.GongEnumValues[gongenumvalue]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongEnumValue(gongenumvalue)
		}
	}
	return gongenumvalue
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongenumvalue to the model stage
func (gongenumvalue *GongEnumValue) StageCopy() *GongEnumValue {
	_gongenumvalue := new(GongEnumValue)
	*_gongenumvalue = *gongenumvalue
	_gongenumvalue.Stage()
	return _gongenumvalue
}

// StageAndCommit appends gongenumvalue to the model stage and commit to the orm repo
func (gongenumvalue *GongEnumValue) StageAndCommit() *GongEnumValue {
	gongenumvalue.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnumValue(gongenumvalue)
	}
	return gongenumvalue
}

// DeleteStageAndCommit appends gongenumvalue to the model stage and commit to the orm repo
func (gongenumvalue *GongEnumValue) DeleteStageAndCommit() *GongEnumValue {
	gongenumvalue.Unstage()
	DeleteORMGongEnumValue(gongenumvalue)
	return gongenumvalue
}

// StageCopyAndCommit appends a copy of gongenumvalue to the model stage and commit to the orm repo
func (gongenumvalue *GongEnumValue) StageCopyAndCommit() *GongEnumValue {
	_gongenumvalue := new(GongEnumValue)
	*_gongenumvalue = *gongenumvalue
	_gongenumvalue.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnumValue(gongenumvalue)
	}
	return _gongenumvalue
}

// CreateORMGongEnumValue enables dynamic staging of a GongEnumValue instance
func CreateORMGongEnumValue(gongenumvalue *GongEnumValue) {
	gongenumvalue.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnumValue(gongenumvalue)
	}
}

// DeleteORMGongEnumValue enables dynamic staging of a GongEnumValue instance
func DeleteORMGongEnumValue(gongenumvalue *GongEnumValue) {
	gongenumvalue.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongEnumValue(gongenumvalue)
	}
}

func (stage *StageStruct) getGongStructOrderedStructWithNameField() []*GongStruct {
	// have alphabetical order generation
	gongstructOrdered := []*GongStruct{}
	for gongstruct := range stage.GongStructs {
		gongstructOrdered = append(gongstructOrdered, gongstruct)
	}
	sort.Slice(gongstructOrdered[:], func(i, j int) bool {
		return gongstructOrdered[i].Name < gongstructOrdered[j].Name
	})
	return gongstructOrdered
}

// Stage puts gongstruct to the model stage
func (gongstruct *GongStruct) Stage() *GongStruct {
	Stage.GongStructs[gongstruct] = __member
	Stage.GongStructs_mapString[gongstruct.Name] = gongstruct

	return gongstruct
}

// Unstage removes gongstruct off the model stage
func (gongstruct *GongStruct) Unstage() *GongStruct {
	delete(Stage.GongStructs, gongstruct)
	delete(Stage.GongStructs_mapString, gongstruct.Name)
	return gongstruct
}

// commit gongstruct to the back repo (if it is already staged)
func (gongstruct *GongStruct) Commit() *GongStruct {
	if _, ok := Stage.GongStructs[gongstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongStruct(gongstruct)
		}
	}
	return gongstruct
}

// Checkout gongstruct to the back repo (if it is already staged)
func (gongstruct *GongStruct) Checkout() *GongStruct {
	if _, ok := Stage.GongStructs[gongstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongStruct(gongstruct)
		}
	}
	return gongstruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongstruct to the model stage
func (gongstruct *GongStruct) StageCopy() *GongStruct {
	_gongstruct := new(GongStruct)
	*_gongstruct = *gongstruct
	_gongstruct.Stage()
	return _gongstruct
}

// StageAndCommit appends gongstruct to the model stage and commit to the orm repo
func (gongstruct *GongStruct) StageAndCommit() *GongStruct {
	gongstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongStruct(gongstruct)
	}
	return gongstruct
}

// DeleteStageAndCommit appends gongstruct to the model stage and commit to the orm repo
func (gongstruct *GongStruct) DeleteStageAndCommit() *GongStruct {
	gongstruct.Unstage()
	DeleteORMGongStruct(gongstruct)
	return gongstruct
}

// StageCopyAndCommit appends a copy of gongstruct to the model stage and commit to the orm repo
func (gongstruct *GongStruct) StageCopyAndCommit() *GongStruct {
	_gongstruct := new(GongStruct)
	*_gongstruct = *gongstruct
	_gongstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongStruct(gongstruct)
	}
	return _gongstruct
}

// CreateORMGongStruct enables dynamic staging of a GongStruct instance
func CreateORMGongStruct(gongstruct *GongStruct) {
	gongstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongStruct(gongstruct)
	}
}

// DeleteORMGongStruct enables dynamic staging of a GongStruct instance
func DeleteORMGongStruct(gongstruct *GongStruct) {
	gongstruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongStruct(gongstruct)
	}
}

func (stage *StageStruct) getGongTimeFieldOrderedStructWithNameField() []*GongTimeField {
	// have alphabetical order generation
	gongtimefieldOrdered := []*GongTimeField{}
	for gongtimefield := range stage.GongTimeFields {
		gongtimefieldOrdered = append(gongtimefieldOrdered, gongtimefield)
	}
	sort.Slice(gongtimefieldOrdered[:], func(i, j int) bool {
		return gongtimefieldOrdered[i].Name < gongtimefieldOrdered[j].Name
	})
	return gongtimefieldOrdered
}

// Stage puts gongtimefield to the model stage
func (gongtimefield *GongTimeField) Stage() *GongTimeField {
	Stage.GongTimeFields[gongtimefield] = __member
	Stage.GongTimeFields_mapString[gongtimefield.Name] = gongtimefield

	return gongtimefield
}

// Unstage removes gongtimefield off the model stage
func (gongtimefield *GongTimeField) Unstage() *GongTimeField {
	delete(Stage.GongTimeFields, gongtimefield)
	delete(Stage.GongTimeFields_mapString, gongtimefield.Name)
	return gongtimefield
}

// commit gongtimefield to the back repo (if it is already staged)
func (gongtimefield *GongTimeField) Commit() *GongTimeField {
	if _, ok := Stage.GongTimeFields[gongtimefield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongTimeField(gongtimefield)
		}
	}
	return gongtimefield
}

// Checkout gongtimefield to the back repo (if it is already staged)
func (gongtimefield *GongTimeField) Checkout() *GongTimeField {
	if _, ok := Stage.GongTimeFields[gongtimefield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongTimeField(gongtimefield)
		}
	}
	return gongtimefield
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongtimefield to the model stage
func (gongtimefield *GongTimeField) StageCopy() *GongTimeField {
	_gongtimefield := new(GongTimeField)
	*_gongtimefield = *gongtimefield
	_gongtimefield.Stage()
	return _gongtimefield
}

// StageAndCommit appends gongtimefield to the model stage and commit to the orm repo
func (gongtimefield *GongTimeField) StageAndCommit() *GongTimeField {
	gongtimefield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongTimeField(gongtimefield)
	}
	return gongtimefield
}

// DeleteStageAndCommit appends gongtimefield to the model stage and commit to the orm repo
func (gongtimefield *GongTimeField) DeleteStageAndCommit() *GongTimeField {
	gongtimefield.Unstage()
	DeleteORMGongTimeField(gongtimefield)
	return gongtimefield
}

// StageCopyAndCommit appends a copy of gongtimefield to the model stage and commit to the orm repo
func (gongtimefield *GongTimeField) StageCopyAndCommit() *GongTimeField {
	_gongtimefield := new(GongTimeField)
	*_gongtimefield = *gongtimefield
	_gongtimefield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongTimeField(gongtimefield)
	}
	return _gongtimefield
}

// CreateORMGongTimeField enables dynamic staging of a GongTimeField instance
func CreateORMGongTimeField(gongtimefield *GongTimeField) {
	gongtimefield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongTimeField(gongtimefield)
	}
}

// DeleteORMGongTimeField enables dynamic staging of a GongTimeField instance
func DeleteORMGongTimeField(gongtimefield *GongTimeField) {
	gongtimefield.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongTimeField(gongtimefield)
	}
}

func (stage *StageStruct) getModelPkgOrderedStructWithNameField() []*ModelPkg {
	// have alphabetical order generation
	modelpkgOrdered := []*ModelPkg{}
	for modelpkg := range stage.ModelPkgs {
		modelpkgOrdered = append(modelpkgOrdered, modelpkg)
	}
	sort.Slice(modelpkgOrdered[:], func(i, j int) bool {
		return modelpkgOrdered[i].Name < modelpkgOrdered[j].Name
	})
	return modelpkgOrdered
}

// Stage puts modelpkg to the model stage
func (modelpkg *ModelPkg) Stage() *ModelPkg {
	Stage.ModelPkgs[modelpkg] = __member
	Stage.ModelPkgs_mapString[modelpkg.Name] = modelpkg

	return modelpkg
}

// Unstage removes modelpkg off the model stage
func (modelpkg *ModelPkg) Unstage() *ModelPkg {
	delete(Stage.ModelPkgs, modelpkg)
	delete(Stage.ModelPkgs_mapString, modelpkg.Name)
	return modelpkg
}

// commit modelpkg to the back repo (if it is already staged)
func (modelpkg *ModelPkg) Commit() *ModelPkg {
	if _, ok := Stage.ModelPkgs[modelpkg]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitModelPkg(modelpkg)
		}
	}
	return modelpkg
}

// Checkout modelpkg to the back repo (if it is already staged)
func (modelpkg *ModelPkg) Checkout() *ModelPkg {
	if _, ok := Stage.ModelPkgs[modelpkg]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutModelPkg(modelpkg)
		}
	}
	return modelpkg
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of modelpkg to the model stage
func (modelpkg *ModelPkg) StageCopy() *ModelPkg {
	_modelpkg := new(ModelPkg)
	*_modelpkg = *modelpkg
	_modelpkg.Stage()
	return _modelpkg
}

// StageAndCommit appends modelpkg to the model stage and commit to the orm repo
func (modelpkg *ModelPkg) StageAndCommit() *ModelPkg {
	modelpkg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMModelPkg(modelpkg)
	}
	return modelpkg
}

// DeleteStageAndCommit appends modelpkg to the model stage and commit to the orm repo
func (modelpkg *ModelPkg) DeleteStageAndCommit() *ModelPkg {
	modelpkg.Unstage()
	DeleteORMModelPkg(modelpkg)
	return modelpkg
}

// StageCopyAndCommit appends a copy of modelpkg to the model stage and commit to the orm repo
func (modelpkg *ModelPkg) StageCopyAndCommit() *ModelPkg {
	_modelpkg := new(ModelPkg)
	*_modelpkg = *modelpkg
	_modelpkg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMModelPkg(modelpkg)
	}
	return _modelpkg
}

// CreateORMModelPkg enables dynamic staging of a ModelPkg instance
func CreateORMModelPkg(modelpkg *ModelPkg) {
	modelpkg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMModelPkg(modelpkg)
	}
}

// DeleteORMModelPkg enables dynamic staging of a ModelPkg instance
func DeleteORMModelPkg(modelpkg *ModelPkg) {
	modelpkg.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMModelPkg(modelpkg)
	}
}

func (stage *StageStruct) getPointerToGongStructFieldOrderedStructWithNameField() []*PointerToGongStructField {
	// have alphabetical order generation
	pointertogongstructfieldOrdered := []*PointerToGongStructField{}
	for pointertogongstructfield := range stage.PointerToGongStructFields {
		pointertogongstructfieldOrdered = append(pointertogongstructfieldOrdered, pointertogongstructfield)
	}
	sort.Slice(pointertogongstructfieldOrdered[:], func(i, j int) bool {
		return pointertogongstructfieldOrdered[i].Name < pointertogongstructfieldOrdered[j].Name
	})
	return pointertogongstructfieldOrdered
}

// Stage puts pointertogongstructfield to the model stage
func (pointertogongstructfield *PointerToGongStructField) Stage() *PointerToGongStructField {
	Stage.PointerToGongStructFields[pointertogongstructfield] = __member
	Stage.PointerToGongStructFields_mapString[pointertogongstructfield.Name] = pointertogongstructfield

	return pointertogongstructfield
}

// Unstage removes pointertogongstructfield off the model stage
func (pointertogongstructfield *PointerToGongStructField) Unstage() *PointerToGongStructField {
	delete(Stage.PointerToGongStructFields, pointertogongstructfield)
	delete(Stage.PointerToGongStructFields_mapString, pointertogongstructfield.Name)
	return pointertogongstructfield
}

// commit pointertogongstructfield to the back repo (if it is already staged)
func (pointertogongstructfield *PointerToGongStructField) Commit() *PointerToGongStructField {
	if _, ok := Stage.PointerToGongStructFields[pointertogongstructfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitPointerToGongStructField(pointertogongstructfield)
		}
	}
	return pointertogongstructfield
}

// Checkout pointertogongstructfield to the back repo (if it is already staged)
func (pointertogongstructfield *PointerToGongStructField) Checkout() *PointerToGongStructField {
	if _, ok := Stage.PointerToGongStructFields[pointertogongstructfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutPointerToGongStructField(pointertogongstructfield)
		}
	}
	return pointertogongstructfield
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of pointertogongstructfield to the model stage
func (pointertogongstructfield *PointerToGongStructField) StageCopy() *PointerToGongStructField {
	_pointertogongstructfield := new(PointerToGongStructField)
	*_pointertogongstructfield = *pointertogongstructfield
	_pointertogongstructfield.Stage()
	return _pointertogongstructfield
}

// StageAndCommit appends pointertogongstructfield to the model stage and commit to the orm repo
func (pointertogongstructfield *PointerToGongStructField) StageAndCommit() *PointerToGongStructField {
	pointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPointerToGongStructField(pointertogongstructfield)
	}
	return pointertogongstructfield
}

// DeleteStageAndCommit appends pointertogongstructfield to the model stage and commit to the orm repo
func (pointertogongstructfield *PointerToGongStructField) DeleteStageAndCommit() *PointerToGongStructField {
	pointertogongstructfield.Unstage()
	DeleteORMPointerToGongStructField(pointertogongstructfield)
	return pointertogongstructfield
}

// StageCopyAndCommit appends a copy of pointertogongstructfield to the model stage and commit to the orm repo
func (pointertogongstructfield *PointerToGongStructField) StageCopyAndCommit() *PointerToGongStructField {
	_pointertogongstructfield := new(PointerToGongStructField)
	*_pointertogongstructfield = *pointertogongstructfield
	_pointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPointerToGongStructField(pointertogongstructfield)
	}
	return _pointertogongstructfield
}

// CreateORMPointerToGongStructField enables dynamic staging of a PointerToGongStructField instance
func CreateORMPointerToGongStructField(pointertogongstructfield *PointerToGongStructField) {
	pointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPointerToGongStructField(pointertogongstructfield)
	}
}

// DeleteORMPointerToGongStructField enables dynamic staging of a PointerToGongStructField instance
func DeleteORMPointerToGongStructField(pointertogongstructfield *PointerToGongStructField) {
	pointertogongstructfield.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMPointerToGongStructField(pointertogongstructfield)
	}
}

func (stage *StageStruct) getSliceOfPointerToGongStructFieldOrderedStructWithNameField() []*SliceOfPointerToGongStructField {
	// have alphabetical order generation
	sliceofpointertogongstructfieldOrdered := []*SliceOfPointerToGongStructField{}
	for sliceofpointertogongstructfield := range stage.SliceOfPointerToGongStructFields {
		sliceofpointertogongstructfieldOrdered = append(sliceofpointertogongstructfieldOrdered, sliceofpointertogongstructfield)
	}
	sort.Slice(sliceofpointertogongstructfieldOrdered[:], func(i, j int) bool {
		return sliceofpointertogongstructfieldOrdered[i].Name < sliceofpointertogongstructfieldOrdered[j].Name
	})
	return sliceofpointertogongstructfieldOrdered
}

// Stage puts sliceofpointertogongstructfield to the model stage
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) Stage() *SliceOfPointerToGongStructField {
	Stage.SliceOfPointerToGongStructFields[sliceofpointertogongstructfield] = __member
	Stage.SliceOfPointerToGongStructFields_mapString[sliceofpointertogongstructfield.Name] = sliceofpointertogongstructfield

	return sliceofpointertogongstructfield
}

// Unstage removes sliceofpointertogongstructfield off the model stage
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) Unstage() *SliceOfPointerToGongStructField {
	delete(Stage.SliceOfPointerToGongStructFields, sliceofpointertogongstructfield)
	delete(Stage.SliceOfPointerToGongStructFields_mapString, sliceofpointertogongstructfield.Name)
	return sliceofpointertogongstructfield
}

// commit sliceofpointertogongstructfield to the back repo (if it is already staged)
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) Commit() *SliceOfPointerToGongStructField {
	if _, ok := Stage.SliceOfPointerToGongStructFields[sliceofpointertogongstructfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
		}
	}
	return sliceofpointertogongstructfield
}

// Checkout sliceofpointertogongstructfield to the back repo (if it is already staged)
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) Checkout() *SliceOfPointerToGongStructField {
	if _, ok := Stage.SliceOfPointerToGongStructFields[sliceofpointertogongstructfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
		}
	}
	return sliceofpointertogongstructfield
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of sliceofpointertogongstructfield to the model stage
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) StageCopy() *SliceOfPointerToGongStructField {
	_sliceofpointertogongstructfield := new(SliceOfPointerToGongStructField)
	*_sliceofpointertogongstructfield = *sliceofpointertogongstructfield
	_sliceofpointertogongstructfield.Stage()
	return _sliceofpointertogongstructfield
}

// StageAndCommit appends sliceofpointertogongstructfield to the model stage and commit to the orm repo
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) StageAndCommit() *SliceOfPointerToGongStructField {
	sliceofpointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	}
	return sliceofpointertogongstructfield
}

// DeleteStageAndCommit appends sliceofpointertogongstructfield to the model stage and commit to the orm repo
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) DeleteStageAndCommit() *SliceOfPointerToGongStructField {
	sliceofpointertogongstructfield.Unstage()
	DeleteORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	return sliceofpointertogongstructfield
}

// StageCopyAndCommit appends a copy of sliceofpointertogongstructfield to the model stage and commit to the orm repo
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) StageCopyAndCommit() *SliceOfPointerToGongStructField {
	_sliceofpointertogongstructfield := new(SliceOfPointerToGongStructField)
	*_sliceofpointertogongstructfield = *sliceofpointertogongstructfield
	_sliceofpointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	}
	return _sliceofpointertogongstructfield
}

// CreateORMSliceOfPointerToGongStructField enables dynamic staging of a SliceOfPointerToGongStructField instance
func CreateORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield *SliceOfPointerToGongStructField) {
	sliceofpointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	}
}

// DeleteORMSliceOfPointerToGongStructField enables dynamic staging of a SliceOfPointerToGongStructField instance
func DeleteORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield *SliceOfPointerToGongStructField) {
	sliceofpointertogongstructfield.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMGongBasicField(GongBasicField *GongBasicField)
	CreateORMGongEnum(GongEnum *GongEnum)
	CreateORMGongEnumValue(GongEnumValue *GongEnumValue)
	CreateORMGongStruct(GongStruct *GongStruct)
	CreateORMGongTimeField(GongTimeField *GongTimeField)
	CreateORMModelPkg(ModelPkg *ModelPkg)
	CreateORMPointerToGongStructField(PointerToGongStructField *PointerToGongStructField)
	CreateORMSliceOfPointerToGongStructField(SliceOfPointerToGongStructField *SliceOfPointerToGongStructField)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMGongBasicField(GongBasicField *GongBasicField)
	DeleteORMGongEnum(GongEnum *GongEnum)
	DeleteORMGongEnumValue(GongEnumValue *GongEnumValue)
	DeleteORMGongStruct(GongStruct *GongStruct)
	DeleteORMGongTimeField(GongTimeField *GongTimeField)
	DeleteORMModelPkg(ModelPkg *ModelPkg)
	DeleteORMPointerToGongStructField(PointerToGongStructField *PointerToGongStructField)
	DeleteORMSliceOfPointerToGongStructField(SliceOfPointerToGongStructField *SliceOfPointerToGongStructField)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.GongBasicFields = make(map[*GongBasicField]struct{})
	stage.GongBasicFields_mapString = make(map[string]*GongBasicField)

	stage.GongEnums = make(map[*GongEnum]struct{})
	stage.GongEnums_mapString = make(map[string]*GongEnum)

	stage.GongEnumValues = make(map[*GongEnumValue]struct{})
	stage.GongEnumValues_mapString = make(map[string]*GongEnumValue)

	stage.GongStructs = make(map[*GongStruct]struct{})
	stage.GongStructs_mapString = make(map[string]*GongStruct)

	stage.GongTimeFields = make(map[*GongTimeField]struct{})
	stage.GongTimeFields_mapString = make(map[string]*GongTimeField)

	stage.ModelPkgs = make(map[*ModelPkg]struct{})
	stage.ModelPkgs_mapString = make(map[string]*ModelPkg)

	stage.PointerToGongStructFields = make(map[*PointerToGongStructField]struct{})
	stage.PointerToGongStructFields_mapString = make(map[string]*PointerToGongStructField)

	stage.SliceOfPointerToGongStructFields = make(map[*SliceOfPointerToGongStructField]struct{})
	stage.SliceOfPointerToGongStructFields_mapString = make(map[string]*SliceOfPointerToGongStructField)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.GongBasicFields = nil
	stage.GongBasicFields_mapString = nil

	stage.GongEnums = nil
	stage.GongEnums_mapString = nil

	stage.GongEnumValues = nil
	stage.GongEnumValues_mapString = nil

	stage.GongStructs = nil
	stage.GongStructs_mapString = nil

	stage.GongTimeFields = nil
	stage.GongTimeFields_mapString = nil

	stage.ModelPkgs = nil
	stage.ModelPkgs_mapString = nil

	stage.PointerToGongStructFields = nil
	stage.PointerToGongStructFields_mapString = nil

	stage.SliceOfPointerToGongStructFields = nil
	stage.SliceOfPointerToGongStructFields_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = "{{GeneratedFieldNameValue}}"`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_GongBasicField_Identifiers := make(map[*GongBasicField]string)
	_ = map_GongBasicField_Identifiers

	gongbasicfieldOrdered := []*GongBasicField{}
	for gongbasicfield := range stage.GongBasicFields {
		gongbasicfieldOrdered = append(gongbasicfieldOrdered, gongbasicfield)
	}
	sort.Slice(gongbasicfieldOrdered[:], func(i, j int) bool {
		return gongbasicfieldOrdered[i].Name < gongbasicfieldOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongBasicField")
	for idx, gongbasicfield := range gongbasicfieldOrdered {

		id = generatesIdentifier("GongBasicField", idx, gongbasicfield.Name)
		map_GongBasicField_Identifiers[gongbasicfield] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongBasicField")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongbasicfield.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongBasicField %s values setup", gongbasicfield.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongbasicfield.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "BasicKindName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongbasicfield.BasicKindName))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DeclaredType")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongbasicfield.DeclaredType))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Index")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", gongbasicfield.Index))
		initializerStatements += setValueField

	}

	map_GongEnum_Identifiers := make(map[*GongEnum]string)
	_ = map_GongEnum_Identifiers

	gongenumOrdered := []*GongEnum{}
	for gongenum := range stage.GongEnums {
		gongenumOrdered = append(gongenumOrdered, gongenum)
	}
	sort.Slice(gongenumOrdered[:], func(i, j int) bool {
		return gongenumOrdered[i].Name < gongenumOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongEnum")
	for idx, gongenum := range gongenumOrdered {

		id = generatesIdentifier("GongEnum", idx, gongenum.Name)
		map_GongEnum_Identifiers[gongenum] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongEnum")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongenum.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongEnum %s values setup", gongenum.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongenum.Name))
		initializerStatements += setValueField

	}

	map_GongEnumValue_Identifiers := make(map[*GongEnumValue]string)
	_ = map_GongEnumValue_Identifiers

	gongenumvalueOrdered := []*GongEnumValue{}
	for gongenumvalue := range stage.GongEnumValues {
		gongenumvalueOrdered = append(gongenumvalueOrdered, gongenumvalue)
	}
	sort.Slice(gongenumvalueOrdered[:], func(i, j int) bool {
		return gongenumvalueOrdered[i].Name < gongenumvalueOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongEnumValue")
	for idx, gongenumvalue := range gongenumvalueOrdered {

		id = generatesIdentifier("GongEnumValue", idx, gongenumvalue.Name)
		map_GongEnumValue_Identifiers[gongenumvalue] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongEnumValue")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongenumvalue.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongEnumValue %s values setup", gongenumvalue.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongenumvalue.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Value")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongenumvalue.Value))
		initializerStatements += setValueField

	}

	map_GongStruct_Identifiers := make(map[*GongStruct]string)
	_ = map_GongStruct_Identifiers

	gongstructOrdered := []*GongStruct{}
	for gongstruct := range stage.GongStructs {
		gongstructOrdered = append(gongstructOrdered, gongstruct)
	}
	sort.Slice(gongstructOrdered[:], func(i, j int) bool {
		return gongstructOrdered[i].Name < gongstructOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongStruct")
	for idx, gongstruct := range gongstructOrdered {

		id = generatesIdentifier("GongStruct", idx, gongstruct.Name)
		map_GongStruct_Identifiers[gongstruct] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongStruct")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongstruct.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongStruct %s values setup", gongstruct.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongstruct.Name))
		initializerStatements += setValueField

	}

	map_GongTimeField_Identifiers := make(map[*GongTimeField]string)
	_ = map_GongTimeField_Identifiers

	gongtimefieldOrdered := []*GongTimeField{}
	for gongtimefield := range stage.GongTimeFields {
		gongtimefieldOrdered = append(gongtimefieldOrdered, gongtimefield)
	}
	sort.Slice(gongtimefieldOrdered[:], func(i, j int) bool {
		return gongtimefieldOrdered[i].Name < gongtimefieldOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongTimeField")
	for idx, gongtimefield := range gongtimefieldOrdered {

		id = generatesIdentifier("GongTimeField", idx, gongtimefield.Name)
		map_GongTimeField_Identifiers[gongtimefield] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongTimeField")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongtimefield.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongTimeField %s values setup", gongtimefield.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongtimefield.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Index")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", gongtimefield.Index))
		initializerStatements += setValueField

	}

	map_ModelPkg_Identifiers := make(map[*ModelPkg]string)
	_ = map_ModelPkg_Identifiers

	modelpkgOrdered := []*ModelPkg{}
	for modelpkg := range stage.ModelPkgs {
		modelpkgOrdered = append(modelpkgOrdered, modelpkg)
	}
	sort.Slice(modelpkgOrdered[:], func(i, j int) bool {
		return modelpkgOrdered[i].Name < modelpkgOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of ModelPkg")
	for idx, modelpkg := range modelpkgOrdered {

		id = generatesIdentifier("ModelPkg", idx, modelpkg.Name)
		map_ModelPkg_Identifiers[modelpkg] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "ModelPkg")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", modelpkg.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// ModelPkg %s values setup", modelpkg.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(modelpkg.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "PkgPath")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(modelpkg.PkgPath))
		initializerStatements += setValueField

	}

	map_PointerToGongStructField_Identifiers := make(map[*PointerToGongStructField]string)
	_ = map_PointerToGongStructField_Identifiers

	pointertogongstructfieldOrdered := []*PointerToGongStructField{}
	for pointertogongstructfield := range stage.PointerToGongStructFields {
		pointertogongstructfieldOrdered = append(pointertogongstructfieldOrdered, pointertogongstructfield)
	}
	sort.Slice(pointertogongstructfieldOrdered[:], func(i, j int) bool {
		return pointertogongstructfieldOrdered[i].Name < pointertogongstructfieldOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of PointerToGongStructField")
	for idx, pointertogongstructfield := range pointertogongstructfieldOrdered {

		id = generatesIdentifier("PointerToGongStructField", idx, pointertogongstructfield.Name)
		map_PointerToGongStructField_Identifiers[pointertogongstructfield] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "PointerToGongStructField")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", pointertogongstructfield.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// PointerToGongStructField %s values setup", pointertogongstructfield.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(pointertogongstructfield.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Index")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", pointertogongstructfield.Index))
		initializerStatements += setValueField

	}

	map_SliceOfPointerToGongStructField_Identifiers := make(map[*SliceOfPointerToGongStructField]string)
	_ = map_SliceOfPointerToGongStructField_Identifiers

	sliceofpointertogongstructfieldOrdered := []*SliceOfPointerToGongStructField{}
	for sliceofpointertogongstructfield := range stage.SliceOfPointerToGongStructFields {
		sliceofpointertogongstructfieldOrdered = append(sliceofpointertogongstructfieldOrdered, sliceofpointertogongstructfield)
	}
	sort.Slice(sliceofpointertogongstructfieldOrdered[:], func(i, j int) bool {
		return sliceofpointertogongstructfieldOrdered[i].Name < sliceofpointertogongstructfieldOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of SliceOfPointerToGongStructField")
	for idx, sliceofpointertogongstructfield := range sliceofpointertogongstructfieldOrdered {

		id = generatesIdentifier("SliceOfPointerToGongStructField", idx, sliceofpointertogongstructfield.Name)
		map_SliceOfPointerToGongStructField_Identifiers[sliceofpointertogongstructfield] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "SliceOfPointerToGongStructField")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", sliceofpointertogongstructfield.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// SliceOfPointerToGongStructField %s values setup", sliceofpointertogongstructfield.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(sliceofpointertogongstructfield.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Index")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", sliceofpointertogongstructfield.Index))
		initializerStatements += setValueField

	}


	// insertion initialization of objects to stage
	for idx, gongbasicfield := range gongbasicfieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongBasicField", idx, gongbasicfield.Name)
		map_GongBasicField_Identifiers[gongbasicfield] = id

		// Initialisation of values
		if gongbasicfield.GongEnum != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongEnum")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongEnum_Identifiers[gongbasicfield.GongEnum])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, gongenum := range gongenumOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongEnum", idx, gongenum.Name)
		map_GongEnum_Identifiers[gongenum] = id

		// Initialisation of values
		for _, _gongenumvalue := range gongenum.GongEnumValues {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongEnumValues")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongEnumValue_Identifiers[_gongenumvalue])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, gongenumvalue := range gongenumvalueOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongEnumValue", idx, gongenumvalue.Name)
		map_GongEnumValue_Identifiers[gongenumvalue] = id

		// Initialisation of values
	}

	for idx, gongstruct := range gongstructOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongStruct", idx, gongstruct.Name)
		map_GongStruct_Identifiers[gongstruct] = id

		// Initialisation of values
		for _, _gongbasicfield := range gongstruct.GongBasicFields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongBasicFields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongBasicField_Identifiers[_gongbasicfield])
			pointersInitializesStatements += setPointerField
		}

		for _, _gongtimefield := range gongstruct.GongTimeFields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongTimeFields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongTimeField_Identifiers[_gongtimefield])
			pointersInitializesStatements += setPointerField
		}

		for _, _pointertogongstructfield := range gongstruct.PointerToGongStructFields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "PointerToGongStructFields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_PointerToGongStructField_Identifiers[_pointertogongstructfield])
			pointersInitializesStatements += setPointerField
		}

		for _, _sliceofpointertogongstructfield := range gongstruct.SliceOfPointerToGongStructFields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "SliceOfPointerToGongStructFields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_SliceOfPointerToGongStructField_Identifiers[_sliceofpointertogongstructfield])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, gongtimefield := range gongtimefieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongTimeField", idx, gongtimefield.Name)
		map_GongTimeField_Identifiers[gongtimefield] = id

		// Initialisation of values
	}

	for idx, modelpkg := range modelpkgOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("ModelPkg", idx, modelpkg.Name)
		map_ModelPkg_Identifiers[modelpkg] = id

		// Initialisation of values
	}

	for idx, pointertogongstructfield := range pointertogongstructfieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("PointerToGongStructField", idx, pointertogongstructfield.Name)
		map_PointerToGongStructField_Identifiers[pointertogongstructfield] = id

		// Initialisation of values
		if pointertogongstructfield.GongStruct != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongStruct")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongStruct_Identifiers[pointertogongstructfield.GongStruct])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, sliceofpointertogongstructfield := range sliceofpointertogongstructfieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("SliceOfPointerToGongStructField", idx, sliceofpointertogongstructfield.Name)
		map_SliceOfPointerToGongStructField_Identifiers[sliceofpointertogongstructfield] = id

		// Initialisation of values
		if sliceofpointertogongstructfield.GongStruct != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongStruct")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongStruct_Identifiers[sliceofpointertogongstructfield.GongStruct])
			pointersInitializesStatements += setPointerField
		}

	}


	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}
