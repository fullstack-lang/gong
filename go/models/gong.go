// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	GongBasicFields           map[*GongBasicField]struct{}
	GongBasicFields_mapString map[string]*GongBasicField

	GongEnums           map[*GongEnum]struct{}
	GongEnums_mapString map[string]*GongEnum

	GongEnumValues           map[*GongEnumValue]struct{}
	GongEnumValues_mapString map[string]*GongEnumValue

	GongStructs           map[*GongStruct]struct{}
	GongStructs_mapString map[string]*GongStruct

	GongTimeFields           map[*GongTimeField]struct{}
	GongTimeFields_mapString map[string]*GongTimeField

	ModelPkgs           map[*ModelPkg]struct{}
	ModelPkgs_mapString map[string]*ModelPkg

	PointerToGongStructFields           map[*PointerToGongStructField]struct{}
	PointerToGongStructFields_mapString map[string]*PointerToGongStructField

	SliceOfPointerToGongStructFields           map[*SliceOfPointerToGongStructField]struct{}
	SliceOfPointerToGongStructFields_mapString map[string]*SliceOfPointerToGongStructField

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitGongBasicField(gongbasicfield *GongBasicField)
	CheckoutGongBasicField(gongbasicfield *GongBasicField)
	CommitGongEnum(gongenum *GongEnum)
	CheckoutGongEnum(gongenum *GongEnum)
	CommitGongEnumValue(gongenumvalue *GongEnumValue)
	CheckoutGongEnumValue(gongenumvalue *GongEnumValue)
	CommitGongStruct(gongstruct *GongStruct)
	CheckoutGongStruct(gongstruct *GongStruct)
	CommitGongTimeField(gongtimefield *GongTimeField)
	CheckoutGongTimeField(gongtimefield *GongTimeField)
	CommitModelPkg(modelpkg *ModelPkg)
	CheckoutModelPkg(modelpkg *ModelPkg)
	CommitPointerToGongStructField(pointertogongstructfield *PointerToGongStructField)
	CheckoutPointerToGongStructField(pointertogongstructfield *PointerToGongStructField)
	CommitSliceOfPointerToGongStructField(sliceofpointertogongstructfield *SliceOfPointerToGongStructField)
	CheckoutSliceOfPointerToGongStructField(sliceofpointertogongstructfield *SliceOfPointerToGongStructField)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	GongBasicFields:           make(map[*GongBasicField]struct{}),
	GongBasicFields_mapString: make(map[string]*GongBasicField),

	GongEnums:           make(map[*GongEnum]struct{}),
	GongEnums_mapString: make(map[string]*GongEnum),

	GongEnumValues:           make(map[*GongEnumValue]struct{}),
	GongEnumValues_mapString: make(map[string]*GongEnumValue),

	GongStructs:           make(map[*GongStruct]struct{}),
	GongStructs_mapString: make(map[string]*GongStruct),

	GongTimeFields:           make(map[*GongTimeField]struct{}),
	GongTimeFields_mapString: make(map[string]*GongTimeField),

	ModelPkgs:           make(map[*ModelPkg]struct{}),
	ModelPkgs_mapString: make(map[string]*ModelPkg),

	PointerToGongStructFields:           make(map[*PointerToGongStructField]struct{}),
	PointerToGongStructFields_mapString: make(map[string]*PointerToGongStructField),

	SliceOfPointerToGongStructFields:           make(map[*SliceOfPointerToGongStructField]struct{}),
	SliceOfPointerToGongStructFields_mapString: make(map[string]*SliceOfPointerToGongStructField),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["GongBasicField"] = len(stage.GongBasicFields)
	stage.Map_GongStructName_InstancesNb["GongEnum"] = len(stage.GongEnums)
	stage.Map_GongStructName_InstancesNb["GongEnumValue"] = len(stage.GongEnumValues)
	stage.Map_GongStructName_InstancesNb["GongStruct"] = len(stage.GongStructs)
	stage.Map_GongStructName_InstancesNb["GongTimeField"] = len(stage.GongTimeFields)
	stage.Map_GongStructName_InstancesNb["ModelPkg"] = len(stage.ModelPkgs)
	stage.Map_GongStructName_InstancesNb["PointerToGongStructField"] = len(stage.PointerToGongStructFields)
	stage.Map_GongStructName_InstancesNb["SliceOfPointerToGongStructField"] = len(stage.SliceOfPointerToGongStructFields)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getGongBasicFieldOrderedStructWithNameField() []*GongBasicField {
	// have alphabetical order generation
	gongbasicfieldOrdered := []*GongBasicField{}
	for gongbasicfield := range stage.GongBasicFields {
		gongbasicfieldOrdered = append(gongbasicfieldOrdered, gongbasicfield)
	}
	sort.Slice(gongbasicfieldOrdered[:], func(i, j int) bool {
		return gongbasicfieldOrdered[i].Name < gongbasicfieldOrdered[j].Name
	})
	return gongbasicfieldOrdered
}

// Stage puts gongbasicfield to the model stage
func (gongbasicfield *GongBasicField) Stage() *GongBasicField {
	Stage.GongBasicFields[gongbasicfield] = __member
	Stage.GongBasicFields_mapString[gongbasicfield.Name] = gongbasicfield

	return gongbasicfield
}

// Unstage removes gongbasicfield off the model stage
func (gongbasicfield *GongBasicField) Unstage() *GongBasicField {
	delete(Stage.GongBasicFields, gongbasicfield)
	delete(Stage.GongBasicFields_mapString, gongbasicfield.Name)
	return gongbasicfield
}

// commit gongbasicfield to the back repo (if it is already staged)
func (gongbasicfield *GongBasicField) Commit() *GongBasicField {
	if _, ok := Stage.GongBasicFields[gongbasicfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongBasicField(gongbasicfield)
		}
	}
	return gongbasicfield
}

// Checkout gongbasicfield to the back repo (if it is already staged)
func (gongbasicfield *GongBasicField) Checkout() *GongBasicField {
	if _, ok := Stage.GongBasicFields[gongbasicfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongBasicField(gongbasicfield)
		}
	}
	return gongbasicfield
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongbasicfield to the model stage
func (gongbasicfield *GongBasicField) StageCopy() *GongBasicField {
	_gongbasicfield := new(GongBasicField)
	*_gongbasicfield = *gongbasicfield
	_gongbasicfield.Stage()
	return _gongbasicfield
}

// StageAndCommit appends gongbasicfield to the model stage and commit to the orm repo
func (gongbasicfield *GongBasicField) StageAndCommit() *GongBasicField {
	gongbasicfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongBasicField(gongbasicfield)
	}
	return gongbasicfield
}

// DeleteStageAndCommit appends gongbasicfield to the model stage and commit to the orm repo
func (gongbasicfield *GongBasicField) DeleteStageAndCommit() *GongBasicField {
	gongbasicfield.Unstage()
	DeleteORMGongBasicField(gongbasicfield)
	return gongbasicfield
}

// StageCopyAndCommit appends a copy of gongbasicfield to the model stage and commit to the orm repo
func (gongbasicfield *GongBasicField) StageCopyAndCommit() *GongBasicField {
	_gongbasicfield := new(GongBasicField)
	*_gongbasicfield = *gongbasicfield
	_gongbasicfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongBasicField(gongbasicfield)
	}
	return _gongbasicfield
}

// CreateORMGongBasicField enables dynamic staging of a GongBasicField instance
func CreateORMGongBasicField(gongbasicfield *GongBasicField) {
	gongbasicfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongBasicField(gongbasicfield)
	}
}

// DeleteORMGongBasicField enables dynamic staging of a GongBasicField instance
func DeleteORMGongBasicField(gongbasicfield *GongBasicField) {
	gongbasicfield.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongBasicField(gongbasicfield)
	}
}

// for satisfaction of GongStruct interface
func (gongbasicfield *GongBasicField) GetName() (res string) {
	return gongbasicfield.Name
}

func (gongbasicfield *GongBasicField) GetFields() (res []string) {
	// list of fields
	res = []string{"Name", "BasicKindName", "GongEnum", "DeclaredType", "Index"}
	return
}

func (gongbasicfield *GongBasicField) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = gongbasicfield.Name
	case "BasicKindName":
		res = gongbasicfield.BasicKindName
	case "GongEnum":
		if gongbasicfield.GongEnum != nil {
			res = gongbasicfield.GongEnum.Name
		}
	case "DeclaredType":
		res = gongbasicfield.DeclaredType
	case "Index":
		res = fmt.Sprintf("%d", gongbasicfield.Index)
	}
	return
}

func (stage *StageStruct) getGongEnumOrderedStructWithNameField() []*GongEnum {
	// have alphabetical order generation
	gongenumOrdered := []*GongEnum{}
	for gongenum := range stage.GongEnums {
		gongenumOrdered = append(gongenumOrdered, gongenum)
	}
	sort.Slice(gongenumOrdered[:], func(i, j int) bool {
		return gongenumOrdered[i].Name < gongenumOrdered[j].Name
	})
	return gongenumOrdered
}

// Stage puts gongenum to the model stage
func (gongenum *GongEnum) Stage() *GongEnum {
	Stage.GongEnums[gongenum] = __member
	Stage.GongEnums_mapString[gongenum.Name] = gongenum

	return gongenum
}

// Unstage removes gongenum off the model stage
func (gongenum *GongEnum) Unstage() *GongEnum {
	delete(Stage.GongEnums, gongenum)
	delete(Stage.GongEnums_mapString, gongenum.Name)
	return gongenum
}

// commit gongenum to the back repo (if it is already staged)
func (gongenum *GongEnum) Commit() *GongEnum {
	if _, ok := Stage.GongEnums[gongenum]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongEnum(gongenum)
		}
	}
	return gongenum
}

// Checkout gongenum to the back repo (if it is already staged)
func (gongenum *GongEnum) Checkout() *GongEnum {
	if _, ok := Stage.GongEnums[gongenum]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongEnum(gongenum)
		}
	}
	return gongenum
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongenum to the model stage
func (gongenum *GongEnum) StageCopy() *GongEnum {
	_gongenum := new(GongEnum)
	*_gongenum = *gongenum
	_gongenum.Stage()
	return _gongenum
}

// StageAndCommit appends gongenum to the model stage and commit to the orm repo
func (gongenum *GongEnum) StageAndCommit() *GongEnum {
	gongenum.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnum(gongenum)
	}
	return gongenum
}

// DeleteStageAndCommit appends gongenum to the model stage and commit to the orm repo
func (gongenum *GongEnum) DeleteStageAndCommit() *GongEnum {
	gongenum.Unstage()
	DeleteORMGongEnum(gongenum)
	return gongenum
}

// StageCopyAndCommit appends a copy of gongenum to the model stage and commit to the orm repo
func (gongenum *GongEnum) StageCopyAndCommit() *GongEnum {
	_gongenum := new(GongEnum)
	*_gongenum = *gongenum
	_gongenum.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnum(gongenum)
	}
	return _gongenum
}

// CreateORMGongEnum enables dynamic staging of a GongEnum instance
func CreateORMGongEnum(gongenum *GongEnum) {
	gongenum.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnum(gongenum)
	}
}

// DeleteORMGongEnum enables dynamic staging of a GongEnum instance
func DeleteORMGongEnum(gongenum *GongEnum) {
	gongenum.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongEnum(gongenum)
	}
}

// for satisfaction of GongStruct interface
func (gongenum *GongEnum) GetName() (res string) {
	return gongenum.Name
}

func (gongenum *GongEnum) GetFields() (res []string) {
	// list of fields
	res = []string{"Name", "Type", "GongEnumValues"}
	return
}

func (gongenum *GongEnum) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = gongenum.Name
	case "Type":
		res = gongenum.Type.ToCodeString()
	case "GongEnumValues":
		for idx, __instance__ := range gongenum.GongEnumValues {
			if idx > 0 {
				res += "\n"
			}
			res += __instance__.Name
		}
	}
	return
}

func (stage *StageStruct) getGongEnumValueOrderedStructWithNameField() []*GongEnumValue {
	// have alphabetical order generation
	gongenumvalueOrdered := []*GongEnumValue{}
	for gongenumvalue := range stage.GongEnumValues {
		gongenumvalueOrdered = append(gongenumvalueOrdered, gongenumvalue)
	}
	sort.Slice(gongenumvalueOrdered[:], func(i, j int) bool {
		return gongenumvalueOrdered[i].Name < gongenumvalueOrdered[j].Name
	})
	return gongenumvalueOrdered
}

// Stage puts gongenumvalue to the model stage
func (gongenumvalue *GongEnumValue) Stage() *GongEnumValue {
	Stage.GongEnumValues[gongenumvalue] = __member
	Stage.GongEnumValues_mapString[gongenumvalue.Name] = gongenumvalue

	return gongenumvalue
}

// Unstage removes gongenumvalue off the model stage
func (gongenumvalue *GongEnumValue) Unstage() *GongEnumValue {
	delete(Stage.GongEnumValues, gongenumvalue)
	delete(Stage.GongEnumValues_mapString, gongenumvalue.Name)
	return gongenumvalue
}

// commit gongenumvalue to the back repo (if it is already staged)
func (gongenumvalue *GongEnumValue) Commit() *GongEnumValue {
	if _, ok := Stage.GongEnumValues[gongenumvalue]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongEnumValue(gongenumvalue)
		}
	}
	return gongenumvalue
}

// Checkout gongenumvalue to the back repo (if it is already staged)
func (gongenumvalue *GongEnumValue) Checkout() *GongEnumValue {
	if _, ok := Stage.GongEnumValues[gongenumvalue]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongEnumValue(gongenumvalue)
		}
	}
	return gongenumvalue
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongenumvalue to the model stage
func (gongenumvalue *GongEnumValue) StageCopy() *GongEnumValue {
	_gongenumvalue := new(GongEnumValue)
	*_gongenumvalue = *gongenumvalue
	_gongenumvalue.Stage()
	return _gongenumvalue
}

// StageAndCommit appends gongenumvalue to the model stage and commit to the orm repo
func (gongenumvalue *GongEnumValue) StageAndCommit() *GongEnumValue {
	gongenumvalue.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnumValue(gongenumvalue)
	}
	return gongenumvalue
}

// DeleteStageAndCommit appends gongenumvalue to the model stage and commit to the orm repo
func (gongenumvalue *GongEnumValue) DeleteStageAndCommit() *GongEnumValue {
	gongenumvalue.Unstage()
	DeleteORMGongEnumValue(gongenumvalue)
	return gongenumvalue
}

// StageCopyAndCommit appends a copy of gongenumvalue to the model stage and commit to the orm repo
func (gongenumvalue *GongEnumValue) StageCopyAndCommit() *GongEnumValue {
	_gongenumvalue := new(GongEnumValue)
	*_gongenumvalue = *gongenumvalue
	_gongenumvalue.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnumValue(gongenumvalue)
	}
	return _gongenumvalue
}

// CreateORMGongEnumValue enables dynamic staging of a GongEnumValue instance
func CreateORMGongEnumValue(gongenumvalue *GongEnumValue) {
	gongenumvalue.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongEnumValue(gongenumvalue)
	}
}

// DeleteORMGongEnumValue enables dynamic staging of a GongEnumValue instance
func DeleteORMGongEnumValue(gongenumvalue *GongEnumValue) {
	gongenumvalue.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongEnumValue(gongenumvalue)
	}
}

// for satisfaction of GongStruct interface
func (gongenumvalue *GongEnumValue) GetName() (res string) {
	return gongenumvalue.Name
}

func (gongenumvalue *GongEnumValue) GetFields() (res []string) {
	// list of fields
	res = []string{"Name", "Value"}
	return
}

func (gongenumvalue *GongEnumValue) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = gongenumvalue.Name
	case "Value":
		res = gongenumvalue.Value
	}
	return
}

func (stage *StageStruct) getGongStructOrderedStructWithNameField() []*GongStruct {
	// have alphabetical order generation
	gongstructOrdered := []*GongStruct{}
	for gongstruct := range stage.GongStructs {
		gongstructOrdered = append(gongstructOrdered, gongstruct)
	}
	sort.Slice(gongstructOrdered[:], func(i, j int) bool {
		return gongstructOrdered[i].Name < gongstructOrdered[j].Name
	})
	return gongstructOrdered
}

// Stage puts gongstruct to the model stage
func (gongstruct *GongStruct) Stage() *GongStruct {
	Stage.GongStructs[gongstruct] = __member
	Stage.GongStructs_mapString[gongstruct.Name] = gongstruct

	return gongstruct
}

// Unstage removes gongstruct off the model stage
func (gongstruct *GongStruct) Unstage() *GongStruct {
	delete(Stage.GongStructs, gongstruct)
	delete(Stage.GongStructs_mapString, gongstruct.Name)
	return gongstruct
}

// commit gongstruct to the back repo (if it is already staged)
func (gongstruct *GongStruct) Commit() *GongStruct {
	if _, ok := Stage.GongStructs[gongstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongStruct(gongstruct)
		}
	}
	return gongstruct
}

// Checkout gongstruct to the back repo (if it is already staged)
func (gongstruct *GongStruct) Checkout() *GongStruct {
	if _, ok := Stage.GongStructs[gongstruct]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongStruct(gongstruct)
		}
	}
	return gongstruct
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongstruct to the model stage
func (gongstruct *GongStruct) StageCopy() *GongStruct {
	_gongstruct := new(GongStruct)
	*_gongstruct = *gongstruct
	_gongstruct.Stage()
	return _gongstruct
}

// StageAndCommit appends gongstruct to the model stage and commit to the orm repo
func (gongstruct *GongStruct) StageAndCommit() *GongStruct {
	gongstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongStruct(gongstruct)
	}
	return gongstruct
}

// DeleteStageAndCommit appends gongstruct to the model stage and commit to the orm repo
func (gongstruct *GongStruct) DeleteStageAndCommit() *GongStruct {
	gongstruct.Unstage()
	DeleteORMGongStruct(gongstruct)
	return gongstruct
}

// StageCopyAndCommit appends a copy of gongstruct to the model stage and commit to the orm repo
func (gongstruct *GongStruct) StageCopyAndCommit() *GongStruct {
	_gongstruct := new(GongStruct)
	*_gongstruct = *gongstruct
	_gongstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongStruct(gongstruct)
	}
	return _gongstruct
}

// CreateORMGongStruct enables dynamic staging of a GongStruct instance
func CreateORMGongStruct(gongstruct *GongStruct) {
	gongstruct.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongStruct(gongstruct)
	}
}

// DeleteORMGongStruct enables dynamic staging of a GongStruct instance
func DeleteORMGongStruct(gongstruct *GongStruct) {
	gongstruct.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongStruct(gongstruct)
	}
}

// for satisfaction of GongStruct interface
func (gongstruct *GongStruct) GetName() (res string) {
	return gongstruct.Name
}

func (gongstruct *GongStruct) GetFields() (res []string) {
	// list of fields
	res = []string{"Name", "GongBasicFields", "GongTimeFields", "PointerToGongStructFields", "SliceOfPointerToGongStructFields"}
	return
}

func (gongstruct *GongStruct) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = gongstruct.Name
	case "GongBasicFields":
		for idx, __instance__ := range gongstruct.GongBasicFields {
			if idx > 0 {
				res += "\n"
			}
			res += __instance__.Name
		}
	case "GongTimeFields":
		for idx, __instance__ := range gongstruct.GongTimeFields {
			if idx > 0 {
				res += "\n"
			}
			res += __instance__.Name
		}
	case "PointerToGongStructFields":
		for idx, __instance__ := range gongstruct.PointerToGongStructFields {
			if idx > 0 {
				res += "\n"
			}
			res += __instance__.Name
		}
	case "SliceOfPointerToGongStructFields":
		for idx, __instance__ := range gongstruct.SliceOfPointerToGongStructFields {
			if idx > 0 {
				res += "\n"
			}
			res += __instance__.Name
		}
	}
	return
}

func (stage *StageStruct) getGongTimeFieldOrderedStructWithNameField() []*GongTimeField {
	// have alphabetical order generation
	gongtimefieldOrdered := []*GongTimeField{}
	for gongtimefield := range stage.GongTimeFields {
		gongtimefieldOrdered = append(gongtimefieldOrdered, gongtimefield)
	}
	sort.Slice(gongtimefieldOrdered[:], func(i, j int) bool {
		return gongtimefieldOrdered[i].Name < gongtimefieldOrdered[j].Name
	})
	return gongtimefieldOrdered
}

// Stage puts gongtimefield to the model stage
func (gongtimefield *GongTimeField) Stage() *GongTimeField {
	Stage.GongTimeFields[gongtimefield] = __member
	Stage.GongTimeFields_mapString[gongtimefield.Name] = gongtimefield

	return gongtimefield
}

// Unstage removes gongtimefield off the model stage
func (gongtimefield *GongTimeField) Unstage() *GongTimeField {
	delete(Stage.GongTimeFields, gongtimefield)
	delete(Stage.GongTimeFields_mapString, gongtimefield.Name)
	return gongtimefield
}

// commit gongtimefield to the back repo (if it is already staged)
func (gongtimefield *GongTimeField) Commit() *GongTimeField {
	if _, ok := Stage.GongTimeFields[gongtimefield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongTimeField(gongtimefield)
		}
	}
	return gongtimefield
}

// Checkout gongtimefield to the back repo (if it is already staged)
func (gongtimefield *GongTimeField) Checkout() *GongTimeField {
	if _, ok := Stage.GongTimeFields[gongtimefield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongTimeField(gongtimefield)
		}
	}
	return gongtimefield
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongtimefield to the model stage
func (gongtimefield *GongTimeField) StageCopy() *GongTimeField {
	_gongtimefield := new(GongTimeField)
	*_gongtimefield = *gongtimefield
	_gongtimefield.Stage()
	return _gongtimefield
}

// StageAndCommit appends gongtimefield to the model stage and commit to the orm repo
func (gongtimefield *GongTimeField) StageAndCommit() *GongTimeField {
	gongtimefield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongTimeField(gongtimefield)
	}
	return gongtimefield
}

// DeleteStageAndCommit appends gongtimefield to the model stage and commit to the orm repo
func (gongtimefield *GongTimeField) DeleteStageAndCommit() *GongTimeField {
	gongtimefield.Unstage()
	DeleteORMGongTimeField(gongtimefield)
	return gongtimefield
}

// StageCopyAndCommit appends a copy of gongtimefield to the model stage and commit to the orm repo
func (gongtimefield *GongTimeField) StageCopyAndCommit() *GongTimeField {
	_gongtimefield := new(GongTimeField)
	*_gongtimefield = *gongtimefield
	_gongtimefield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongTimeField(gongtimefield)
	}
	return _gongtimefield
}

// CreateORMGongTimeField enables dynamic staging of a GongTimeField instance
func CreateORMGongTimeField(gongtimefield *GongTimeField) {
	gongtimefield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongTimeField(gongtimefield)
	}
}

// DeleteORMGongTimeField enables dynamic staging of a GongTimeField instance
func DeleteORMGongTimeField(gongtimefield *GongTimeField) {
	gongtimefield.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongTimeField(gongtimefield)
	}
}

// for satisfaction of GongStruct interface
func (gongtimefield *GongTimeField) GetName() (res string) {
	return gongtimefield.Name
}

func (gongtimefield *GongTimeField) GetFields() (res []string) {
	// list of fields
	res = []string{"Name", "Index"}
	return
}

func (gongtimefield *GongTimeField) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = gongtimefield.Name
	case "Index":
		res = fmt.Sprintf("%d", gongtimefield.Index)
	}
	return
}

func (stage *StageStruct) getModelPkgOrderedStructWithNameField() []*ModelPkg {
	// have alphabetical order generation
	modelpkgOrdered := []*ModelPkg{}
	for modelpkg := range stage.ModelPkgs {
		modelpkgOrdered = append(modelpkgOrdered, modelpkg)
	}
	sort.Slice(modelpkgOrdered[:], func(i, j int) bool {
		return modelpkgOrdered[i].Name < modelpkgOrdered[j].Name
	})
	return modelpkgOrdered
}

// Stage puts modelpkg to the model stage
func (modelpkg *ModelPkg) Stage() *ModelPkg {
	Stage.ModelPkgs[modelpkg] = __member
	Stage.ModelPkgs_mapString[modelpkg.Name] = modelpkg

	return modelpkg
}

// Unstage removes modelpkg off the model stage
func (modelpkg *ModelPkg) Unstage() *ModelPkg {
	delete(Stage.ModelPkgs, modelpkg)
	delete(Stage.ModelPkgs_mapString, modelpkg.Name)
	return modelpkg
}

// commit modelpkg to the back repo (if it is already staged)
func (modelpkg *ModelPkg) Commit() *ModelPkg {
	if _, ok := Stage.ModelPkgs[modelpkg]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitModelPkg(modelpkg)
		}
	}
	return modelpkg
}

// Checkout modelpkg to the back repo (if it is already staged)
func (modelpkg *ModelPkg) Checkout() *ModelPkg {
	if _, ok := Stage.ModelPkgs[modelpkg]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutModelPkg(modelpkg)
		}
	}
	return modelpkg
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of modelpkg to the model stage
func (modelpkg *ModelPkg) StageCopy() *ModelPkg {
	_modelpkg := new(ModelPkg)
	*_modelpkg = *modelpkg
	_modelpkg.Stage()
	return _modelpkg
}

// StageAndCommit appends modelpkg to the model stage and commit to the orm repo
func (modelpkg *ModelPkg) StageAndCommit() *ModelPkg {
	modelpkg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMModelPkg(modelpkg)
	}
	return modelpkg
}

// DeleteStageAndCommit appends modelpkg to the model stage and commit to the orm repo
func (modelpkg *ModelPkg) DeleteStageAndCommit() *ModelPkg {
	modelpkg.Unstage()
	DeleteORMModelPkg(modelpkg)
	return modelpkg
}

// StageCopyAndCommit appends a copy of modelpkg to the model stage and commit to the orm repo
func (modelpkg *ModelPkg) StageCopyAndCommit() *ModelPkg {
	_modelpkg := new(ModelPkg)
	*_modelpkg = *modelpkg
	_modelpkg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMModelPkg(modelpkg)
	}
	return _modelpkg
}

// CreateORMModelPkg enables dynamic staging of a ModelPkg instance
func CreateORMModelPkg(modelpkg *ModelPkg) {
	modelpkg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMModelPkg(modelpkg)
	}
}

// DeleteORMModelPkg enables dynamic staging of a ModelPkg instance
func DeleteORMModelPkg(modelpkg *ModelPkg) {
	modelpkg.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMModelPkg(modelpkg)
	}
}

// for satisfaction of GongStruct interface
func (modelpkg *ModelPkg) GetName() (res string) {
	return modelpkg.Name
}

func (modelpkg *ModelPkg) GetFields() (res []string) {
	// list of fields
	res = []string{"Name", "PkgPath"}
	return
}

func (modelpkg *ModelPkg) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = modelpkg.Name
	case "PkgPath":
		res = modelpkg.PkgPath
	}
	return
}

func (stage *StageStruct) getPointerToGongStructFieldOrderedStructWithNameField() []*PointerToGongStructField {
	// have alphabetical order generation
	pointertogongstructfieldOrdered := []*PointerToGongStructField{}
	for pointertogongstructfield := range stage.PointerToGongStructFields {
		pointertogongstructfieldOrdered = append(pointertogongstructfieldOrdered, pointertogongstructfield)
	}
	sort.Slice(pointertogongstructfieldOrdered[:], func(i, j int) bool {
		return pointertogongstructfieldOrdered[i].Name < pointertogongstructfieldOrdered[j].Name
	})
	return pointertogongstructfieldOrdered
}

// Stage puts pointertogongstructfield to the model stage
func (pointertogongstructfield *PointerToGongStructField) Stage() *PointerToGongStructField {
	Stage.PointerToGongStructFields[pointertogongstructfield] = __member
	Stage.PointerToGongStructFields_mapString[pointertogongstructfield.Name] = pointertogongstructfield

	return pointertogongstructfield
}

// Unstage removes pointertogongstructfield off the model stage
func (pointertogongstructfield *PointerToGongStructField) Unstage() *PointerToGongStructField {
	delete(Stage.PointerToGongStructFields, pointertogongstructfield)
	delete(Stage.PointerToGongStructFields_mapString, pointertogongstructfield.Name)
	return pointertogongstructfield
}

// commit pointertogongstructfield to the back repo (if it is already staged)
func (pointertogongstructfield *PointerToGongStructField) Commit() *PointerToGongStructField {
	if _, ok := Stage.PointerToGongStructFields[pointertogongstructfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitPointerToGongStructField(pointertogongstructfield)
		}
	}
	return pointertogongstructfield
}

// Checkout pointertogongstructfield to the back repo (if it is already staged)
func (pointertogongstructfield *PointerToGongStructField) Checkout() *PointerToGongStructField {
	if _, ok := Stage.PointerToGongStructFields[pointertogongstructfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutPointerToGongStructField(pointertogongstructfield)
		}
	}
	return pointertogongstructfield
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of pointertogongstructfield to the model stage
func (pointertogongstructfield *PointerToGongStructField) StageCopy() *PointerToGongStructField {
	_pointertogongstructfield := new(PointerToGongStructField)
	*_pointertogongstructfield = *pointertogongstructfield
	_pointertogongstructfield.Stage()
	return _pointertogongstructfield
}

// StageAndCommit appends pointertogongstructfield to the model stage and commit to the orm repo
func (pointertogongstructfield *PointerToGongStructField) StageAndCommit() *PointerToGongStructField {
	pointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPointerToGongStructField(pointertogongstructfield)
	}
	return pointertogongstructfield
}

// DeleteStageAndCommit appends pointertogongstructfield to the model stage and commit to the orm repo
func (pointertogongstructfield *PointerToGongStructField) DeleteStageAndCommit() *PointerToGongStructField {
	pointertogongstructfield.Unstage()
	DeleteORMPointerToGongStructField(pointertogongstructfield)
	return pointertogongstructfield
}

// StageCopyAndCommit appends a copy of pointertogongstructfield to the model stage and commit to the orm repo
func (pointertogongstructfield *PointerToGongStructField) StageCopyAndCommit() *PointerToGongStructField {
	_pointertogongstructfield := new(PointerToGongStructField)
	*_pointertogongstructfield = *pointertogongstructfield
	_pointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPointerToGongStructField(pointertogongstructfield)
	}
	return _pointertogongstructfield
}

// CreateORMPointerToGongStructField enables dynamic staging of a PointerToGongStructField instance
func CreateORMPointerToGongStructField(pointertogongstructfield *PointerToGongStructField) {
	pointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPointerToGongStructField(pointertogongstructfield)
	}
}

// DeleteORMPointerToGongStructField enables dynamic staging of a PointerToGongStructField instance
func DeleteORMPointerToGongStructField(pointertogongstructfield *PointerToGongStructField) {
	pointertogongstructfield.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMPointerToGongStructField(pointertogongstructfield)
	}
}

func (pointertogongstructfield *PointerToGongStructField) GetFields() (res []string) {
	// list of fields
	res = []string{"Name", "GongStruct", "Index"}
	return
}

func (pointertogongstructfield *PointerToGongStructField) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = pointertogongstructfield.Name
	case "GongStruct":
		if pointertogongstructfield.GongStruct != nil {
			res = pointertogongstructfield.GongStruct.Name
		}
	case "Index":
		res = fmt.Sprintf("%d", pointertogongstructfield.Index)
	}
	return
}

func (stage *StageStruct) getSliceOfPointerToGongStructFieldOrderedStructWithNameField() []*SliceOfPointerToGongStructField {
	// have alphabetical order generation
	sliceofpointertogongstructfieldOrdered := []*SliceOfPointerToGongStructField{}
	for sliceofpointertogongstructfield := range stage.SliceOfPointerToGongStructFields {
		sliceofpointertogongstructfieldOrdered = append(sliceofpointertogongstructfieldOrdered, sliceofpointertogongstructfield)
	}
	sort.Slice(sliceofpointertogongstructfieldOrdered[:], func(i, j int) bool {
		return sliceofpointertogongstructfieldOrdered[i].Name < sliceofpointertogongstructfieldOrdered[j].Name
	})
	return sliceofpointertogongstructfieldOrdered
}

// Stage puts sliceofpointertogongstructfield to the model stage
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) Stage() *SliceOfPointerToGongStructField {
	Stage.SliceOfPointerToGongStructFields[sliceofpointertogongstructfield] = __member
	Stage.SliceOfPointerToGongStructFields_mapString[sliceofpointertogongstructfield.Name] = sliceofpointertogongstructfield

	return sliceofpointertogongstructfield
}

// Unstage removes sliceofpointertogongstructfield off the model stage
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) Unstage() *SliceOfPointerToGongStructField {
	delete(Stage.SliceOfPointerToGongStructFields, sliceofpointertogongstructfield)
	delete(Stage.SliceOfPointerToGongStructFields_mapString, sliceofpointertogongstructfield.Name)
	return sliceofpointertogongstructfield
}

// commit sliceofpointertogongstructfield to the back repo (if it is already staged)
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) Commit() *SliceOfPointerToGongStructField {
	if _, ok := Stage.SliceOfPointerToGongStructFields[sliceofpointertogongstructfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
		}
	}
	return sliceofpointertogongstructfield
}

// Checkout sliceofpointertogongstructfield to the back repo (if it is already staged)
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) Checkout() *SliceOfPointerToGongStructField {
	if _, ok := Stage.SliceOfPointerToGongStructFields[sliceofpointertogongstructfield]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
		}
	}
	return sliceofpointertogongstructfield
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of sliceofpointertogongstructfield to the model stage
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) StageCopy() *SliceOfPointerToGongStructField {
	_sliceofpointertogongstructfield := new(SliceOfPointerToGongStructField)
	*_sliceofpointertogongstructfield = *sliceofpointertogongstructfield
	_sliceofpointertogongstructfield.Stage()
	return _sliceofpointertogongstructfield
}

// StageAndCommit appends sliceofpointertogongstructfield to the model stage and commit to the orm repo
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) StageAndCommit() *SliceOfPointerToGongStructField {
	sliceofpointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	}
	return sliceofpointertogongstructfield
}

// DeleteStageAndCommit appends sliceofpointertogongstructfield to the model stage and commit to the orm repo
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) DeleteStageAndCommit() *SliceOfPointerToGongStructField {
	sliceofpointertogongstructfield.Unstage()
	DeleteORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	return sliceofpointertogongstructfield
}

// StageCopyAndCommit appends a copy of sliceofpointertogongstructfield to the model stage and commit to the orm repo
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) StageCopyAndCommit() *SliceOfPointerToGongStructField {
	_sliceofpointertogongstructfield := new(SliceOfPointerToGongStructField)
	*_sliceofpointertogongstructfield = *sliceofpointertogongstructfield
	_sliceofpointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	}
	return _sliceofpointertogongstructfield
}

// CreateORMSliceOfPointerToGongStructField enables dynamic staging of a SliceOfPointerToGongStructField instance
func CreateORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield *SliceOfPointerToGongStructField) {
	sliceofpointertogongstructfield.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	}
}

// DeleteORMSliceOfPointerToGongStructField enables dynamic staging of a SliceOfPointerToGongStructField instance
func DeleteORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield *SliceOfPointerToGongStructField) {
	sliceofpointertogongstructfield.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMSliceOfPointerToGongStructField(sliceofpointertogongstructfield)
	}
}

// for satisfaction of GongStruct interface
func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) GetName() (res string) {
	return sliceofpointertogongstructfield.Name
}

func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) GetFields() (res []string) {
	// list of fields
	res = []string{"Name", "GongStruct", "Index"}
	return
}

func (sliceofpointertogongstructfield *SliceOfPointerToGongStructField) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = sliceofpointertogongstructfield.Name
	case "GongStruct":
		if sliceofpointertogongstructfield.GongStruct != nil {
			res = sliceofpointertogongstructfield.GongStruct.Name
		}
	case "Index":
		res = fmt.Sprintf("%d", sliceofpointertogongstructfield.Index)
	}
	return
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMGongBasicField(GongBasicField *GongBasicField)
	CreateORMGongEnum(GongEnum *GongEnum)
	CreateORMGongEnumValue(GongEnumValue *GongEnumValue)
	CreateORMGongStruct(GongStruct *GongStruct)
	CreateORMGongTimeField(GongTimeField *GongTimeField)
	CreateORMModelPkg(ModelPkg *ModelPkg)
	CreateORMPointerToGongStructField(PointerToGongStructField *PointerToGongStructField)
	CreateORMSliceOfPointerToGongStructField(SliceOfPointerToGongStructField *SliceOfPointerToGongStructField)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMGongBasicField(GongBasicField *GongBasicField)
	DeleteORMGongEnum(GongEnum *GongEnum)
	DeleteORMGongEnumValue(GongEnumValue *GongEnumValue)
	DeleteORMGongStruct(GongStruct *GongStruct)
	DeleteORMGongTimeField(GongTimeField *GongTimeField)
	DeleteORMModelPkg(ModelPkg *ModelPkg)
	DeleteORMPointerToGongStructField(PointerToGongStructField *PointerToGongStructField)
	DeleteORMSliceOfPointerToGongStructField(SliceOfPointerToGongStructField *SliceOfPointerToGongStructField)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.GongBasicFields = make(map[*GongBasicField]struct{})
	stage.GongBasicFields_mapString = make(map[string]*GongBasicField)

	stage.GongEnums = make(map[*GongEnum]struct{})
	stage.GongEnums_mapString = make(map[string]*GongEnum)

	stage.GongEnumValues = make(map[*GongEnumValue]struct{})
	stage.GongEnumValues_mapString = make(map[string]*GongEnumValue)

	stage.GongStructs = make(map[*GongStruct]struct{})
	stage.GongStructs_mapString = make(map[string]*GongStruct)

	stage.GongTimeFields = make(map[*GongTimeField]struct{})
	stage.GongTimeFields_mapString = make(map[string]*GongTimeField)

	stage.ModelPkgs = make(map[*ModelPkg]struct{})
	stage.ModelPkgs_mapString = make(map[string]*ModelPkg)

	stage.PointerToGongStructFields = make(map[*PointerToGongStructField]struct{})
	stage.PointerToGongStructFields_mapString = make(map[string]*PointerToGongStructField)

	stage.SliceOfPointerToGongStructFields = make(map[*SliceOfPointerToGongStructField]struct{})
	stage.SliceOfPointerToGongStructFields_mapString = make(map[string]*SliceOfPointerToGongStructField)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.GongBasicFields = nil
	stage.GongBasicFields_mapString = nil

	stage.GongEnums = nil
	stage.GongEnums_mapString = nil

	stage.GongEnumValues = nil
	stage.GongEnumValues_mapString = nil

	stage.GongStructs = nil
	stage.GongStructs_mapString = nil

	stage.GongTimeFields = nil
	stage.GongTimeFields_mapString = nil

	stage.ModelPkgs = nil
	stage.ModelPkgs_mapString = nil

	stage.PointerToGongStructFields = nil
	stage.PointerToGongStructFields_mapString = nil

	stage.SliceOfPointerToGongStructFields = nil
	stage.SliceOfPointerToGongStructFields_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const StringEnumInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_GongBasicField_Identifiers := make(map[*GongBasicField]string)
	_ = map_GongBasicField_Identifiers

	gongbasicfieldOrdered := []*GongBasicField{}
	for gongbasicfield := range stage.GongBasicFields {
		gongbasicfieldOrdered = append(gongbasicfieldOrdered, gongbasicfield)
	}
	sort.Slice(gongbasicfieldOrdered[:], func(i, j int) bool {
		return gongbasicfieldOrdered[i].Name < gongbasicfieldOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongBasicField")
	for idx, gongbasicfield := range gongbasicfieldOrdered {

		id = generatesIdentifier("GongBasicField", idx, gongbasicfield.Name)
		map_GongBasicField_Identifiers[gongbasicfield] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongBasicField")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongbasicfield.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongBasicField %s values setup", gongbasicfield.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongbasicfield.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "BasicKindName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongbasicfield.BasicKindName))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DeclaredType")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongbasicfield.DeclaredType))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Index")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", gongbasicfield.Index))
		initializerStatements += setValueField

	}

	map_GongEnum_Identifiers := make(map[*GongEnum]string)
	_ = map_GongEnum_Identifiers

	gongenumOrdered := []*GongEnum{}
	for gongenum := range stage.GongEnums {
		gongenumOrdered = append(gongenumOrdered, gongenum)
	}
	sort.Slice(gongenumOrdered[:], func(i, j int) bool {
		return gongenumOrdered[i].Name < gongenumOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongEnum")
	for idx, gongenum := range gongenumOrdered {

		id = generatesIdentifier("GongEnum", idx, gongenum.Name)
		map_GongEnum_Identifiers[gongenum] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongEnum")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongenum.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongEnum %s values setup", gongenum.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongenum.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Type")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+gongenum.Type.ToCodeString())
		initializerStatements += setValueField

	}

	map_GongEnumValue_Identifiers := make(map[*GongEnumValue]string)
	_ = map_GongEnumValue_Identifiers

	gongenumvalueOrdered := []*GongEnumValue{}
	for gongenumvalue := range stage.GongEnumValues {
		gongenumvalueOrdered = append(gongenumvalueOrdered, gongenumvalue)
	}
	sort.Slice(gongenumvalueOrdered[:], func(i, j int) bool {
		return gongenumvalueOrdered[i].Name < gongenumvalueOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongEnumValue")
	for idx, gongenumvalue := range gongenumvalueOrdered {

		id = generatesIdentifier("GongEnumValue", idx, gongenumvalue.Name)
		map_GongEnumValue_Identifiers[gongenumvalue] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongEnumValue")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongenumvalue.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongEnumValue %s values setup", gongenumvalue.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongenumvalue.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Value")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongenumvalue.Value))
		initializerStatements += setValueField

	}

	map_GongStruct_Identifiers := make(map[*GongStruct]string)
	_ = map_GongStruct_Identifiers

	gongstructOrdered := []*GongStruct{}
	for gongstruct := range stage.GongStructs {
		gongstructOrdered = append(gongstructOrdered, gongstruct)
	}
	sort.Slice(gongstructOrdered[:], func(i, j int) bool {
		return gongstructOrdered[i].Name < gongstructOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongStruct")
	for idx, gongstruct := range gongstructOrdered {

		id = generatesIdentifier("GongStruct", idx, gongstruct.Name)
		map_GongStruct_Identifiers[gongstruct] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongStruct")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongstruct.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongStruct %s values setup", gongstruct.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongstruct.Name))
		initializerStatements += setValueField

	}

	map_GongTimeField_Identifiers := make(map[*GongTimeField]string)
	_ = map_GongTimeField_Identifiers

	gongtimefieldOrdered := []*GongTimeField{}
	for gongtimefield := range stage.GongTimeFields {
		gongtimefieldOrdered = append(gongtimefieldOrdered, gongtimefield)
	}
	sort.Slice(gongtimefieldOrdered[:], func(i, j int) bool {
		return gongtimefieldOrdered[i].Name < gongtimefieldOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongTimeField")
	for idx, gongtimefield := range gongtimefieldOrdered {

		id = generatesIdentifier("GongTimeField", idx, gongtimefield.Name)
		map_GongTimeField_Identifiers[gongtimefield] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongTimeField")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongtimefield.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongTimeField %s values setup", gongtimefield.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongtimefield.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Index")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", gongtimefield.Index))
		initializerStatements += setValueField

	}

	map_ModelPkg_Identifiers := make(map[*ModelPkg]string)
	_ = map_ModelPkg_Identifiers

	modelpkgOrdered := []*ModelPkg{}
	for modelpkg := range stage.ModelPkgs {
		modelpkgOrdered = append(modelpkgOrdered, modelpkg)
	}
	sort.Slice(modelpkgOrdered[:], func(i, j int) bool {
		return modelpkgOrdered[i].Name < modelpkgOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of ModelPkg")
	for idx, modelpkg := range modelpkgOrdered {

		id = generatesIdentifier("ModelPkg", idx, modelpkg.Name)
		map_ModelPkg_Identifiers[modelpkg] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "ModelPkg")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", modelpkg.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// ModelPkg %s values setup", modelpkg.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(modelpkg.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "PkgPath")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(modelpkg.PkgPath))
		initializerStatements += setValueField

	}

	map_PointerToGongStructField_Identifiers := make(map[*PointerToGongStructField]string)
	_ = map_PointerToGongStructField_Identifiers

	pointertogongstructfieldOrdered := []*PointerToGongStructField{}
	for pointertogongstructfield := range stage.PointerToGongStructFields {
		pointertogongstructfieldOrdered = append(pointertogongstructfieldOrdered, pointertogongstructfield)
	}
	sort.Slice(pointertogongstructfieldOrdered[:], func(i, j int) bool {
		return pointertogongstructfieldOrdered[i].Name < pointertogongstructfieldOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of PointerToGongStructField")
	for idx, pointertogongstructfield := range pointertogongstructfieldOrdered {

		id = generatesIdentifier("PointerToGongStructField", idx, pointertogongstructfield.Name)
		map_PointerToGongStructField_Identifiers[pointertogongstructfield] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "PointerToGongStructField")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", pointertogongstructfield.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// PointerToGongStructField %s values setup", pointertogongstructfield.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(pointertogongstructfield.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Index")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", pointertogongstructfield.Index))
		initializerStatements += setValueField

	}

	map_SliceOfPointerToGongStructField_Identifiers := make(map[*SliceOfPointerToGongStructField]string)
	_ = map_SliceOfPointerToGongStructField_Identifiers

	sliceofpointertogongstructfieldOrdered := []*SliceOfPointerToGongStructField{}
	for sliceofpointertogongstructfield := range stage.SliceOfPointerToGongStructFields {
		sliceofpointertogongstructfieldOrdered = append(sliceofpointertogongstructfieldOrdered, sliceofpointertogongstructfield)
	}
	sort.Slice(sliceofpointertogongstructfieldOrdered[:], func(i, j int) bool {
		return sliceofpointertogongstructfieldOrdered[i].Name < sliceofpointertogongstructfieldOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of SliceOfPointerToGongStructField")
	for idx, sliceofpointertogongstructfield := range sliceofpointertogongstructfieldOrdered {

		id = generatesIdentifier("SliceOfPointerToGongStructField", idx, sliceofpointertogongstructfield.Name)
		map_SliceOfPointerToGongStructField_Identifiers[sliceofpointertogongstructfield] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "SliceOfPointerToGongStructField")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", sliceofpointertogongstructfield.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// SliceOfPointerToGongStructField %s values setup", sliceofpointertogongstructfield.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(sliceofpointertogongstructfield.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Index")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", sliceofpointertogongstructfield.Index))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, gongbasicfield := range gongbasicfieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongBasicField", idx, gongbasicfield.Name)
		map_GongBasicField_Identifiers[gongbasicfield] = id

		// Initialisation of values
		if gongbasicfield.GongEnum != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongEnum")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongEnum_Identifiers[gongbasicfield.GongEnum])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, gongenum := range gongenumOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongEnum", idx, gongenum.Name)
		map_GongEnum_Identifiers[gongenum] = id

		// Initialisation of values
		for _, _gongenumvalue := range gongenum.GongEnumValues {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongEnumValues")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongEnumValue_Identifiers[_gongenumvalue])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, gongenumvalue := range gongenumvalueOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongEnumValue", idx, gongenumvalue.Name)
		map_GongEnumValue_Identifiers[gongenumvalue] = id

		// Initialisation of values
	}

	for idx, gongstruct := range gongstructOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongStruct", idx, gongstruct.Name)
		map_GongStruct_Identifiers[gongstruct] = id

		// Initialisation of values
		for _, _gongbasicfield := range gongstruct.GongBasicFields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongBasicFields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongBasicField_Identifiers[_gongbasicfield])
			pointersInitializesStatements += setPointerField
		}

		for _, _gongtimefield := range gongstruct.GongTimeFields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongTimeFields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongTimeField_Identifiers[_gongtimefield])
			pointersInitializesStatements += setPointerField
		}

		for _, _pointertogongstructfield := range gongstruct.PointerToGongStructFields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "PointerToGongStructFields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_PointerToGongStructField_Identifiers[_pointertogongstructfield])
			pointersInitializesStatements += setPointerField
		}

		for _, _sliceofpointertogongstructfield := range gongstruct.SliceOfPointerToGongStructFields {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "SliceOfPointerToGongStructFields")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_SliceOfPointerToGongStructField_Identifiers[_sliceofpointertogongstructfield])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, gongtimefield := range gongtimefieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongTimeField", idx, gongtimefield.Name)
		map_GongTimeField_Identifiers[gongtimefield] = id

		// Initialisation of values
	}

	for idx, modelpkg := range modelpkgOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("ModelPkg", idx, modelpkg.Name)
		map_ModelPkg_Identifiers[modelpkg] = id

		// Initialisation of values
	}

	for idx, pointertogongstructfield := range pointertogongstructfieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("PointerToGongStructField", idx, pointertogongstructfield.Name)
		map_PointerToGongStructField_Identifiers[pointertogongstructfield] = id

		// Initialisation of values
		if pointertogongstructfield.GongStruct != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongStruct")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongStruct_Identifiers[pointertogongstructfield.GongStruct])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, sliceofpointertogongstructfield := range sliceofpointertogongstructfieldOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("SliceOfPointerToGongStructField", idx, sliceofpointertogongstructfield.Name)
		map_SliceOfPointerToGongStructField_Identifiers[sliceofpointertogongstructfield] = id

		// Initialisation of values
		if sliceofpointertogongstructfield.GongStruct != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GongStruct")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_GongStruct_Identifiers[sliceofpointertogongstructfield.GongStruct])
			pointersInitializesStatements += setPointerField
		}

	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of enum utility functions
// Utility function for BackRepoInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (backrepoinsertionpoint BackRepoInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch backrepoinsertionpoint {
	// insertion code per enum code
	case BackRepoBasicAndTimeFieldsName:
		res = 1
	case BackRepoBasicAndTimeFieldsWOPDeclaration:
		res = 3
	case BackRepoBasicFieldsCheckout:
		res = 8
	case BackRepoBasicFieldsCommit:
		res = 6
	case BackRepoBasicFieldsDeclaration:
		res = 0
	case BackRepoNbInsertionPoints:
		res = 11
	case BackRepoPointerEncodingFieldsCheckout:
		res = 9
	case BackRepoPointerEncodingFieldsCommit:
		res = 7
	case BackRepoPointerEncodingFieldsDeclaration:
		res = 4
	case BackRepoPointerEncodingFieldsReindexing:
		res = 10
	case BackRepoPointerEncodingFieldsWOPDeclaration:
		res = 5
	case BackRepoWOPInitialIndex:
		res = 2
	}
	return
}

func (backrepoinsertionpoint *BackRepoInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 1:
		*backrepoinsertionpoint = BackRepoBasicAndTimeFieldsName
	case 3:
		*backrepoinsertionpoint = BackRepoBasicAndTimeFieldsWOPDeclaration
	case 8:
		*backrepoinsertionpoint = BackRepoBasicFieldsCheckout
	case 6:
		*backrepoinsertionpoint = BackRepoBasicFieldsCommit
	case 0:
		*backrepoinsertionpoint = BackRepoBasicFieldsDeclaration
	case 11:
		*backrepoinsertionpoint = BackRepoNbInsertionPoints
	case 9:
		*backrepoinsertionpoint = BackRepoPointerEncodingFieldsCheckout
	case 7:
		*backrepoinsertionpoint = BackRepoPointerEncodingFieldsCommit
	case 4:
		*backrepoinsertionpoint = BackRepoPointerEncodingFieldsDeclaration
	case 10:
		*backrepoinsertionpoint = BackRepoPointerEncodingFieldsReindexing
	case 5:
		*backrepoinsertionpoint = BackRepoPointerEncodingFieldsWOPDeclaration
	case 2:
		*backrepoinsertionpoint = BackRepoWOPInitialIndex
	}
}

func (backrepoinsertionpoint *BackRepoInsertionPoint) ToCodeString() (res string) {

	switch *backrepoinsertionpoint {
	// insertion code per enum code
	case BackRepoBasicAndTimeFieldsName:
		res = "BackRepoBasicAndTimeFieldsName"
	case BackRepoBasicAndTimeFieldsWOPDeclaration:
		res = "BackRepoBasicAndTimeFieldsWOPDeclaration"
	case BackRepoBasicFieldsCheckout:
		res = "BackRepoBasicFieldsCheckout"
	case BackRepoBasicFieldsCommit:
		res = "BackRepoBasicFieldsCommit"
	case BackRepoBasicFieldsDeclaration:
		res = "BackRepoBasicFieldsDeclaration"
	case BackRepoNbInsertionPoints:
		res = "BackRepoNbInsertionPoints"
	case BackRepoPointerEncodingFieldsCheckout:
		res = "BackRepoPointerEncodingFieldsCheckout"
	case BackRepoPointerEncodingFieldsCommit:
		res = "BackRepoPointerEncodingFieldsCommit"
	case BackRepoPointerEncodingFieldsDeclaration:
		res = "BackRepoPointerEncodingFieldsDeclaration"
	case BackRepoPointerEncodingFieldsReindexing:
		res = "BackRepoPointerEncodingFieldsReindexing"
	case BackRepoPointerEncodingFieldsWOPDeclaration:
		res = "BackRepoPointerEncodingFieldsWOPDeclaration"
	case BackRepoWOPInitialIndex:
		res = "BackRepoWOPInitialIndex"
	}
	return
}

// Utility function for BackRepoPerStructSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (backrepoperstructsubtemplate BackRepoPerStructSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch backrepoperstructsubtemplate {
	// insertion code per enum code
	case BackRepoCheckoutBasicField:
		res = 2
	case BackRepoCheckoutBasicFieldBoolean:
		res = 13
	case BackRepoCheckoutBasicFieldEnum:
		res = 7
	case BackRepoCheckoutBasicFieldInt:
		res = 9
	case BackRepoCheckoutBasicFieldIntEnum:
		res = 10
	case BackRepoCheckoutPointerToStructStageField:
		res = 16
	case BackRepoCheckoutSliceOfPointerToStructStageField:
		res = 20
	case BackRepoCheckoutTimeField:
		res = 5
	case BackRepoCommitBasicBooleanField:
		res = 12
	case BackRepoCommitBasicField:
		res = 1
	case BackRepoCommitBasicFieldEnum:
		res = 6
	case BackRepoCommitBasicFieldInt:
		res = 8
	case BackRepoCommitPointerToStructField:
		res = 15
	case BackRepoCommitSliceOfPointerToStructField:
		res = 19
	case BackRepoCommitTimeField:
		res = 4
	case BackRepoDeclarationBasicBooleanField:
		res = 11
	case BackRepoDeclarationBasicField:
		res = 0
	case BackRepoDeclarationPointerToStructField:
		res = 14
	case BackRepoDeclarationSliceOfPointerToStructField:
		res = 18
	case BackRepoDeclarationTimeField:
		res = 3
	case BackRepoReindexingPointerToStruct:
		res = 17
	case BackRepoReindexingSliceOfPointerToStruct:
		res = 21
	}
	return
}

func (backrepoperstructsubtemplate *BackRepoPerStructSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 2:
		*backrepoperstructsubtemplate = BackRepoCheckoutBasicField
	case 13:
		*backrepoperstructsubtemplate = BackRepoCheckoutBasicFieldBoolean
	case 7:
		*backrepoperstructsubtemplate = BackRepoCheckoutBasicFieldEnum
	case 9:
		*backrepoperstructsubtemplate = BackRepoCheckoutBasicFieldInt
	case 10:
		*backrepoperstructsubtemplate = BackRepoCheckoutBasicFieldIntEnum
	case 16:
		*backrepoperstructsubtemplate = BackRepoCheckoutPointerToStructStageField
	case 20:
		*backrepoperstructsubtemplate = BackRepoCheckoutSliceOfPointerToStructStageField
	case 5:
		*backrepoperstructsubtemplate = BackRepoCheckoutTimeField
	case 12:
		*backrepoperstructsubtemplate = BackRepoCommitBasicBooleanField
	case 1:
		*backrepoperstructsubtemplate = BackRepoCommitBasicField
	case 6:
		*backrepoperstructsubtemplate = BackRepoCommitBasicFieldEnum
	case 8:
		*backrepoperstructsubtemplate = BackRepoCommitBasicFieldInt
	case 15:
		*backrepoperstructsubtemplate = BackRepoCommitPointerToStructField
	case 19:
		*backrepoperstructsubtemplate = BackRepoCommitSliceOfPointerToStructField
	case 4:
		*backrepoperstructsubtemplate = BackRepoCommitTimeField
	case 11:
		*backrepoperstructsubtemplate = BackRepoDeclarationBasicBooleanField
	case 0:
		*backrepoperstructsubtemplate = BackRepoDeclarationBasicField
	case 14:
		*backrepoperstructsubtemplate = BackRepoDeclarationPointerToStructField
	case 18:
		*backrepoperstructsubtemplate = BackRepoDeclarationSliceOfPointerToStructField
	case 3:
		*backrepoperstructsubtemplate = BackRepoDeclarationTimeField
	case 17:
		*backrepoperstructsubtemplate = BackRepoReindexingPointerToStruct
	case 21:
		*backrepoperstructsubtemplate = BackRepoReindexingSliceOfPointerToStruct
	}
}

func (backrepoperstructsubtemplate *BackRepoPerStructSubTemplate) ToCodeString() (res string) {

	switch *backrepoperstructsubtemplate {
	// insertion code per enum code
	case BackRepoCheckoutBasicField:
		res = "BackRepoCheckoutBasicField"
	case BackRepoCheckoutBasicFieldBoolean:
		res = "BackRepoCheckoutBasicFieldBoolean"
	case BackRepoCheckoutBasicFieldEnum:
		res = "BackRepoCheckoutBasicFieldEnum"
	case BackRepoCheckoutBasicFieldInt:
		res = "BackRepoCheckoutBasicFieldInt"
	case BackRepoCheckoutBasicFieldIntEnum:
		res = "BackRepoCheckoutBasicFieldIntEnum"
	case BackRepoCheckoutPointerToStructStageField:
		res = "BackRepoCheckoutPointerToStructStageField"
	case BackRepoCheckoutSliceOfPointerToStructStageField:
		res = "BackRepoCheckoutSliceOfPointerToStructStageField"
	case BackRepoCheckoutTimeField:
		res = "BackRepoCheckoutTimeField"
	case BackRepoCommitBasicBooleanField:
		res = "BackRepoCommitBasicBooleanField"
	case BackRepoCommitBasicField:
		res = "BackRepoCommitBasicField"
	case BackRepoCommitBasicFieldEnum:
		res = "BackRepoCommitBasicFieldEnum"
	case BackRepoCommitBasicFieldInt:
		res = "BackRepoCommitBasicFieldInt"
	case BackRepoCommitPointerToStructField:
		res = "BackRepoCommitPointerToStructField"
	case BackRepoCommitSliceOfPointerToStructField:
		res = "BackRepoCommitSliceOfPointerToStructField"
	case BackRepoCommitTimeField:
		res = "BackRepoCommitTimeField"
	case BackRepoDeclarationBasicBooleanField:
		res = "BackRepoDeclarationBasicBooleanField"
	case BackRepoDeclarationBasicField:
		res = "BackRepoDeclarationBasicField"
	case BackRepoDeclarationPointerToStructField:
		res = "BackRepoDeclarationPointerToStructField"
	case BackRepoDeclarationSliceOfPointerToStructField:
		res = "BackRepoDeclarationSliceOfPointerToStructField"
	case BackRepoDeclarationTimeField:
		res = "BackRepoDeclarationTimeField"
	case BackRepoReindexingPointerToStruct:
		res = "BackRepoReindexingPointerToStruct"
	case BackRepoReindexingSliceOfPointerToStruct:
		res = "BackRepoReindexingSliceOfPointerToStruct"
	}
	return
}

// Utility function for BackRepoSubTemplateInsertion
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (backreposubtemplateinsertion BackRepoSubTemplateInsertion) ToInt() (res int) {

	// migration of former implementation of enum
	switch backreposubtemplateinsertion {
	// insertion code per enum code
	case BackRepoBackup:
		res = 10
	case BackRepoBackupXL:
		res = 11
	case BackRepoCheckout:
		res = 9
	case BackRepoCommit:
		res = 8
	case BackRepoInitAndCheckout:
		res = 7
	case BackRepoInitAndCommit:
		res = 6
	case BackRepoPerStructDeclarations:
		res = 0
	case BackRepoPerStructInits:
		res = 1
	case BackRepoPerStructPhaseOneCheckouts:
		res = 4
	case BackRepoPerStructPhaseOneCommits:
		res = 2
	case BackRepoPerStructPhaseTwoCheckouts:
		res = 5
	case BackRepoPerStructPhaseTwoCommits:
		res = 3
	case BackRepoRestorePhaseOne:
		res = 12
	case BackRepoRestorePhaseTwo:
		res = 14
	case BackRepoRestoreXLPhaseOne:
		res = 13
	}
	return
}

func (backreposubtemplateinsertion *BackRepoSubTemplateInsertion) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 10:
		*backreposubtemplateinsertion = BackRepoBackup
	case 11:
		*backreposubtemplateinsertion = BackRepoBackupXL
	case 9:
		*backreposubtemplateinsertion = BackRepoCheckout
	case 8:
		*backreposubtemplateinsertion = BackRepoCommit
	case 7:
		*backreposubtemplateinsertion = BackRepoInitAndCheckout
	case 6:
		*backreposubtemplateinsertion = BackRepoInitAndCommit
	case 0:
		*backreposubtemplateinsertion = BackRepoPerStructDeclarations
	case 1:
		*backreposubtemplateinsertion = BackRepoPerStructInits
	case 4:
		*backreposubtemplateinsertion = BackRepoPerStructPhaseOneCheckouts
	case 2:
		*backreposubtemplateinsertion = BackRepoPerStructPhaseOneCommits
	case 5:
		*backreposubtemplateinsertion = BackRepoPerStructPhaseTwoCheckouts
	case 3:
		*backreposubtemplateinsertion = BackRepoPerStructPhaseTwoCommits
	case 12:
		*backreposubtemplateinsertion = BackRepoRestorePhaseOne
	case 14:
		*backreposubtemplateinsertion = BackRepoRestorePhaseTwo
	case 13:
		*backreposubtemplateinsertion = BackRepoRestoreXLPhaseOne
	}
}

func (backreposubtemplateinsertion *BackRepoSubTemplateInsertion) ToCodeString() (res string) {

	switch *backreposubtemplateinsertion {
	// insertion code per enum code
	case BackRepoBackup:
		res = "BackRepoBackup"
	case BackRepoBackupXL:
		res = "BackRepoBackupXL"
	case BackRepoCheckout:
		res = "BackRepoCheckout"
	case BackRepoCommit:
		res = "BackRepoCommit"
	case BackRepoInitAndCheckout:
		res = "BackRepoInitAndCheckout"
	case BackRepoInitAndCommit:
		res = "BackRepoInitAndCommit"
	case BackRepoPerStructDeclarations:
		res = "BackRepoPerStructDeclarations"
	case BackRepoPerStructInits:
		res = "BackRepoPerStructInits"
	case BackRepoPerStructPhaseOneCheckouts:
		res = "BackRepoPerStructPhaseOneCheckouts"
	case BackRepoPerStructPhaseOneCommits:
		res = "BackRepoPerStructPhaseOneCommits"
	case BackRepoPerStructPhaseTwoCheckouts:
		res = "BackRepoPerStructPhaseTwoCheckouts"
	case BackRepoPerStructPhaseTwoCommits:
		res = "BackRepoPerStructPhaseTwoCommits"
	case BackRepoRestorePhaseOne:
		res = "BackRepoRestorePhaseOne"
	case BackRepoRestorePhaseTwo:
		res = "BackRepoRestorePhaseTwo"
	case BackRepoRestoreXLPhaseOne:
		res = "BackRepoRestoreXLPhaseOne"
	}
	return
}

// Utility function for ControllerFilPerStructSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (controllerfilperstructsubtemplate ControllerFilPerStructSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch controllerfilperstructsubtemplate {
	// insertion code per enum code
	case ControllerFileFieldSubTmplGetBasicFieldBool:
		res = 2
	case ControllerFileFieldSubTmplGetBasicFieldFloat64:
		res = 10
	case ControllerFileFieldSubTmplGetBasicFieldInt:
		res = 6
	case ControllerFileFieldSubTmplGetBasicFieldString:
		res = 14
	case ControllerFileFieldSubTmplGetBasicFieldStringEnum:
		res = 22
	case ControllerFileFieldSubTmplGetTimeField:
		res = 18
	case ControllerFileFieldSubTmplGetsBasicFieldBool:
		res = 0
	case ControllerFileFieldSubTmplGetsBasicFieldFloat64:
		res = 8
	case ControllerFileFieldSubTmplGetsBasicFieldInt:
		res = 4
	case ControllerFileFieldSubTmplGetsBasicFieldString:
		res = 12
	case ControllerFileFieldSubTmplGetsBasicFieldStringEnum:
		res = 20
	case ControllerFileFieldSubTmplGetsTimeField:
		res = 16
	case ControllerFileFieldSubTmplPostBasicFieldBool:
		res = 1
	case ControllerFileFieldSubTmplPostBasicFieldFloat64:
		res = 9
	case ControllerFileFieldSubTmplPostBasicFieldInt:
		res = 5
	case ControllerFileFieldSubTmplPostBasicFieldString:
		res = 13
	case ControllerFileFieldSubTmplPostBasicFieldStringEnum:
		res = 21
	case ControllerFileFieldSubTmplPostTimeField:
		res = 17
	case ControllerFileFieldSubTmplUpdateBasicFieldBool:
		res = 3
	case ControllerFileFieldSubTmplUpdateBasicFieldFloat64:
		res = 11
	case ControllerFileFieldSubTmplUpdateBasicFieldInt:
		res = 7
	case ControllerFileFieldSubTmplUpdateBasicFieldString:
		res = 15
	case ControllerFileFieldSubTmplUpdateBasicFieldStringEnum:
		res = 23
	case ControllerFileFieldSubTmplUpdateTimeField:
		res = 19
	}
	return
}

func (controllerfilperstructsubtemplate *ControllerFilPerStructSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 2:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetBasicFieldBool
	case 10:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetBasicFieldFloat64
	case 6:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetBasicFieldInt
	case 14:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetBasicFieldString
	case 22:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetBasicFieldStringEnum
	case 18:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetTimeField
	case 0:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetsBasicFieldBool
	case 8:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetsBasicFieldFloat64
	case 4:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetsBasicFieldInt
	case 12:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetsBasicFieldString
	case 20:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetsBasicFieldStringEnum
	case 16:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplGetsTimeField
	case 1:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplPostBasicFieldBool
	case 9:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplPostBasicFieldFloat64
	case 5:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplPostBasicFieldInt
	case 13:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplPostBasicFieldString
	case 21:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplPostBasicFieldStringEnum
	case 17:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplPostTimeField
	case 3:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplUpdateBasicFieldBool
	case 11:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplUpdateBasicFieldFloat64
	case 7:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplUpdateBasicFieldInt
	case 15:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplUpdateBasicFieldString
	case 23:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplUpdateBasicFieldStringEnum
	case 19:
		*controllerfilperstructsubtemplate = ControllerFileFieldSubTmplUpdateTimeField
	}
}

func (controllerfilperstructsubtemplate *ControllerFilPerStructSubTemplate) ToCodeString() (res string) {

	switch *controllerfilperstructsubtemplate {
	// insertion code per enum code
	case ControllerFileFieldSubTmplGetBasicFieldBool:
		res = "ControllerFileFieldSubTmplGetBasicFieldBool"
	case ControllerFileFieldSubTmplGetBasicFieldFloat64:
		res = "ControllerFileFieldSubTmplGetBasicFieldFloat64"
	case ControllerFileFieldSubTmplGetBasicFieldInt:
		res = "ControllerFileFieldSubTmplGetBasicFieldInt"
	case ControllerFileFieldSubTmplGetBasicFieldString:
		res = "ControllerFileFieldSubTmplGetBasicFieldString"
	case ControllerFileFieldSubTmplGetBasicFieldStringEnum:
		res = "ControllerFileFieldSubTmplGetBasicFieldStringEnum"
	case ControllerFileFieldSubTmplGetTimeField:
		res = "ControllerFileFieldSubTmplGetTimeField"
	case ControllerFileFieldSubTmplGetsBasicFieldBool:
		res = "ControllerFileFieldSubTmplGetsBasicFieldBool"
	case ControllerFileFieldSubTmplGetsBasicFieldFloat64:
		res = "ControllerFileFieldSubTmplGetsBasicFieldFloat64"
	case ControllerFileFieldSubTmplGetsBasicFieldInt:
		res = "ControllerFileFieldSubTmplGetsBasicFieldInt"
	case ControllerFileFieldSubTmplGetsBasicFieldString:
		res = "ControllerFileFieldSubTmplGetsBasicFieldString"
	case ControllerFileFieldSubTmplGetsBasicFieldStringEnum:
		res = "ControllerFileFieldSubTmplGetsBasicFieldStringEnum"
	case ControllerFileFieldSubTmplGetsTimeField:
		res = "ControllerFileFieldSubTmplGetsTimeField"
	case ControllerFileFieldSubTmplPostBasicFieldBool:
		res = "ControllerFileFieldSubTmplPostBasicFieldBool"
	case ControllerFileFieldSubTmplPostBasicFieldFloat64:
		res = "ControllerFileFieldSubTmplPostBasicFieldFloat64"
	case ControllerFileFieldSubTmplPostBasicFieldInt:
		res = "ControllerFileFieldSubTmplPostBasicFieldInt"
	case ControllerFileFieldSubTmplPostBasicFieldString:
		res = "ControllerFileFieldSubTmplPostBasicFieldString"
	case ControllerFileFieldSubTmplPostBasicFieldStringEnum:
		res = "ControllerFileFieldSubTmplPostBasicFieldStringEnum"
	case ControllerFileFieldSubTmplPostTimeField:
		res = "ControllerFileFieldSubTmplPostTimeField"
	case ControllerFileFieldSubTmplUpdateBasicFieldBool:
		res = "ControllerFileFieldSubTmplUpdateBasicFieldBool"
	case ControllerFileFieldSubTmplUpdateBasicFieldFloat64:
		res = "ControllerFileFieldSubTmplUpdateBasicFieldFloat64"
	case ControllerFileFieldSubTmplUpdateBasicFieldInt:
		res = "ControllerFileFieldSubTmplUpdateBasicFieldInt"
	case ControllerFileFieldSubTmplUpdateBasicFieldString:
		res = "ControllerFileFieldSubTmplUpdateBasicFieldString"
	case ControllerFileFieldSubTmplUpdateBasicFieldStringEnum:
		res = "ControllerFileFieldSubTmplUpdateBasicFieldStringEnum"
	case ControllerFileFieldSubTmplUpdateTimeField:
		res = "ControllerFileFieldSubTmplUpdateTimeField"
	}
	return
}

// Utility function for ControllerFileInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (controllerfileinsertionpoint ControllerFileInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch controllerfileinsertionpoint {
	// insertion code per enum code
	case ControllerFileGetInsertion:
		res = 2
	case ControllerFileGetsInsertion:
		res = 0
	case ControllerFileNbInsertionPoints:
		res = 4
	case ControllerFilePostInsertion:
		res = 1
	case ControllerFileUpdateInsertion:
		res = 3
	}
	return
}

func (controllerfileinsertionpoint *ControllerFileInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 2:
		*controllerfileinsertionpoint = ControllerFileGetInsertion
	case 0:
		*controllerfileinsertionpoint = ControllerFileGetsInsertion
	case 4:
		*controllerfileinsertionpoint = ControllerFileNbInsertionPoints
	case 1:
		*controllerfileinsertionpoint = ControllerFilePostInsertion
	case 3:
		*controllerfileinsertionpoint = ControllerFileUpdateInsertion
	}
}

func (controllerfileinsertionpoint *ControllerFileInsertionPoint) ToCodeString() (res string) {

	switch *controllerfileinsertionpoint {
	// insertion code per enum code
	case ControllerFileGetInsertion:
		res = "ControllerFileGetInsertion"
	case ControllerFileGetsInsertion:
		res = "ControllerFileGetsInsertion"
	case ControllerFileNbInsertionPoints:
		res = "ControllerFileNbInsertionPoints"
	case ControllerFilePostInsertion:
		res = "ControllerFilePostInsertion"
	case ControllerFileUpdateInsertion:
		res = "ControllerFileUpdateInsertion"
	}
	return
}

// Utility function for ControllersRegistrationsSubTemplateInsertions
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (controllersregistrationssubtemplateinsertions ControllersRegistrationsSubTemplateInsertions) ToInt() (res int) {

	// migration of former implementation of enum
	switch controllersregistrationssubtemplateinsertions {
	// insertion code per enum code
	case ControllersDeclaration:
		res = 0
	}
	return
}

func (controllersregistrationssubtemplateinsertions *ControllersRegistrationsSubTemplateInsertions) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*controllersregistrationssubtemplateinsertions = ControllersDeclaration
	}
}

func (controllersregistrationssubtemplateinsertions *ControllersRegistrationsSubTemplateInsertions) ToCodeString() (res string) {

	switch *controllersregistrationssubtemplateinsertions {
	// insertion code per enum code
	case ControllersDeclaration:
		res = "ControllersDeclaration"
	}
	return
}

// Utility function for GongEnumType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (gongenumtype GongEnumType) ToInt() (res int) {

	// migration of former implementation of enum
	switch gongenumtype {
	// insertion code per enum code
	case Int:
		res = 0
	case String:
		res = 1
	}
	return
}

func (gongenumtype *GongEnumType) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*gongenumtype = Int
	case 1:
		*gongenumtype = String
	}
}

func (gongenumtype *GongEnumType) ToCodeString() (res string) {

	switch *gongenumtype {
	// insertion code per enum code
	case Int:
		res = "Int"
	case String:
		res = "String"
	}
	return
}

// Utility function for GongFilePerStructSubTemplateId
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (gongfileperstructsubtemplateid GongFilePerStructSubTemplateId) ToInt() (res int) {

	// migration of former implementation of enum
	switch gongfileperstructsubtemplateid {
	// insertion code per enum code
	case GongFileFieldSubTmplSetBasicFieldBool:
		res = 0
	case GongFileFieldSubTmplSetBasicFieldEnumInt:
		res = 3
	case GongFileFieldSubTmplSetBasicFieldEnumString:
		res = 2
	case GongFileFieldSubTmplSetBasicFieldFloat64:
		res = 4
	case GongFileFieldSubTmplSetBasicFieldInt:
		res = 1
	case GongFileFieldSubTmplSetBasicFieldString:
		res = 5
	case GongFileFieldSubTmplSetPointerField:
		res = 7
	case GongFileFieldSubTmplSetSliceOfPointersField:
		res = 8
	case GongFileFieldSubTmplSetTimeField:
		res = 6
	case GongFileFieldSubTmplStringFieldName:
		res = 9
	case GongFileFieldSubTmplStringValueBasicFieldBool:
		res = 10
	case GongFileFieldSubTmplStringValueBasicFieldEnumInt:
		res = 13
	case GongFileFieldSubTmplStringValueBasicFieldEnumString:
		res = 12
	case GongFileFieldSubTmplStringValueBasicFieldFloat64:
		res = 14
	case GongFileFieldSubTmplStringValueBasicFieldInt:
		res = 11
	case GongFileFieldSubTmplStringValueBasicFieldString:
		res = 15
	case GongFileFieldSubTmplStringValuePointerField:
		res = 17
	case GongFileFieldSubTmplStringValueSliceOfPointersField:
		res = 18
	case GongFileFieldSubTmplStringValueTimeField:
		res = 16
	}
	return
}

func (gongfileperstructsubtemplateid *GongFilePerStructSubTemplateId) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetBasicFieldBool
	case 3:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetBasicFieldEnumInt
	case 2:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetBasicFieldEnumString
	case 4:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetBasicFieldFloat64
	case 1:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetBasicFieldInt
	case 5:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetBasicFieldString
	case 7:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetPointerField
	case 8:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetSliceOfPointersField
	case 6:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplSetTimeField
	case 9:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringFieldName
	case 10:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValueBasicFieldBool
	case 13:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValueBasicFieldEnumInt
	case 12:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValueBasicFieldEnumString
	case 14:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValueBasicFieldFloat64
	case 11:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValueBasicFieldInt
	case 15:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValueBasicFieldString
	case 17:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValuePointerField
	case 18:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValueSliceOfPointersField
	case 16:
		*gongfileperstructsubtemplateid = GongFileFieldSubTmplStringValueTimeField
	}
}

func (gongfileperstructsubtemplateid *GongFilePerStructSubTemplateId) ToCodeString() (res string) {

	switch *gongfileperstructsubtemplateid {
	// insertion code per enum code
	case GongFileFieldSubTmplSetBasicFieldBool:
		res = "GongFileFieldSubTmplSetBasicFieldBool"
	case GongFileFieldSubTmplSetBasicFieldEnumInt:
		res = "GongFileFieldSubTmplSetBasicFieldEnumInt"
	case GongFileFieldSubTmplSetBasicFieldEnumString:
		res = "GongFileFieldSubTmplSetBasicFieldEnumString"
	case GongFileFieldSubTmplSetBasicFieldFloat64:
		res = "GongFileFieldSubTmplSetBasicFieldFloat64"
	case GongFileFieldSubTmplSetBasicFieldInt:
		res = "GongFileFieldSubTmplSetBasicFieldInt"
	case GongFileFieldSubTmplSetBasicFieldString:
		res = "GongFileFieldSubTmplSetBasicFieldString"
	case GongFileFieldSubTmplSetPointerField:
		res = "GongFileFieldSubTmplSetPointerField"
	case GongFileFieldSubTmplSetSliceOfPointersField:
		res = "GongFileFieldSubTmplSetSliceOfPointersField"
	case GongFileFieldSubTmplSetTimeField:
		res = "GongFileFieldSubTmplSetTimeField"
	case GongFileFieldSubTmplStringFieldName:
		res = "GongFileFieldSubTmplStringFieldName"
	case GongFileFieldSubTmplStringValueBasicFieldBool:
		res = "GongFileFieldSubTmplStringValueBasicFieldBool"
	case GongFileFieldSubTmplStringValueBasicFieldEnumInt:
		res = "GongFileFieldSubTmplStringValueBasicFieldEnumInt"
	case GongFileFieldSubTmplStringValueBasicFieldEnumString:
		res = "GongFileFieldSubTmplStringValueBasicFieldEnumString"
	case GongFileFieldSubTmplStringValueBasicFieldFloat64:
		res = "GongFileFieldSubTmplStringValueBasicFieldFloat64"
	case GongFileFieldSubTmplStringValueBasicFieldInt:
		res = "GongFileFieldSubTmplStringValueBasicFieldInt"
	case GongFileFieldSubTmplStringValueBasicFieldString:
		res = "GongFileFieldSubTmplStringValueBasicFieldString"
	case GongFileFieldSubTmplStringValuePointerField:
		res = "GongFileFieldSubTmplStringValuePointerField"
	case GongFileFieldSubTmplStringValueSliceOfPointersField:
		res = "GongFileFieldSubTmplStringValueSliceOfPointersField"
	case GongFileFieldSubTmplStringValueTimeField:
		res = "GongFileFieldSubTmplStringValueTimeField"
	}
	return
}

// Utility function for GongModelEnumValueSubTemplateId
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (gongmodelenumvaluesubtemplateid GongModelEnumValueSubTemplateId) ToInt() (res int) {

	// migration of former implementation of enum
	switch gongmodelenumvaluesubtemplateid {
	// insertion code per enum code
	case GongModelEnumValueFromString:
		res = 0
	case GongModelEnumValueToCodeString:
		res = 2
	case GongModelEnumValueToString:
		res = 1
	}
	return
}

func (gongmodelenumvaluesubtemplateid *GongModelEnumValueSubTemplateId) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*gongmodelenumvaluesubtemplateid = GongModelEnumValueFromString
	case 2:
		*gongmodelenumvaluesubtemplateid = GongModelEnumValueToCodeString
	case 1:
		*gongmodelenumvaluesubtemplateid = GongModelEnumValueToString
	}
}

func (gongmodelenumvaluesubtemplateid *GongModelEnumValueSubTemplateId) ToCodeString() (res string) {

	switch *gongmodelenumvaluesubtemplateid {
	// insertion code per enum code
	case GongModelEnumValueFromString:
		res = "GongModelEnumValueFromString"
	case GongModelEnumValueToCodeString:
		res = "GongModelEnumValueToCodeString"
	case GongModelEnumValueToString:
		res = "GongModelEnumValueToString"
	}
	return
}

// Utility function for ModelGongEnumInsertionId
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (modelgongenuminsertionid ModelGongEnumInsertionId) ToInt() (res int) {

	// migration of former implementation of enum
	switch modelgongenuminsertionid {
	// insertion code per enum code
	case ModelGongEnumInsertionsNb:
		res = 41
	case ModelGongEnumUtilityFunctions:
		res = 40
	}
	return
}

func (modelgongenuminsertionid *ModelGongEnumInsertionId) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 41:
		*modelgongenuminsertionid = ModelGongEnumInsertionsNb
	case 40:
		*modelgongenuminsertionid = ModelGongEnumUtilityFunctions
	}
}

func (modelgongenuminsertionid *ModelGongEnumInsertionId) ToCodeString() (res string) {

	switch *modelgongenuminsertionid {
	// insertion code per enum code
	case ModelGongEnumInsertionsNb:
		res = "ModelGongEnumInsertionsNb"
	case ModelGongEnumUtilityFunctions:
		res = "ModelGongEnumUtilityFunctions"
	}
	return
}

// Utility function for ModelGongStructInsertionId
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (modelgongstructinsertionid ModelGongStructInsertionId) ToInt() (res int) {

	// migration of former implementation of enum
	switch modelgongstructinsertionid {
	// insertion code per enum code
	case ModelGongStructInsertionArrayDefintion:
		res = 5
	case ModelGongStructInsertionArrayInitialisation:
		res = 6
	case ModelGongStructInsertionArrayNil:
		res = 8
	case ModelGongStructInsertionArrayReset:
		res = 7
	case ModelGongStructInsertionCommitCheckout:
		res = 0
	case ModelGongStructInsertionComputeNbInstances:
		res = 11
	case ModelGongStructInsertionCreateCallback:
		res = 3
	case ModelGongStructInsertionDeleteCallback:
		res = 4
	case ModelGongStructInsertionGetFields:
		res = 1
	case ModelGongStructInsertionStageFunctions:
		res = 2
	case ModelGongStructInsertionUnmarshallDeclarations:
		res = 9
	case ModelGongStructInsertionUnmarshallPointersInitializations:
		res = 10
	case ModelGongStructInsertionsNb:
		res = 12
	}
	return
}

func (modelgongstructinsertionid *ModelGongStructInsertionId) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 5:
		*modelgongstructinsertionid = ModelGongStructInsertionArrayDefintion
	case 6:
		*modelgongstructinsertionid = ModelGongStructInsertionArrayInitialisation
	case 8:
		*modelgongstructinsertionid = ModelGongStructInsertionArrayNil
	case 7:
		*modelgongstructinsertionid = ModelGongStructInsertionArrayReset
	case 0:
		*modelgongstructinsertionid = ModelGongStructInsertionCommitCheckout
	case 11:
		*modelgongstructinsertionid = ModelGongStructInsertionComputeNbInstances
	case 3:
		*modelgongstructinsertionid = ModelGongStructInsertionCreateCallback
	case 4:
		*modelgongstructinsertionid = ModelGongStructInsertionDeleteCallback
	case 1:
		*modelgongstructinsertionid = ModelGongStructInsertionGetFields
	case 2:
		*modelgongstructinsertionid = ModelGongStructInsertionStageFunctions
	case 9:
		*modelgongstructinsertionid = ModelGongStructInsertionUnmarshallDeclarations
	case 10:
		*modelgongstructinsertionid = ModelGongStructInsertionUnmarshallPointersInitializations
	case 12:
		*modelgongstructinsertionid = ModelGongStructInsertionsNb
	}
}

func (modelgongstructinsertionid *ModelGongStructInsertionId) ToCodeString() (res string) {

	switch *modelgongstructinsertionid {
	// insertion code per enum code
	case ModelGongStructInsertionArrayDefintion:
		res = "ModelGongStructInsertionArrayDefintion"
	case ModelGongStructInsertionArrayInitialisation:
		res = "ModelGongStructInsertionArrayInitialisation"
	case ModelGongStructInsertionArrayNil:
		res = "ModelGongStructInsertionArrayNil"
	case ModelGongStructInsertionArrayReset:
		res = "ModelGongStructInsertionArrayReset"
	case ModelGongStructInsertionCommitCheckout:
		res = "ModelGongStructInsertionCommitCheckout"
	case ModelGongStructInsertionComputeNbInstances:
		res = "ModelGongStructInsertionComputeNbInstances"
	case ModelGongStructInsertionCreateCallback:
		res = "ModelGongStructInsertionCreateCallback"
	case ModelGongStructInsertionDeleteCallback:
		res = "ModelGongStructInsertionDeleteCallback"
	case ModelGongStructInsertionGetFields:
		res = "ModelGongStructInsertionGetFields"
	case ModelGongStructInsertionStageFunctions:
		res = "ModelGongStructInsertionStageFunctions"
	case ModelGongStructInsertionUnmarshallDeclarations:
		res = "ModelGongStructInsertionUnmarshallDeclarations"
	case ModelGongStructInsertionUnmarshallPointersInitializations:
		res = "ModelGongStructInsertionUnmarshallPointersInitializations"
	case ModelGongStructInsertionsNb:
		res = "ModelGongStructInsertionsNb"
	}
	return
}

// Utility function for NgClassSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngclasssubtemplate NgClassSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngclasssubtemplate {
	// insertion code per enum code
	case NgClassTSBasicFieldDecls:
		res = 1
	case NgClassTSBasicFieldImports:
		res = 0
	case NgClassTSOtherDecls:
		res = 3
	case NgClassTSOtherDeclsEnumInt:
		res = 8
	case NgClassTSOtherDeclsTimeDuration:
		res = 7
	case NgClassTSPointerToStructFieldsDecl:
		res = 4
	case NgClassTSSliceOfPtrToGongStructReverseID:
		res = 6
	case NgClassTSSliceOfPtrToStructFieldsDecl:
		res = 5
	case NgClassTSTimeFieldDecls:
		res = 2
	}
	return
}

func (ngclasssubtemplate *NgClassSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 1:
		*ngclasssubtemplate = NgClassTSBasicFieldDecls
	case 0:
		*ngclasssubtemplate = NgClassTSBasicFieldImports
	case 3:
		*ngclasssubtemplate = NgClassTSOtherDecls
	case 8:
		*ngclasssubtemplate = NgClassTSOtherDeclsEnumInt
	case 7:
		*ngclasssubtemplate = NgClassTSOtherDeclsTimeDuration
	case 4:
		*ngclasssubtemplate = NgClassTSPointerToStructFieldsDecl
	case 6:
		*ngclasssubtemplate = NgClassTSSliceOfPtrToGongStructReverseID
	case 5:
		*ngclasssubtemplate = NgClassTSSliceOfPtrToStructFieldsDecl
	case 2:
		*ngclasssubtemplate = NgClassTSTimeFieldDecls
	}
}

func (ngclasssubtemplate *NgClassSubTemplate) ToCodeString() (res string) {

	switch *ngclasssubtemplate {
	// insertion code per enum code
	case NgClassTSBasicFieldDecls:
		res = "NgClassTSBasicFieldDecls"
	case NgClassTSBasicFieldImports:
		res = "NgClassTSBasicFieldImports"
	case NgClassTSOtherDecls:
		res = "NgClassTSOtherDecls"
	case NgClassTSOtherDeclsEnumInt:
		res = "NgClassTSOtherDeclsEnumInt"
	case NgClassTSOtherDeclsTimeDuration:
		res = "NgClassTSOtherDeclsTimeDuration"
	case NgClassTSPointerToStructFieldsDecl:
		res = "NgClassTSPointerToStructFieldsDecl"
	case NgClassTSSliceOfPtrToGongStructReverseID:
		res = "NgClassTSSliceOfPtrToGongStructReverseID"
	case NgClassTSSliceOfPtrToStructFieldsDecl:
		res = "NgClassTSSliceOfPtrToStructFieldsDecl"
	case NgClassTSTimeFieldDecls:
		res = "NgClassTSTimeFieldDecls"
	}
	return
}

// Utility function for NgClassTsInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngclasstsinsertionpoint NgClassTsInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngclasstsinsertionpoint {
	// insertion code per enum code
	case NgClassTsInsertionPerStructBasicFieldsDecl:
		res = 1
	case NgClassTsInsertionPerStructImports:
		res = 0
	case NgClassTsInsertionPerStructOtherDecls:
		res = 2
	case NgClassTsInsertionsNb:
		res = 3
	}
	return
}

func (ngclasstsinsertionpoint *NgClassTsInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 1:
		*ngclasstsinsertionpoint = NgClassTsInsertionPerStructBasicFieldsDecl
	case 0:
		*ngclasstsinsertionpoint = NgClassTsInsertionPerStructImports
	case 2:
		*ngclasstsinsertionpoint = NgClassTsInsertionPerStructOtherDecls
	case 3:
		*ngclasstsinsertionpoint = NgClassTsInsertionsNb
	}
}

func (ngclasstsinsertionpoint *NgClassTsInsertionPoint) ToCodeString() (res string) {

	switch *ngclasstsinsertionpoint {
	// insertion code per enum code
	case NgClassTsInsertionPerStructBasicFieldsDecl:
		res = "NgClassTsInsertionPerStructBasicFieldsDecl"
	case NgClassTsInsertionPerStructImports:
		res = "NgClassTsInsertionPerStructImports"
	case NgClassTsInsertionPerStructOtherDecls:
		res = "NgClassTsInsertionPerStructOtherDecls"
	case NgClassTsInsertionsNb:
		res = "NgClassTsInsertionsNb"
	}
	return
}

// Utility function for NgDetailHtmlInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngdetailhtmlinsertionpoint NgDetailHtmlInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngdetailhtmlinsertionpoint {
	// insertion code per enum code
	case NgDetailHtmlInsertionPerStructFields:
		res = 0
	case NgDetailHtmlInsertionPerStructFieldsManyMany:
		res = 1
	case NgDetailHtmlInsertionsNb:
		res = 2
	}
	return
}

func (ngdetailhtmlinsertionpoint *NgDetailHtmlInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngdetailhtmlinsertionpoint = NgDetailHtmlInsertionPerStructFields
	case 1:
		*ngdetailhtmlinsertionpoint = NgDetailHtmlInsertionPerStructFieldsManyMany
	case 2:
		*ngdetailhtmlinsertionpoint = NgDetailHtmlInsertionsNb
	}
}

func (ngdetailhtmlinsertionpoint *NgDetailHtmlInsertionPoint) ToCodeString() (res string) {

	switch *ngdetailhtmlinsertionpoint {
	// insertion code per enum code
	case NgDetailHtmlInsertionPerStructFields:
		res = "NgDetailHtmlInsertionPerStructFields"
	case NgDetailHtmlInsertionPerStructFieldsManyMany:
		res = "NgDetailHtmlInsertionPerStructFieldsManyMany"
	case NgDetailHtmlInsertionsNb:
		res = "NgDetailHtmlInsertionsNb"
	}
	return
}

// Utility function for NgDetailHtmlSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngdetailhtmlsubtemplate NgDetailHtmlSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngdetailhtmlsubtemplate {
	// insertion code per enum code
	case NgDetailHtmlBasicField:
		res = 1
	case NgDetailHtmlBasicStringField:
		res = 2
	case NgDetailHtmlBool:
		res = 4
	case NgDetailHtmlEnum:
		res = 0
	case NgDetailHtmlTimeDuration:
		res = 5
	case NgDetailHtmlTimeField:
		res = 3
	case NgDetailPointerToStructHtmlFormField:
		res = 6
	case NgDetailSliceOfPointerToStructHtml:
		res = 7
	case NgDetailSliceOfPointerToStructManyManyHtml:
		res = 8
	case NgDetailSliceOfPointerToStructReverseHtml:
		res = 9
	}
	return
}

func (ngdetailhtmlsubtemplate *NgDetailHtmlSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 1:
		*ngdetailhtmlsubtemplate = NgDetailHtmlBasicField
	case 2:
		*ngdetailhtmlsubtemplate = NgDetailHtmlBasicStringField
	case 4:
		*ngdetailhtmlsubtemplate = NgDetailHtmlBool
	case 0:
		*ngdetailhtmlsubtemplate = NgDetailHtmlEnum
	case 5:
		*ngdetailhtmlsubtemplate = NgDetailHtmlTimeDuration
	case 3:
		*ngdetailhtmlsubtemplate = NgDetailHtmlTimeField
	case 6:
		*ngdetailhtmlsubtemplate = NgDetailPointerToStructHtmlFormField
	case 7:
		*ngdetailhtmlsubtemplate = NgDetailSliceOfPointerToStructHtml
	case 8:
		*ngdetailhtmlsubtemplate = NgDetailSliceOfPointerToStructManyManyHtml
	case 9:
		*ngdetailhtmlsubtemplate = NgDetailSliceOfPointerToStructReverseHtml
	}
}

func (ngdetailhtmlsubtemplate *NgDetailHtmlSubTemplate) ToCodeString() (res string) {

	switch *ngdetailhtmlsubtemplate {
	// insertion code per enum code
	case NgDetailHtmlBasicField:
		res = "NgDetailHtmlBasicField"
	case NgDetailHtmlBasicStringField:
		res = "NgDetailHtmlBasicStringField"
	case NgDetailHtmlBool:
		res = "NgDetailHtmlBool"
	case NgDetailHtmlEnum:
		res = "NgDetailHtmlEnum"
	case NgDetailHtmlTimeDuration:
		res = "NgDetailHtmlTimeDuration"
	case NgDetailHtmlTimeField:
		res = "NgDetailHtmlTimeField"
	case NgDetailPointerToStructHtmlFormField:
		res = "NgDetailPointerToStructHtmlFormField"
	case NgDetailSliceOfPointerToStructHtml:
		res = "NgDetailSliceOfPointerToStructHtml"
	case NgDetailSliceOfPointerToStructManyManyHtml:
		res = "NgDetailSliceOfPointerToStructManyManyHtml"
	case NgDetailSliceOfPointerToStructReverseHtml:
		res = "NgDetailSliceOfPointerToStructReverseHtml"
	}
	return
}

// Utility function for NgDetailSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngdetailsubtemplate NgDetailSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngdetailsubtemplate {
	// insertion code per enum code
	case NgDetailTSBooleanDeclarations:
		res = 3
	case NgDetailTSBooleanRecoveries:
		res = 4
	case NgDetailTSBooleanSaves:
		res = 5
	case NgDetailTSEnumDeclarations:
		res = 1
	case NgDetailTSEnumImports:
		res = 0
	case NgDetailTSEnumInits:
		res = 2
	case NgDetailTSPointerToGongStructSaves:
		res = 9
	case NgDetailTSReversePointerToSliceOfGongStructImports:
		res = 10
	case NgDetailTSReversePointerToSliceOfGongStructSavesWhenUpdate:
		res = 14
	case NgDetailTSReversePointerToSliceOfGongStructStateCaseComputation:
		res = 12
	case NgDetailTSReversePointerToSliceOfGongStructStateCaseSetField:
		res = 13
	case NgDetailTSReversePointerToSliceOfGongStructStateEnumDeclaration:
		res = 11
	case NgDetailTSTimeDurationDeclarations:
		res = 6
	case NgDetailTSTimeDurationRecoveries:
		res = 7
	case NgDetailTSTimeDurationSaves:
		res = 8
	}
	return
}

func (ngdetailsubtemplate *NgDetailSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 3:
		*ngdetailsubtemplate = NgDetailTSBooleanDeclarations
	case 4:
		*ngdetailsubtemplate = NgDetailTSBooleanRecoveries
	case 5:
		*ngdetailsubtemplate = NgDetailTSBooleanSaves
	case 1:
		*ngdetailsubtemplate = NgDetailTSEnumDeclarations
	case 0:
		*ngdetailsubtemplate = NgDetailTSEnumImports
	case 2:
		*ngdetailsubtemplate = NgDetailTSEnumInits
	case 9:
		*ngdetailsubtemplate = NgDetailTSPointerToGongStructSaves
	case 10:
		*ngdetailsubtemplate = NgDetailTSReversePointerToSliceOfGongStructImports
	case 14:
		*ngdetailsubtemplate = NgDetailTSReversePointerToSliceOfGongStructSavesWhenUpdate
	case 12:
		*ngdetailsubtemplate = NgDetailTSReversePointerToSliceOfGongStructStateCaseComputation
	case 13:
		*ngdetailsubtemplate = NgDetailTSReversePointerToSliceOfGongStructStateCaseSetField
	case 11:
		*ngdetailsubtemplate = NgDetailTSReversePointerToSliceOfGongStructStateEnumDeclaration
	case 6:
		*ngdetailsubtemplate = NgDetailTSTimeDurationDeclarations
	case 7:
		*ngdetailsubtemplate = NgDetailTSTimeDurationRecoveries
	case 8:
		*ngdetailsubtemplate = NgDetailTSTimeDurationSaves
	}
}

func (ngdetailsubtemplate *NgDetailSubTemplate) ToCodeString() (res string) {

	switch *ngdetailsubtemplate {
	// insertion code per enum code
	case NgDetailTSBooleanDeclarations:
		res = "NgDetailTSBooleanDeclarations"
	case NgDetailTSBooleanRecoveries:
		res = "NgDetailTSBooleanRecoveries"
	case NgDetailTSBooleanSaves:
		res = "NgDetailTSBooleanSaves"
	case NgDetailTSEnumDeclarations:
		res = "NgDetailTSEnumDeclarations"
	case NgDetailTSEnumImports:
		res = "NgDetailTSEnumImports"
	case NgDetailTSEnumInits:
		res = "NgDetailTSEnumInits"
	case NgDetailTSPointerToGongStructSaves:
		res = "NgDetailTSPointerToGongStructSaves"
	case NgDetailTSReversePointerToSliceOfGongStructImports:
		res = "NgDetailTSReversePointerToSliceOfGongStructImports"
	case NgDetailTSReversePointerToSliceOfGongStructSavesWhenUpdate:
		res = "NgDetailTSReversePointerToSliceOfGongStructSavesWhenUpdate"
	case NgDetailTSReversePointerToSliceOfGongStructStateCaseComputation:
		res = "NgDetailTSReversePointerToSliceOfGongStructStateCaseComputation"
	case NgDetailTSReversePointerToSliceOfGongStructStateCaseSetField:
		res = "NgDetailTSReversePointerToSliceOfGongStructStateCaseSetField"
	case NgDetailTSReversePointerToSliceOfGongStructStateEnumDeclaration:
		res = "NgDetailTSReversePointerToSliceOfGongStructStateEnumDeclaration"
	case NgDetailTSTimeDurationDeclarations:
		res = "NgDetailTSTimeDurationDeclarations"
	case NgDetailTSTimeDurationRecoveries:
		res = "NgDetailTSTimeDurationRecoveries"
	case NgDetailTSTimeDurationSaves:
		res = "NgDetailTSTimeDurationSaves"
	}
	return
}

// Utility function for NgDetailTsInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngdetailtsinsertionpoint NgDetailTsInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngdetailtsinsertionpoint {
	// insertion code per enum code
	case NgDetailTsInsertionPerStructCaseInitFieldDeclarations:
		res = 3
	case NgDetailTsInsertionPerStructCaseSetField:
		res = 4
	case NgDetailTsInsertionPerStructDeclarations:
		res = 2
	case NgDetailTsInsertionPerStructEnumFieldDeclarations:
		res = 1
	case NgDetailTsInsertionPerStructImports:
		res = 0
	case NgDetailTsInsertionPerStructInits:
		res = 5
	case NgDetailTsInsertionPerStructRecoveries:
		res = 7
	case NgDetailTsInsertionPerStructReversePointerSaveWhenCreateFromOwner:
		res = 10
	case NgDetailTsInsertionPerStructReversePointerSaveWhenUpdate:
		res = 9
	case NgDetailTsInsertionPerStructSaves:
		res = 8
	case NgDetailTsInsertionPerStructSorting:
		res = 6
	case NgDetailTsInsertionsNb:
		res = 11
	}
	return
}

func (ngdetailtsinsertionpoint *NgDetailTsInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 3:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructCaseInitFieldDeclarations
	case 4:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructCaseSetField
	case 2:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructDeclarations
	case 1:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructEnumFieldDeclarations
	case 0:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructImports
	case 5:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructInits
	case 7:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructRecoveries
	case 10:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructReversePointerSaveWhenCreateFromOwner
	case 9:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructReversePointerSaveWhenUpdate
	case 8:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructSaves
	case 6:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionPerStructSorting
	case 11:
		*ngdetailtsinsertionpoint = NgDetailTsInsertionsNb
	}
}

func (ngdetailtsinsertionpoint *NgDetailTsInsertionPoint) ToCodeString() (res string) {

	switch *ngdetailtsinsertionpoint {
	// insertion code per enum code
	case NgDetailTsInsertionPerStructCaseInitFieldDeclarations:
		res = "NgDetailTsInsertionPerStructCaseInitFieldDeclarations"
	case NgDetailTsInsertionPerStructCaseSetField:
		res = "NgDetailTsInsertionPerStructCaseSetField"
	case NgDetailTsInsertionPerStructDeclarations:
		res = "NgDetailTsInsertionPerStructDeclarations"
	case NgDetailTsInsertionPerStructEnumFieldDeclarations:
		res = "NgDetailTsInsertionPerStructEnumFieldDeclarations"
	case NgDetailTsInsertionPerStructImports:
		res = "NgDetailTsInsertionPerStructImports"
	case NgDetailTsInsertionPerStructInits:
		res = "NgDetailTsInsertionPerStructInits"
	case NgDetailTsInsertionPerStructRecoveries:
		res = "NgDetailTsInsertionPerStructRecoveries"
	case NgDetailTsInsertionPerStructReversePointerSaveWhenCreateFromOwner:
		res = "NgDetailTsInsertionPerStructReversePointerSaveWhenCreateFromOwner"
	case NgDetailTsInsertionPerStructReversePointerSaveWhenUpdate:
		res = "NgDetailTsInsertionPerStructReversePointerSaveWhenUpdate"
	case NgDetailTsInsertionPerStructSaves:
		res = "NgDetailTsInsertionPerStructSaves"
	case NgDetailTsInsertionPerStructSorting:
		res = "NgDetailTsInsertionPerStructSorting"
	case NgDetailTsInsertionsNb:
		res = "NgDetailTsInsertionsNb"
	}
	return
}

// Utility function for NgEnumInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngenuminsertionpoint NgEnumInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngenuminsertionpoint {
	// insertion code per enum code
	case NgEnumInsertionPointEnumDeclaration:
		res = 0
	case NgEnumNbInsertionPoints:
		res = 2
	case NgEnumValuesInsertionPointDeclarationForPullDownSelect:
		res = 1
	}
	return
}

func (ngenuminsertionpoint *NgEnumInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngenuminsertionpoint = NgEnumInsertionPointEnumDeclaration
	case 2:
		*ngenuminsertionpoint = NgEnumNbInsertionPoints
	case 1:
		*ngenuminsertionpoint = NgEnumValuesInsertionPointDeclarationForPullDownSelect
	}
}

func (ngenuminsertionpoint *NgEnumInsertionPoint) ToCodeString() (res string) {

	switch *ngenuminsertionpoint {
	// insertion code per enum code
	case NgEnumInsertionPointEnumDeclaration:
		res = "NgEnumInsertionPointEnumDeclaration"
	case NgEnumNbInsertionPoints:
		res = "NgEnumNbInsertionPoints"
	case NgEnumValuesInsertionPointDeclarationForPullDownSelect:
		res = "NgEnumValuesInsertionPointDeclarationForPullDownSelect"
	}
	return
}

// Utility function for NgEnumSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngenumsubtemplate NgEnumSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngenumsubtemplate {
	// insertion code per enum code
	case NgEnumDeclaration:
		res = 0
	case NgEnumDeclarationForPullDownSelect:
		res = 1
	}
	return
}

func (ngenumsubtemplate *NgEnumSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngenumsubtemplate = NgEnumDeclaration
	case 1:
		*ngenumsubtemplate = NgEnumDeclarationForPullDownSelect
	}
}

func (ngenumsubtemplate *NgEnumSubTemplate) ToCodeString() (res string) {

	switch *ngenumsubtemplate {
	// insertion code per enum code
	case NgEnumDeclaration:
		res = "NgEnumDeclaration"
	case NgEnumDeclarationForPullDownSelect:
		res = "NgEnumDeclarationForPullDownSelect"
	}
	return
}

// Utility function for NgLibFrontRepoServiceSubSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (nglibfrontreposervicesubsubtemplate NgLibFrontRepoServiceSubSubTemplate) ToString() (res string) {

	// migration of former implementation of enum
	switch nglibfrontreposervicesubsubtemplate {
	// insertion code per enum code
	case NgFrontRepoPtrToStructRedeeming:
		res = "NgFrontRepoPtrToStructRedeeming"
	case NgFrontRepoSliceOfPointerRedeeming:
		res = "NgFrontRepoSliceOfPointerRedeeming"
	}
	return
}

func (nglibfrontreposervicesubsubtemplate *NgLibFrontRepoServiceSubSubTemplate) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "NgFrontRepoPtrToStructRedeeming":
		*nglibfrontreposervicesubsubtemplate = NgFrontRepoPtrToStructRedeeming
	case "NgFrontRepoSliceOfPointerRedeeming":
		*nglibfrontreposervicesubsubtemplate = NgFrontRepoSliceOfPointerRedeeming
	}
}

func (nglibfrontreposervicesubsubtemplate *NgLibFrontRepoServiceSubSubTemplate) ToCodeString() (res string) {

	switch *nglibfrontreposervicesubsubtemplate {
	// insertion code per enum code
	case NgFrontRepoPtrToStructRedeeming:
		res = "NgFrontRepoPtrToStructRedeeming"
	case NgFrontRepoSliceOfPointerRedeeming:
		res = "NgFrontRepoSliceOfPointerRedeeming"
	}
	return
}

// Utility function for NgLibFrontRepoServiceSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (nglibfrontreposervicesubtemplate NgLibFrontRepoServiceSubTemplate) ToString() (res string) {

	// migration of former implementation of enum
	switch nglibfrontreposervicesubtemplate {
	// insertion code per enum code
	case NgLibFrontRepoArraysDecls:
		res = "ArraysDecls"
	case NgLibFrontRepoInitMapInstances:
		res = "InitMapInstances"
	case NgLibFrontRepoMapDecl:
		res = "MapDecl"
	case NgLibFrontRepoObservableArrayType:
		res = "ObservableArrayType"
	case NgLibFrontRepoObservableRefs:
		res = "ObservableRefs"
	case NgLibFrontRepoPerStructGetUniqueID:
		res = "PerStructGetUniqueID"
	case NgLibFrontRepoPerStructPull:
		res = "PerStructPull"
	case NgLibFrontRepoRedeemPointers:
		res = "RedeemPointers"
	case NgLibFrontRepoServiceDecl:
		res = "ServiceDecl"
	case NgLibFrontRepoServiceImports:
		res = "ServiceImports"
	case NgLibFrontRepoTypeCasting:
		res = "TypeCasting"
	}
	return
}

func (nglibfrontreposervicesubtemplate *NgLibFrontRepoServiceSubTemplate) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "ArraysDecls":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoArraysDecls
	case "InitMapInstances":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoInitMapInstances
	case "MapDecl":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoMapDecl
	case "ObservableArrayType":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoObservableArrayType
	case "ObservableRefs":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoObservableRefs
	case "PerStructGetUniqueID":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoPerStructGetUniqueID
	case "PerStructPull":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoPerStructPull
	case "RedeemPointers":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoRedeemPointers
	case "ServiceDecl":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoServiceDecl
	case "ServiceImports":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoServiceImports
	case "TypeCasting":
		*nglibfrontreposervicesubtemplate = NgLibFrontRepoTypeCasting
	}
}

func (nglibfrontreposervicesubtemplate *NgLibFrontRepoServiceSubTemplate) ToCodeString() (res string) {

	switch *nglibfrontreposervicesubtemplate {
	// insertion code per enum code
	case NgLibFrontRepoArraysDecls:
		res = "NgLibFrontRepoArraysDecls"
	case NgLibFrontRepoInitMapInstances:
		res = "NgLibFrontRepoInitMapInstances"
	case NgLibFrontRepoMapDecl:
		res = "NgLibFrontRepoMapDecl"
	case NgLibFrontRepoObservableArrayType:
		res = "NgLibFrontRepoObservableArrayType"
	case NgLibFrontRepoObservableRefs:
		res = "NgLibFrontRepoObservableRefs"
	case NgLibFrontRepoPerStructGetUniqueID:
		res = "NgLibFrontRepoPerStructGetUniqueID"
	case NgLibFrontRepoPerStructPull:
		res = "NgLibFrontRepoPerStructPull"
	case NgLibFrontRepoRedeemPointers:
		res = "NgLibFrontRepoRedeemPointers"
	case NgLibFrontRepoServiceDecl:
		res = "NgLibFrontRepoServiceDecl"
	case NgLibFrontRepoServiceImports:
		res = "NgLibFrontRepoServiceImports"
	case NgLibFrontRepoTypeCasting:
		res = "NgLibFrontRepoTypeCasting"
	}
	return
}

// Utility function for NgLibMapComponentsServiceSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (nglibmapcomponentsservicesubtemplate NgLibMapComponentsServiceSubTemplate) ToString() (res string) {

	// migration of former implementation of enum
	switch nglibmapcomponentsservicesubtemplate {
	// insertion code per enum code
	case NgLibMapComponentsDecls:
		res = "NgLibMapComponentsDecls"
	case NgLibMapComponentsImports:
		res = "NgLibMapComponentsImports"
	case NgLibMapComponentsIndivDecls:
		res = "NgLibMapComponentsIndivDecls"
	case NgLibMapSortingComponentsDecls:
		res = "NgLibMapSortingComponentsDecls"
	}
	return
}

func (nglibmapcomponentsservicesubtemplate *NgLibMapComponentsServiceSubTemplate) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "NgLibMapComponentsDecls":
		*nglibmapcomponentsservicesubtemplate = NgLibMapComponentsDecls
	case "NgLibMapComponentsImports":
		*nglibmapcomponentsservicesubtemplate = NgLibMapComponentsImports
	case "NgLibMapComponentsIndivDecls":
		*nglibmapcomponentsservicesubtemplate = NgLibMapComponentsIndivDecls
	case "NgLibMapSortingComponentsDecls":
		*nglibmapcomponentsservicesubtemplate = NgLibMapSortingComponentsDecls
	}
}

func (nglibmapcomponentsservicesubtemplate *NgLibMapComponentsServiceSubTemplate) ToCodeString() (res string) {

	switch *nglibmapcomponentsservicesubtemplate {
	// insertion code per enum code
	case NgLibMapComponentsDecls:
		res = "NgLibMapComponentsDecls"
	case NgLibMapComponentsImports:
		res = "NgLibMapComponentsImports"
	case NgLibMapComponentsIndivDecls:
		res = "NgLibMapComponentsIndivDecls"
	case NgLibMapSortingComponentsDecls:
		res = "NgLibMapSortingComponentsDecls"
	}
	return
}

// Utility function for NgLibModuleServiceSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (nglibmoduleservicesubtemplate NgLibModuleServiceSubTemplate) ToString() (res string) {

	// migration of former implementation of enum
	switch nglibmoduleservicesubtemplate {
	// insertion code per enum code
	case NgLibModuleDeclarations:
		res = "NgLibModuleIndivDecls"
	case NgLibModuleImports:
		res = "NgLibModuleImports"
	}
	return
}

func (nglibmoduleservicesubtemplate *NgLibModuleServiceSubTemplate) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "NgLibModuleIndivDecls":
		*nglibmoduleservicesubtemplate = NgLibModuleDeclarations
	case "NgLibModuleImports":
		*nglibmoduleservicesubtemplate = NgLibModuleImports
	}
}

func (nglibmoduleservicesubtemplate *NgLibModuleServiceSubTemplate) ToCodeString() (res string) {

	switch *nglibmoduleservicesubtemplate {
	// insertion code per enum code
	case NgLibModuleDeclarations:
		res = "NgLibModuleDeclarations"
	case NgLibModuleImports:
		res = "NgLibModuleImports"
	}
	return
}

// Utility function for NgPresentationHtmlSubTemplateId
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngpresentationhtmlsubtemplateid NgPresentationHtmlSubTemplateId) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngpresentationhtmlsubtemplateid {
	// insertion code per enum code
	case NgPresentationHtmlBasicField:
		res = 3
	case NgPresentationHtmlBasicFieldTimeDuration:
		res = 5
	case NgPresentationHtmlBool:
		res = 6
	case NgPresentationHtmlEnumInt:
		res = 2
	case NgPresentationHtmlEnumString:
		res = 1
	case NgPresentationHtmlField:
		res = 0
	case NgPresentationHtmlTimeField:
		res = 4
	case NgPresentationPointerToStructHtmlFormField:
		res = 7
	}
	return
}

func (ngpresentationhtmlsubtemplateid *NgPresentationHtmlSubTemplateId) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 3:
		*ngpresentationhtmlsubtemplateid = NgPresentationHtmlBasicField
	case 5:
		*ngpresentationhtmlsubtemplateid = NgPresentationHtmlBasicFieldTimeDuration
	case 6:
		*ngpresentationhtmlsubtemplateid = NgPresentationHtmlBool
	case 2:
		*ngpresentationhtmlsubtemplateid = NgPresentationHtmlEnumInt
	case 1:
		*ngpresentationhtmlsubtemplateid = NgPresentationHtmlEnumString
	case 0:
		*ngpresentationhtmlsubtemplateid = NgPresentationHtmlField
	case 4:
		*ngpresentationhtmlsubtemplateid = NgPresentationHtmlTimeField
	case 7:
		*ngpresentationhtmlsubtemplateid = NgPresentationPointerToStructHtmlFormField
	}
}

func (ngpresentationhtmlsubtemplateid *NgPresentationHtmlSubTemplateId) ToCodeString() (res string) {

	switch *ngpresentationhtmlsubtemplateid {
	// insertion code per enum code
	case NgPresentationHtmlBasicField:
		res = "NgPresentationHtmlBasicField"
	case NgPresentationHtmlBasicFieldTimeDuration:
		res = "NgPresentationHtmlBasicFieldTimeDuration"
	case NgPresentationHtmlBool:
		res = "NgPresentationHtmlBool"
	case NgPresentationHtmlEnumInt:
		res = "NgPresentationHtmlEnumInt"
	case NgPresentationHtmlEnumString:
		res = "NgPresentationHtmlEnumString"
	case NgPresentationHtmlField:
		res = "NgPresentationHtmlField"
	case NgPresentationHtmlTimeField:
		res = "NgPresentationHtmlTimeField"
	case NgPresentationPointerToStructHtmlFormField:
		res = "NgPresentationPointerToStructHtmlFormField"
	}
	return
}

// Utility function for NgPresentationTsInsertionPointId
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngpresentationtsinsertionpointid NgPresentationTsInsertionPointId) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngpresentationtsinsertionpointid {
	// insertion code per enum code
	case NgPresentationTsInsertionFieldPerStructEnumIntDeclarations:
		res = 2
	case NgPresentationTsInsertionPerStructEnumIntImports:
		res = 0
	case NgPresentationTsInsertionPerStructEnumIntRecoveries:
		res = 4
	case NgPresentationTsInsertionPerStructTimeDurationRecoveries:
		res = 3
	case NgPresentationTsInsertionTimeDurationFieldPerStructDeclarations:
		res = 1
	case NgPresentationTsInsertionsNb:
		res = 5
	}
	return
}

func (ngpresentationtsinsertionpointid *NgPresentationTsInsertionPointId) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 2:
		*ngpresentationtsinsertionpointid = NgPresentationTsInsertionFieldPerStructEnumIntDeclarations
	case 0:
		*ngpresentationtsinsertionpointid = NgPresentationTsInsertionPerStructEnumIntImports
	case 4:
		*ngpresentationtsinsertionpointid = NgPresentationTsInsertionPerStructEnumIntRecoveries
	case 3:
		*ngpresentationtsinsertionpointid = NgPresentationTsInsertionPerStructTimeDurationRecoveries
	case 1:
		*ngpresentationtsinsertionpointid = NgPresentationTsInsertionTimeDurationFieldPerStructDeclarations
	case 5:
		*ngpresentationtsinsertionpointid = NgPresentationTsInsertionsNb
	}
}

func (ngpresentationtsinsertionpointid *NgPresentationTsInsertionPointId) ToCodeString() (res string) {

	switch *ngpresentationtsinsertionpointid {
	// insertion code per enum code
	case NgPresentationTsInsertionFieldPerStructEnumIntDeclarations:
		res = "NgPresentationTsInsertionFieldPerStructEnumIntDeclarations"
	case NgPresentationTsInsertionPerStructEnumIntImports:
		res = "NgPresentationTsInsertionPerStructEnumIntImports"
	case NgPresentationTsInsertionPerStructEnumIntRecoveries:
		res = "NgPresentationTsInsertionPerStructEnumIntRecoveries"
	case NgPresentationTsInsertionPerStructTimeDurationRecoveries:
		res = "NgPresentationTsInsertionPerStructTimeDurationRecoveries"
	case NgPresentationTsInsertionTimeDurationFieldPerStructDeclarations:
		res = "NgPresentationTsInsertionTimeDurationFieldPerStructDeclarations"
	case NgPresentationTsInsertionsNb:
		res = "NgPresentationTsInsertionsNb"
	}
	return
}

// Utility function for NgPublicApiInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngpublicapiinsertionpoint NgPublicApiInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngpublicapiinsertionpoint {
	// insertion code per enum code
	case NgPublicApiInsertionEnumsExportDeclaration:
		res = 1
	case NgPublicApiInsertionStructComponentsExportDeclaration:
		res = 0
	case NgPublicApiNbInsertionPoints:
		res = 2
	}
	return
}

func (ngpublicapiinsertionpoint *NgPublicApiInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 1:
		*ngpublicapiinsertionpoint = NgPublicApiInsertionEnumsExportDeclaration
	case 0:
		*ngpublicapiinsertionpoint = NgPublicApiInsertionStructComponentsExportDeclaration
	case 2:
		*ngpublicapiinsertionpoint = NgPublicApiNbInsertionPoints
	}
}

func (ngpublicapiinsertionpoint *NgPublicApiInsertionPoint) ToCodeString() (res string) {

	switch *ngpublicapiinsertionpoint {
	// insertion code per enum code
	case NgPublicApiInsertionEnumsExportDeclaration:
		res = "NgPublicApiInsertionEnumsExportDeclaration"
	case NgPublicApiInsertionStructComponentsExportDeclaration:
		res = "NgPublicApiInsertionStructComponentsExportDeclaration"
	case NgPublicApiNbInsertionPoints:
		res = "NgPublicApiNbInsertionPoints"
	}
	return
}

// Utility function for NgPublicApiSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngpublicapisubtemplate NgPublicApiSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngpublicapisubtemplate {
	// insertion code per enum code
	case NgPublicApiDEnumsExportDeclaration:
		res = 1
	case NgPublicApiStructComponentsExportDeclaration:
		res = 0
	}
	return
}

func (ngpublicapisubtemplate *NgPublicApiSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 1:
		*ngpublicapisubtemplate = NgPublicApiDEnumsExportDeclaration
	case 0:
		*ngpublicapisubtemplate = NgPublicApiStructComponentsExportDeclaration
	}
}

func (ngpublicapisubtemplate *NgPublicApiSubTemplate) ToCodeString() (res string) {

	switch *ngpublicapisubtemplate {
	// insertion code per enum code
	case NgPublicApiDEnumsExportDeclaration:
		res = "NgPublicApiDEnumsExportDeclaration"
	case NgPublicApiStructComponentsExportDeclaration:
		res = "NgPublicApiStructComponentsExportDeclaration"
	}
	return
}

// Utility function for NgRoutingServiceSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngroutingservicesubtemplate NgRoutingServiceSubTemplate) ToString() (res string) {

	// migration of former implementation of enum
	switch ngroutingservicesubtemplate {
	// insertion code per enum code
	case NgRoutingDeclarations:
		res = "NgRoutingIndivDecls"
	case NgRoutingImports:
		res = "NgRoutingImports"
	}
	return
}

func (ngroutingservicesubtemplate *NgRoutingServiceSubTemplate) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "NgRoutingIndivDecls":
		*ngroutingservicesubtemplate = NgRoutingDeclarations
	case "NgRoutingImports":
		*ngroutingservicesubtemplate = NgRoutingImports
	}
}

func (ngroutingservicesubtemplate *NgRoutingServiceSubTemplate) ToCodeString() (res string) {

	switch *ngroutingservicesubtemplate {
	// insertion code per enum code
	case NgRoutingDeclarations:
		res = "NgRoutingDeclarations"
	case NgRoutingImports:
		res = "NgRoutingImports"
	}
	return
}

// Utility function for NgServiceSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngservicesubtemplate NgServiceSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngservicesubtemplate {
	// insertion code per enum code
	case NgServiceTSPointerToGongStructImports:
		res = 0
	case NgServiceTSPointerToGongStructReset:
		res = 1
	case NgServiceTSReversePointerToSliceOfGongStructImports:
		res = 5
	case NgServiceTSSliceOfPointerToGongStructReset:
		res = 2
	case NgServiceTSSliceOfPointerToGongStructReversePointerReset:
		res = 3
	case NgServiceTSSliceOfPointerToGongStructReversePointerRestore:
		res = 4
	}
	return
}

func (ngservicesubtemplate *NgServiceSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngservicesubtemplate = NgServiceTSPointerToGongStructImports
	case 1:
		*ngservicesubtemplate = NgServiceTSPointerToGongStructReset
	case 5:
		*ngservicesubtemplate = NgServiceTSReversePointerToSliceOfGongStructImports
	case 2:
		*ngservicesubtemplate = NgServiceTSSliceOfPointerToGongStructReset
	case 3:
		*ngservicesubtemplate = NgServiceTSSliceOfPointerToGongStructReversePointerReset
	case 4:
		*ngservicesubtemplate = NgServiceTSSliceOfPointerToGongStructReversePointerRestore
	}
}

func (ngservicesubtemplate *NgServiceSubTemplate) ToCodeString() (res string) {

	switch *ngservicesubtemplate {
	// insertion code per enum code
	case NgServiceTSPointerToGongStructImports:
		res = "NgServiceTSPointerToGongStructImports"
	case NgServiceTSPointerToGongStructReset:
		res = "NgServiceTSPointerToGongStructReset"
	case NgServiceTSReversePointerToSliceOfGongStructImports:
		res = "NgServiceTSReversePointerToSliceOfGongStructImports"
	case NgServiceTSSliceOfPointerToGongStructReset:
		res = "NgServiceTSSliceOfPointerToGongStructReset"
	case NgServiceTSSliceOfPointerToGongStructReversePointerReset:
		res = "NgServiceTSSliceOfPointerToGongStructReversePointerReset"
	case NgServiceTSSliceOfPointerToGongStructReversePointerRestore:
		res = "NgServiceTSSliceOfPointerToGongStructReversePointerRestore"
	}
	return
}

// Utility function for NgServiceTsInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngservicetsinsertionpoint NgServiceTsInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngservicetsinsertionpoint {
	// insertion code per enum code
	case NgServiceTsInsertionImports:
		res = 2
	case NgServiceTsInsertionPointerReset:
		res = 0
	case NgServiceTsInsertionPointerRestore:
		res = 1
	case NgServiceTsInsertionsNb:
		res = 3
	}
	return
}

func (ngservicetsinsertionpoint *NgServiceTsInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 2:
		*ngservicetsinsertionpoint = NgServiceTsInsertionImports
	case 0:
		*ngservicetsinsertionpoint = NgServiceTsInsertionPointerReset
	case 1:
		*ngservicetsinsertionpoint = NgServiceTsInsertionPointerRestore
	case 3:
		*ngservicetsinsertionpoint = NgServiceTsInsertionsNb
	}
}

func (ngservicetsinsertionpoint *NgServiceTsInsertionPoint) ToCodeString() (res string) {

	switch *ngservicetsinsertionpoint {
	// insertion code per enum code
	case NgServiceTsInsertionImports:
		res = "NgServiceTsInsertionImports"
	case NgServiceTsInsertionPointerReset:
		res = "NgServiceTsInsertionPointerReset"
	case NgServiceTsInsertionPointerRestore:
		res = "NgServiceTsInsertionPointerRestore"
	case NgServiceTsInsertionsNb:
		res = "NgServiceTsInsertionsNb"
	}
	return
}

// Utility function for NgSidebarHtmlInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngsidebarhtmlinsertionpoint NgSidebarHtmlInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngsidebarhtmlinsertionpoint {
	// insertion code per enum code
	case NgSidebarHtmlNbInsertionPoints:
		res = 1
	case NgSidebarHtmlStruct:
		res = 0
	}
	return
}

func (ngsidebarhtmlinsertionpoint *NgSidebarHtmlInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 1:
		*ngsidebarhtmlinsertionpoint = NgSidebarHtmlNbInsertionPoints
	case 0:
		*ngsidebarhtmlinsertionpoint = NgSidebarHtmlStruct
	}
}

func (ngsidebarhtmlinsertionpoint *NgSidebarHtmlInsertionPoint) ToCodeString() (res string) {

	switch *ngsidebarhtmlinsertionpoint {
	// insertion code per enum code
	case NgSidebarHtmlNbInsertionPoints:
		res = "NgSidebarHtmlNbInsertionPoints"
	case NgSidebarHtmlStruct:
		res = "NgSidebarHtmlStruct"
	}
	return
}

// Utility function for NgSidebarHtmlSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngsidebarhtmlsubtemplate NgSidebarHtmlSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngsidebarhtmlsubtemplate {
	// insertion code per enum code
	case NgSidebarHtmlField:
		res = 0
	}
	return
}

func (ngsidebarhtmlsubtemplate *NgSidebarHtmlSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngsidebarhtmlsubtemplate = NgSidebarHtmlField
	}
}

func (ngsidebarhtmlsubtemplate *NgSidebarHtmlSubTemplate) ToCodeString() (res string) {

	switch *ngsidebarhtmlsubtemplate {
	// insertion code per enum code
	case NgSidebarHtmlField:
		res = "NgSidebarHtmlField"
	}
	return
}

// Utility function for NgSidebarTsInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngsidebartsinsertionpoint NgSidebarTsInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngsidebartsinsertionpoint {
	// insertion code per enum code
	case NgSidebarTsInsertionPerStruct:
		res = 0
	case NgSidebarTsInsertionPerStructImports:
		res = 1
	case NgSidebarTsInsertionPerStructObservableForRefresh:
		res = 3
	case NgSidebarTsInsertionPerStructServiceDeclaration:
		res = 2
	case NgSidebarTsInsertionsNb:
		res = 4
	}
	return
}

func (ngsidebartsinsertionpoint *NgSidebarTsInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngsidebartsinsertionpoint = NgSidebarTsInsertionPerStruct
	case 1:
		*ngsidebartsinsertionpoint = NgSidebarTsInsertionPerStructImports
	case 3:
		*ngsidebartsinsertionpoint = NgSidebarTsInsertionPerStructObservableForRefresh
	case 2:
		*ngsidebartsinsertionpoint = NgSidebarTsInsertionPerStructServiceDeclaration
	case 4:
		*ngsidebartsinsertionpoint = NgSidebarTsInsertionsNb
	}
}

func (ngsidebartsinsertionpoint *NgSidebarTsInsertionPoint) ToCodeString() (res string) {

	switch *ngsidebartsinsertionpoint {
	// insertion code per enum code
	case NgSidebarTsInsertionPerStruct:
		res = "NgSidebarTsInsertionPerStruct"
	case NgSidebarTsInsertionPerStructImports:
		res = "NgSidebarTsInsertionPerStructImports"
	case NgSidebarTsInsertionPerStructObservableForRefresh:
		res = "NgSidebarTsInsertionPerStructObservableForRefresh"
	case NgSidebarTsInsertionPerStructServiceDeclaration:
		res = "NgSidebarTsInsertionPerStructServiceDeclaration"
	case NgSidebarTsInsertionsNb:
		res = "NgSidebarTsInsertionsNb"
	}
	return
}

// Utility function for NgSidebarTsStructSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngsidebartsstructsubtemplate NgSidebarTsStructSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngsidebartsstructsubtemplate {
	// insertion code per enum code
	case NgSidebarTsPerStructPointerToStructFieldTemplateNode:
		res = 0
	case NgSidebarTsPerStructSliceOfPointerToStructFieldTemplateNode:
		res = 1
	}
	return
}

func (ngsidebartsstructsubtemplate *NgSidebarTsStructSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngsidebartsstructsubtemplate = NgSidebarTsPerStructPointerToStructFieldTemplateNode
	case 1:
		*ngsidebartsstructsubtemplate = NgSidebarTsPerStructSliceOfPointerToStructFieldTemplateNode
	}
}

func (ngsidebartsstructsubtemplate *NgSidebarTsStructSubTemplate) ToCodeString() (res string) {

	switch *ngsidebartsstructsubtemplate {
	// insertion code per enum code
	case NgSidebarTsPerStructPointerToStructFieldTemplateNode:
		res = "NgSidebarTsPerStructPointerToStructFieldTemplateNode"
	case NgSidebarTsPerStructSliceOfPointerToStructFieldTemplateNode:
		res = "NgSidebarTsPerStructSliceOfPointerToStructFieldTemplateNode"
	}
	return
}

// Utility function for NgSidebarTsSubInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngsidebartssubinsertionpoint NgSidebarTsSubInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngsidebartssubinsertionpoint {
	// insertion code per enum code
	case NgSidebarTsSubInsertionPerField:
		res = 0
	case NgSidebarTsSubInsertionsNb:
		res = 1
	}
	return
}

func (ngsidebartssubinsertionpoint *NgSidebarTsSubInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngsidebartssubinsertionpoint = NgSidebarTsSubInsertionPerField
	case 1:
		*ngsidebartssubinsertionpoint = NgSidebarTsSubInsertionsNb
	}
}

func (ngsidebartssubinsertionpoint *NgSidebarTsSubInsertionPoint) ToCodeString() (res string) {

	switch *ngsidebartssubinsertionpoint {
	// insertion code per enum code
	case NgSidebarTsSubInsertionPerField:
		res = "NgSidebarTsSubInsertionPerField"
	case NgSidebarTsSubInsertionsNb:
		res = "NgSidebarTsSubInsertionsNb"
	}
	return
}

// Utility function for NgSidebarTsSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngsidebartssubtemplate NgSidebarTsSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngsidebartssubtemplate {
	// insertion code per enum code
	case NgSidebarTsPerStructNode:
		res = 0
	case NgSidebarTsPerStructNodeImports:
		res = 1
	case NgSidebarTsPerStructNodeObservableForRefresh:
		res = 3
	case NgSidebarTsPerStructNodeServiceDeclaration:
		res = 2
	}
	return
}

func (ngsidebartssubtemplate *NgSidebarTsSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngsidebartssubtemplate = NgSidebarTsPerStructNode
	case 1:
		*ngsidebartssubtemplate = NgSidebarTsPerStructNodeImports
	case 3:
		*ngsidebartssubtemplate = NgSidebarTsPerStructNodeObservableForRefresh
	case 2:
		*ngsidebartssubtemplate = NgSidebarTsPerStructNodeServiceDeclaration
	}
}

func (ngsidebartssubtemplate *NgSidebarTsSubTemplate) ToCodeString() (res string) {

	switch *ngsidebartssubtemplate {
	// insertion code per enum code
	case NgSidebarTsPerStructNode:
		res = "NgSidebarTsPerStructNode"
	case NgSidebarTsPerStructNodeImports:
		res = "NgSidebarTsPerStructNodeImports"
	case NgSidebarTsPerStructNodeObservableForRefresh:
		res = "NgSidebarTsPerStructNodeObservableForRefresh"
	case NgSidebarTsPerStructNodeServiceDeclaration:
		res = "NgSidebarTsPerStructNodeServiceDeclaration"
	}
	return
}

// Utility function for NgTableHTMLSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngtablehtmlsubtemplate NgTableHTMLSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngtablehtmlsubtemplate {
	// insertion code per enum code
	case NgTableHTMLBasicField:
		res = 0
	case NgTableHTMLBasicFieldTimeDuration:
		res = 4
	case NgTableHTMLBasicFloat64Field:
		res = 3
	case NgTableHTMLBool:
		res = 5
	case NgTableHTMLEnumIntField:
		res = 1
	case NgTableHTMLTimeField:
		res = 2
	case NgTablePointerToSliceOfGongStructHTMLFormField:
		res = 7
	case NgTablePointerToStructHTMLFormField:
		res = 6
	}
	return
}

func (ngtablehtmlsubtemplate *NgTableHTMLSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngtablehtmlsubtemplate = NgTableHTMLBasicField
	case 4:
		*ngtablehtmlsubtemplate = NgTableHTMLBasicFieldTimeDuration
	case 3:
		*ngtablehtmlsubtemplate = NgTableHTMLBasicFloat64Field
	case 5:
		*ngtablehtmlsubtemplate = NgTableHTMLBool
	case 1:
		*ngtablehtmlsubtemplate = NgTableHTMLEnumIntField
	case 2:
		*ngtablehtmlsubtemplate = NgTableHTMLTimeField
	case 7:
		*ngtablehtmlsubtemplate = NgTablePointerToSliceOfGongStructHTMLFormField
	case 6:
		*ngtablehtmlsubtemplate = NgTablePointerToStructHTMLFormField
	}
}

func (ngtablehtmlsubtemplate *NgTableHTMLSubTemplate) ToCodeString() (res string) {

	switch *ngtablehtmlsubtemplate {
	// insertion code per enum code
	case NgTableHTMLBasicField:
		res = "NgTableHTMLBasicField"
	case NgTableHTMLBasicFieldTimeDuration:
		res = "NgTableHTMLBasicFieldTimeDuration"
	case NgTableHTMLBasicFloat64Field:
		res = "NgTableHTMLBasicFloat64Field"
	case NgTableHTMLBool:
		res = "NgTableHTMLBool"
	case NgTableHTMLEnumIntField:
		res = "NgTableHTMLEnumIntField"
	case NgTableHTMLTimeField:
		res = "NgTableHTMLTimeField"
	case NgTablePointerToSliceOfGongStructHTMLFormField:
		res = "NgTablePointerToSliceOfGongStructHTMLFormField"
	case NgTablePointerToStructHTMLFormField:
		res = "NgTablePointerToStructHTMLFormField"
	}
	return
}

// Utility function for NgTableHtmlInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngtablehtmlinsertionpoint NgTableHtmlInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngtablehtmlinsertionpoint {
	// insertion code per enum code
	case NgTableHtmlInsertionColumn:
		res = 0
	case NgTableHtmlInsertionsNb:
		res = 1
	}
	return
}

func (ngtablehtmlinsertionpoint *NgTableHtmlInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 0:
		*ngtablehtmlinsertionpoint = NgTableHtmlInsertionColumn
	case 1:
		*ngtablehtmlinsertionpoint = NgTableHtmlInsertionsNb
	}
}

func (ngtablehtmlinsertionpoint *NgTableHtmlInsertionPoint) ToCodeString() (res string) {

	switch *ngtablehtmlinsertionpoint {
	// insertion code per enum code
	case NgTableHtmlInsertionColumn:
		res = "NgTableHtmlInsertionColumn"
	case NgTableHtmlInsertionsNb:
		res = "NgTableHtmlInsertionsNb"
	}
	return
}

// Utility function for NgTableSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngtablesubtemplate NgTableSubTemplate) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngtablesubtemplate {
	// insertion code per enum code
	case NgTableTSBasicFieldSorting:
		res = 3
	case NgTableTSEnumIntFiltering:
		res = 9
	case NgTableTSNonNumberFieldFiltering:
		res = 7
	case NgTableTSNumberFieldFiltering:
		res = 8
	case NgTableTSPerStructColumn:
		res = 13
	case NgTableTSPerStructEnumIntRecoveries:
		res = 1
	case NgTableTSPerStructTimeDurationRecoveries:
		res = 2
	case NgTableTSPointerToStructFiltering:
		res = 11
	case NgTableTSPointerToStructSorting:
		res = 5
	case NgTableTSSliceOfPointerToStructFiltering:
		res = 12
	case NgTableTSSliceOfPointerToStructPerStructColumn:
		res = 14
	case NgTableTSSliceOfPointerToStructSorting:
		res = 6
	case NgTableTSTimeFieldFiltering:
		res = 10
	case NgTableTSTimeFieldSorting:
		res = 4
	case NgTableTsInsertionPerStructImportsTpl:
		res = 0
	}
	return
}

func (ngtablesubtemplate *NgTableSubTemplate) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 3:
		*ngtablesubtemplate = NgTableTSBasicFieldSorting
	case 9:
		*ngtablesubtemplate = NgTableTSEnumIntFiltering
	case 7:
		*ngtablesubtemplate = NgTableTSNonNumberFieldFiltering
	case 8:
		*ngtablesubtemplate = NgTableTSNumberFieldFiltering
	case 13:
		*ngtablesubtemplate = NgTableTSPerStructColumn
	case 1:
		*ngtablesubtemplate = NgTableTSPerStructEnumIntRecoveries
	case 2:
		*ngtablesubtemplate = NgTableTSPerStructTimeDurationRecoveries
	case 11:
		*ngtablesubtemplate = NgTableTSPointerToStructFiltering
	case 5:
		*ngtablesubtemplate = NgTableTSPointerToStructSorting
	case 12:
		*ngtablesubtemplate = NgTableTSSliceOfPointerToStructFiltering
	case 14:
		*ngtablesubtemplate = NgTableTSSliceOfPointerToStructPerStructColumn
	case 6:
		*ngtablesubtemplate = NgTableTSSliceOfPointerToStructSorting
	case 10:
		*ngtablesubtemplate = NgTableTSTimeFieldFiltering
	case 4:
		*ngtablesubtemplate = NgTableTSTimeFieldSorting
	case 0:
		*ngtablesubtemplate = NgTableTsInsertionPerStructImportsTpl
	}
}

func (ngtablesubtemplate *NgTableSubTemplate) ToCodeString() (res string) {

	switch *ngtablesubtemplate {
	// insertion code per enum code
	case NgTableTSBasicFieldSorting:
		res = "NgTableTSBasicFieldSorting"
	case NgTableTSEnumIntFiltering:
		res = "NgTableTSEnumIntFiltering"
	case NgTableTSNonNumberFieldFiltering:
		res = "NgTableTSNonNumberFieldFiltering"
	case NgTableTSNumberFieldFiltering:
		res = "NgTableTSNumberFieldFiltering"
	case NgTableTSPerStructColumn:
		res = "NgTableTSPerStructColumn"
	case NgTableTSPerStructEnumIntRecoveries:
		res = "NgTableTSPerStructEnumIntRecoveries"
	case NgTableTSPerStructTimeDurationRecoveries:
		res = "NgTableTSPerStructTimeDurationRecoveries"
	case NgTableTSPointerToStructFiltering:
		res = "NgTableTSPointerToStructFiltering"
	case NgTableTSPointerToStructSorting:
		res = "NgTableTSPointerToStructSorting"
	case NgTableTSSliceOfPointerToStructFiltering:
		res = "NgTableTSSliceOfPointerToStructFiltering"
	case NgTableTSSliceOfPointerToStructPerStructColumn:
		res = "NgTableTSSliceOfPointerToStructPerStructColumn"
	case NgTableTSSliceOfPointerToStructSorting:
		res = "NgTableTSSliceOfPointerToStructSorting"
	case NgTableTSTimeFieldFiltering:
		res = "NgTableTSTimeFieldFiltering"
	case NgTableTSTimeFieldSorting:
		res = "NgTableTSTimeFieldSorting"
	case NgTableTsInsertionPerStructImportsTpl:
		res = "NgTableTsInsertionPerStructImportsTpl"
	}
	return
}

// Utility function for NgTableTsInsertionPoint
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ngtabletsinsertionpoint NgTableTsInsertionPoint) ToInt() (res int) {

	// migration of former implementation of enum
	switch ngtabletsinsertionpoint {
	// insertion code per enum code
	case NgTableTsInsertionPerStructColumns:
		res = 3
	case NgTableTsInsertionPerStructColumnsFiltering:
		res = 5
	case NgTableTsInsertionPerStructColumnsSorting:
		res = 4
	case NgTableTsInsertionPerStructEnumIntRecoveries:
		res = 2
	case NgTableTsInsertionPerStructImports:
		res = 0
	case NgTableTsInsertionPerStructTimeDurationRecoveries:
		res = 1
	case NgTableTsInsertionsNb:
		res = 6
	}
	return
}

func (ngtabletsinsertionpoint *NgTableTsInsertionPoint) FromInt(input int) {

	switch input {
	// insertion code per enum code
	case 3:
		*ngtabletsinsertionpoint = NgTableTsInsertionPerStructColumns
	case 5:
		*ngtabletsinsertionpoint = NgTableTsInsertionPerStructColumnsFiltering
	case 4:
		*ngtabletsinsertionpoint = NgTableTsInsertionPerStructColumnsSorting
	case 2:
		*ngtabletsinsertionpoint = NgTableTsInsertionPerStructEnumIntRecoveries
	case 0:
		*ngtabletsinsertionpoint = NgTableTsInsertionPerStructImports
	case 1:
		*ngtabletsinsertionpoint = NgTableTsInsertionPerStructTimeDurationRecoveries
	case 6:
		*ngtabletsinsertionpoint = NgTableTsInsertionsNb
	}
}

func (ngtabletsinsertionpoint *NgTableTsInsertionPoint) ToCodeString() (res string) {

	switch *ngtabletsinsertionpoint {
	// insertion code per enum code
	case NgTableTsInsertionPerStructColumns:
		res = "NgTableTsInsertionPerStructColumns"
	case NgTableTsInsertionPerStructColumnsFiltering:
		res = "NgTableTsInsertionPerStructColumnsFiltering"
	case NgTableTsInsertionPerStructColumnsSorting:
		res = "NgTableTsInsertionPerStructColumnsSorting"
	case NgTableTsInsertionPerStructEnumIntRecoveries:
		res = "NgTableTsInsertionPerStructEnumIntRecoveries"
	case NgTableTsInsertionPerStructImports:
		res = "NgTableTsInsertionPerStructImports"
	case NgTableTsInsertionPerStructTimeDurationRecoveries:
		res = "NgTableTsInsertionPerStructTimeDurationRecoveries"
	case NgTableTsInsertionsNb:
		res = "NgTableTsInsertionsNb"
	}
	return
}

// Utility function for OrmFileStructSubSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ormfilestructsubsubtemplate OrmFileStructSubSubTemplate) ToString() (res string) {

	// migration of former implementation of enum
	switch ormfilestructsubsubtemplate {
	// insertion code per enum code
	case OrmFileStructPtrToStructDecls:
		res = "OrmFileStructPtrToStructDecls"
	case OrmFileStructReversePtrToStructDecls:
		res = "OrmFileStructReversePtrToStructDecls"
	}
	return
}

func (ormfilestructsubsubtemplate *OrmFileStructSubSubTemplate) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "OrmFileStructPtrToStructDecls":
		*ormfilestructsubsubtemplate = OrmFileStructPtrToStructDecls
	case "OrmFileStructReversePtrToStructDecls":
		*ormfilestructsubsubtemplate = OrmFileStructReversePtrToStructDecls
	}
}

func (ormfilestructsubsubtemplate *OrmFileStructSubSubTemplate) ToCodeString() (res string) {

	switch *ormfilestructsubsubtemplate {
	// insertion code per enum code
	case OrmFileStructPtrToStructDecls:
		res = "OrmFileStructPtrToStructDecls"
	case OrmFileStructReversePtrToStructDecls:
		res = "OrmFileStructReversePtrToStructDecls"
	}
	return
}

// Utility function for OrmFileStructSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ormfilestructsubtemplate OrmFileStructSubTemplate) ToString() (res string) {

	// migration of former implementation of enum
	switch ormfilestructsubtemplate {
	// insertion code per enum code
	case OrmFileStructDeclarations:
		res = "OrmFileStructDeclarations"
	}
	return
}

func (ormfilestructsubtemplate *OrmFileStructSubTemplate) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "OrmFileStructDeclarations":
		*ormfilestructsubtemplate = OrmFileStructDeclarations
	}
}

func (ormfilestructsubtemplate *OrmFileStructSubTemplate) ToCodeString() (res string) {

	switch *ormfilestructsubtemplate {
	// insertion code per enum code
	case OrmFileStructDeclarations:
		res = "OrmFileStructDeclarations"
	}
	return
}

// Utility function for OrmSetupCumulSubTemplate
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ormsetupcumulsubtemplate OrmSetupCumulSubTemplate) ToString() (res string) {

	// migration of former implementation of enum
	switch ormsetupcumulsubtemplate {
	// insertion code per enum code
	case OrmSetupDelete:
		res = "OrmSetupDelete"
	case OrmSetupRefToStructDB:
		res = "OrmSetupRefToStructDB"
	}
	return
}

func (ormsetupcumulsubtemplate *OrmSetupCumulSubTemplate) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "OrmSetupDelete":
		*ormsetupcumulsubtemplate = OrmSetupDelete
	case "OrmSetupRefToStructDB":
		*ormsetupcumulsubtemplate = OrmSetupRefToStructDB
	}
}

func (ormsetupcumulsubtemplate *OrmSetupCumulSubTemplate) ToCodeString() (res string) {

	switch *ormsetupcumulsubtemplate {
	// insertion code per enum code
	case OrmSetupDelete:
		res = "OrmSetupDelete"
	case OrmSetupRefToStructDB:
		res = "OrmSetupRefToStructDB"
	}
	return
}
