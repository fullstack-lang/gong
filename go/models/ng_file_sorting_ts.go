package models

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	_ "embed"
)

//go:embed ng_file_sorting.css
var NgFileSortingCssTmpl string

const NgSortingTemplateTS = `// generated by gong
import { Component, OnInit, Inject, Optional } from '@angular/core';
import { TypeofExpr } from '@angular/compiler';
import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

import { Router, RouterState } from '@angular/router';
import { {{Structname}}DB } from '../{{structname}}-db'
import { {{Structname}}Service } from '../{{structname}}.service'

import { FrontRepoService, FrontRepo } from '../front-repo.service'
import { NullInt64 } from '../null-int64'

@Component({
  selector: 'lib-{{structname}}-sorting',
  templateUrl: './{{structname}}-sorting.component.html',
  styleUrls: ['./{{structname}}-sorting.component.css']
})
export class {{Structname}}SortingComponent implements OnInit {

  frontRepo: FrontRepo = new (FrontRepo)

  // array of {{Structname}} instances that are in the association
  associated{{Structname}}s = new Array<{{Structname}}DB>();

  constructor(
    private {{structname}}Service: {{Structname}}Service,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of {{structname}} instances
    public dialogRef: MatDialogRef<{{Structname}}SortingComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {
    this.router.routeReuseStrategy.shouldReuseRoute = function () {
      return false;
    };
  }

  ngOnInit(): void {
    this.get{{Structname}}s()
  }

  get{{Structname}}s(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        let index = 0
        for (let {{structname}} of this.frontRepo.{{Structname}}s_array) {
          let ID = this.dialogData.ID
          let revPointerID = {{structname}}[this.dialogData.ReversePointer as keyof {{Structname}}DB] as unknown as NullInt64
          let revPointerID_Index = {{structname}}[this.dialogData.ReversePointer + "_Index" as keyof {{Structname}}DB] as unknown as NullInt64
          if (revPointerID.Int64 == ID) {
            if (revPointerID_Index == undefined) {
              revPointerID_Index = new NullInt64
              revPointerID_Index.Valid = true
              revPointerID_Index.Int64 = index++
            }
            this.associated{{Structname}}s.push({{structname}})
          }
        }

        // sort associated {{structname}} according to order
        this.associated{{Structname}}s.sort((t1, t2) => {
          let t1_revPointerID_Index = t1[this.dialogData.ReversePointer + "_Index" as keyof typeof t1] as unknown as NullInt64
          let t2_revPointerID_Index = t2[this.dialogData.ReversePointer + "_Index" as keyof typeof t2] as unknown as NullInt64
          if (t1_revPointerID_Index && t2_revPointerID_Index) {
            if (t1_revPointerID_Index.Int64 > t2_revPointerID_Index.Int64) {
              return 1;
            }
            if (t1_revPointerID_Index.Int64 < t2_revPointerID_Index.Int64) {
              return -1;
            }
          }
          return 0;
        });
      }
    )
  }

  drop(event: CdkDragDrop<string[]>) {
    moveItemInArray(this.associated{{Structname}}s, event.previousIndex, event.currentIndex);

    // set the order of {{Structname}} instances
    let index = 0

    for (let {{structname}} of this.associated{{Structname}}s) {
      let revPointerID_Index = {{structname}}[this.dialogData.ReversePointer + "_Index" as keyof {{Structname}}DB] as unknown as NullInt64
      revPointerID_Index.Valid = true
      revPointerID_Index.Int64 = index++
    }
  }

  save() {

    this.associated{{Structname}}s.forEach(
      {{structname}} => {
        this.{{structname}}Service.update{{Structname}}({{structname}})
          .subscribe({{structname}} => {
            this.{{structname}}Service.{{Structname}}ServiceChanged.next("update")
          });
      }
    )

    this.dialogRef.close('Sorting of ' + this.dialogData.ReversePointer +' done');
  }
}
`

// MultiCodeGeneratorNgSorting parses mdlPkg and generates the code for the
// Sorting component
func MultiCodeGeneratorNgSorting(
	mdlPkg *ModelPkg,
	pkgName string,
	matTargetPath string,
	pkgGoPath string) {

	// have alphabetical order generation
	structList := []*GongStruct{}
	for _, _struct := range mdlPkg.GongStructs {
		structList = append(structList, _struct)
	}
	sort.Slice(structList[:], func(i, j int) bool {
		return structList[i].Name < structList[j].Name
	})

	for _, _struct := range mdlPkg.GongStructs {
		if !_struct.HasNameField() {
			continue
		}

		// create the component directory
		dirPath := filepath.Join(matTargetPath, strings.ToLower(_struct.Name)+"-sorting")
		errd := os.MkdirAll(dirPath, os.ModePerm)
		if os.IsNotExist(errd) {
			log.Println("creating directory : " + dirPath)
		}

		// generate the css file
		VerySimpleCodeGenerator(mdlPkg,
			pkgName,
			pkgGoPath,
			filepath.Join(dirPath, strings.ToLower(_struct.Name)+"-sorting.component.css"),
			NgFileSortingCssTmpl,
		)

		// generate the typescript file
		codeTS := NgSortingTemplateTS
		codeHTML := NgSortingTemplateHTML

		// final replacement
		codeTS = Replace6(codeTS,
			"{{PkgName}}", pkgName,
			"{{TitlePkgName}}", strings.Title(pkgName),
			"{{pkgname}}", strings.ToLower(pkgName),
			"{{PkgPathRoot}}", strings.ReplaceAll(pkgGoPath, "/models", ""),
			"{{Structname}}", _struct.Name,
			"{{structname}}", strings.ToLower(_struct.Name))
		codeHTML = Replace6(codeHTML,
			"{{PkgName}}", pkgName,
			"{{TitlePkgName}}", strings.Title(pkgName),
			"{{pkgname}}", strings.ToLower(pkgName),
			"{{PkgPathRoot}}", strings.ReplaceAll(pkgGoPath, "/models", ""),
			"{{Structname}}", _struct.Name,
			"{{structname}}", strings.ToLower(_struct.Name))
		{
			file, err := os.Create(filepath.Join(dirPath, strings.ToLower(_struct.Name)+"-sorting.component.ts"))
			if err != nil {
				log.Panic(err)
			}
			defer file.Close()
			fmt.Fprint(file, codeTS)
		}
		{
			file, err := os.Create(filepath.Join(dirPath, strings.ToLower(_struct.Name)+"-sorting.component.html"))
			if err != nil {
				log.Panic(err)
			}
			defer file.Close()
			fmt.Fprint(file, codeHTML)
		}

	}
}
