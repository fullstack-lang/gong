package models

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	_ "embed"
)

//go:embed ng_file_sorting.css
var NgFileSortingCssTmpl string

const NgSortingTemplateTS = `// generated by gong
import { Component, OnInit, Inject, Optional } from '@angular/core';
import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

import { Router, RouterState } from '@angular/router';
import { BclassDB } from '../bclass-db'
import { BclassService } from '../bclass.service'

import { FrontRepoService, FrontRepo, NullInt64 } from '../front-repo.service'
@Component({
  selector: 'lib-bclass-sorting',
  templateUrl: './bclass-sorting.component.html',
  styleUrls: ['./bclass-sorting.component.css']
})
export class BclassSortingComponent implements OnInit {

  frontRepo: FrontRepo

  // array of Bclass instances that are in the association
  associatedBclasss = new Array<BclassDB>();

  constructor(
    private bclassService: BclassService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of bclass instances
    public dialogRef: MatDialogRef<BclassSortingComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {
    this.router.routeReuseStrategy.shouldReuseRoute = function () {
      return false;
    };
  }

  ngOnInit(): void {
    this.getBclasss()
  }

  getBclasss(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        let index = 0
        for (let bclass of this.frontRepo.Bclasss_array) {
          let ID = this.dialogData.ID
          let revPointer = bclass[this.dialogData.ReversePointer]
          if (revPointer.Int64 == ID) {
            if (bclass.Aclass_AnarrayofbDBID_Index == undefined) {
              bclass.Aclass_AnarrayofbDBID_Index = new NullInt64
              bclass.Aclass_AnarrayofbDBID_Index.Valid = true
              bclass.Aclass_AnarrayofbDBID_Index.Int64 = index++
            }
            this.associatedBclasss.push(bclass)
          }
        }

        // sort associated bclass according to order
        this.associatedBclasss.sort((t1, t2) => {
          if (t1.Aclass_AnarrayofbDBID_Index.Int64 > t2.Aclass_AnarrayofbDBID_Index.Int64) {
            return 1;
          }
          if (t1.Aclass_AnarrayofbDBID_Index.Int64 < t2.Aclass_AnarrayofbDBID_Index.Int64) {
            return -1;
          }
          return 0;
        });

        console.log("front repo pull returned")
      }
    )
  }

  drop(event: CdkDragDrop<string[]>) {
    moveItemInArray(this.associatedBclasss, event.previousIndex, event.currentIndex);

    // set the order of Bclass instances
    let index = 0
    for (let bclass of this.associatedBclasss) {
      bclass.Aclass_AnarrayofbDBID_Index.Valid = true
      bclass.Aclass_AnarrayofbDBID_Index.Int64 = index++
    }
    console.log("after drop")
  }

  save() {

    this.associatedBclasss.forEach(
      bclass => {
        this.bclassService.updateBclass(bclass)
          .subscribe(bclass => {
            this.bclassService.BclassServiceChanged.next("update")
            console.log("bclass saved")
          });
      }
    )

    this.dialogRef.close('Sorting of Aclass.Anarrayofb done');
  }
}
`

// insertion points in the main template
type NgSortingTsInsertionPoint int

const (
	NgSortingTsInsertionPerStructRecoveries NgSortingTsInsertionPoint = iota
	NgSortingTsInsertionPerStructColumns
	NgSortingTsInsertionsNb
)

type NgSortingSubTemplate int

const (
	NgSortingTSPerStructTimeDurationRecoveries NgSortingSubTemplate = iota

	NgSortingTSPerStructColumn
)

var NgSortinglSubTemplateCode map[NgSortingSubTemplate]string = map[NgSortingSubTemplate]string{

	NgSortingTSPerStructTimeDurationRecoveries: `
        // compute strings for durations
        for (let {{structname}} of this.{{structname}}s) {
          {{structname}}.{{FieldName}}_string =
            Math.floor({{structname}}.{{FieldName}} / (3600 * 1000 * 1000 * 1000)) + "H " +
            Math.floor({{structname}}.{{FieldName}} % (3600 * 1000 * 1000 * 1000) / (60 * 1000 * 1000 * 1000)) + "M " +
            {{structname}}.{{FieldName}} % (60 * 1000 * 1000 * 1000) / (1000 * 1000 * 1000) + "S"
        }`,

	NgSortingTSPerStructColumn: `
        "{{FieldName}}",`,
}

// MultiCodeGeneratorNgSorting parses mdlPkg and generates the code for the
// Sorting component
func MultiCodeGeneratorNgSorting(
	mdlPkg *ModelPkg,
	pkgName string,
	matTargetPath string,
	pkgGoPath string) {

	// have alphabetical order generation
	structList := []*GongStruct{}
	for _, _struct := range mdlPkg.GongStructs {
		structList = append(structList, _struct)
	}
	sort.Slice(structList[:], func(i, j int) bool {
		return structList[i].Name < structList[j].Name
	})

	for _, _struct := range mdlPkg.GongStructs {
		if !_struct.HasNameField() {
			continue
		}

		// create the component directory
		dirPath := filepath.Join(matTargetPath, strings.ToLower(_struct.Name)+"-sorting")
		errd := os.Mkdir(dirPath, os.ModePerm)
		if os.IsNotExist(errd) {
			log.Println("creating directory : " + dirPath)
		}

		// generate the css file
		VerySimpleCodeGenerator(mdlPkg,
			pkgName,
			pkgGoPath,
			filepath.Join(dirPath, strings.ToLower(_struct.Name)+"-sorting.component.css"),
			NgFileSortingCssTmpl,
		)

		// generate the typescript file
		codeTS := NgSortingTemplateTS

		TsInsertions := make(map[NgSortingTsInsertionPoint]string)
		for insertion := NgSortingTsInsertionPoint(0); insertion < NgSortingTsInsertionsNb; insertion++ {
			TsInsertions[insertion] = ""
		}

		codeHTML := NgSortingTemplateHTML

		//
		// Parse all fields from other structs that points to this struct
		//
		for _, __struct := range structList {
			for _, field := range __struct.Fields {
				switch field.(type) {
				case *SliceOfPointerToGongStructField:
					fieldSliceOfPointerToModel := field.(*SliceOfPointerToGongStructField)

					if fieldSliceOfPointerToModel.GongStruct == _struct {

						TsInsertions[NgSortingTsInsertionPerStructColumns] +=
							Replace1(NgSortinglSubTemplateCode[NgSortingTSPerStructColumn],
								"{{FieldName}}", fieldSliceOfPointerToModel.Name)
					}
				}
			}
		}

		for insertion := NgSortingTsInsertionPoint(0); insertion < NgSortingTsInsertionsNb; insertion++ {
			toReplace := "{{" + string(rune(insertion)) + "}}"
			codeTS = strings.ReplaceAll(codeTS, toReplace, TsInsertions[insertion])
		}

		// final replacement
		codeTS = Replace6(codeTS,
			"{{PkgName}}", pkgName,
			"{{TitlePkgName}}", strings.Title(pkgName),
			"{{pkgname}}", strings.ToLower(pkgName),
			"{{PkgPathRoot}}", strings.ReplaceAll(pkgGoPath, "/models", ""),
			"{{Structname}}", _struct.Name,
			"{{structname}}", strings.ToLower(_struct.Name))
		codeHTML = Replace6(codeHTML,
			"{{PkgName}}", pkgName,
			"{{TitlePkgName}}", strings.Title(pkgName),
			"{{pkgname}}", strings.ToLower(pkgName),
			"{{PkgPathRoot}}", strings.ReplaceAll(pkgGoPath, "/models", ""),
			"{{Structname}}", _struct.Name,
			"{{structname}}", strings.ToLower(_struct.Name))
		{
			file, err := os.Create(filepath.Join(dirPath, strings.ToLower(_struct.Name)+"-sorting.component.ts"))
			if err != nil {
				log.Panic(err)
			}
			defer file.Close()
			fmt.Fprint(file, codeTS)
		}
		{
			file, err := os.Create(filepath.Join(dirPath, strings.ToLower(_struct.Name)+"-sorting.component.html"))
			if err != nil {
				log.Panic(err)
			}
			defer file.Close()
			fmt.Fprint(file, codeHTML)
		}

	}
}
