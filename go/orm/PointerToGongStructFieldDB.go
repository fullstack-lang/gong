// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_PointerToGongStructField sql.NullBool
var __PointerToGongStructField_time__dummyDeclaration time.Duration
var dummy_PointerToGongStructField_sort sort.Float64Slice

// PointerToGongStructFieldAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pointertogongstructfieldAPI
type PointerToGongStructFieldAPI struct {
	models.PointerToGongStructField

	// insertion for fields declaration
	// Declation for basic field pointertogongstructfieldDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// field GongStruct is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GongStructID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	GongStructName string

	// Implementation of a reverse ID for field GongStruct{}.PointerToGongStructFields []*PointerToGongStructField
	GongStruct_PointerToGongStructFieldsDBID sql.NullInt64
	GongStruct_PointerToGongStructFieldsDBID_Index sql.NullInt64

	// end of insertion
}

// PointerToGongStructFieldDB describes a pointertogongstructfield in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model pointertogongstructfieldDB
type PointerToGongStructFieldDB struct {
	gorm.Model

	PointerToGongStructFieldAPI
}

// PointerToGongStructFieldDBs arrays pointertogongstructfieldDBs
// swagger:response pointertogongstructfieldDBsResponse
type PointerToGongStructFieldDBs []PointerToGongStructFieldDB

// PointerToGongStructFieldDBResponse provides response
// swagger:response pointertogongstructfieldDBResponse
type PointerToGongStructFieldDBResponse struct {
	PointerToGongStructFieldDB
}

type BackRepoPointerToGongStructFieldStruct struct {
	// stores PointerToGongStructFieldDB according to their gorm ID
	Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB *map[uint]*PointerToGongStructFieldDB

	// stores PointerToGongStructFieldDB ID according to PointerToGongStructField address
	Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID *map[*models.PointerToGongStructField]uint

	// stores PointerToGongStructField according to their gorm ID
	Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr *map[uint]*models.PointerToGongStructField

	db *gorm.DB
}

// BackRepoPointerToGongStructField.Init set up the BackRepo of the PointerToGongStructField
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) Init(db *gorm.DB) (Error error) {

	if backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr != nil {
		err := errors.New("In Init, backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr should be nil")
		return err
	}

	if backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB != nil {
		err := errors.New("In Init, backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB should be nil")
		return err
	}

	if backRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID != nil {
		err := errors.New("In Init, backRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.PointerToGongStructField, 0)
	backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr = &tmp

	tmpDB := make(map[uint]*PointerToGongStructFieldDB, 0)
	backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB = &tmpDB

	tmpID := make(map[*models.PointerToGongStructField]uint, 0)
	backRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID = &tmpID

	backRepoPointerToGongStructField.db = db
	return
}

// BackRepoPointerToGongStructField.CommitPhaseOne commits all staged instances of PointerToGongStructField to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pointertogongstructfield := range stage.PointerToGongStructFields {
		backRepoPointerToGongStructField.CommitPhaseOneInstance(pointertogongstructfield)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pointertogongstructfield := range *backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr {
		if _, ok := stage.PointerToGongStructFields[pointertogongstructfield]; !ok {
			backRepoPointerToGongStructField.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPointerToGongStructField.CommitDeleteInstance commits deletion of PointerToGongStructField to the BackRepo
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CommitDeleteInstance(id uint) (Error error) {

	pointertogongstructfield := (*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr)[id]

	// pointertogongstructfield is not staged anymore, remove pointertogongstructfieldDB
	pointertogongstructfieldDB := (*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB)[id]
	query := backRepoPointerToGongStructField.db.Unscoped().Delete(&pointertogongstructfieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID), pointertogongstructfield)
	delete((*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr), id)
	delete((*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB), id)

	return
}

// BackRepoPointerToGongStructField.CommitPhaseOneInstance commits pointertogongstructfield staged instances of PointerToGongStructField to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CommitPhaseOneInstance(pointertogongstructfield *models.PointerToGongStructField) (Error error) {

	// check if the pointertogongstructfield is not commited yet
	if _, ok := (*backRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[pointertogongstructfield]; ok {
		return
	}

	// initiate pointertogongstructfield
	var pointertogongstructfieldDB PointerToGongStructFieldDB
	pointertogongstructfieldDB.PointerToGongStructField = *pointertogongstructfield

	query := backRepoPointerToGongStructField.db.Create(&pointertogongstructfieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[pointertogongstructfield] = pointertogongstructfieldDB.ID
	(*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr)[pointertogongstructfieldDB.ID] = pointertogongstructfield
	(*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB)[pointertogongstructfieldDB.ID] = &pointertogongstructfieldDB

	return
}

// BackRepoPointerToGongStructField.CommitPhaseTwo commits all staged instances of PointerToGongStructField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pointertogongstructfield := range *backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr {
		backRepoPointerToGongStructField.CommitPhaseTwoInstance(backRepo, idx, pointertogongstructfield)
	}

	return
}

// BackRepoPointerToGongStructField.CommitPhaseTwoInstance commits {{structname }} of models.PointerToGongStructField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pointertogongstructfield *models.PointerToGongStructField) (Error error) {

	// fetch matching pointertogongstructfieldDB
	if pointertogongstructfieldDB, ok := (*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				pointertogongstructfieldDB.Name_Data.String = pointertogongstructfield.Name
				pointertogongstructfieldDB.Name_Data.Valid = true

				// commit pointer value pointertogongstructfield.GongStruct translates to updating the pointertogongstructfield.GongStructID
				pointertogongstructfieldDB.GongStructID.Valid = true // allow for a 0 value (nil association)
				if pointertogongstructfield.GongStruct != nil {
					if GongStructId, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[pointertogongstructfield.GongStruct]; ok {
						pointertogongstructfieldDB.GongStructID.Int64 = int64(GongStructId)
					}
				}

			}
		}
		query := backRepoPointerToGongStructField.db.Save(&pointertogongstructfieldDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown PointerToGongStructField intance %s", pointertogongstructfield.Name))
		return err
	}

	return
}

// BackRepoPointerToGongStructField.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CheckoutPhaseOne() (Error error) {

	pointertogongstructfieldDBArray := make([]PointerToGongStructFieldDB, 0)
	query := backRepoPointerToGongStructField.db.Find(&pointertogongstructfieldDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, pointertogongstructfieldDB := range pointertogongstructfieldDBArray {
		backRepoPointerToGongStructField.CheckoutPhaseOneInstance(&pointertogongstructfieldDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a pointertogongstructfieldDB that has been found in the DB, updates the backRepo and stages the
// models version of the pointertogongstructfieldDB
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CheckoutPhaseOneInstance(pointertogongstructfieldDB *PointerToGongStructFieldDB) (Error error) {

	// if absent, create entries in the backRepoPointerToGongStructField maps.
	pointertogongstructfieldWithNewFieldValues := pointertogongstructfieldDB.PointerToGongStructField
	if _, ok := (*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr)[pointertogongstructfieldDB.ID]; !ok {

		(*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr)[pointertogongstructfieldDB.ID] = &pointertogongstructfieldWithNewFieldValues
		(*backRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[&pointertogongstructfieldWithNewFieldValues] = pointertogongstructfieldDB.ID

		// append model store with the new element
		pointertogongstructfieldWithNewFieldValues.Stage()
	}
	pointertogongstructfieldDBWithNewFieldValues := *pointertogongstructfieldDB
	(*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB)[pointertogongstructfieldDB.ID] = &pointertogongstructfieldDBWithNewFieldValues

	return
}

// BackRepoPointerToGongStructField.CheckoutPhaseTwo Checkouts all staged instances of PointerToGongStructField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pointertogongstructfieldDB := range *backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB {
		backRepoPointerToGongStructField.CheckoutPhaseTwoInstance(backRepo, pointertogongstructfieldDB)
	}
	return
}

// BackRepoPointerToGongStructField.CheckoutPhaseTwoInstance Checkouts staged instances of PointerToGongStructField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPointerToGongStructField *BackRepoPointerToGongStructFieldStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pointertogongstructfieldDB *PointerToGongStructFieldDB) (Error error) {

	pointertogongstructfield := (*backRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr)[pointertogongstructfieldDB.ID]
	_ = pointertogongstructfield // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			pointertogongstructfield.Name = pointertogongstructfieldDB.Name_Data.String

			// GongStruct field
			if pointertogongstructfieldDB.GongStructID.Int64 != 0 {
				pointertogongstructfield.GongStruct = (*backRepo.BackRepoGongStruct.Map_GongStructDBID_GongStructPtr)[uint(pointertogongstructfieldDB.GongStructID.Int64)]
			}

		}
	}
	return
}

// CommitPointerToGongStructField allows commit of a single pointertogongstructfield (if already staged)
func (backRepo *BackRepoStruct) CommitPointerToGongStructField(pointertogongstructfield *models.PointerToGongStructField) {
	backRepo.BackRepoPointerToGongStructField.CommitPhaseOneInstance(pointertogongstructfield)
	if id, ok := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[pointertogongstructfield]; ok {
		backRepo.BackRepoPointerToGongStructField.CommitPhaseTwoInstance(backRepo, id, pointertogongstructfield)
	}
}

// CommitPointerToGongStructField allows checkout of a single pointertogongstructfield (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPointerToGongStructField(pointertogongstructfield *models.PointerToGongStructField) {
	// check if the pointertogongstructfield is staged
	if _, ok := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[pointertogongstructfield]; ok {

		if id, ok := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[pointertogongstructfield]; ok {
			var pointertogongstructfieldDB PointerToGongStructFieldDB
			pointertogongstructfieldDB.ID = id

			if err := backRepo.BackRepoPointerToGongStructField.db.First(&pointertogongstructfieldDB, id).Error; err != nil {
				log.Panicln("CheckoutPointerToGongStructField : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPointerToGongStructField.CheckoutPhaseOneInstance(&pointertogongstructfieldDB)
			backRepo.BackRepoPointerToGongStructField.CheckoutPhaseTwoInstance(backRepo, &pointertogongstructfieldDB)
		}
	}
}
