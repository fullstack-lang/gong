// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GongTimeField sql.NullBool
var __GongTimeField_time__dummyDeclaration time.Duration
var dummy_GongTimeField_sort sort.Float64Slice

// GongTimeFieldAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongtimefieldAPI
type GongTimeFieldAPI struct {
	models.GongTimeField

	// insertion for fields declaration
	// Declation for basic field gongtimefieldDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// GongTimeFieldDB describes a gongtimefield in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model gongtimefieldDB
type GongTimeFieldDB struct {
	gorm.Model

	GongTimeFieldAPI
}

// GongTimeFieldDBs arrays gongtimefieldDBs
// swagger:response gongtimefieldDBsResponse
type GongTimeFieldDBs []GongTimeFieldDB

// GongTimeFieldDBResponse provides response
// swagger:response gongtimefieldDBResponse
type GongTimeFieldDBResponse struct {
	GongTimeFieldDB
}

type BackRepoGongTimeFieldStruct struct {
	// stores GongTimeFieldDB according to their gorm ID
	Map_GongTimeFieldDBID_GongTimeFieldDB *map[uint]*GongTimeFieldDB

	// stores GongTimeFieldDB ID according to GongTimeField address
	Map_GongTimeFieldPtr_GongTimeFieldDBID *map[*models.GongTimeField]uint

	// stores GongTimeField according to their gorm ID
	Map_GongTimeFieldDBID_GongTimeFieldPtr *map[uint]*models.GongTimeField

	db *gorm.DB
}

// BackRepoGongTimeField.Init set up the BackRepo of the GongTimeField
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr != nil {
		err := errors.New("In Init, backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr should be nil")
		return err
	}

	if backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB != nil {
		err := errors.New("In Init, backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB should be nil")
		return err
	}

	if backRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID != nil {
		err := errors.New("In Init, backRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongTimeField, 0)
	backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr = &tmp

	tmpDB := make(map[uint]*GongTimeFieldDB, 0)
	backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB = &tmpDB

	tmpID := make(map[*models.GongTimeField]uint, 0)
	backRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID = &tmpID

	backRepoGongTimeField.db = db
	return
}

// BackRepoGongTimeField.CommitPhaseOne commits all staged instances of GongTimeField to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongtimefield := range stage.GongTimeFields {
		backRepoGongTimeField.CommitPhaseOneInstance(gongtimefield)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongtimefield := range *backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr {
		if _, ok := stage.GongTimeFields[gongtimefield]; !ok {
			backRepoGongTimeField.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongTimeField.CommitDeleteInstance commits deletion of GongTimeField to the BackRepo
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CommitDeleteInstance(id uint) (Error error) {

	gongtimefield := (*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[id]

	// gongtimefield is not staged anymore, remove gongtimefieldDB
	gongtimefieldDB := (*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB)[id]
	query := backRepoGongTimeField.db.Unscoped().Delete(&gongtimefieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID), gongtimefield)
	delete((*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr), id)
	delete((*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB), id)

	return
}

// BackRepoGongTimeField.CommitPhaseOneInstance commits gongtimefield staged instances of GongTimeField to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CommitPhaseOneInstance(gongtimefield *models.GongTimeField) (Error error) {

	// check if the gongtimefield is not commited yet
	if _, ok := (*backRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID)[gongtimefield]; ok {
		return
	}

	// initiate gongtimefield
	var gongtimefieldDB GongTimeFieldDB
	gongtimefieldDB.GongTimeField = *gongtimefield

	query := backRepoGongTimeField.db.Create(&gongtimefieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID)[gongtimefield] = gongtimefieldDB.ID
	(*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[gongtimefieldDB.ID] = gongtimefield
	(*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB)[gongtimefieldDB.ID] = &gongtimefieldDB

	return
}

// BackRepoGongTimeField.CommitPhaseTwo commits all staged instances of GongTimeField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongtimefield := range *backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr {
		backRepoGongTimeField.CommitPhaseTwoInstance(backRepo, idx, gongtimefield)
	}

	return
}

// BackRepoGongTimeField.CommitPhaseTwoInstance commits {{structname }} of models.GongTimeField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongtimefield *models.GongTimeField) (Error error) {

	// fetch matching gongtimefieldDB
	if gongtimefieldDB, ok := (*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				gongtimefieldDB.Name_Data.String = gongtimefield.Name
				gongtimefieldDB.Name_Data.Valid = true

			}
		}
		query := backRepoGongTimeField.db.Save(&gongtimefieldDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongTimeField intance %s", gongtimefield.Name))
		return err
	}

	return
}

// BackRepoGongTimeField.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CheckoutPhaseOne() (Error error) {

	gongtimefieldDBArray := make([]GongTimeFieldDB, 0)
	query := backRepoGongTimeField.db.Find(&gongtimefieldDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, gongtimefieldDB := range gongtimefieldDBArray {
		backRepoGongTimeField.CheckoutPhaseOneInstance(&gongtimefieldDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongtimefieldDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongtimefieldDB
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CheckoutPhaseOneInstance(gongtimefieldDB *GongTimeFieldDB) (Error error) {

	// if absent, create entries in the backRepoGongTimeField maps.
	gongtimefieldWithNewFieldValues := gongtimefieldDB.GongTimeField
	if _, ok := (*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[gongtimefieldDB.ID]; !ok {

		(*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[gongtimefieldDB.ID] = &gongtimefieldWithNewFieldValues
		(*backRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID)[&gongtimefieldWithNewFieldValues] = gongtimefieldDB.ID

		// append model store with the new element
		gongtimefieldWithNewFieldValues.Stage()
	}
	gongtimefieldDBWithNewFieldValues := *gongtimefieldDB
	(*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB)[gongtimefieldDB.ID] = &gongtimefieldDBWithNewFieldValues

	return
}

// BackRepoGongTimeField.CheckoutPhaseTwo Checkouts all staged instances of GongTimeField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongtimefieldDB := range *backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB {
		backRepoGongTimeField.CheckoutPhaseTwoInstance(backRepo, gongtimefieldDB)
	}
	return
}

// BackRepoGongTimeField.CheckoutPhaseTwoInstance Checkouts staged instances of GongTimeField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongTimeField *BackRepoGongTimeFieldStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongtimefieldDB *GongTimeFieldDB) (Error error) {

	gongtimefield := (*backRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[gongtimefieldDB.ID]
	_ = gongtimefield // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			gongtimefield.Name = gongtimefieldDB.Name_Data.String

		}
	}
	return
}

// CommitGongTimeField allows commit of a single gongtimefield (if already staged)
func (backRepo *BackRepoStruct) CommitGongTimeField(gongtimefield *models.GongTimeField) {
	backRepo.BackRepoGongTimeField.CommitPhaseOneInstance(gongtimefield)
	if id, ok := (*backRepo.BackRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID)[gongtimefield]; ok {
		backRepo.BackRepoGongTimeField.CommitPhaseTwoInstance(backRepo, id, gongtimefield)
	}
}

// CommitGongTimeField allows checkout of a single gongtimefield (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongTimeField(gongtimefield *models.GongTimeField) {
	// check if the gongtimefield is staged
	if _, ok := (*backRepo.BackRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID)[gongtimefield]; ok {

		if id, ok := (*backRepo.BackRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID)[gongtimefield]; ok {
			var gongtimefieldDB GongTimeFieldDB
			gongtimefieldDB.ID = id

			if err := backRepo.BackRepoGongTimeField.db.First(&gongtimefieldDB, id).Error; err != nil {
				log.Panicln("CheckoutGongTimeField : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongTimeField.CheckoutPhaseOneInstance(&gongtimefieldDB)
			backRepo.BackRepoGongTimeField.CheckoutPhaseTwoInstance(backRepo, &gongtimefieldDB)
		}
	}
}
