// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GongEnumValue_sql sql.NullBool
var dummy_GongEnumValue_time time.Duration
var dummy_GongEnumValue_sort sort.Float64Slice

// GongEnumValueAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongenumvalueAPI
type GongEnumValueAPI struct {
	gorm.Model

	models.GongEnumValue

	// encoding of pointers
	GongEnumValuePointersEnconding
}

// GongEnumValuePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GongEnumValuePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field GongEnum{}.GongEnumValues []*GongEnumValue
	GongEnum_GongEnumValuesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	GongEnum_GongEnumValuesDBID_Index sql.NullInt64
}

// GongEnumValueDB describes a gongenumvalue in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model gongenumvalueDB
type GongEnumValueDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field gongenumvalueDB.Name
	Name_Data sql.NullString

	// Declation for basic field gongenumvalueDB.Value
	Value_Data sql.NullString
	// encoding of pointers
	GongEnumValuePointersEnconding
}

// GongEnumValueDBs arrays gongenumvalueDBs
// swagger:response gongenumvalueDBsResponse
type GongEnumValueDBs []GongEnumValueDB

// GongEnumValueDBResponse provides response
// swagger:response gongenumvalueDBResponse
type GongEnumValueDBResponse struct {
	GongEnumValueDB
}

// GongEnumValueWOP is a GongEnumValue without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GongEnumValueWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var GongEnumValue_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoGongEnumValueStruct struct {
	// stores GongEnumValueDB according to their gorm ID
	Map_GongEnumValueDBID_GongEnumValueDB *map[uint]*GongEnumValueDB

	// stores GongEnumValueDB ID according to GongEnumValue address
	Map_GongEnumValuePtr_GongEnumValueDBID *map[*models.GongEnumValue]uint

	// stores GongEnumValue according to their gorm ID
	Map_GongEnumValueDBID_GongEnumValuePtr *map[uint]*models.GongEnumValue

	db *gorm.DB
}

func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) GetDB() *gorm.DB {
	return backRepoGongEnumValue.db
}

// GetGongEnumValueDBFromGongEnumValuePtr is a handy function to access the back repo instance from the stage instance
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) GetGongEnumValueDBFromGongEnumValuePtr(gongenumvalue *models.GongEnumValue) (gongenumvalueDB *GongEnumValueDB) {
	id := (*backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue]
	gongenumvalueDB = (*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[id]
	return
}

// BackRepoGongEnumValue.Init set up the BackRepo of the GongEnumValue
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr != nil {
		err := errors.New("In Init, backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr should be nil")
		return err
	}

	if backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB != nil {
		err := errors.New("In Init, backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB should be nil")
		return err
	}

	if backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID != nil {
		err := errors.New("In Init, backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongEnumValue, 0)
	backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr = &tmp

	tmpDB := make(map[uint]*GongEnumValueDB, 0)
	backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB = &tmpDB

	tmpID := make(map[*models.GongEnumValue]uint, 0)
	backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID = &tmpID

	backRepoGongEnumValue.db = db
	return
}

// BackRepoGongEnumValue.CommitPhaseOne commits all staged instances of GongEnumValue to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongenumvalue := range stage.GongEnumValues {
		backRepoGongEnumValue.CommitPhaseOneInstance(gongenumvalue)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongenumvalue := range *backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr {
		if _, ok := stage.GongEnumValues[gongenumvalue]; !ok {
			backRepoGongEnumValue.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongEnumValue.CommitDeleteInstance commits deletion of GongEnumValue to the BackRepo
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CommitDeleteInstance(id uint) (Error error) {

	gongenumvalue := (*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[id]

	// gongenumvalue is not staged anymore, remove gongenumvalueDB
	gongenumvalueDB := (*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[id]
	query := backRepoGongEnumValue.db.Unscoped().Delete(&gongenumvalueDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID), gongenumvalue)
	delete((*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr), id)
	delete((*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB), id)

	return
}

// BackRepoGongEnumValue.CommitPhaseOneInstance commits gongenumvalue staged instances of GongEnumValue to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CommitPhaseOneInstance(gongenumvalue *models.GongEnumValue) (Error error) {

	// check if the gongenumvalue is not commited yet
	if _, ok := (*backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue]; ok {
		return
	}

	// initiate gongenumvalue
	var gongenumvalueDB GongEnumValueDB
	gongenumvalueDB.CopyBasicFieldsFromGongEnumValue(gongenumvalue)

	query := backRepoGongEnumValue.db.Create(&gongenumvalueDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue] = gongenumvalueDB.ID
	(*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB.ID] = gongenumvalue
	(*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[gongenumvalueDB.ID] = &gongenumvalueDB

	return
}

// BackRepoGongEnumValue.CommitPhaseTwo commits all staged instances of GongEnumValue to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongenumvalue := range *backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr {
		backRepoGongEnumValue.CommitPhaseTwoInstance(backRepo, idx, gongenumvalue)
	}

	return
}

// BackRepoGongEnumValue.CommitPhaseTwoInstance commits {{structname }} of models.GongEnumValue to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongenumvalue *models.GongEnumValue) (Error error) {

	// fetch matching gongenumvalueDB
	if gongenumvalueDB, ok := (*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[idx]; ok {

		gongenumvalueDB.CopyBasicFieldsFromGongEnumValue(gongenumvalue)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGongEnumValue.db.Save(&gongenumvalueDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongEnumValue intance %s", gongenumvalue.Name))
		return err
	}

	return
}

// BackRepoGongEnumValue.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CheckoutPhaseOne() (Error error) {

	gongenumvalueDBArray := make([]GongEnumValueDB, 0)
	query := backRepoGongEnumValue.db.Find(&gongenumvalueDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	gongenumvalueInstancesToBeRemovedFromTheStage := make(map[*models.GongEnumValue]any)
	for key, value := range models.Stage.GongEnumValues {
		gongenumvalueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, gongenumvalueDB := range gongenumvalueDBArray {
		backRepoGongEnumValue.CheckoutPhaseOneInstance(&gongenumvalueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		gongenumvalue, ok := (*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB.ID]
		if ok {
			delete(gongenumvalueInstancesToBeRemovedFromTheStage, gongenumvalue)
		}
	}

	// remove from stage and back repo's 3 maps all gongenumvalues that are not in the checkout
	for gongenumvalue := range gongenumvalueInstancesToBeRemovedFromTheStage {
		gongenumvalue.Unstage()

		// remove instance from the back repo 3 maps
		gongenumvalueID := (*backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue]
		delete((*backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID), gongenumvalue)
		delete((*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB), gongenumvalueID)
		delete((*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr), gongenumvalueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongenumvalueDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongenumvalueDB
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CheckoutPhaseOneInstance(gongenumvalueDB *GongEnumValueDB) (Error error) {

	gongenumvalue, ok := (*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB.ID]
	if !ok {
		gongenumvalue = new(models.GongEnumValue)

		(*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB.ID] = gongenumvalue
		(*backRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue] = gongenumvalueDB.ID

		// append model store with the new element
		gongenumvalue.Name = gongenumvalueDB.Name_Data.String
		gongenumvalue.Stage()
	}
	gongenumvalueDB.CopyBasicFieldsToGongEnumValue(gongenumvalue)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	gongenumvalue.Stage()

	// preserve pointer to gongenumvalueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GongEnumValueDBID_GongEnumValueDB)[gongenumvalueDB hold variable pointers
	gongenumvalueDB_Data := *gongenumvalueDB
	preservedPtrToGongEnumValue := &gongenumvalueDB_Data
	(*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[gongenumvalueDB.ID] = preservedPtrToGongEnumValue

	return
}

// BackRepoGongEnumValue.CheckoutPhaseTwo Checkouts all staged instances of GongEnumValue to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongenumvalueDB := range *backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB {
		backRepoGongEnumValue.CheckoutPhaseTwoInstance(backRepo, gongenumvalueDB)
	}
	return
}

// BackRepoGongEnumValue.CheckoutPhaseTwoInstance Checkouts staged instances of GongEnumValue to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongenumvalueDB *GongEnumValueDB) (Error error) {

	gongenumvalue := (*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB.ID]
	_ = gongenumvalue // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitGongEnumValue allows commit of a single gongenumvalue (if already staged)
func (backRepo *BackRepoStruct) CommitGongEnumValue(gongenumvalue *models.GongEnumValue) {
	backRepo.BackRepoGongEnumValue.CommitPhaseOneInstance(gongenumvalue)
	if id, ok := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue]; ok {
		backRepo.BackRepoGongEnumValue.CommitPhaseTwoInstance(backRepo, id, gongenumvalue)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGongEnumValue allows checkout of a single gongenumvalue (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongEnumValue(gongenumvalue *models.GongEnumValue) {
	// check if the gongenumvalue is staged
	if _, ok := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue]; ok {

		if id, ok := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue]; ok {
			var gongenumvalueDB GongEnumValueDB
			gongenumvalueDB.ID = id

			if err := backRepo.BackRepoGongEnumValue.db.First(&gongenumvalueDB, id).Error; err != nil {
				log.Panicln("CheckoutGongEnumValue : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongEnumValue.CheckoutPhaseOneInstance(&gongenumvalueDB)
			backRepo.BackRepoGongEnumValue.CheckoutPhaseTwoInstance(backRepo, &gongenumvalueDB)
		}
	}
}

// CopyBasicFieldsFromGongEnumValue
func (gongenumvalueDB *GongEnumValueDB) CopyBasicFieldsFromGongEnumValue(gongenumvalue *models.GongEnumValue) {
	// insertion point for fields commit

	gongenumvalueDB.Name_Data.String = gongenumvalue.Name
	gongenumvalueDB.Name_Data.Valid = true

	gongenumvalueDB.Value_Data.String = gongenumvalue.Value
	gongenumvalueDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromGongEnumValueWOP
func (gongenumvalueDB *GongEnumValueDB) CopyBasicFieldsFromGongEnumValueWOP(gongenumvalue *GongEnumValueWOP) {
	// insertion point for fields commit

	gongenumvalueDB.Name_Data.String = gongenumvalue.Name
	gongenumvalueDB.Name_Data.Valid = true

	gongenumvalueDB.Value_Data.String = gongenumvalue.Value
	gongenumvalueDB.Value_Data.Valid = true
}

// CopyBasicFieldsToGongEnumValue
func (gongenumvalueDB *GongEnumValueDB) CopyBasicFieldsToGongEnumValue(gongenumvalue *models.GongEnumValue) {
	// insertion point for checkout of basic fields (back repo to stage)
	gongenumvalue.Name = gongenumvalueDB.Name_Data.String
	gongenumvalue.Value = gongenumvalueDB.Value_Data.String
}

// CopyBasicFieldsToGongEnumValueWOP
func (gongenumvalueDB *GongEnumValueDB) CopyBasicFieldsToGongEnumValueWOP(gongenumvalue *GongEnumValueWOP) {
	gongenumvalue.ID = int(gongenumvalueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	gongenumvalue.Name = gongenumvalueDB.Name_Data.String
	gongenumvalue.Value = gongenumvalueDB.Value_Data.String
}

// Backup generates a json file from a slice of all GongEnumValueDB instances in the backrepo
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GongEnumValueDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongEnumValueDB, 0)
	for _, gongenumvalueDB := range *backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB {
		forBackup = append(forBackup, gongenumvalueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json GongEnumValue ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json GongEnumValue file", err.Error())
	}
}

// Backup generates a json file from a slice of all GongEnumValueDB instances in the backrepo
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongEnumValueDB, 0)
	for _, gongenumvalueDB := range *backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB {
		forBackup = append(forBackup, gongenumvalueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GongEnumValue")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GongEnumValue_Fields, -1)
	for _, gongenumvalueDB := range forBackup {

		var gongenumvalueWOP GongEnumValueWOP
		gongenumvalueDB.CopyBasicFieldsToGongEnumValueWOP(&gongenumvalueWOP)

		row := sh.AddRow()
		row.WriteStruct(&gongenumvalueWOP, -1)
	}
}

// RestoreXL from the "GongEnumValue" sheet all GongEnumValueDB instances
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGongEnumValueid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GongEnumValue"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGongEnumValue.rowVisitorGongEnumValue)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) rowVisitorGongEnumValue(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var gongenumvalueWOP GongEnumValueWOP
		row.ReadStruct(&gongenumvalueWOP)

		// add the unmarshalled struct to the stage
		gongenumvalueDB := new(GongEnumValueDB)
		gongenumvalueDB.CopyBasicFieldsFromGongEnumValueWOP(&gongenumvalueWOP)

		gongenumvalueDB_ID_atBackupTime := gongenumvalueDB.ID
		gongenumvalueDB.ID = 0
		query := backRepoGongEnumValue.db.Create(gongenumvalueDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[gongenumvalueDB.ID] = gongenumvalueDB
		BackRepoGongEnumValueid_atBckpTime_newID[gongenumvalueDB_ID_atBackupTime] = gongenumvalueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GongEnumValueDB.json" in dirPath that stores an array
// of GongEnumValueDB and stores it in the database
// the map BackRepoGongEnumValueid_atBckpTime_newID is updated accordingly
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGongEnumValueid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GongEnumValueDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json GongEnumValue file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GongEnumValueDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GongEnumValueDBID_GongEnumValueDB
	for _, gongenumvalueDB := range forRestore {

		gongenumvalueDB_ID_atBackupTime := gongenumvalueDB.ID
		gongenumvalueDB.ID = 0
		query := backRepoGongEnumValue.db.Create(gongenumvalueDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[gongenumvalueDB.ID] = gongenumvalueDB
		BackRepoGongEnumValueid_atBckpTime_newID[gongenumvalueDB_ID_atBackupTime] = gongenumvalueDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json GongEnumValue file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GongEnumValue>id_atBckpTime_newID
// to compute new index
func (backRepoGongEnumValue *BackRepoGongEnumValueStruct) RestorePhaseTwo() {

	for _, gongenumvalueDB := range *backRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB {

		// next line of code is to avert unused variable compilation error
		_ = gongenumvalueDB

		// insertion point for reindexing pointers encoding
		// This reindex gongenumvalue.GongEnumValues
		if gongenumvalueDB.GongEnum_GongEnumValuesDBID.Int64 != 0 {
			gongenumvalueDB.GongEnum_GongEnumValuesDBID.Int64 =
				int64(BackRepoGongEnumid_atBckpTime_newID[uint(gongenumvalueDB.GongEnum_GongEnumValuesDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoGongEnumValue.db.Model(gongenumvalueDB).Updates(*gongenumvalueDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGongEnumValueid_atBckpTime_newID map[uint]uint
