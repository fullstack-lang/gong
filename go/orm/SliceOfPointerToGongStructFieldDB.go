// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SliceOfPointerToGongStructField sql.NullBool
var __SliceOfPointerToGongStructField_time__dummyDeclaration time.Duration
var dummy_SliceOfPointerToGongStructField_sort sort.Float64Slice

// SliceOfPointerToGongStructFieldAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model sliceofpointertogongstructfieldAPI
type SliceOfPointerToGongStructFieldAPI struct {
	models.SliceOfPointerToGongStructField

	// insertion for fields declaration
	// Declation for basic field sliceofpointertogongstructfieldDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// field GongStruct is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GongStructID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	GongStructName string

	// Implementation of a reverse ID for field GongStruct{}.SliceOfPointerToGongStructFields []*SliceOfPointerToGongStructField
	GongStruct_SliceOfPointerToGongStructFieldsDBID sql.NullInt64
	GongStruct_SliceOfPointerToGongStructFieldsDBID_Index sql.NullInt64

	// end of insertion
}

// SliceOfPointerToGongStructFieldDB describes a sliceofpointertogongstructfield in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model sliceofpointertogongstructfieldDB
type SliceOfPointerToGongStructFieldDB struct {
	gorm.Model

	SliceOfPointerToGongStructFieldAPI
}

// SliceOfPointerToGongStructFieldDBs arrays sliceofpointertogongstructfieldDBs
// swagger:response sliceofpointertogongstructfieldDBsResponse
type SliceOfPointerToGongStructFieldDBs []SliceOfPointerToGongStructFieldDB

// SliceOfPointerToGongStructFieldDBResponse provides response
// swagger:response sliceofpointertogongstructfieldDBResponse
type SliceOfPointerToGongStructFieldDBResponse struct {
	SliceOfPointerToGongStructFieldDB
}

type BackRepoSliceOfPointerToGongStructFieldStruct struct {
	// stores SliceOfPointerToGongStructFieldDB according to their gorm ID
	Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB *map[uint]*SliceOfPointerToGongStructFieldDB

	// stores SliceOfPointerToGongStructFieldDB ID according to SliceOfPointerToGongStructField address
	Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID *map[*models.SliceOfPointerToGongStructField]uint

	// stores SliceOfPointerToGongStructField according to their gorm ID
	Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr *map[uint]*models.SliceOfPointerToGongStructField

	db *gorm.DB
}

// BackRepoSliceOfPointerToGongStructField.Init set up the BackRepo of the SliceOfPointerToGongStructField
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) Init(db *gorm.DB) (Error error) {

	if backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr != nil {
		err := errors.New("In Init, backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr should be nil")
		return err
	}

	if backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB != nil {
		err := errors.New("In Init, backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB should be nil")
		return err
	}

	if backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID != nil {
		err := errors.New("In Init, backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.SliceOfPointerToGongStructField, 0)
	backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr = &tmp

	tmpDB := make(map[uint]*SliceOfPointerToGongStructFieldDB, 0)
	backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB = &tmpDB

	tmpID := make(map[*models.SliceOfPointerToGongStructField]uint, 0)
	backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID = &tmpID

	backRepoSliceOfPointerToGongStructField.db = db
	return
}

// BackRepoSliceOfPointerToGongStructField.CommitPhaseOne commits all staged instances of SliceOfPointerToGongStructField to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for sliceofpointertogongstructfield := range stage.SliceOfPointerToGongStructFields {
		backRepoSliceOfPointerToGongStructField.CommitPhaseOneInstance(sliceofpointertogongstructfield)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, sliceofpointertogongstructfield := range *backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr {
		if _, ok := stage.SliceOfPointerToGongStructFields[sliceofpointertogongstructfield]; !ok {
			backRepoSliceOfPointerToGongStructField.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSliceOfPointerToGongStructField.CommitDeleteInstance commits deletion of SliceOfPointerToGongStructField to the BackRepo
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CommitDeleteInstance(id uint) (Error error) {

	sliceofpointertogongstructfield := (*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[id]

	// sliceofpointertogongstructfield is not staged anymore, remove sliceofpointertogongstructfieldDB
	sliceofpointertogongstructfieldDB := (*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB)[id]
	query := backRepoSliceOfPointerToGongStructField.db.Unscoped().Delete(&sliceofpointertogongstructfieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID), sliceofpointertogongstructfield)
	delete((*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr), id)
	delete((*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB), id)

	return
}

// BackRepoSliceOfPointerToGongStructField.CommitPhaseOneInstance commits sliceofpointertogongstructfield staged instances of SliceOfPointerToGongStructField to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CommitPhaseOneInstance(sliceofpointertogongstructfield *models.SliceOfPointerToGongStructField) (Error error) {

	// check if the sliceofpointertogongstructfield is not commited yet
	if _, ok := (*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[sliceofpointertogongstructfield]; ok {
		return
	}

	// initiate sliceofpointertogongstructfield
	var sliceofpointertogongstructfieldDB SliceOfPointerToGongStructFieldDB
	sliceofpointertogongstructfieldDB.SliceOfPointerToGongStructField = *sliceofpointertogongstructfield

	query := backRepoSliceOfPointerToGongStructField.db.Create(&sliceofpointertogongstructfieldDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[sliceofpointertogongstructfield] = sliceofpointertogongstructfieldDB.ID
	(*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[sliceofpointertogongstructfieldDB.ID] = sliceofpointertogongstructfield
	(*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB)[sliceofpointertogongstructfieldDB.ID] = &sliceofpointertogongstructfieldDB

	return
}

// BackRepoSliceOfPointerToGongStructField.CommitPhaseTwo commits all staged instances of SliceOfPointerToGongStructField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, sliceofpointertogongstructfield := range *backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr {
		backRepoSliceOfPointerToGongStructField.CommitPhaseTwoInstance(backRepo, idx, sliceofpointertogongstructfield)
	}

	return
}

// BackRepoSliceOfPointerToGongStructField.CommitPhaseTwoInstance commits {{structname }} of models.SliceOfPointerToGongStructField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, sliceofpointertogongstructfield *models.SliceOfPointerToGongStructField) (Error error) {

	// fetch matching sliceofpointertogongstructfieldDB
	if sliceofpointertogongstructfieldDB, ok := (*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				sliceofpointertogongstructfieldDB.Name_Data.String = sliceofpointertogongstructfield.Name
				sliceofpointertogongstructfieldDB.Name_Data.Valid = true

				// commit pointer value sliceofpointertogongstructfield.GongStruct translates to updating the sliceofpointertogongstructfield.GongStructID
				sliceofpointertogongstructfieldDB.GongStructID.Valid = true // allow for a 0 value (nil association)
				if sliceofpointertogongstructfield.GongStruct != nil {
					if GongStructId, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[sliceofpointertogongstructfield.GongStruct]; ok {
						sliceofpointertogongstructfieldDB.GongStructID.Int64 = int64(GongStructId)
					}
				}

			}
		}
		query := backRepoSliceOfPointerToGongStructField.db.Save(&sliceofpointertogongstructfieldDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SliceOfPointerToGongStructField intance %s", sliceofpointertogongstructfield.Name))
		return err
	}

	return
}

// BackRepoSliceOfPointerToGongStructField.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CheckoutPhaseOne() (Error error) {

	sliceofpointertogongstructfieldDBArray := make([]SliceOfPointerToGongStructFieldDB, 0)
	query := backRepoSliceOfPointerToGongStructField.db.Find(&sliceofpointertogongstructfieldDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, sliceofpointertogongstructfieldDB := range sliceofpointertogongstructfieldDBArray {
		backRepoSliceOfPointerToGongStructField.CheckoutPhaseOneInstance(&sliceofpointertogongstructfieldDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a sliceofpointertogongstructfieldDB that has been found in the DB, updates the backRepo and stages the
// models version of the sliceofpointertogongstructfieldDB
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CheckoutPhaseOneInstance(sliceofpointertogongstructfieldDB *SliceOfPointerToGongStructFieldDB) (Error error) {

	// if absent, create entries in the backRepoSliceOfPointerToGongStructField maps.
	sliceofpointertogongstructfieldWithNewFieldValues := sliceofpointertogongstructfieldDB.SliceOfPointerToGongStructField
	if _, ok := (*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[sliceofpointertogongstructfieldDB.ID]; !ok {

		(*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[sliceofpointertogongstructfieldDB.ID] = &sliceofpointertogongstructfieldWithNewFieldValues
		(*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[&sliceofpointertogongstructfieldWithNewFieldValues] = sliceofpointertogongstructfieldDB.ID

		// append model store with the new element
		sliceofpointertogongstructfieldWithNewFieldValues.Stage()
	}
	sliceofpointertogongstructfieldDBWithNewFieldValues := *sliceofpointertogongstructfieldDB
	(*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB)[sliceofpointertogongstructfieldDB.ID] = &sliceofpointertogongstructfieldDBWithNewFieldValues

	return
}

// BackRepoSliceOfPointerToGongStructField.CheckoutPhaseTwo Checkouts all staged instances of SliceOfPointerToGongStructField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, sliceofpointertogongstructfieldDB := range *backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB {
		backRepoSliceOfPointerToGongStructField.CheckoutPhaseTwoInstance(backRepo, sliceofpointertogongstructfieldDB)
	}
	return
}

// BackRepoSliceOfPointerToGongStructField.CheckoutPhaseTwoInstance Checkouts staged instances of SliceOfPointerToGongStructField to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSliceOfPointerToGongStructField *BackRepoSliceOfPointerToGongStructFieldStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, sliceofpointertogongstructfieldDB *SliceOfPointerToGongStructFieldDB) (Error error) {

	sliceofpointertogongstructfield := (*backRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[sliceofpointertogongstructfieldDB.ID]
	_ = sliceofpointertogongstructfield // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			sliceofpointertogongstructfield.Name = sliceofpointertogongstructfieldDB.Name_Data.String

			// GongStruct field
			if sliceofpointertogongstructfieldDB.GongStructID.Int64 != 0 {
				sliceofpointertogongstructfield.GongStruct = (*backRepo.BackRepoGongStruct.Map_GongStructDBID_GongStructPtr)[uint(sliceofpointertogongstructfieldDB.GongStructID.Int64)]
			}

		}
	}
	return
}

// CommitSliceOfPointerToGongStructField allows commit of a single sliceofpointertogongstructfield (if already staged)
func (backRepo *BackRepoStruct) CommitSliceOfPointerToGongStructField(sliceofpointertogongstructfield *models.SliceOfPointerToGongStructField) {
	backRepo.BackRepoSliceOfPointerToGongStructField.CommitPhaseOneInstance(sliceofpointertogongstructfield)
	if id, ok := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[sliceofpointertogongstructfield]; ok {
		backRepo.BackRepoSliceOfPointerToGongStructField.CommitPhaseTwoInstance(backRepo, id, sliceofpointertogongstructfield)
	}
}

// CommitSliceOfPointerToGongStructField allows checkout of a single sliceofpointertogongstructfield (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSliceOfPointerToGongStructField(sliceofpointertogongstructfield *models.SliceOfPointerToGongStructField) {
	// check if the sliceofpointertogongstructfield is staged
	if _, ok := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[sliceofpointertogongstructfield]; ok {

		if id, ok := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[sliceofpointertogongstructfield]; ok {
			var sliceofpointertogongstructfieldDB SliceOfPointerToGongStructFieldDB
			sliceofpointertogongstructfieldDB.ID = id

			if err := backRepo.BackRepoSliceOfPointerToGongStructField.db.First(&sliceofpointertogongstructfieldDB, id).Error; err != nil {
				log.Panicln("CheckoutSliceOfPointerToGongStructField : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSliceOfPointerToGongStructField.CheckoutPhaseOneInstance(&sliceofpointertogongstructfieldDB)
			backRepo.BackRepoSliceOfPointerToGongStructField.CheckoutPhaseTwoInstance(backRepo, &sliceofpointertogongstructfieldDB)
		}
	}
}
