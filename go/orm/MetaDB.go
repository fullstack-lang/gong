// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Meta_sql sql.NullBool
var dummy_Meta_time time.Duration
var dummy_Meta_sort sort.Float64Slice

// MetaAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model metaAPI
type MetaAPI struct {
	gorm.Model

	models.Meta

	// encoding of pointers
	MetaPointersEnconding
}

// MetaPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MetaPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// MetaDB describes a meta in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model metaDB
type MetaDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field metaDB.Name
	Name_Data sql.NullString

	// Declation for basic field metaDB.Text
	Text_Data sql.NullString
	// encoding of pointers
	MetaPointersEnconding
}

// MetaDBs arrays metaDBs
// swagger:response metaDBsResponse
type MetaDBs []MetaDB

// MetaDBResponse provides response
// swagger:response metaDBResponse
type MetaDBResponse struct {
	MetaDB
}

// MetaWOP is a Meta without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MetaWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Meta_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoMetaStruct struct {
	// stores MetaDB according to their gorm ID
	Map_MetaDBID_MetaDB *map[uint]*MetaDB

	// stores MetaDB ID according to Meta address
	Map_MetaPtr_MetaDBID *map[*models.Meta]uint

	// stores Meta according to their gorm ID
	Map_MetaDBID_MetaPtr *map[uint]*models.Meta

	db *gorm.DB
}

func (backRepoMeta *BackRepoMetaStruct) GetDB() *gorm.DB {
	return backRepoMeta.db
}

// GetMetaDBFromMetaPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMeta *BackRepoMetaStruct) GetMetaDBFromMetaPtr(meta *models.Meta) (metaDB *MetaDB) {
	id := (*backRepoMeta.Map_MetaPtr_MetaDBID)[meta]
	metaDB = (*backRepoMeta.Map_MetaDBID_MetaDB)[id]
	return
}

// BackRepoMeta.Init set up the BackRepo of the Meta
func (backRepoMeta *BackRepoMetaStruct) Init(db *gorm.DB) (Error error) {

	if backRepoMeta.Map_MetaDBID_MetaPtr != nil {
		err := errors.New("In Init, backRepoMeta.Map_MetaDBID_MetaPtr should be nil")
		return err
	}

	if backRepoMeta.Map_MetaDBID_MetaDB != nil {
		err := errors.New("In Init, backRepoMeta.Map_MetaDBID_MetaDB should be nil")
		return err
	}

	if backRepoMeta.Map_MetaPtr_MetaDBID != nil {
		err := errors.New("In Init, backRepoMeta.Map_MetaPtr_MetaDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Meta, 0)
	backRepoMeta.Map_MetaDBID_MetaPtr = &tmp

	tmpDB := make(map[uint]*MetaDB, 0)
	backRepoMeta.Map_MetaDBID_MetaDB = &tmpDB

	tmpID := make(map[*models.Meta]uint, 0)
	backRepoMeta.Map_MetaPtr_MetaDBID = &tmpID

	backRepoMeta.db = db
	return
}

// BackRepoMeta.CommitPhaseOne commits all staged instances of Meta to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeta *BackRepoMetaStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for meta := range stage.Metas {
		backRepoMeta.CommitPhaseOneInstance(meta)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, meta := range *backRepoMeta.Map_MetaDBID_MetaPtr {
		if _, ok := stage.Metas[meta]; !ok {
			backRepoMeta.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMeta.CommitDeleteInstance commits deletion of Meta to the BackRepo
func (backRepoMeta *BackRepoMetaStruct) CommitDeleteInstance(id uint) (Error error) {

	meta := (*backRepoMeta.Map_MetaDBID_MetaPtr)[id]

	// meta is not staged anymore, remove metaDB
	metaDB := (*backRepoMeta.Map_MetaDBID_MetaDB)[id]
	query := backRepoMeta.db.Unscoped().Delete(&metaDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoMeta.Map_MetaPtr_MetaDBID), meta)
	delete((*backRepoMeta.Map_MetaDBID_MetaPtr), id)
	delete((*backRepoMeta.Map_MetaDBID_MetaDB), id)

	return
}

// BackRepoMeta.CommitPhaseOneInstance commits meta staged instances of Meta to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeta *BackRepoMetaStruct) CommitPhaseOneInstance(meta *models.Meta) (Error error) {

	// check if the meta is not commited yet
	if _, ok := (*backRepoMeta.Map_MetaPtr_MetaDBID)[meta]; ok {
		return
	}

	// initiate meta
	var metaDB MetaDB
	metaDB.CopyBasicFieldsFromMeta(meta)

	query := backRepoMeta.db.Create(&metaDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoMeta.Map_MetaPtr_MetaDBID)[meta] = metaDB.ID
	(*backRepoMeta.Map_MetaDBID_MetaPtr)[metaDB.ID] = meta
	(*backRepoMeta.Map_MetaDBID_MetaDB)[metaDB.ID] = &metaDB

	return
}

// BackRepoMeta.CommitPhaseTwo commits all staged instances of Meta to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeta *BackRepoMetaStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, meta := range *backRepoMeta.Map_MetaDBID_MetaPtr {
		backRepoMeta.CommitPhaseTwoInstance(backRepo, idx, meta)
	}

	return
}

// BackRepoMeta.CommitPhaseTwoInstance commits {{structname }} of models.Meta to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeta *BackRepoMetaStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, meta *models.Meta) (Error error) {

	// fetch matching metaDB
	if metaDB, ok := (*backRepoMeta.Map_MetaDBID_MetaDB)[idx]; ok {

		metaDB.CopyBasicFieldsFromMeta(meta)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers meta.MetaReferences into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, metareferenceAssocEnd := range meta.MetaReferences {

			// get the back repo instance at the association end
			metareferenceAssocEnd_DB :=
				backRepo.BackRepoMetaReference.GetMetaReferenceDBFromMetaReferencePtr(metareferenceAssocEnd)

			// encode reverse pointer in the association end back repo instance
			metareferenceAssocEnd_DB.Meta_MetaReferencesDBID.Int64 = int64(metaDB.ID)
			metareferenceAssocEnd_DB.Meta_MetaReferencesDBID.Valid = true
			metareferenceAssocEnd_DB.Meta_MetaReferencesDBID_Index.Int64 = int64(idx)
			metareferenceAssocEnd_DB.Meta_MetaReferencesDBID_Index.Valid = true
			if q := backRepoMeta.db.Save(metareferenceAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoMeta.db.Save(&metaDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Meta intance %s", meta.Name))
		return err
	}

	return
}

// BackRepoMeta.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMeta *BackRepoMetaStruct) CheckoutPhaseOne() (Error error) {

	metaDBArray := make([]MetaDB, 0)
	query := backRepoMeta.db.Find(&metaDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	metaInstancesToBeRemovedFromTheStage := make(map[*models.Meta]any)
	for key, value := range models.Stage.Metas {
		metaInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, metaDB := range metaDBArray {
		backRepoMeta.CheckoutPhaseOneInstance(&metaDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		meta, ok := (*backRepoMeta.Map_MetaDBID_MetaPtr)[metaDB.ID]
		if ok {
			delete(metaInstancesToBeRemovedFromTheStage, meta)
		}
	}

	// remove from stage and back repo's 3 maps all metas that are not in the checkout
	for meta := range metaInstancesToBeRemovedFromTheStage {
		meta.Unstage()

		// remove instance from the back repo 3 maps
		metaID := (*backRepoMeta.Map_MetaPtr_MetaDBID)[meta]
		delete((*backRepoMeta.Map_MetaPtr_MetaDBID), meta)
		delete((*backRepoMeta.Map_MetaDBID_MetaDB), metaID)
		delete((*backRepoMeta.Map_MetaDBID_MetaPtr), metaID)
	}

	return
}

// CheckoutPhaseOneInstance takes a metaDB that has been found in the DB, updates the backRepo and stages the
// models version of the metaDB
func (backRepoMeta *BackRepoMetaStruct) CheckoutPhaseOneInstance(metaDB *MetaDB) (Error error) {

	meta, ok := (*backRepoMeta.Map_MetaDBID_MetaPtr)[metaDB.ID]
	if !ok {
		meta = new(models.Meta)

		(*backRepoMeta.Map_MetaDBID_MetaPtr)[metaDB.ID] = meta
		(*backRepoMeta.Map_MetaPtr_MetaDBID)[meta] = metaDB.ID

		// append model store with the new element
		meta.Name = metaDB.Name_Data.String
		meta.Stage()
	}
	metaDB.CopyBasicFieldsToMeta(meta)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	meta.Stage()

	// preserve pointer to metaDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MetaDBID_MetaDB)[metaDB hold variable pointers
	metaDB_Data := *metaDB
	preservedPtrToMeta := &metaDB_Data
	(*backRepoMeta.Map_MetaDBID_MetaDB)[metaDB.ID] = preservedPtrToMeta

	return
}

// BackRepoMeta.CheckoutPhaseTwo Checkouts all staged instances of Meta to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeta *BackRepoMetaStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, metaDB := range *backRepoMeta.Map_MetaDBID_MetaDB {
		backRepoMeta.CheckoutPhaseTwoInstance(backRepo, metaDB)
	}
	return
}

// BackRepoMeta.CheckoutPhaseTwoInstance Checkouts staged instances of Meta to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeta *BackRepoMetaStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, metaDB *MetaDB) (Error error) {

	meta := (*backRepoMeta.Map_MetaDBID_MetaPtr)[metaDB.ID]
	_ = meta // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem meta.MetaReferences in the stage from the encode in the back repo
	// It parses all MetaReferenceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	meta.MetaReferences = meta.MetaReferences[:0]
	// 2. loop all instances in the type in the association end
	for _, metareferenceDB_AssocEnd := range *backRepo.BackRepoMetaReference.Map_MetaReferenceDBID_MetaReferenceDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if metareferenceDB_AssocEnd.Meta_MetaReferencesDBID.Int64 == int64(metaDB.ID) {
			// 4. fetch the associated instance in the stage
			metareference_AssocEnd := (*backRepo.BackRepoMetaReference.Map_MetaReferenceDBID_MetaReferencePtr)[metareferenceDB_AssocEnd.ID]
			// 5. append it the association slice
			meta.MetaReferences = append(meta.MetaReferences, metareference_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(meta.MetaReferences, func(i, j int) bool {
		metareferenceDB_i_ID := (*backRepo.BackRepoMetaReference.Map_MetaReferencePtr_MetaReferenceDBID)[meta.MetaReferences[i]]
		metareferenceDB_j_ID := (*backRepo.BackRepoMetaReference.Map_MetaReferencePtr_MetaReferenceDBID)[meta.MetaReferences[j]]

		metareferenceDB_i := (*backRepo.BackRepoMetaReference.Map_MetaReferenceDBID_MetaReferenceDB)[metareferenceDB_i_ID]
		metareferenceDB_j := (*backRepo.BackRepoMetaReference.Map_MetaReferenceDBID_MetaReferenceDB)[metareferenceDB_j_ID]

		return metareferenceDB_i.Meta_MetaReferencesDBID_Index.Int64 < metareferenceDB_j.Meta_MetaReferencesDBID_Index.Int64
	})

	return
}

// CommitMeta allows commit of a single meta (if already staged)
func (backRepo *BackRepoStruct) CommitMeta(meta *models.Meta) {
	backRepo.BackRepoMeta.CommitPhaseOneInstance(meta)
	if id, ok := (*backRepo.BackRepoMeta.Map_MetaPtr_MetaDBID)[meta]; ok {
		backRepo.BackRepoMeta.CommitPhaseTwoInstance(backRepo, id, meta)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMeta allows checkout of a single meta (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMeta(meta *models.Meta) {
	// check if the meta is staged
	if _, ok := (*backRepo.BackRepoMeta.Map_MetaPtr_MetaDBID)[meta]; ok {

		if id, ok := (*backRepo.BackRepoMeta.Map_MetaPtr_MetaDBID)[meta]; ok {
			var metaDB MetaDB
			metaDB.ID = id

			if err := backRepo.BackRepoMeta.db.First(&metaDB, id).Error; err != nil {
				log.Panicln("CheckoutMeta : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMeta.CheckoutPhaseOneInstance(&metaDB)
			backRepo.BackRepoMeta.CheckoutPhaseTwoInstance(backRepo, &metaDB)
		}
	}
}

// CopyBasicFieldsFromMeta
func (metaDB *MetaDB) CopyBasicFieldsFromMeta(meta *models.Meta) {
	// insertion point for fields commit

	metaDB.Name_Data.String = meta.Name
	metaDB.Name_Data.Valid = true

	metaDB.Text_Data.String = meta.Text
	metaDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromMetaWOP
func (metaDB *MetaDB) CopyBasicFieldsFromMetaWOP(meta *MetaWOP) {
	// insertion point for fields commit

	metaDB.Name_Data.String = meta.Name
	metaDB.Name_Data.Valid = true

	metaDB.Text_Data.String = meta.Text
	metaDB.Text_Data.Valid = true
}

// CopyBasicFieldsToMeta
func (metaDB *MetaDB) CopyBasicFieldsToMeta(meta *models.Meta) {
	// insertion point for checkout of basic fields (back repo to stage)
	meta.Name = metaDB.Name_Data.String
	meta.Text = metaDB.Text_Data.String
}

// CopyBasicFieldsToMetaWOP
func (metaDB *MetaDB) CopyBasicFieldsToMetaWOP(meta *MetaWOP) {
	meta.ID = int(metaDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	meta.Name = metaDB.Name_Data.String
	meta.Text = metaDB.Text_Data.String
}

// Backup generates a json file from a slice of all MetaDB instances in the backrepo
func (backRepoMeta *BackRepoMetaStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MetaDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MetaDB, 0)
	for _, metaDB := range *backRepoMeta.Map_MetaDBID_MetaDB {
		forBackup = append(forBackup, metaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Meta ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Meta file", err.Error())
	}
}

// Backup generates a json file from a slice of all MetaDB instances in the backrepo
func (backRepoMeta *BackRepoMetaStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MetaDB, 0)
	for _, metaDB := range *backRepoMeta.Map_MetaDBID_MetaDB {
		forBackup = append(forBackup, metaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Meta")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Meta_Fields, -1)
	for _, metaDB := range forBackup {

		var metaWOP MetaWOP
		metaDB.CopyBasicFieldsToMetaWOP(&metaWOP)

		row := sh.AddRow()
		row.WriteStruct(&metaWOP, -1)
	}
}

// RestoreXL from the "Meta" sheet all MetaDB instances
func (backRepoMeta *BackRepoMetaStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMetaid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Meta"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMeta.rowVisitorMeta)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoMeta *BackRepoMetaStruct) rowVisitorMeta(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var metaWOP MetaWOP
		row.ReadStruct(&metaWOP)

		// add the unmarshalled struct to the stage
		metaDB := new(MetaDB)
		metaDB.CopyBasicFieldsFromMetaWOP(&metaWOP)

		metaDB_ID_atBackupTime := metaDB.ID
		metaDB.ID = 0
		query := backRepoMeta.db.Create(metaDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoMeta.Map_MetaDBID_MetaDB)[metaDB.ID] = metaDB
		BackRepoMetaid_atBckpTime_newID[metaDB_ID_atBackupTime] = metaDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MetaDB.json" in dirPath that stores an array
// of MetaDB and stores it in the database
// the map BackRepoMetaid_atBckpTime_newID is updated accordingly
func (backRepoMeta *BackRepoMetaStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMetaid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MetaDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Meta file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MetaDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MetaDBID_MetaDB
	for _, metaDB := range forRestore {

		metaDB_ID_atBackupTime := metaDB.ID
		metaDB.ID = 0
		query := backRepoMeta.db.Create(metaDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoMeta.Map_MetaDBID_MetaDB)[metaDB.ID] = metaDB
		BackRepoMetaid_atBckpTime_newID[metaDB_ID_atBackupTime] = metaDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Meta file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Meta>id_atBckpTime_newID
// to compute new index
func (backRepoMeta *BackRepoMetaStruct) RestorePhaseTwo() {

	for _, metaDB := range *backRepoMeta.Map_MetaDBID_MetaDB {

		// next line of code is to avert unused variable compilation error
		_ = metaDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMeta.db.Model(metaDB).Updates(*metaDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMetaid_atBckpTime_newID map[uint]uint
