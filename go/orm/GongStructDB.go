// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GongStruct_sql sql.NullBool
var dummy_GongStruct_time time.Duration
var dummy_GongStruct_sort sort.Float64Slice

// GongStructAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongstructAPI
type GongStructAPI struct {
	gorm.Model

	models.GongStruct

	// encoding of pointers
	GongStructPointersEnconding
}

// GongStructPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GongStructPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// GongStructDB describes a gongstruct in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model gongstructDB
type GongStructDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field gongstructDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	GongStructPointersEnconding
}

// GongStructDBs arrays gongstructDBs
// swagger:response gongstructDBsResponse
type GongStructDBs []GongStructDB

// GongStructDBResponse provides response
// swagger:response gongstructDBResponse
type GongStructDBResponse struct {
	GongStructDB
}

// GongStructWOP is a GongStruct without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GongStructWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var GongStruct_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoGongStructStruct struct {
	// stores GongStructDB according to their gorm ID
	Map_GongStructDBID_GongStructDB *map[uint]*GongStructDB

	// stores GongStructDB ID according to GongStruct address
	Map_GongStructPtr_GongStructDBID *map[*models.GongStruct]uint

	// stores GongStruct according to their gorm ID
	Map_GongStructDBID_GongStructPtr *map[uint]*models.GongStruct

	db *gorm.DB
}

func (backRepoGongStruct *BackRepoGongStructStruct) GetDB() *gorm.DB {
	return backRepoGongStruct.db
}

// GetGongStructDBFromGongStructPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGongStruct *BackRepoGongStructStruct) GetGongStructDBFromGongStructPtr(gongstruct *models.GongStruct) (gongstructDB *GongStructDB) {
	id := (*backRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]
	gongstructDB = (*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[id]
	return
}

// BackRepoGongStruct.Init set up the BackRepo of the GongStruct
func (backRepoGongStruct *BackRepoGongStructStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongStruct.Map_GongStructDBID_GongStructPtr != nil {
		err := errors.New("In Init, backRepoGongStruct.Map_GongStructDBID_GongStructPtr should be nil")
		return err
	}

	if backRepoGongStruct.Map_GongStructDBID_GongStructDB != nil {
		err := errors.New("In Init, backRepoGongStruct.Map_GongStructDBID_GongStructDB should be nil")
		return err
	}

	if backRepoGongStruct.Map_GongStructPtr_GongStructDBID != nil {
		err := errors.New("In Init, backRepoGongStruct.Map_GongStructPtr_GongStructDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongStruct, 0)
	backRepoGongStruct.Map_GongStructDBID_GongStructPtr = &tmp

	tmpDB := make(map[uint]*GongStructDB, 0)
	backRepoGongStruct.Map_GongStructDBID_GongStructDB = &tmpDB

	tmpID := make(map[*models.GongStruct]uint, 0)
	backRepoGongStruct.Map_GongStructPtr_GongStructDBID = &tmpID

	backRepoGongStruct.db = db
	return
}

// BackRepoGongStruct.CommitPhaseOne commits all staged instances of GongStruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongStruct *BackRepoGongStructStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongstruct := range stage.GongStructs {
		backRepoGongStruct.CommitPhaseOneInstance(gongstruct)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongstruct := range *backRepoGongStruct.Map_GongStructDBID_GongStructPtr {
		if _, ok := stage.GongStructs[gongstruct]; !ok {
			backRepoGongStruct.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongStruct.CommitDeleteInstance commits deletion of GongStruct to the BackRepo
func (backRepoGongStruct *BackRepoGongStructStruct) CommitDeleteInstance(id uint) (Error error) {

	gongstruct := (*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[id]

	// gongstruct is not staged anymore, remove gongstructDB
	gongstructDB := (*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[id]
	query := backRepoGongStruct.db.Unscoped().Delete(&gongstructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongStruct.Map_GongStructPtr_GongStructDBID), gongstruct)
	delete((*backRepoGongStruct.Map_GongStructDBID_GongStructPtr), id)
	delete((*backRepoGongStruct.Map_GongStructDBID_GongStructDB), id)

	return
}

// BackRepoGongStruct.CommitPhaseOneInstance commits gongstruct staged instances of GongStruct to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongStruct *BackRepoGongStructStruct) CommitPhaseOneInstance(gongstruct *models.GongStruct) (Error error) {

	// check if the gongstruct is not commited yet
	if _, ok := (*backRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]; ok {
		return
	}

	// initiate gongstruct
	var gongstructDB GongStructDB
	gongstructDB.CopyBasicFieldsFromGongStruct(gongstruct)

	query := backRepoGongStruct.db.Create(&gongstructDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct] = gongstructDB.ID
	(*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID] = gongstruct
	(*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[gongstructDB.ID] = &gongstructDB

	return
}

// BackRepoGongStruct.CommitPhaseTwo commits all staged instances of GongStruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongStruct *BackRepoGongStructStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongstruct := range *backRepoGongStruct.Map_GongStructDBID_GongStructPtr {
		backRepoGongStruct.CommitPhaseTwoInstance(backRepo, idx, gongstruct)
	}

	return
}

// BackRepoGongStruct.CommitPhaseTwoInstance commits {{structname }} of models.GongStruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongStruct *BackRepoGongStructStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongstruct *models.GongStruct) (Error error) {

	// fetch matching gongstructDB
	if gongstructDB, ok := (*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[idx]; ok {

		gongstructDB.CopyBasicFieldsFromGongStruct(gongstruct)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers gongstruct.GongBasicFields into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, gongbasicfieldAssocEnd := range gongstruct.GongBasicFields {

			// get the back repo instance at the association end
			gongbasicfieldAssocEnd_DB :=
				backRepo.BackRepoGongBasicField.GetGongBasicFieldDBFromGongBasicFieldPtr(gongbasicfieldAssocEnd)

			// encode reverse pointer in the association end back repo instance
			gongbasicfieldAssocEnd_DB.GongStruct_GongBasicFieldsDBID.Int64 = int64(gongstructDB.ID)
			gongbasicfieldAssocEnd_DB.GongStruct_GongBasicFieldsDBID.Valid = true
			gongbasicfieldAssocEnd_DB.GongStruct_GongBasicFieldsDBID_Index.Int64 = int64(idx)
			gongbasicfieldAssocEnd_DB.GongStruct_GongBasicFieldsDBID_Index.Valid = true
			if q := backRepoGongStruct.db.Save(gongbasicfieldAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers gongstruct.GongTimeFields into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, gongtimefieldAssocEnd := range gongstruct.GongTimeFields {

			// get the back repo instance at the association end
			gongtimefieldAssocEnd_DB :=
				backRepo.BackRepoGongTimeField.GetGongTimeFieldDBFromGongTimeFieldPtr(gongtimefieldAssocEnd)

			// encode reverse pointer in the association end back repo instance
			gongtimefieldAssocEnd_DB.GongStruct_GongTimeFieldsDBID.Int64 = int64(gongstructDB.ID)
			gongtimefieldAssocEnd_DB.GongStruct_GongTimeFieldsDBID.Valid = true
			gongtimefieldAssocEnd_DB.GongStruct_GongTimeFieldsDBID_Index.Int64 = int64(idx)
			gongtimefieldAssocEnd_DB.GongStruct_GongTimeFieldsDBID_Index.Valid = true
			if q := backRepoGongStruct.db.Save(gongtimefieldAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers gongstruct.PointerToGongStructFields into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, pointertogongstructfieldAssocEnd := range gongstruct.PointerToGongStructFields {

			// get the back repo instance at the association end
			pointertogongstructfieldAssocEnd_DB :=
				backRepo.BackRepoPointerToGongStructField.GetPointerToGongStructFieldDBFromPointerToGongStructFieldPtr(pointertogongstructfieldAssocEnd)

			// encode reverse pointer in the association end back repo instance
			pointertogongstructfieldAssocEnd_DB.GongStruct_PointerToGongStructFieldsDBID.Int64 = int64(gongstructDB.ID)
			pointertogongstructfieldAssocEnd_DB.GongStruct_PointerToGongStructFieldsDBID.Valid = true
			pointertogongstructfieldAssocEnd_DB.GongStruct_PointerToGongStructFieldsDBID_Index.Int64 = int64(idx)
			pointertogongstructfieldAssocEnd_DB.GongStruct_PointerToGongStructFieldsDBID_Index.Valid = true
			if q := backRepoGongStruct.db.Save(pointertogongstructfieldAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers gongstruct.SliceOfPointerToGongStructFields into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, sliceofpointertogongstructfieldAssocEnd := range gongstruct.SliceOfPointerToGongStructFields {

			// get the back repo instance at the association end
			sliceofpointertogongstructfieldAssocEnd_DB :=
				backRepo.BackRepoSliceOfPointerToGongStructField.GetSliceOfPointerToGongStructFieldDBFromSliceOfPointerToGongStructFieldPtr(sliceofpointertogongstructfieldAssocEnd)

			// encode reverse pointer in the association end back repo instance
			sliceofpointertogongstructfieldAssocEnd_DB.GongStruct_SliceOfPointerToGongStructFieldsDBID.Int64 = int64(gongstructDB.ID)
			sliceofpointertogongstructfieldAssocEnd_DB.GongStruct_SliceOfPointerToGongStructFieldsDBID.Valid = true
			sliceofpointertogongstructfieldAssocEnd_DB.GongStruct_SliceOfPointerToGongStructFieldsDBID_Index.Int64 = int64(idx)
			sliceofpointertogongstructfieldAssocEnd_DB.GongStruct_SliceOfPointerToGongStructFieldsDBID_Index.Valid = true
			if q := backRepoGongStruct.db.Save(sliceofpointertogongstructfieldAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoGongStruct.db.Save(&gongstructDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongStruct intance %s", gongstruct.Name))
		return err
	}

	return
}

// BackRepoGongStruct.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGongStruct *BackRepoGongStructStruct) CheckoutPhaseOne() (Error error) {

	gongstructDBArray := make([]GongStructDB, 0)
	query := backRepoGongStruct.db.Find(&gongstructDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	gongstructInstancesToBeRemovedFromTheStage := make(map[*models.GongStruct]any)
	for key, value := range models.Stage.GongStructs {
		gongstructInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, gongstructDB := range gongstructDBArray {
		backRepoGongStruct.CheckoutPhaseOneInstance(&gongstructDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		gongstruct, ok := (*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID]
		if ok {
			delete(gongstructInstancesToBeRemovedFromTheStage, gongstruct)
		}
	}

	// remove from stage and back repo's 3 maps all gongstructs that are not in the checkout
	for gongstruct := range gongstructInstancesToBeRemovedFromTheStage {
		gongstruct.Unstage()

		// remove instance from the back repo 3 maps
		gongstructID := (*backRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]
		delete((*backRepoGongStruct.Map_GongStructPtr_GongStructDBID), gongstruct)
		delete((*backRepoGongStruct.Map_GongStructDBID_GongStructDB), gongstructID)
		delete((*backRepoGongStruct.Map_GongStructDBID_GongStructPtr), gongstructID)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongstructDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongstructDB
func (backRepoGongStruct *BackRepoGongStructStruct) CheckoutPhaseOneInstance(gongstructDB *GongStructDB) (Error error) {

	gongstruct, ok := (*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID]
	if !ok {
		gongstruct = new(models.GongStruct)

		(*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID] = gongstruct
		(*backRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct] = gongstructDB.ID

		// append model store with the new element
		gongstruct.Name = gongstructDB.Name_Data.String
		gongstruct.Stage()
	}
	gongstructDB.CopyBasicFieldsToGongStruct(gongstruct)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	gongstruct.Stage()

	// preserve pointer to gongstructDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GongStructDBID_GongStructDB)[gongstructDB hold variable pointers
	gongstructDB_Data := *gongstructDB
	preservedPtrToGongStruct := &gongstructDB_Data
	(*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[gongstructDB.ID] = preservedPtrToGongStruct

	return
}

// BackRepoGongStruct.CheckoutPhaseTwo Checkouts all staged instances of GongStruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongStruct *BackRepoGongStructStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongstructDB := range *backRepoGongStruct.Map_GongStructDBID_GongStructDB {
		backRepoGongStruct.CheckoutPhaseTwoInstance(backRepo, gongstructDB)
	}
	return
}

// BackRepoGongStruct.CheckoutPhaseTwoInstance Checkouts staged instances of GongStruct to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongStruct *BackRepoGongStructStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongstructDB *GongStructDB) (Error error) {

	gongstruct := (*backRepoGongStruct.Map_GongStructDBID_GongStructPtr)[gongstructDB.ID]
	_ = gongstruct // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem gongstruct.GongBasicFields in the stage from the encode in the back repo
	// It parses all GongBasicFieldDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gongstruct.GongBasicFields = gongstruct.GongBasicFields[:0]
	// 2. loop all instances in the type in the association end
	for _, gongbasicfieldDB_AssocEnd := range *backRepo.BackRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if gongbasicfieldDB_AssocEnd.GongStruct_GongBasicFieldsDBID.Int64 == int64(gongstructDB.ID) {
			// 4. fetch the associated instance in the stage
			gongbasicfield_AssocEnd := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldPtr)[gongbasicfieldDB_AssocEnd.ID]
			// 5. append it the association slice
			gongstruct.GongBasicFields = append(gongstruct.GongBasicFields, gongbasicfield_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(gongstruct.GongBasicFields, func(i, j int) bool {
		gongbasicfieldDB_i_ID := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[gongstruct.GongBasicFields[i]]
		gongbasicfieldDB_j_ID := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldPtr_GongBasicFieldDBID)[gongstruct.GongBasicFields[j]]

		gongbasicfieldDB_i := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB)[gongbasicfieldDB_i_ID]
		gongbasicfieldDB_j := (*backRepo.BackRepoGongBasicField.Map_GongBasicFieldDBID_GongBasicFieldDB)[gongbasicfieldDB_j_ID]

		return gongbasicfieldDB_i.GongStruct_GongBasicFieldsDBID_Index.Int64 < gongbasicfieldDB_j.GongStruct_GongBasicFieldsDBID_Index.Int64
	})

	// This loop redeem gongstruct.GongTimeFields in the stage from the encode in the back repo
	// It parses all GongTimeFieldDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gongstruct.GongTimeFields = gongstruct.GongTimeFields[:0]
	// 2. loop all instances in the type in the association end
	for _, gongtimefieldDB_AssocEnd := range *backRepo.BackRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if gongtimefieldDB_AssocEnd.GongStruct_GongTimeFieldsDBID.Int64 == int64(gongstructDB.ID) {
			// 4. fetch the associated instance in the stage
			gongtimefield_AssocEnd := (*backRepo.BackRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[gongtimefieldDB_AssocEnd.ID]
			// 5. append it the association slice
			gongstruct.GongTimeFields = append(gongstruct.GongTimeFields, gongtimefield_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(gongstruct.GongTimeFields, func(i, j int) bool {
		gongtimefieldDB_i_ID := (*backRepo.BackRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID)[gongstruct.GongTimeFields[i]]
		gongtimefieldDB_j_ID := (*backRepo.BackRepoGongTimeField.Map_GongTimeFieldPtr_GongTimeFieldDBID)[gongstruct.GongTimeFields[j]]

		gongtimefieldDB_i := (*backRepo.BackRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB)[gongtimefieldDB_i_ID]
		gongtimefieldDB_j := (*backRepo.BackRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldDB)[gongtimefieldDB_j_ID]

		return gongtimefieldDB_i.GongStruct_GongTimeFieldsDBID_Index.Int64 < gongtimefieldDB_j.GongStruct_GongTimeFieldsDBID_Index.Int64
	})

	// This loop redeem gongstruct.PointerToGongStructFields in the stage from the encode in the back repo
	// It parses all PointerToGongStructFieldDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gongstruct.PointerToGongStructFields = gongstruct.PointerToGongStructFields[:0]
	// 2. loop all instances in the type in the association end
	for _, pointertogongstructfieldDB_AssocEnd := range *backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if pointertogongstructfieldDB_AssocEnd.GongStruct_PointerToGongStructFieldsDBID.Int64 == int64(gongstructDB.ID) {
			// 4. fetch the associated instance in the stage
			pointertogongstructfield_AssocEnd := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldPtr)[pointertogongstructfieldDB_AssocEnd.ID]
			// 5. append it the association slice
			gongstruct.PointerToGongStructFields = append(gongstruct.PointerToGongStructFields, pointertogongstructfield_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(gongstruct.PointerToGongStructFields, func(i, j int) bool {
		pointertogongstructfieldDB_i_ID := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[gongstruct.PointerToGongStructFields[i]]
		pointertogongstructfieldDB_j_ID := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldPtr_PointerToGongStructFieldDBID)[gongstruct.PointerToGongStructFields[j]]

		pointertogongstructfieldDB_i := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB)[pointertogongstructfieldDB_i_ID]
		pointertogongstructfieldDB_j := (*backRepo.BackRepoPointerToGongStructField.Map_PointerToGongStructFieldDBID_PointerToGongStructFieldDB)[pointertogongstructfieldDB_j_ID]

		return pointertogongstructfieldDB_i.GongStruct_PointerToGongStructFieldsDBID_Index.Int64 < pointertogongstructfieldDB_j.GongStruct_PointerToGongStructFieldsDBID_Index.Int64
	})

	// This loop redeem gongstruct.SliceOfPointerToGongStructFields in the stage from the encode in the back repo
	// It parses all SliceOfPointerToGongStructFieldDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gongstruct.SliceOfPointerToGongStructFields = gongstruct.SliceOfPointerToGongStructFields[:0]
	// 2. loop all instances in the type in the association end
	for _, sliceofpointertogongstructfieldDB_AssocEnd := range *backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if sliceofpointertogongstructfieldDB_AssocEnd.GongStruct_SliceOfPointerToGongStructFieldsDBID.Int64 == int64(gongstructDB.ID) {
			// 4. fetch the associated instance in the stage
			sliceofpointertogongstructfield_AssocEnd := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[sliceofpointertogongstructfieldDB_AssocEnd.ID]
			// 5. append it the association slice
			gongstruct.SliceOfPointerToGongStructFields = append(gongstruct.SliceOfPointerToGongStructFields, sliceofpointertogongstructfield_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(gongstruct.SliceOfPointerToGongStructFields, func(i, j int) bool {
		sliceofpointertogongstructfieldDB_i_ID := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[gongstruct.SliceOfPointerToGongStructFields[i]]
		sliceofpointertogongstructfieldDB_j_ID := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldPtr_SliceOfPointerToGongStructFieldDBID)[gongstruct.SliceOfPointerToGongStructFields[j]]

		sliceofpointertogongstructfieldDB_i := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB)[sliceofpointertogongstructfieldDB_i_ID]
		sliceofpointertogongstructfieldDB_j := (*backRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldDB)[sliceofpointertogongstructfieldDB_j_ID]

		return sliceofpointertogongstructfieldDB_i.GongStruct_SliceOfPointerToGongStructFieldsDBID_Index.Int64 < sliceofpointertogongstructfieldDB_j.GongStruct_SliceOfPointerToGongStructFieldsDBID_Index.Int64
	})

	return
}

// CommitGongStruct allows commit of a single gongstruct (if already staged)
func (backRepo *BackRepoStruct) CommitGongStruct(gongstruct *models.GongStruct) {
	backRepo.BackRepoGongStruct.CommitPhaseOneInstance(gongstruct)
	if id, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]; ok {
		backRepo.BackRepoGongStruct.CommitPhaseTwoInstance(backRepo, id, gongstruct)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGongStruct allows checkout of a single gongstruct (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongStruct(gongstruct *models.GongStruct) {
	// check if the gongstruct is staged
	if _, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]; ok {

		if id, ok := (*backRepo.BackRepoGongStruct.Map_GongStructPtr_GongStructDBID)[gongstruct]; ok {
			var gongstructDB GongStructDB
			gongstructDB.ID = id

			if err := backRepo.BackRepoGongStruct.db.First(&gongstructDB, id).Error; err != nil {
				log.Panicln("CheckoutGongStruct : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongStruct.CheckoutPhaseOneInstance(&gongstructDB)
			backRepo.BackRepoGongStruct.CheckoutPhaseTwoInstance(backRepo, &gongstructDB)
		}
	}
}

// CopyBasicFieldsFromGongStruct
func (gongstructDB *GongStructDB) CopyBasicFieldsFromGongStruct(gongstruct *models.GongStruct) {
	// insertion point for fields commit

	gongstructDB.Name_Data.String = gongstruct.Name
	gongstructDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGongStructWOP
func (gongstructDB *GongStructDB) CopyBasicFieldsFromGongStructWOP(gongstruct *GongStructWOP) {
	// insertion point for fields commit

	gongstructDB.Name_Data.String = gongstruct.Name
	gongstructDB.Name_Data.Valid = true
}

// CopyBasicFieldsToGongStruct
func (gongstructDB *GongStructDB) CopyBasicFieldsToGongStruct(gongstruct *models.GongStruct) {
	// insertion point for checkout of basic fields (back repo to stage)
	gongstruct.Name = gongstructDB.Name_Data.String
}

// CopyBasicFieldsToGongStructWOP
func (gongstructDB *GongStructDB) CopyBasicFieldsToGongStructWOP(gongstruct *GongStructWOP) {
	gongstruct.ID = int(gongstructDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	gongstruct.Name = gongstructDB.Name_Data.String
}

// Backup generates a json file from a slice of all GongStructDB instances in the backrepo
func (backRepoGongStruct *BackRepoGongStructStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GongStructDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongStructDB, 0)
	for _, gongstructDB := range *backRepoGongStruct.Map_GongStructDBID_GongStructDB {
		forBackup = append(forBackup, gongstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json GongStruct ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json GongStruct file", err.Error())
	}
}

// Backup generates a json file from a slice of all GongStructDB instances in the backrepo
func (backRepoGongStruct *BackRepoGongStructStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongStructDB, 0)
	for _, gongstructDB := range *backRepoGongStruct.Map_GongStructDBID_GongStructDB {
		forBackup = append(forBackup, gongstructDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GongStruct")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GongStruct_Fields, -1)
	for _, gongstructDB := range forBackup {

		var gongstructWOP GongStructWOP
		gongstructDB.CopyBasicFieldsToGongStructWOP(&gongstructWOP)

		row := sh.AddRow()
		row.WriteStruct(&gongstructWOP, -1)
	}
}

// RestoreXL from the "GongStruct" sheet all GongStructDB instances
func (backRepoGongStruct *BackRepoGongStructStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGongStructid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GongStruct"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGongStruct.rowVisitorGongStruct)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoGongStruct *BackRepoGongStructStruct) rowVisitorGongStruct(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var gongstructWOP GongStructWOP
		row.ReadStruct(&gongstructWOP)

		// add the unmarshalled struct to the stage
		gongstructDB := new(GongStructDB)
		gongstructDB.CopyBasicFieldsFromGongStructWOP(&gongstructWOP)

		gongstructDB_ID_atBackupTime := gongstructDB.ID
		gongstructDB.ID = 0
		query := backRepoGongStruct.db.Create(gongstructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[gongstructDB.ID] = gongstructDB
		BackRepoGongStructid_atBckpTime_newID[gongstructDB_ID_atBackupTime] = gongstructDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GongStructDB.json" in dirPath that stores an array
// of GongStructDB and stores it in the database
// the map BackRepoGongStructid_atBckpTime_newID is updated accordingly
func (backRepoGongStruct *BackRepoGongStructStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGongStructid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GongStructDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json GongStruct file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GongStructDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GongStructDBID_GongStructDB
	for _, gongstructDB := range forRestore {

		gongstructDB_ID_atBackupTime := gongstructDB.ID
		gongstructDB.ID = 0
		query := backRepoGongStruct.db.Create(gongstructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoGongStruct.Map_GongStructDBID_GongStructDB)[gongstructDB.ID] = gongstructDB
		BackRepoGongStructid_atBckpTime_newID[gongstructDB_ID_atBackupTime] = gongstructDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json GongStruct file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GongStruct>id_atBckpTime_newID
// to compute new index
func (backRepoGongStruct *BackRepoGongStructStruct) RestorePhaseTwo() {

	for _, gongstructDB := range *backRepoGongStruct.Map_GongStructDBID_GongStructDB {

		// next line of code is to avert unused variable compilation error
		_ = gongstructDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGongStruct.db.Model(gongstructDB).Updates(*gongstructDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGongStructid_atBckpTime_newID map[uint]uint
