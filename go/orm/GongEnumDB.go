// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GongEnum sql.NullBool
var __GongEnum_time__dummyDeclaration time.Duration
var dummy_GongEnum_sort sort.Float64Slice

// GongEnumAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongenumAPI
type GongEnumAPI struct {
	gorm.Model

	models.GongEnum

	// encoding of pointers
	GongEnumPointersEnconding
}

// GongEnumPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GongEnumPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// GongEnumDB describes a gongenum in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model gongenumDB
type GongEnumDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field gongenumDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// encoding of pointers
	GongEnumPointersEnconding
}

// GongEnumDBs arrays gongenumDBs
// swagger:response gongenumDBsResponse
type GongEnumDBs []GongEnumDB

// GongEnumDBResponse provides response
// swagger:response gongenumDBResponse
type GongEnumDBResponse struct {
	GongEnumDB
}

type BackRepoGongEnumStruct struct {
	// stores GongEnumDB according to their gorm ID
	Map_GongEnumDBID_GongEnumDB *map[uint]*GongEnumDB

	// stores GongEnumDB ID according to GongEnum address
	Map_GongEnumPtr_GongEnumDBID *map[*models.GongEnum]uint

	// stores GongEnum according to their gorm ID
	Map_GongEnumDBID_GongEnumPtr *map[uint]*models.GongEnum

	db *gorm.DB
}

func (backRepoGongEnum *BackRepoGongEnumStruct) GetDB() *gorm.DB {
	return backRepoGongEnum.db
}

// GetGongEnumDBFromGongEnumPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGongEnum *BackRepoGongEnumStruct) GetGongEnumDBFromGongEnumPtr(gongenum *models.GongEnum) (gongenumDB *GongEnumDB) {
	id := (*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]
	gongenumDB = (*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[id]
	return
}

// BackRepoGongEnum.Init set up the BackRepo of the GongEnum
func (backRepoGongEnum *BackRepoGongEnumStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr != nil {
		err := errors.New("In Init, backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr should be nil")
		return err
	}

	if backRepoGongEnum.Map_GongEnumDBID_GongEnumDB != nil {
		err := errors.New("In Init, backRepoGongEnum.Map_GongEnumDBID_GongEnumDB should be nil")
		return err
	}

	if backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID != nil {
		err := errors.New("In Init, backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongEnum, 0)
	backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr = &tmp

	tmpDB := make(map[uint]*GongEnumDB, 0)
	backRepoGongEnum.Map_GongEnumDBID_GongEnumDB = &tmpDB

	tmpID := make(map[*models.GongEnum]uint, 0)
	backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID = &tmpID

	backRepoGongEnum.db = db
	return
}

// BackRepoGongEnum.CommitPhaseOne commits all staged instances of GongEnum to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongenum := range stage.GongEnums {
		backRepoGongEnum.CommitPhaseOneInstance(gongenum)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongenum := range *backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr {
		if _, ok := stage.GongEnums[gongenum]; !ok {
			backRepoGongEnum.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongEnum.CommitDeleteInstance commits deletion of GongEnum to the BackRepo
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitDeleteInstance(id uint) (Error error) {

	gongenum := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[id]

	// gongenum is not staged anymore, remove gongenumDB
	gongenumDB := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[id]
	query := backRepoGongEnum.db.Unscoped().Delete(&gongenumDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID), gongenum)
	delete((*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr), id)
	delete((*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB), id)

	return
}

// BackRepoGongEnum.CommitPhaseOneInstance commits gongenum staged instances of GongEnum to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitPhaseOneInstance(gongenum *models.GongEnum) (Error error) {

	// check if the gongenum is not commited yet
	if _, ok := (*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]; ok {
		return
	}

	// initiate gongenum
	var gongenumDB GongEnumDB
	gongenumDB.CopyBasicFieldsFromGongEnum(gongenum)

	query := backRepoGongEnum.db.Create(&gongenumDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum] = gongenumDB.ID
	(*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID] = gongenum
	(*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[gongenumDB.ID] = &gongenumDB

	return
}

// BackRepoGongEnum.CommitPhaseTwo commits all staged instances of GongEnum to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongenum := range *backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr {
		backRepoGongEnum.CommitPhaseTwoInstance(backRepo, idx, gongenum)
	}

	return
}

// BackRepoGongEnum.CommitPhaseTwoInstance commits {{structname }} of models.GongEnum to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongenum *models.GongEnum) (Error error) {

	// fetch matching gongenumDB
	if gongenumDB, ok := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[idx]; ok {

		gongenumDB.CopyBasicFieldsFromGongEnum(gongenum)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers gongenum.GongEnumValues into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, gongenumvalueAssocEnd := range gongenum.GongEnumValues {

			// get the back repo instance at the association end
			gongenumvalueAssocEnd_DB :=
				backRepo.BackRepoGongEnumValue.GetGongEnumValueDBFromGongEnumValuePtr( gongenumvalueAssocEnd)

			// encode reverse pointer in the association end back repo instance
			gongenumvalueAssocEnd_DB.GongEnum_GongEnumValuesDBID.Int64 = int64(gongenumDB.ID)
			gongenumvalueAssocEnd_DB.GongEnum_GongEnumValuesDBID.Valid = true
			gongenumvalueAssocEnd_DB.GongEnum_GongEnumValuesDBID_Index.Int64 = int64(idx)
			gongenumvalueAssocEnd_DB.GongEnum_GongEnumValuesDBID_Index.Valid = true
			if q := backRepoGongEnum.db.Save(gongenumvalueAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoGongEnum.db.Save(&gongenumDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongEnum intance %s", gongenum.Name))
		return err
	}

	return
}

// BackRepoGongEnum.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGongEnum *BackRepoGongEnumStruct) CheckoutPhaseOne() (Error error) {

	gongenumDBArray := make([]GongEnumDB, 0)
	query := backRepoGongEnum.db.Find(&gongenumDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, gongenumDB := range gongenumDBArray {
		backRepoGongEnum.CheckoutPhaseOneInstance(&gongenumDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongenumDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongenumDB
func (backRepoGongEnum *BackRepoGongEnumStruct) CheckoutPhaseOneInstance(gongenumDB *GongEnumDB) (Error error) {

	gongenum, ok := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID]
	if !ok {
		gongenum = new(models.GongEnum)

		(*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID] = gongenum
		(*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum] = gongenumDB.ID

		// append model store with the new element
		gongenum.Stage()
	}
	gongenumDB.CopyBasicFieldsToGongEnum(gongenum)

	// preserve pointer to aclassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GongEnumDBID_GongEnumDB)[gongenumDB hold variable pointers
	gongenumDB_Data := *gongenumDB
	preservedPtrToGongEnum := &gongenumDB_Data
	(*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[gongenumDB.ID] = preservedPtrToGongEnum

	return
}

// BackRepoGongEnum.CheckoutPhaseTwo Checkouts all staged instances of GongEnum to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnum *BackRepoGongEnumStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongenumDB := range *backRepoGongEnum.Map_GongEnumDBID_GongEnumDB {
		backRepoGongEnum.CheckoutPhaseTwoInstance(backRepo, gongenumDB)
	}
	return
}

// BackRepoGongEnum.CheckoutPhaseTwoInstance Checkouts staged instances of GongEnum to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnum *BackRepoGongEnumStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongenumDB *GongEnumDB) (Error error) {

	gongenum := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID]
	_ = gongenum // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem gongenum.GongEnumValues in the stage from the encode in the back repo
	// It parses all GongEnumValueDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gongenum.GongEnumValues = gongenum.GongEnumValues[:0]
	// 2. loop all instances in the type in the association end
	for _, gongenumvalueDB_AssocEnd := range *backRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if gongenumvalueDB_AssocEnd.GongEnum_GongEnumValuesDBID.Int64 == int64(gongenumDB.ID) {
			// 4. fetch the associated instance in the stage
			gongenumvalue_AssocEnd := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB_AssocEnd.ID]
			// 5. append it the association slice
			gongenum.GongEnumValues = append(gongenum.GongEnumValues, gongenumvalue_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(gongenum.GongEnumValues, func(i, j int) bool {
		gongenumvalueDB_i_ID := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenum.GongEnumValues[i]]
		gongenumvalueDB_j_ID := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenum.GongEnumValues[j]]

		gongenumvalueDB_i := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[gongenumvalueDB_i_ID]
		gongenumvalueDB_j := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[gongenumvalueDB_j_ID]

		return gongenumvalueDB_i.GongEnum_GongEnumValuesDBID_Index.Int64 < gongenumvalueDB_j.GongEnum_GongEnumValuesDBID_Index.Int64
	})

	return
}

// CommitGongEnum allows commit of a single gongenum (if already staged)
func (backRepo *BackRepoStruct) CommitGongEnum(gongenum *models.GongEnum) {
	backRepo.BackRepoGongEnum.CommitPhaseOneInstance(gongenum)
	if id, ok := (*backRepo.BackRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]; ok {
		backRepo.BackRepoGongEnum.CommitPhaseTwoInstance(backRepo, id, gongenum)
	}
}

// CommitGongEnum allows checkout of a single gongenum (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongEnum(gongenum *models.GongEnum) {
	// check if the gongenum is staged
	if _, ok := (*backRepo.BackRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]; ok {

		if id, ok := (*backRepo.BackRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]; ok {
			var gongenumDB GongEnumDB
			gongenumDB.ID = id

			if err := backRepo.BackRepoGongEnum.db.First(&gongenumDB, id).Error; err != nil {
				log.Panicln("CheckoutGongEnum : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongEnum.CheckoutPhaseOneInstance(&gongenumDB)
			backRepo.BackRepoGongEnum.CheckoutPhaseTwoInstance(backRepo, &gongenumDB)
		}
	}
}

// CopyBasicFieldsToGongEnumDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (gongenumDB *GongEnumDB) CopyBasicFieldsFromGongEnum(gongenum *models.GongEnum) {
	// insertion point for fields commit
	gongenumDB.Name_Data.String = gongenum.Name
	gongenumDB.Name_Data.Valid = true

}

// CopyBasicFieldsToGongEnumDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (gongenumDB *GongEnumDB) CopyBasicFieldsToGongEnum(gongenum *models.GongEnum) {

	// insertion point for checkout of basic fields (back repo to stage)
	gongenum.Name = gongenumDB.Name_Data.String
}

// Backup generates a json file from a slice of all GongEnumDB instances in the backrepo
func (backRepoGongEnum *BackRepoGongEnumStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GongEnumDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	var forBackup []*GongEnumDB
	for _, gongenumDB := range *backRepoGongEnum.Map_GongEnumDBID_GongEnumDB {
		forBackup = append(forBackup, gongenumDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json GongEnum ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json GongEnum file", err.Error())
	}
}

func (backRepoGongEnum *BackRepoGongEnumStruct) Restore(dirPath string) {

	filename := filepath.Join(dirPath, "GongEnumDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json GongEnum file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GongEnumDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GongEnumDBID_GongEnumDB
	for _, gongenumDB := range forRestore {

		gongenumDB_ID := gongenumDB.ID
		gongenumDB.ID = 0
		query := backRepoGongEnum.db.Create(gongenumDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		if gongenumDB_ID != gongenumDB.ID {
			log.Panicf("ID of GongEnum restore ID %d, name %s, has wrong ID %d in DB after create",
				gongenumDB_ID, gongenumDB.Name_Data.String, gongenumDB.ID)
		}
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json GongEnum file", err.Error())
	}
}
