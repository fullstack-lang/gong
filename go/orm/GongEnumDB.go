// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_GongEnum sql.NullBool
var __GongEnum_time__dummyDeclaration time.Duration

// GongEnumAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gongenumAPI
type GongEnumAPI struct {
	models.GongEnum

	// insertion for fields declaration
	// Declation for basic field gongenumDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// GongEnumDB describes a gongenum in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model gongenumDB
type GongEnumDB struct {
	gorm.Model

	GongEnumAPI
}

// GongEnumDBs arrays gongenumDBs
// swagger:response gongenumDBsResponse
type GongEnumDBs []GongEnumDB

// GongEnumDBResponse provides response
// swagger:response gongenumDBResponse
type GongEnumDBResponse struct {
	GongEnumDB
}

type BackRepoGongEnumStruct struct {
	// stores GongEnumDB according to their gorm ID
	Map_GongEnumDBID_GongEnumDB *map[uint]*GongEnumDB

	// stores GongEnumDB ID according to GongEnum address
	Map_GongEnumPtr_GongEnumDBID *map[*models.GongEnum]uint

	// stores GongEnum according to their gorm ID
	Map_GongEnumDBID_GongEnumPtr *map[uint]*models.GongEnum

	db *gorm.DB
}

// BackRepoGongEnum.Init set up the BackRepo of the GongEnum
func (backRepoGongEnum *BackRepoGongEnumStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr != nil {
		err := errors.New("In Init, backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr should be nil")
		return err
	}

	if backRepoGongEnum.Map_GongEnumDBID_GongEnumDB != nil {
		err := errors.New("In Init, backRepoGongEnum.Map_GongEnumDBID_GongEnumDB should be nil")
		return err
	}

	if backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID != nil {
		err := errors.New("In Init, backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongEnum, 0)
	backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr = &tmp

	tmpDB := make(map[uint]*GongEnumDB, 0)
	backRepoGongEnum.Map_GongEnumDBID_GongEnumDB = &tmpDB

	tmpID := make(map[*models.GongEnum]uint, 0)
	backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID = &tmpID

	backRepoGongEnum.db = db
	return
}

// BackRepoGongEnum.CommitPhaseOne commits all staged instances of GongEnum to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gongenum := range stage.GongEnums {
		backRepoGongEnum.CommitPhaseOneInstance(gongenum)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gongenum := range *backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr {
		if _, ok := stage.GongEnums[gongenum]; !ok {
			backRepoGongEnum.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongEnum.CommitDeleteInstance commits deletion of GongEnum to the BackRepo
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitDeleteInstance(id uint) (Error error) {

	gongenum := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[id]

	// gongenum is not staged anymore, remove gongenumDB
	gongenumDB := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[id]
	query := backRepoGongEnum.db.Unscoped().Delete(&gongenumDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID), gongenum)
	delete((*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr), id)
	delete((*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB), id)

	return
}

// BackRepoGongEnum.CommitPhaseOneInstance commits gongenum staged instances of GongEnum to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitPhaseOneInstance(gongenum *models.GongEnum) (Error error) {

	// check if the gongenum is not commited yet
	if _, ok := (*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]; ok {
		return
	}

	// initiate gongenum
	var gongenumDB GongEnumDB
	gongenumDB.GongEnum = *gongenum

	query := backRepoGongEnum.db.Create(&gongenumDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum] = gongenumDB.ID
	(*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID] = gongenum
	(*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[gongenumDB.ID] = &gongenumDB

	return
}

// BackRepoGongEnum.CommitPhaseTwo commits all staged instances of GongEnum to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gongenum := range *backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr {
		backRepoGongEnum.CommitPhaseTwoInstance(backRepo, idx, gongenum)
	}

	return
}

// BackRepoGongEnum.CommitPhaseTwoInstance commits {{structname }} of models.GongEnum to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnum *BackRepoGongEnumStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gongenum *models.GongEnum) (Error error) {

	// fetch matching gongenumDB
	if gongenumDB, ok := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				gongenumDB.Name_Data.String = gongenum.Name
				gongenumDB.Name_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to GongEnumValue, i.e.
				for _, gongenumvalue := range gongenum.GongEnumValues {
					if gongenumvalueDBID, ok := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValuePtr_GongEnumValueDBID)[gongenumvalue]; ok {
						if gongenumvalueDB, ok := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB)[gongenumvalueDBID]; ok {
							gongenumvalueDB.GongEnum_GongEnumValuesDBID.Int64 = int64(gongenumDB.ID)
							gongenumvalueDB.GongEnum_GongEnumValuesDBID.Valid = true
							if q := backRepoGongEnum.db.Save(&gongenumvalueDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoGongEnum.db.Save(&gongenumDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongEnum intance %s", gongenum.Name))
		return err
	}

	return
}

// BackRepoGongEnum.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGongEnum *BackRepoGongEnumStruct) CheckoutPhaseOne() (Error error) {

	gongenumDBArray := make([]GongEnumDB, 0)
	query := backRepoGongEnum.db.Find(&gongenumDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, gongenumDB := range gongenumDBArray {
		backRepoGongEnum.CheckoutPhaseOneInstance(&gongenumDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a gongenumDB that has been found in the DB, updates the backRepo and stages the
// models version of the gongenumDB
func (backRepoGongEnum *BackRepoGongEnumStruct) CheckoutPhaseOneInstance(gongenumDB *GongEnumDB) (Error error) {

	// if absent, create entries in the backRepoGongEnum maps.
	gongenumWithNewFieldValues := gongenumDB.GongEnum
	if _, ok := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID]; !ok {

		(*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID] = &gongenumWithNewFieldValues
		(*backRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[&gongenumWithNewFieldValues] = gongenumDB.ID

		// append model store with the new element
		gongenumWithNewFieldValues.Stage()
	}
	gongenumDBWithNewFieldValues := *gongenumDB
	(*backRepoGongEnum.Map_GongEnumDBID_GongEnumDB)[gongenumDB.ID] = &gongenumDBWithNewFieldValues

	return
}

// BackRepoGongEnum.CheckoutPhaseTwo Checkouts all staged instances of GongEnum to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnum *BackRepoGongEnumStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gongenumDB := range *backRepoGongEnum.Map_GongEnumDBID_GongEnumDB {
		backRepoGongEnum.CheckoutPhaseTwoInstance(backRepo, gongenumDB)
	}
	return
}

// BackRepoGongEnum.CheckoutPhaseTwoInstance Checkouts staged instances of GongEnum to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongEnum *BackRepoGongEnumStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gongenumDB *GongEnumDB) (Error error) {

	gongenum := (*backRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID]
	_ = gongenum // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			gongenum.Name = gongenumDB.Name_Data.String

			// parse all GongEnumValueDB and redeem the array of poiners to GongEnum
			// first reset the slice
			gongenum.GongEnumValues = gongenum.GongEnumValues[:0]
			for _, GongEnumValueDB := range *backRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValueDB {
				if GongEnumValueDB.GongEnum_GongEnumValuesDBID.Int64 == int64(gongenumDB.ID) {
					GongEnumValue := (*backRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[GongEnumValueDB.ID]
					gongenum.GongEnumValues = append(gongenum.GongEnumValues, GongEnumValue)
				}
			}

		}
	}
	return
}

// CommitGongEnum allows commit of a single gongenum (if already staged)
func (backRepo *BackRepoStruct) CommitGongEnum(gongenum *models.GongEnum) {
	backRepo.BackRepoGongEnum.CommitPhaseOneInstance(gongenum)
	if id, ok := (*backRepo.BackRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]; ok {
		backRepo.BackRepoGongEnum.CommitPhaseTwoInstance(backRepo, id, gongenum)
	}
}

// CommitGongEnum allows checkout of a single gongenum (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongEnum(gongenum *models.GongEnum) {
	// check if the gongenum is staged
	if _, ok := (*backRepo.BackRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]; ok {

		if id, ok := (*backRepo.BackRepoGongEnum.Map_GongEnumPtr_GongEnumDBID)[gongenum]; ok {
			var gongenumDB GongEnumDB
			gongenumDB.ID = id

			if err := backRepo.BackRepoGongEnum.db.First(&gongenumDB, id).Error; err != nil {
				log.Panicln("CheckoutGongEnum : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongEnum.CheckoutPhaseOneInstance(&gongenumDB)
			backRepo.BackRepoGongEnum.CheckoutPhaseTwoInstance(backRepo, &gongenumDB)
		}
	}
}
