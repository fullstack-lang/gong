// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GongLink_sql sql.NullBool
var dummy_GongLink_time time.Duration
var dummy_GongLink_sort sort.Float64Slice

// GongLinkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gonglinkAPI
type GongLinkAPI struct {
	gorm.Model

	models.GongLink

	// encoding of pointers
	GongLinkPointersEnconding
}

// GongLinkPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GongLinkPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field GongNote{}.Links []*GongLink
	GongNote_LinksDBID sql.NullInt64

	// implementation of the index of the withing the slice
	GongNote_LinksDBID_Index sql.NullInt64
}

// GongLinkDB describes a gonglink in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model gonglinkDB
type GongLinkDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field gonglinkDB.Name
	Name_Data sql.NullString

	// Declation for basic field gonglinkDB.Recv
	Recv_Data sql.NullString

	// Declation for basic field gonglinkDB.ImportPath
	ImportPath_Data sql.NullString
	// encoding of pointers
	GongLinkPointersEnconding
}

// GongLinkDBs arrays gonglinkDBs
// swagger:response gonglinkDBsResponse
type GongLinkDBs []GongLinkDB

// GongLinkDBResponse provides response
// swagger:response gonglinkDBResponse
type GongLinkDBResponse struct {
	GongLinkDB
}

// GongLinkWOP is a GongLink without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GongLinkWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Recv string `xlsx:"2"`

	ImportPath string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var GongLink_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Recv",
	"ImportPath",
}

type BackRepoGongLinkStruct struct {
	// stores GongLinkDB according to their gorm ID
	Map_GongLinkDBID_GongLinkDB *map[uint]*GongLinkDB

	// stores GongLinkDB ID according to GongLink address
	Map_GongLinkPtr_GongLinkDBID *map[*models.GongLink]uint

	// stores GongLink according to their gorm ID
	Map_GongLinkDBID_GongLinkPtr *map[uint]*models.GongLink

	db *gorm.DB
}

func (backRepoGongLink *BackRepoGongLinkStruct) GetDB() *gorm.DB {
	return backRepoGongLink.db
}

// GetGongLinkDBFromGongLinkPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGongLink *BackRepoGongLinkStruct) GetGongLinkDBFromGongLinkPtr(gonglink *models.GongLink) (gonglinkDB *GongLinkDB) {
	id := (*backRepoGongLink.Map_GongLinkPtr_GongLinkDBID)[gonglink]
	gonglinkDB = (*backRepoGongLink.Map_GongLinkDBID_GongLinkDB)[id]
	return
}

// BackRepoGongLink.Init set up the BackRepo of the GongLink
func (backRepoGongLink *BackRepoGongLinkStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGongLink.Map_GongLinkDBID_GongLinkPtr != nil {
		err := errors.New("In Init, backRepoGongLink.Map_GongLinkDBID_GongLinkPtr should be nil")
		return err
	}

	if backRepoGongLink.Map_GongLinkDBID_GongLinkDB != nil {
		err := errors.New("In Init, backRepoGongLink.Map_GongLinkDBID_GongLinkDB should be nil")
		return err
	}

	if backRepoGongLink.Map_GongLinkPtr_GongLinkDBID != nil {
		err := errors.New("In Init, backRepoGongLink.Map_GongLinkPtr_GongLinkDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GongLink, 0)
	backRepoGongLink.Map_GongLinkDBID_GongLinkPtr = &tmp

	tmpDB := make(map[uint]*GongLinkDB, 0)
	backRepoGongLink.Map_GongLinkDBID_GongLinkDB = &tmpDB

	tmpID := make(map[*models.GongLink]uint, 0)
	backRepoGongLink.Map_GongLinkPtr_GongLinkDBID = &tmpID

	backRepoGongLink.db = db
	return
}

// BackRepoGongLink.CommitPhaseOne commits all staged instances of GongLink to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongLink *BackRepoGongLinkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gonglink := range stage.GongLinks {
		backRepoGongLink.CommitPhaseOneInstance(gonglink)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gonglink := range *backRepoGongLink.Map_GongLinkDBID_GongLinkPtr {
		if _, ok := stage.GongLinks[gonglink]; !ok {
			backRepoGongLink.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGongLink.CommitDeleteInstance commits deletion of GongLink to the BackRepo
func (backRepoGongLink *BackRepoGongLinkStruct) CommitDeleteInstance(id uint) (Error error) {

	gonglink := (*backRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[id]

	// gonglink is not staged anymore, remove gonglinkDB
	gonglinkDB := (*backRepoGongLink.Map_GongLinkDBID_GongLinkDB)[id]
	query := backRepoGongLink.db.Unscoped().Delete(&gonglinkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGongLink.Map_GongLinkPtr_GongLinkDBID), gonglink)
	delete((*backRepoGongLink.Map_GongLinkDBID_GongLinkPtr), id)
	delete((*backRepoGongLink.Map_GongLinkDBID_GongLinkDB), id)

	return
}

// BackRepoGongLink.CommitPhaseOneInstance commits gonglink staged instances of GongLink to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGongLink *BackRepoGongLinkStruct) CommitPhaseOneInstance(gonglink *models.GongLink) (Error error) {

	// check if the gonglink is not commited yet
	if _, ok := (*backRepoGongLink.Map_GongLinkPtr_GongLinkDBID)[gonglink]; ok {
		return
	}

	// initiate gonglink
	var gonglinkDB GongLinkDB
	gonglinkDB.CopyBasicFieldsFromGongLink(gonglink)

	query := backRepoGongLink.db.Create(&gonglinkDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGongLink.Map_GongLinkPtr_GongLinkDBID)[gonglink] = gonglinkDB.ID
	(*backRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[gonglinkDB.ID] = gonglink
	(*backRepoGongLink.Map_GongLinkDBID_GongLinkDB)[gonglinkDB.ID] = &gonglinkDB

	return
}

// BackRepoGongLink.CommitPhaseTwo commits all staged instances of GongLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongLink *BackRepoGongLinkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gonglink := range *backRepoGongLink.Map_GongLinkDBID_GongLinkPtr {
		backRepoGongLink.CommitPhaseTwoInstance(backRepo, idx, gonglink)
	}

	return
}

// BackRepoGongLink.CommitPhaseTwoInstance commits {{structname }} of models.GongLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongLink *BackRepoGongLinkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gonglink *models.GongLink) (Error error) {

	// fetch matching gonglinkDB
	if gonglinkDB, ok := (*backRepoGongLink.Map_GongLinkDBID_GongLinkDB)[idx]; ok {

		gonglinkDB.CopyBasicFieldsFromGongLink(gonglink)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGongLink.db.Save(&gonglinkDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GongLink intance %s", gonglink.Name))
		return err
	}

	return
}

// BackRepoGongLink.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGongLink *BackRepoGongLinkStruct) CheckoutPhaseOne() (Error error) {

	gonglinkDBArray := make([]GongLinkDB, 0)
	query := backRepoGongLink.db.Find(&gonglinkDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	gonglinkInstancesToBeRemovedFromTheStage := make(map[*models.GongLink]any)
	for key, value := range models.Stage.GongLinks {
		gonglinkInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, gonglinkDB := range gonglinkDBArray {
		backRepoGongLink.CheckoutPhaseOneInstance(&gonglinkDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		gonglink, ok := (*backRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[gonglinkDB.ID]
		if ok {
			delete(gonglinkInstancesToBeRemovedFromTheStage, gonglink)
		}
	}

	// remove from stage and back repo's 3 maps all gonglinks that are not in the checkout
	for gonglink := range gonglinkInstancesToBeRemovedFromTheStage {
		gonglink.Unstage()

		// remove instance from the back repo 3 maps
		gonglinkID := (*backRepoGongLink.Map_GongLinkPtr_GongLinkDBID)[gonglink]
		delete((*backRepoGongLink.Map_GongLinkPtr_GongLinkDBID), gonglink)
		delete((*backRepoGongLink.Map_GongLinkDBID_GongLinkDB), gonglinkID)
		delete((*backRepoGongLink.Map_GongLinkDBID_GongLinkPtr), gonglinkID)
	}

	return
}

// CheckoutPhaseOneInstance takes a gonglinkDB that has been found in the DB, updates the backRepo and stages the
// models version of the gonglinkDB
func (backRepoGongLink *BackRepoGongLinkStruct) CheckoutPhaseOneInstance(gonglinkDB *GongLinkDB) (Error error) {

	gonglink, ok := (*backRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[gonglinkDB.ID]
	if !ok {
		gonglink = new(models.GongLink)

		(*backRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[gonglinkDB.ID] = gonglink
		(*backRepoGongLink.Map_GongLinkPtr_GongLinkDBID)[gonglink] = gonglinkDB.ID

		// append model store with the new element
		gonglink.Name = gonglinkDB.Name_Data.String
		gonglink.Stage()
	}
	gonglinkDB.CopyBasicFieldsToGongLink(gonglink)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	gonglink.Stage()

	// preserve pointer to gonglinkDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GongLinkDBID_GongLinkDB)[gonglinkDB hold variable pointers
	gonglinkDB_Data := *gonglinkDB
	preservedPtrToGongLink := &gonglinkDB_Data
	(*backRepoGongLink.Map_GongLinkDBID_GongLinkDB)[gonglinkDB.ID] = preservedPtrToGongLink

	return
}

// BackRepoGongLink.CheckoutPhaseTwo Checkouts all staged instances of GongLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongLink *BackRepoGongLinkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, gonglinkDB := range *backRepoGongLink.Map_GongLinkDBID_GongLinkDB {
		backRepoGongLink.CheckoutPhaseTwoInstance(backRepo, gonglinkDB)
	}
	return
}

// BackRepoGongLink.CheckoutPhaseTwoInstance Checkouts staged instances of GongLink to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGongLink *BackRepoGongLinkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, gonglinkDB *GongLinkDB) (Error error) {

	gonglink := (*backRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[gonglinkDB.ID]
	_ = gonglink // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitGongLink allows commit of a single gonglink (if already staged)
func (backRepo *BackRepoStruct) CommitGongLink(gonglink *models.GongLink) {
	backRepo.BackRepoGongLink.CommitPhaseOneInstance(gonglink)
	if id, ok := (*backRepo.BackRepoGongLink.Map_GongLinkPtr_GongLinkDBID)[gonglink]; ok {
		backRepo.BackRepoGongLink.CommitPhaseTwoInstance(backRepo, id, gonglink)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGongLink allows checkout of a single gonglink (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGongLink(gonglink *models.GongLink) {
	// check if the gonglink is staged
	if _, ok := (*backRepo.BackRepoGongLink.Map_GongLinkPtr_GongLinkDBID)[gonglink]; ok {

		if id, ok := (*backRepo.BackRepoGongLink.Map_GongLinkPtr_GongLinkDBID)[gonglink]; ok {
			var gonglinkDB GongLinkDB
			gonglinkDB.ID = id

			if err := backRepo.BackRepoGongLink.db.First(&gonglinkDB, id).Error; err != nil {
				log.Panicln("CheckoutGongLink : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGongLink.CheckoutPhaseOneInstance(&gonglinkDB)
			backRepo.BackRepoGongLink.CheckoutPhaseTwoInstance(backRepo, &gonglinkDB)
		}
	}
}

// CopyBasicFieldsFromGongLink
func (gonglinkDB *GongLinkDB) CopyBasicFieldsFromGongLink(gonglink *models.GongLink) {
	// insertion point for fields commit

	gonglinkDB.Name_Data.String = gonglink.Name
	gonglinkDB.Name_Data.Valid = true

	gonglinkDB.Recv_Data.String = gonglink.Recv
	gonglinkDB.Recv_Data.Valid = true

	gonglinkDB.ImportPath_Data.String = gonglink.ImportPath
	gonglinkDB.ImportPath_Data.Valid = true
}

// CopyBasicFieldsFromGongLinkWOP
func (gonglinkDB *GongLinkDB) CopyBasicFieldsFromGongLinkWOP(gonglink *GongLinkWOP) {
	// insertion point for fields commit

	gonglinkDB.Name_Data.String = gonglink.Name
	gonglinkDB.Name_Data.Valid = true

	gonglinkDB.Recv_Data.String = gonglink.Recv
	gonglinkDB.Recv_Data.Valid = true

	gonglinkDB.ImportPath_Data.String = gonglink.ImportPath
	gonglinkDB.ImportPath_Data.Valid = true
}

// CopyBasicFieldsToGongLink
func (gonglinkDB *GongLinkDB) CopyBasicFieldsToGongLink(gonglink *models.GongLink) {
	// insertion point for checkout of basic fields (back repo to stage)
	gonglink.Name = gonglinkDB.Name_Data.String
	gonglink.Recv = gonglinkDB.Recv_Data.String
	gonglink.ImportPath = gonglinkDB.ImportPath_Data.String
}

// CopyBasicFieldsToGongLinkWOP
func (gonglinkDB *GongLinkDB) CopyBasicFieldsToGongLinkWOP(gonglink *GongLinkWOP) {
	gonglink.ID = int(gonglinkDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	gonglink.Name = gonglinkDB.Name_Data.String
	gonglink.Recv = gonglinkDB.Recv_Data.String
	gonglink.ImportPath = gonglinkDB.ImportPath_Data.String
}

// Backup generates a json file from a slice of all GongLinkDB instances in the backrepo
func (backRepoGongLink *BackRepoGongLinkStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GongLinkDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongLinkDB, 0)
	for _, gonglinkDB := range *backRepoGongLink.Map_GongLinkDBID_GongLinkDB {
		forBackup = append(forBackup, gonglinkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json GongLink ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json GongLink file", err.Error())
	}
}

// Backup generates a json file from a slice of all GongLinkDB instances in the backrepo
func (backRepoGongLink *BackRepoGongLinkStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GongLinkDB, 0)
	for _, gonglinkDB := range *backRepoGongLink.Map_GongLinkDBID_GongLinkDB {
		forBackup = append(forBackup, gonglinkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GongLink")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GongLink_Fields, -1)
	for _, gonglinkDB := range forBackup {

		var gonglinkWOP GongLinkWOP
		gonglinkDB.CopyBasicFieldsToGongLinkWOP(&gonglinkWOP)

		row := sh.AddRow()
		row.WriteStruct(&gonglinkWOP, -1)
	}
}

// RestoreXL from the "GongLink" sheet all GongLinkDB instances
func (backRepoGongLink *BackRepoGongLinkStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGongLinkid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GongLink"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGongLink.rowVisitorGongLink)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoGongLink *BackRepoGongLinkStruct) rowVisitorGongLink(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var gonglinkWOP GongLinkWOP
		row.ReadStruct(&gonglinkWOP)

		// add the unmarshalled struct to the stage
		gonglinkDB := new(GongLinkDB)
		gonglinkDB.CopyBasicFieldsFromGongLinkWOP(&gonglinkWOP)

		gonglinkDB_ID_atBackupTime := gonglinkDB.ID
		gonglinkDB.ID = 0
		query := backRepoGongLink.db.Create(gonglinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoGongLink.Map_GongLinkDBID_GongLinkDB)[gonglinkDB.ID] = gonglinkDB
		BackRepoGongLinkid_atBckpTime_newID[gonglinkDB_ID_atBackupTime] = gonglinkDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GongLinkDB.json" in dirPath that stores an array
// of GongLinkDB and stores it in the database
// the map BackRepoGongLinkid_atBckpTime_newID is updated accordingly
func (backRepoGongLink *BackRepoGongLinkStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGongLinkid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GongLinkDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json GongLink file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GongLinkDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GongLinkDBID_GongLinkDB
	for _, gonglinkDB := range forRestore {

		gonglinkDB_ID_atBackupTime := gonglinkDB.ID
		gonglinkDB.ID = 0
		query := backRepoGongLink.db.Create(gonglinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoGongLink.Map_GongLinkDBID_GongLinkDB)[gonglinkDB.ID] = gonglinkDB
		BackRepoGongLinkid_atBckpTime_newID[gonglinkDB_ID_atBackupTime] = gonglinkDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json GongLink file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GongLink>id_atBckpTime_newID
// to compute new index
func (backRepoGongLink *BackRepoGongLinkStruct) RestorePhaseTwo() {

	for _, gonglinkDB := range *backRepoGongLink.Map_GongLinkDBID_GongLinkDB {

		// next line of code is to avert unused variable compilation error
		_ = gonglinkDB

		// insertion point for reindexing pointers encoding
		// This reindex gonglink.Links
		if gonglinkDB.GongNote_LinksDBID.Int64 != 0 {
			gonglinkDB.GongNote_LinksDBID.Int64 =
				int64(BackRepoGongNoteid_atBckpTime_newID[uint(gonglinkDB.GongNote_LinksDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoGongLink.db.Model(gonglinkDB).Updates(*gonglinkDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGongLinkid_atBckpTime_newID map[uint]uint
