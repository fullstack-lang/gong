// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __SliceOfPointerToGongStructField__dummysDeclaration__ models.SliceOfPointerToGongStructField
var __SliceOfPointerToGongStructField_time__dummyDeclaration time.Duration

// An SliceOfPointerToGongStructFieldID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getSliceOfPointerToGongStructField updateSliceOfPointerToGongStructField deleteSliceOfPointerToGongStructField
type SliceOfPointerToGongStructFieldID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// SliceOfPointerToGongStructFieldInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postSliceOfPointerToGongStructField updateSliceOfPointerToGongStructField
type SliceOfPointerToGongStructFieldInput struct {
	// The SliceOfPointerToGongStructField to submit or modify
	// in: body
	SliceOfPointerToGongStructField *orm.SliceOfPointerToGongStructFieldAPI
}

// GetSliceOfPointerToGongStructFields
//
// swagger:route GET /sliceofpointertogongstructfields sliceofpointertogongstructfields getSliceOfPointerToGongStructFields
//
// # Get all sliceofpointertogongstructfields
//
// Responses:
// default: genericError
//
//	200: sliceofpointertogongstructfieldDBResponse
func GetSliceOfPointerToGongStructFields(c *gin.Context) {
	db := orm.BackRepo.BackRepoSliceOfPointerToGongStructField.GetDB()

	// source slice
	var sliceofpointertogongstructfieldDBs []orm.SliceOfPointerToGongStructFieldDB
	query := db.Find(&sliceofpointertogongstructfieldDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	sliceofpointertogongstructfieldAPIs := make([]orm.SliceOfPointerToGongStructFieldAPI, 0)

	// for each sliceofpointertogongstructfield, update fields from the database nullable fields
	for idx := range sliceofpointertogongstructfieldDBs {
		sliceofpointertogongstructfieldDB := &sliceofpointertogongstructfieldDBs[idx]
		_ = sliceofpointertogongstructfieldDB
		var sliceofpointertogongstructfieldAPI orm.SliceOfPointerToGongStructFieldAPI

		// insertion point for updating fields
		sliceofpointertogongstructfieldAPI.ID = sliceofpointertogongstructfieldDB.ID
		sliceofpointertogongstructfieldDB.CopyBasicFieldsToSliceOfPointerToGongStructField(&sliceofpointertogongstructfieldAPI.SliceOfPointerToGongStructField)
		sliceofpointertogongstructfieldAPI.SliceOfPointerToGongStructFieldPointersEnconding = sliceofpointertogongstructfieldDB.SliceOfPointerToGongStructFieldPointersEnconding
		sliceofpointertogongstructfieldAPIs = append(sliceofpointertogongstructfieldAPIs, sliceofpointertogongstructfieldAPI)
	}

	c.JSON(http.StatusOK, sliceofpointertogongstructfieldAPIs)
}

// PostSliceOfPointerToGongStructField
//
// swagger:route POST /sliceofpointertogongstructfields sliceofpointertogongstructfields postSliceOfPointerToGongStructField
//
// Creates a sliceofpointertogongstructfield
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostSliceOfPointerToGongStructField(c *gin.Context) {
	db := orm.BackRepo.BackRepoSliceOfPointerToGongStructField.GetDB()

	// Validate input
	var input orm.SliceOfPointerToGongStructFieldAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create sliceofpointertogongstructfield
	sliceofpointertogongstructfieldDB := orm.SliceOfPointerToGongStructFieldDB{}
	sliceofpointertogongstructfieldDB.SliceOfPointerToGongStructFieldPointersEnconding = input.SliceOfPointerToGongStructFieldPointersEnconding
	sliceofpointertogongstructfieldDB.CopyBasicFieldsFromSliceOfPointerToGongStructField(&input.SliceOfPointerToGongStructField)

	query := db.Create(&sliceofpointertogongstructfieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoSliceOfPointerToGongStructField.CheckoutPhaseOneInstance(&sliceofpointertogongstructfieldDB)
	sliceofpointertogongstructfield := (*orm.BackRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[sliceofpointertogongstructfieldDB.ID]

	if sliceofpointertogongstructfield != nil {
		models.AfterCreateFromFront(&models.Stage, sliceofpointertogongstructfield)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, sliceofpointertogongstructfieldDB)
}

// GetSliceOfPointerToGongStructField
//
// swagger:route GET /sliceofpointertogongstructfields/{ID} sliceofpointertogongstructfields getSliceOfPointerToGongStructField
//
// Gets the details for a sliceofpointertogongstructfield.
//
// Responses:
// default: genericError
//
//	200: sliceofpointertogongstructfieldDBResponse
func GetSliceOfPointerToGongStructField(c *gin.Context) {
	db := orm.BackRepo.BackRepoSliceOfPointerToGongStructField.GetDB()

	// Get sliceofpointertogongstructfieldDB in DB
	var sliceofpointertogongstructfieldDB orm.SliceOfPointerToGongStructFieldDB
	if err := db.First(&sliceofpointertogongstructfieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var sliceofpointertogongstructfieldAPI orm.SliceOfPointerToGongStructFieldAPI
	sliceofpointertogongstructfieldAPI.ID = sliceofpointertogongstructfieldDB.ID
	sliceofpointertogongstructfieldAPI.SliceOfPointerToGongStructFieldPointersEnconding = sliceofpointertogongstructfieldDB.SliceOfPointerToGongStructFieldPointersEnconding
	sliceofpointertogongstructfieldDB.CopyBasicFieldsToSliceOfPointerToGongStructField(&sliceofpointertogongstructfieldAPI.SliceOfPointerToGongStructField)

	c.JSON(http.StatusOK, sliceofpointertogongstructfieldAPI)
}

// UpdateSliceOfPointerToGongStructField
//
// swagger:route PATCH /sliceofpointertogongstructfields/{ID} sliceofpointertogongstructfields updateSliceOfPointerToGongStructField
//
// # Update a sliceofpointertogongstructfield
//
// Responses:
// default: genericError
//
//	200: sliceofpointertogongstructfieldDBResponse
func UpdateSliceOfPointerToGongStructField(c *gin.Context) {
	db := orm.BackRepo.BackRepoSliceOfPointerToGongStructField.GetDB()

	// Get model if exist
	var sliceofpointertogongstructfieldDB orm.SliceOfPointerToGongStructFieldDB

	// fetch the sliceofpointertogongstructfield
	query := db.First(&sliceofpointertogongstructfieldDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.SliceOfPointerToGongStructFieldAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	sliceofpointertogongstructfieldDB.CopyBasicFieldsFromSliceOfPointerToGongStructField(&input.SliceOfPointerToGongStructField)
	sliceofpointertogongstructfieldDB.SliceOfPointerToGongStructFieldPointersEnconding = input.SliceOfPointerToGongStructFieldPointersEnconding

	query = db.Model(&sliceofpointertogongstructfieldDB).Updates(sliceofpointertogongstructfieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	sliceofpointertogongstructfieldNew := new(models.SliceOfPointerToGongStructField)
	sliceofpointertogongstructfieldDB.CopyBasicFieldsToSliceOfPointerToGongStructField(sliceofpointertogongstructfieldNew)

	// get stage instance from DB instance, and call callback function
	sliceofpointertogongstructfieldOld := (*orm.BackRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[sliceofpointertogongstructfieldDB.ID]
	if sliceofpointertogongstructfieldOld != nil {
		models.AfterUpdateFromFront(&models.Stage, sliceofpointertogongstructfieldOld, sliceofpointertogongstructfieldNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the sliceofpointertogongstructfieldDB
	c.JSON(http.StatusOK, sliceofpointertogongstructfieldDB)
}

// DeleteSliceOfPointerToGongStructField
//
// swagger:route DELETE /sliceofpointertogongstructfields/{ID} sliceofpointertogongstructfields deleteSliceOfPointerToGongStructField
//
// # Delete a sliceofpointertogongstructfield
//
// default: genericError
//
//	200: sliceofpointertogongstructfieldDBResponse
func DeleteSliceOfPointerToGongStructField(c *gin.Context) {
	db := orm.BackRepo.BackRepoSliceOfPointerToGongStructField.GetDB()

	// Get model if exist
	var sliceofpointertogongstructfieldDB orm.SliceOfPointerToGongStructFieldDB
	if err := db.First(&sliceofpointertogongstructfieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&sliceofpointertogongstructfieldDB)

	// get an instance (not staged) from DB instance, and call callback function
	sliceofpointertogongstructfieldDeleted := new(models.SliceOfPointerToGongStructField)
	sliceofpointertogongstructfieldDB.CopyBasicFieldsToSliceOfPointerToGongStructField(sliceofpointertogongstructfieldDeleted)

	// get stage instance from DB instance, and call callback function
	sliceofpointertogongstructfieldStaged := (*orm.BackRepo.BackRepoSliceOfPointerToGongStructField.Map_SliceOfPointerToGongStructFieldDBID_SliceOfPointerToGongStructFieldPtr)[sliceofpointertogongstructfieldDB.ID]
	if sliceofpointertogongstructfieldStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, sliceofpointertogongstructfieldStaged, sliceofpointertogongstructfieldDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
