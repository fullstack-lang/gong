// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongTimeField__dummysDeclaration__ models.GongTimeField
var __GongTimeField_time__dummyDeclaration time.Duration

// An GongTimeFieldID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongTimeField updateGongTimeField deleteGongTimeField
type GongTimeFieldID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongTimeFieldInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongTimeField updateGongTimeField
type GongTimeFieldInput struct {
	// The GongTimeField to submit or modify
	// in: body
	GongTimeField *orm.GongTimeFieldAPI
}

// GetGongTimeFields
//
// swagger:route GET /gongtimefields gongtimefields getGongTimeFields
//
// # Get all gongtimefields
//
// Responses:
// default: genericError
//
//	200: gongtimefieldDBResponse
func GetGongTimeFields(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongTimeField.GetDB()

	// source slice
	var gongtimefieldDBs []orm.GongTimeFieldDB
	query := db.Find(&gongtimefieldDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gongtimefieldAPIs := make([]orm.GongTimeFieldAPI, 0)

	// for each gongtimefield, update fields from the database nullable fields
	for idx := range gongtimefieldDBs {
		gongtimefieldDB := &gongtimefieldDBs[idx]
		_ = gongtimefieldDB
		var gongtimefieldAPI orm.GongTimeFieldAPI

		// insertion point for updating fields
		gongtimefieldAPI.ID = gongtimefieldDB.ID
		gongtimefieldDB.CopyBasicFieldsToGongTimeField(&gongtimefieldAPI.GongTimeField)
		gongtimefieldAPI.GongTimeFieldPointersEnconding = gongtimefieldDB.GongTimeFieldPointersEnconding
		gongtimefieldAPIs = append(gongtimefieldAPIs, gongtimefieldAPI)
	}

	c.JSON(http.StatusOK, gongtimefieldAPIs)
}

// PostGongTimeField
//
// swagger:route POST /gongtimefields gongtimefields postGongTimeField
//
// Creates a gongtimefield
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostGongTimeField(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongTimeField.GetDB()

	// Validate input
	var input orm.GongTimeFieldAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongtimefield
	gongtimefieldDB := orm.GongTimeFieldDB{}
	gongtimefieldDB.GongTimeFieldPointersEnconding = input.GongTimeFieldPointersEnconding
	gongtimefieldDB.CopyBasicFieldsFromGongTimeField(&input.GongTimeField)

	query := db.Create(&gongtimefieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoGongTimeField.CheckoutPhaseOneInstance(&gongtimefieldDB)
	gongtimefield := (*orm.BackRepo.BackRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[gongtimefieldDB.ID]

	if gongtimefield != nil {
		models.AfterCreateFromFront(&models.Stage, gongtimefield)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gongtimefieldDB)
}

// GetGongTimeField
//
// swagger:route GET /gongtimefields/{ID} gongtimefields getGongTimeField
//
// Gets the details for a gongtimefield.
//
// Responses:
// default: genericError
//
//	200: gongtimefieldDBResponse
func GetGongTimeField(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongTimeField.GetDB()

	// Get gongtimefieldDB in DB
	var gongtimefieldDB orm.GongTimeFieldDB
	if err := db.First(&gongtimefieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gongtimefieldAPI orm.GongTimeFieldAPI
	gongtimefieldAPI.ID = gongtimefieldDB.ID
	gongtimefieldAPI.GongTimeFieldPointersEnconding = gongtimefieldDB.GongTimeFieldPointersEnconding
	gongtimefieldDB.CopyBasicFieldsToGongTimeField(&gongtimefieldAPI.GongTimeField)

	c.JSON(http.StatusOK, gongtimefieldAPI)
}

// UpdateGongTimeField
//
// swagger:route PATCH /gongtimefields/{ID} gongtimefields updateGongTimeField
//
// # Update a gongtimefield
//
// Responses:
// default: genericError
//
//	200: gongtimefieldDBResponse
func UpdateGongTimeField(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongTimeField.GetDB()

	// Get model if exist
	var gongtimefieldDB orm.GongTimeFieldDB

	// fetch the gongtimefield
	query := db.First(&gongtimefieldDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongTimeFieldAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gongtimefieldDB.CopyBasicFieldsFromGongTimeField(&input.GongTimeField)
	gongtimefieldDB.GongTimeFieldPointersEnconding = input.GongTimeFieldPointersEnconding

	query = db.Model(&gongtimefieldDB).Updates(gongtimefieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	gongtimefieldNew := new(models.GongTimeField)
	gongtimefieldDB.CopyBasicFieldsToGongTimeField(gongtimefieldNew)

	// get stage instance from DB instance, and call callback function
	gongtimefieldOld := (*orm.BackRepo.BackRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[gongtimefieldDB.ID]
	if gongtimefieldOld != nil {
		models.AfterUpdateFromFront(&models.Stage, gongtimefieldOld, gongtimefieldNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gongtimefieldDB
	c.JSON(http.StatusOK, gongtimefieldDB)
}

// DeleteGongTimeField
//
// swagger:route DELETE /gongtimefields/{ID} gongtimefields deleteGongTimeField
//
// # Delete a gongtimefield
//
// default: genericError
//
//	200: gongtimefieldDBResponse
func DeleteGongTimeField(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongTimeField.GetDB()

	// Get model if exist
	var gongtimefieldDB orm.GongTimeFieldDB
	if err := db.First(&gongtimefieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongtimefieldDB)

	// get an instance (not staged) from DB instance, and call callback function
	gongtimefieldDeleted := new(models.GongTimeField)
	gongtimefieldDB.CopyBasicFieldsToGongTimeField(gongtimefieldDeleted)

	// get stage instance from DB instance, and call callback function
	gongtimefieldStaged := (*orm.BackRepo.BackRepoGongTimeField.Map_GongTimeFieldDBID_GongTimeFieldPtr)[gongtimefieldDB.ID]
	if gongtimefieldStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, gongtimefieldStaged, gongtimefieldDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
