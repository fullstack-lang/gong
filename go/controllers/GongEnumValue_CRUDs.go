// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongEnumValue__dummysDeclaration__ models.GongEnumValue
var __GongEnumValue_time__dummyDeclaration time.Duration

// An GongEnumValueID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongEnumValue updateGongEnumValue deleteGongEnumValue
type GongEnumValueID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongEnumValueInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongEnumValue updateGongEnumValue
type GongEnumValueInput struct {
	// The GongEnumValue to submit or modify
	// in: body
	GongEnumValue *orm.GongEnumValueAPI
}

// GetGongEnumValues
//
// swagger:route GET /gongenumvalues gongenumvalues getGongEnumValues
//
// # Get all gongenumvalues
//
// Responses:
// default: genericError
//
//	200: gongenumvalueDBResponse
func GetGongEnumValues(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumValue.GetDB()

	// source slice
	var gongenumvalueDBs []orm.GongEnumValueDB
	query := db.Find(&gongenumvalueDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gongenumvalueAPIs := make([]orm.GongEnumValueAPI, 0)

	// for each gongenumvalue, update fields from the database nullable fields
	for idx := range gongenumvalueDBs {
		gongenumvalueDB := &gongenumvalueDBs[idx]
		_ = gongenumvalueDB
		var gongenumvalueAPI orm.GongEnumValueAPI

		// insertion point for updating fields
		gongenumvalueAPI.ID = gongenumvalueDB.ID
		gongenumvalueDB.CopyBasicFieldsToGongEnumValue(&gongenumvalueAPI.GongEnumValue)
		gongenumvalueAPI.GongEnumValuePointersEnconding = gongenumvalueDB.GongEnumValuePointersEnconding
		gongenumvalueAPIs = append(gongenumvalueAPIs, gongenumvalueAPI)
	}

	c.JSON(http.StatusOK, gongenumvalueAPIs)
}

// PostGongEnumValue
//
// swagger:route POST /gongenumvalues gongenumvalues postGongEnumValue
//
// Creates a gongenumvalue
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostGongEnumValue(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumValue.GetDB()

	// Validate input
	var input orm.GongEnumValueAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongenumvalue
	gongenumvalueDB := orm.GongEnumValueDB{}
	gongenumvalueDB.GongEnumValuePointersEnconding = input.GongEnumValuePointersEnconding
	gongenumvalueDB.CopyBasicFieldsFromGongEnumValue(&input.GongEnumValue)

	query := db.Create(&gongenumvalueDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoGongEnumValue.CheckoutPhaseOneInstance(&gongenumvalueDB)
	gongenumvalue := (*orm.BackRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB.ID]

	if gongenumvalue != nil {
		models.AfterCreateFromFront(&models.Stage, gongenumvalue)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gongenumvalueDB)
}

// GetGongEnumValue
//
// swagger:route GET /gongenumvalues/{ID} gongenumvalues getGongEnumValue
//
// Gets the details for a gongenumvalue.
//
// Responses:
// default: genericError
//
//	200: gongenumvalueDBResponse
func GetGongEnumValue(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumValue.GetDB()

	// Get gongenumvalueDB in DB
	var gongenumvalueDB orm.GongEnumValueDB
	if err := db.First(&gongenumvalueDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gongenumvalueAPI orm.GongEnumValueAPI
	gongenumvalueAPI.ID = gongenumvalueDB.ID
	gongenumvalueAPI.GongEnumValuePointersEnconding = gongenumvalueDB.GongEnumValuePointersEnconding
	gongenumvalueDB.CopyBasicFieldsToGongEnumValue(&gongenumvalueAPI.GongEnumValue)

	c.JSON(http.StatusOK, gongenumvalueAPI)
}

// UpdateGongEnumValue
//
// swagger:route PATCH /gongenumvalues/{ID} gongenumvalues updateGongEnumValue
//
// # Update a gongenumvalue
//
// Responses:
// default: genericError
//
//	200: gongenumvalueDBResponse
func UpdateGongEnumValue(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumValue.GetDB()

	// Get model if exist
	var gongenumvalueDB orm.GongEnumValueDB

	// fetch the gongenumvalue
	query := db.First(&gongenumvalueDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongEnumValueAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gongenumvalueDB.CopyBasicFieldsFromGongEnumValue(&input.GongEnumValue)
	gongenumvalueDB.GongEnumValuePointersEnconding = input.GongEnumValuePointersEnconding

	query = db.Model(&gongenumvalueDB).Updates(gongenumvalueDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	gongenumvalueNew := new(models.GongEnumValue)
	gongenumvalueDB.CopyBasicFieldsToGongEnumValue(gongenumvalueNew)

	// get stage instance from DB instance, and call callback function
	gongenumvalueOld := (*orm.BackRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB.ID]
	if gongenumvalueOld != nil {
		models.AfterUpdateFromFront(&models.Stage, gongenumvalueOld, gongenumvalueNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gongenumvalueDB
	c.JSON(http.StatusOK, gongenumvalueDB)
}

// DeleteGongEnumValue
//
// swagger:route DELETE /gongenumvalues/{ID} gongenumvalues deleteGongEnumValue
//
// # Delete a gongenumvalue
//
// default: genericError
//
//	200: gongenumvalueDBResponse
func DeleteGongEnumValue(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnumValue.GetDB()

	// Get model if exist
	var gongenumvalueDB orm.GongEnumValueDB
	if err := db.First(&gongenumvalueDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongenumvalueDB)

	// get an instance (not staged) from DB instance, and call callback function
	gongenumvalueDeleted := new(models.GongEnumValue)
	gongenumvalueDB.CopyBasicFieldsToGongEnumValue(gongenumvalueDeleted)

	// get stage instance from DB instance, and call callback function
	gongenumvalueStaged := (*orm.BackRepo.BackRepoGongEnumValue.Map_GongEnumValueDBID_GongEnumValuePtr)[gongenumvalueDB.ID]
	if gongenumvalueStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, gongenumvalueStaged, gongenumvalueDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
