// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongEnum__dummysDeclaration__ models.GongEnum
var __GongEnum_time__dummyDeclaration time.Duration

// An GongEnumID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongEnum updateGongEnum deleteGongEnum
type GongEnumID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongEnumInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongEnum updateGongEnum
type GongEnumInput struct {
	// The GongEnum to submit or modify
	// in: body
	GongEnum *orm.GongEnumAPI
}

// GetGongEnums
//
// swagger:route GET /gongenums gongenums getGongEnums
//
// # Get all gongenums
//
// Responses:
// default: genericError
//
//	200: gongenumDBResponse
func GetGongEnums(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnum.GetDB()

	// source slice
	var gongenumDBs []orm.GongEnumDB
	query := db.Find(&gongenumDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gongenumAPIs := make([]orm.GongEnumAPI, 0)

	// for each gongenum, update fields from the database nullable fields
	for idx := range gongenumDBs {
		gongenumDB := &gongenumDBs[idx]
		_ = gongenumDB
		var gongenumAPI orm.GongEnumAPI

		// insertion point for updating fields
		gongenumAPI.ID = gongenumDB.ID
		gongenumDB.CopyBasicFieldsToGongEnum(&gongenumAPI.GongEnum)
		gongenumAPI.GongEnumPointersEnconding = gongenumDB.GongEnumPointersEnconding
		gongenumAPIs = append(gongenumAPIs, gongenumAPI)
	}

	c.JSON(http.StatusOK, gongenumAPIs)
}

// PostGongEnum
//
// swagger:route POST /gongenums gongenums postGongEnum
//
// Creates a gongenum
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostGongEnum(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnum.GetDB()

	// Validate input
	var input orm.GongEnumAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongenum
	gongenumDB := orm.GongEnumDB{}
	gongenumDB.GongEnumPointersEnconding = input.GongEnumPointersEnconding
	gongenumDB.CopyBasicFieldsFromGongEnum(&input.GongEnum)

	query := db.Create(&gongenumDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoGongEnum.CheckoutPhaseOneInstance(&gongenumDB)
	gongenum := (*orm.BackRepo.BackRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID]

	if gongenum != nil {
		models.AfterCreateFromFront(&models.Stage, gongenum)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gongenumDB)
}

// GetGongEnum
//
// swagger:route GET /gongenums/{ID} gongenums getGongEnum
//
// Gets the details for a gongenum.
//
// Responses:
// default: genericError
//
//	200: gongenumDBResponse
func GetGongEnum(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnum.GetDB()

	// Get gongenumDB in DB
	var gongenumDB orm.GongEnumDB
	if err := db.First(&gongenumDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gongenumAPI orm.GongEnumAPI
	gongenumAPI.ID = gongenumDB.ID
	gongenumAPI.GongEnumPointersEnconding = gongenumDB.GongEnumPointersEnconding
	gongenumDB.CopyBasicFieldsToGongEnum(&gongenumAPI.GongEnum)

	c.JSON(http.StatusOK, gongenumAPI)
}

// UpdateGongEnum
//
// swagger:route PATCH /gongenums/{ID} gongenums updateGongEnum
//
// # Update a gongenum
//
// Responses:
// default: genericError
//
//	200: gongenumDBResponse
func UpdateGongEnum(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnum.GetDB()

	// Get model if exist
	var gongenumDB orm.GongEnumDB

	// fetch the gongenum
	query := db.First(&gongenumDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongEnumAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gongenumDB.CopyBasicFieldsFromGongEnum(&input.GongEnum)
	gongenumDB.GongEnumPointersEnconding = input.GongEnumPointersEnconding

	query = db.Model(&gongenumDB).Updates(gongenumDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	gongenumNew := new(models.GongEnum)
	gongenumDB.CopyBasicFieldsToGongEnum(gongenumNew)

	// get stage instance from DB instance, and call callback function
	gongenumOld := (*orm.BackRepo.BackRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID]
	if gongenumOld != nil {
		models.AfterUpdateFromFront(&models.Stage, gongenumOld, gongenumNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gongenumDB
	c.JSON(http.StatusOK, gongenumDB)
}

// DeleteGongEnum
//
// swagger:route DELETE /gongenums/{ID} gongenums deleteGongEnum
//
// # Delete a gongenum
//
// default: genericError
//
//	200: gongenumDBResponse
func DeleteGongEnum(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongEnum.GetDB()

	// Get model if exist
	var gongenumDB orm.GongEnumDB
	if err := db.First(&gongenumDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongenumDB)

	// get an instance (not staged) from DB instance, and call callback function
	gongenumDeleted := new(models.GongEnum)
	gongenumDB.CopyBasicFieldsToGongEnum(gongenumDeleted)

	// get stage instance from DB instance, and call callback function
	gongenumStaged := (*orm.BackRepo.BackRepoGongEnum.Map_GongEnumDBID_GongEnumPtr)[gongenumDB.ID]
	if gongenumStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, gongenumStaged, gongenumDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
