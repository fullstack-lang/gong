// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __GongBasicField__dummysDeclaration__ models.GongBasicField
var __GongBasicField_time__dummyDeclaration time.Duration

// An GongBasicFieldID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongBasicField updateGongBasicField deleteGongBasicField
type GongBasicFieldID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongBasicFieldInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongBasicField updateGongBasicField
type GongBasicFieldInput struct {
	// The GongBasicField to submit or modify
	// in: body
	GongBasicField *orm.GongBasicFieldAPI
}

// GetGongBasicFields
//
// swagger:route GET /gongbasicfields gongbasicfields getGongBasicFields
//
// Get all gongbasicfields
//
// Responses:
//    default: genericError
//        200: gongbasicfieldDBsResponse
func GetGongBasicFields(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gongbasicfields []orm.GongBasicFieldDB
	query := db.Find(&gongbasicfields)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gongbasicfield, update fields from the database nullable fields
	for idx := range gongbasicfields {
		gongbasicfield := &gongbasicfields[idx]
		_ = gongbasicfield
		// insertion point for updating fields
		if gongbasicfield.Name_Data.Valid {
			gongbasicfield.Name = gongbasicfield.Name_Data.String
		}

		if gongbasicfield.BasicKindName_Data.Valid {
			gongbasicfield.BasicKindName = gongbasicfield.BasicKindName_Data.String
		}

		if gongbasicfield.DeclaredType_Data.Valid {
			gongbasicfield.DeclaredType = gongbasicfield.DeclaredType_Data.String
		}

	}

	c.JSON(http.StatusOK, gongbasicfields)
}

// PostGongBasicField
//
// swagger:route POST /gongbasicfields gongbasicfields postGongBasicField
//
// Creates a gongbasicfield
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongbasicfieldDBResponse
func PostGongBasicField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GongBasicFieldAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongbasicfield
	gongbasicfieldDB := orm.GongBasicFieldDB{}
	gongbasicfieldDB.GongBasicFieldAPI = input
	// insertion point for nullable field set
	gongbasicfieldDB.Name_Data.String = input.Name
	gongbasicfieldDB.Name_Data.Valid = true

	gongbasicfieldDB.BasicKindName_Data.String = input.BasicKindName
	gongbasicfieldDB.BasicKindName_Data.Valid = true

	gongbasicfieldDB.DeclaredType_Data.String = input.DeclaredType
	gongbasicfieldDB.DeclaredType_Data.Valid = true

	query := db.Create(&gongbasicfieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gongbasicfieldDB)
}

// GetGongBasicField
//
// swagger:route GET /gongbasicfields/{ID} gongbasicfields getGongBasicField
//
// Gets the details for a gongbasicfield.
//
// Responses:
//    default: genericError
//        200: gongbasicfieldDBResponse
func GetGongBasicField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gongbasicfield in DB
	var gongbasicfield orm.GongBasicFieldDB
	if err := db.First(&gongbasicfield, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gongbasicfield.Name_Data.Valid {
		gongbasicfield.Name = gongbasicfield.Name_Data.String
	}

	if gongbasicfield.BasicKindName_Data.Valid {
		gongbasicfield.BasicKindName = gongbasicfield.BasicKindName_Data.String
	}

	if gongbasicfield.DeclaredType_Data.Valid {
		gongbasicfield.DeclaredType = gongbasicfield.DeclaredType_Data.String
	}

	c.JSON(http.StatusOK, gongbasicfield)
}

// UpdateGongBasicField
//
// swagger:route PATCH /gongbasicfields/{ID} gongbasicfields updateGongBasicField
//
// Update a gongbasicfield
//
// Responses:
//    default: genericError
//        200: gongbasicfieldDBResponse
func UpdateGongBasicField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongbasicfieldDB orm.GongBasicFieldDB

	// fetch the gongbasicfield
	query := db.First(&gongbasicfieldDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongBasicFieldAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.BasicKindName_Data.String = input.BasicKindName
	input.BasicKindName_Data.Valid = true

	input.DeclaredType_Data.String = input.DeclaredType
	input.DeclaredType_Data.Valid = true

	query = db.Model(&gongbasicfieldDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the gongbasicfieldDB
	c.JSON(http.StatusOK, gongbasicfieldDB)
}

// DeleteGongBasicField
//
// swagger:route DELETE /gongbasicfields/{ID} gongbasicfields deleteGongBasicField
//
// Delete a gongbasicfield
//
// Responses:
//    default: genericError
func DeleteGongBasicField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongbasicfieldDB orm.GongBasicFieldDB
	if err := db.First(&gongbasicfieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongbasicfieldDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
