// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __GongStruct__dummysDeclaration__ models.GongStruct
var __GongStruct_time__dummyDeclaration time.Duration

// An GongStructID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongStruct updateGongStruct deleteGongStruct
type GongStructID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongStructInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongStruct updateGongStruct
type GongStructInput struct {
	// The GongStruct to submit or modify
	// in: body
	GongStruct *orm.GongStructAPI
}

// GetGongStructs
//
// swagger:route GET /gongstructs gongstructs getGongStructs
//
// Get all gongstructs
//
// Responses:
//    default: genericError
//        200: gongstructDBsResponse
func GetGongStructs(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gongstructs []orm.GongStructDB
	query := db.Find(&gongstructs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gongstruct, update fields from the database nullable fields
	for idx := range gongstructs {
		gongstruct := &gongstructs[idx]
		_ = gongstruct
		// insertion point for updating fields
		if gongstruct.Name_Data.Valid {
			gongstruct.Name = gongstruct.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, gongstructs)
}

// PostGongStruct
//
// swagger:route POST /gongstructs gongstructs postGongStruct
//
// Creates a gongstruct
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongstructDBResponse
func PostGongStruct(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GongStructAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongstruct
	gongstructDB := orm.GongStructDB{}
	gongstructDB.GongStructAPI = input
	// insertion point for nullable field set
	gongstructDB.Name_Data.String = input.Name
	gongstructDB.Name_Data.Valid = true

	query := db.Create(&gongstructDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gongstructDB)
}

// GetGongStruct
//
// swagger:route GET /gongstructs/{ID} gongstructs getGongStruct
//
// Gets the details for a gongstruct.
//
// Responses:
//    default: genericError
//        200: gongstructDBResponse
func GetGongStruct(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gongstruct in DB
	var gongstruct orm.GongStructDB
	if err := db.First(&gongstruct, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gongstruct.Name_Data.Valid {
		gongstruct.Name = gongstruct.Name_Data.String
	}

	c.JSON(http.StatusOK, gongstruct)
}

// UpdateGongStruct
//
// swagger:route PATCH /gongstructs/{ID} gongstructs updateGongStruct
//
// Update a gongstruct
//
// Responses:
//    default: genericError
//        200: gongstructDBResponse
func UpdateGongStruct(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongstructDB orm.GongStructDB

	// fetch the gongstruct
	query := db.First(&gongstructDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongStructAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&gongstructDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the gongstructDB
	c.JSON(http.StatusOK, gongstructDB)
}

// DeleteGongStruct
//
// swagger:route DELETE /gongstructs/{ID} gongstructs deleteGongStruct
//
// Delete a gongstruct
//
// Responses:
//    default: genericError
func DeleteGongStruct(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var gongstructDB orm.GongStructDB
	if err := db.First(&gongstructDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongstructDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
