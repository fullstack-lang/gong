// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Meta__dummysDeclaration__ models.Meta
var __Meta_time__dummyDeclaration time.Duration

// An MetaID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getMeta updateMeta deleteMeta
type MetaID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// MetaInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postMeta updateMeta
type MetaInput struct {
	// The Meta to submit or modify
	// in: body
	Meta *orm.MetaAPI
}

// GetMetas
//
// swagger:route GET /metas metas getMetas
//
// # Get all metas
//
// Responses:
// default: genericError
//
//	200: metaDBResponse
func GetMetas(c *gin.Context) {
	db := orm.BackRepo.BackRepoMeta.GetDB()

	// source slice
	var metaDBs []orm.MetaDB
	query := db.Find(&metaDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	metaAPIs := make([]orm.MetaAPI, 0)

	// for each meta, update fields from the database nullable fields
	for idx := range metaDBs {
		metaDB := &metaDBs[idx]
		_ = metaDB
		var metaAPI orm.MetaAPI

		// insertion point for updating fields
		metaAPI.ID = metaDB.ID
		metaDB.CopyBasicFieldsToMeta(&metaAPI.Meta)
		metaAPI.MetaPointersEnconding = metaDB.MetaPointersEnconding
		metaAPIs = append(metaAPIs, metaAPI)
	}

	c.JSON(http.StatusOK, metaAPIs)
}

// PostMeta
//
// swagger:route POST /metas metas postMeta
//
// Creates a meta
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostMeta(c *gin.Context) {
	db := orm.BackRepo.BackRepoMeta.GetDB()

	// Validate input
	var input orm.MetaAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create meta
	metaDB := orm.MetaDB{}
	metaDB.MetaPointersEnconding = input.MetaPointersEnconding
	metaDB.CopyBasicFieldsFromMeta(&input.Meta)

	query := db.Create(&metaDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoMeta.CheckoutPhaseOneInstance(&metaDB)
	meta := (*orm.BackRepo.BackRepoMeta.Map_MetaDBID_MetaPtr)[metaDB.ID]

	if meta != nil {
		models.AfterCreateFromFront(&models.Stage, meta)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, metaDB)
}

// GetMeta
//
// swagger:route GET /metas/{ID} metas getMeta
//
// Gets the details for a meta.
//
// Responses:
// default: genericError
//
//	200: metaDBResponse
func GetMeta(c *gin.Context) {
	db := orm.BackRepo.BackRepoMeta.GetDB()

	// Get metaDB in DB
	var metaDB orm.MetaDB
	if err := db.First(&metaDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var metaAPI orm.MetaAPI
	metaAPI.ID = metaDB.ID
	metaAPI.MetaPointersEnconding = metaDB.MetaPointersEnconding
	metaDB.CopyBasicFieldsToMeta(&metaAPI.Meta)

	c.JSON(http.StatusOK, metaAPI)
}

// UpdateMeta
//
// swagger:route PATCH /metas/{ID} metas updateMeta
//
// # Update a meta
//
// Responses:
// default: genericError
//
//	200: metaDBResponse
func UpdateMeta(c *gin.Context) {
	db := orm.BackRepo.BackRepoMeta.GetDB()

	// Get model if exist
	var metaDB orm.MetaDB

	// fetch the meta
	query := db.First(&metaDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.MetaAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	metaDB.CopyBasicFieldsFromMeta(&input.Meta)
	metaDB.MetaPointersEnconding = input.MetaPointersEnconding

	query = db.Model(&metaDB).Updates(metaDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	metaNew := new(models.Meta)
	metaDB.CopyBasicFieldsToMeta(metaNew)

	// get stage instance from DB instance, and call callback function
	metaOld := (*orm.BackRepo.BackRepoMeta.Map_MetaDBID_MetaPtr)[metaDB.ID]
	if metaOld != nil {
		models.AfterUpdateFromFront(&models.Stage, metaOld, metaNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the metaDB
	c.JSON(http.StatusOK, metaDB)
}

// DeleteMeta
//
// swagger:route DELETE /metas/{ID} metas deleteMeta
//
// # Delete a meta
//
// default: genericError
//
//	200: metaDBResponse
func DeleteMeta(c *gin.Context) {
	db := orm.BackRepo.BackRepoMeta.GetDB()

	// Get model if exist
	var metaDB orm.MetaDB
	if err := db.First(&metaDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&metaDB)

	// get an instance (not staged) from DB instance, and call callback function
	metaDeleted := new(models.Meta)
	metaDB.CopyBasicFieldsToMeta(metaDeleted)

	// get stage instance from DB instance, and call callback function
	metaStaged := (*orm.BackRepo.BackRepoMeta.Map_MetaDBID_MetaPtr)[metaDB.ID]
	if metaStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, metaStaged, metaDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
