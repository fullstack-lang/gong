// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __MetaReference__dummysDeclaration__ models.MetaReference
var __MetaReference_time__dummyDeclaration time.Duration

// An MetaReferenceID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getMetaReference updateMetaReference deleteMetaReference
type MetaReferenceID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// MetaReferenceInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postMetaReference updateMetaReference
type MetaReferenceInput struct {
	// The MetaReference to submit or modify
	// in: body
	MetaReference *orm.MetaReferenceAPI
}

// GetMetaReferences
//
// swagger:route GET /metareferences metareferences getMetaReferences
//
// # Get all metareferences
//
// Responses:
// default: genericError
//
//	200: metareferenceDBResponse
func GetMetaReferences(c *gin.Context) {
	db := orm.BackRepo.BackRepoMetaReference.GetDB()

	// source slice
	var metareferenceDBs []orm.MetaReferenceDB
	query := db.Find(&metareferenceDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	metareferenceAPIs := make([]orm.MetaReferenceAPI, 0)

	// for each metareference, update fields from the database nullable fields
	for idx := range metareferenceDBs {
		metareferenceDB := &metareferenceDBs[idx]
		_ = metareferenceDB
		var metareferenceAPI orm.MetaReferenceAPI

		// insertion point for updating fields
		metareferenceAPI.ID = metareferenceDB.ID
		metareferenceDB.CopyBasicFieldsToMetaReference(&metareferenceAPI.MetaReference)
		metareferenceAPI.MetaReferencePointersEnconding = metareferenceDB.MetaReferencePointersEnconding
		metareferenceAPIs = append(metareferenceAPIs, metareferenceAPI)
	}

	c.JSON(http.StatusOK, metareferenceAPIs)
}

// PostMetaReference
//
// swagger:route POST /metareferences metareferences postMetaReference
//
// Creates a metareference
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostMetaReference(c *gin.Context) {
	db := orm.BackRepo.BackRepoMetaReference.GetDB()

	// Validate input
	var input orm.MetaReferenceAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create metareference
	metareferenceDB := orm.MetaReferenceDB{}
	metareferenceDB.MetaReferencePointersEnconding = input.MetaReferencePointersEnconding
	metareferenceDB.CopyBasicFieldsFromMetaReference(&input.MetaReference)

	query := db.Create(&metareferenceDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoMetaReference.CheckoutPhaseOneInstance(&metareferenceDB)
	metareference := (*orm.BackRepo.BackRepoMetaReference.Map_MetaReferenceDBID_MetaReferencePtr)[metareferenceDB.ID]

	if metareference != nil {
		models.AfterCreateFromFront(&models.Stage, metareference)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, metareferenceDB)
}

// GetMetaReference
//
// swagger:route GET /metareferences/{ID} metareferences getMetaReference
//
// Gets the details for a metareference.
//
// Responses:
// default: genericError
//
//	200: metareferenceDBResponse
func GetMetaReference(c *gin.Context) {
	db := orm.BackRepo.BackRepoMetaReference.GetDB()

	// Get metareferenceDB in DB
	var metareferenceDB orm.MetaReferenceDB
	if err := db.First(&metareferenceDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var metareferenceAPI orm.MetaReferenceAPI
	metareferenceAPI.ID = metareferenceDB.ID
	metareferenceAPI.MetaReferencePointersEnconding = metareferenceDB.MetaReferencePointersEnconding
	metareferenceDB.CopyBasicFieldsToMetaReference(&metareferenceAPI.MetaReference)

	c.JSON(http.StatusOK, metareferenceAPI)
}

// UpdateMetaReference
//
// swagger:route PATCH /metareferences/{ID} metareferences updateMetaReference
//
// # Update a metareference
//
// Responses:
// default: genericError
//
//	200: metareferenceDBResponse
func UpdateMetaReference(c *gin.Context) {
	db := orm.BackRepo.BackRepoMetaReference.GetDB()

	// Get model if exist
	var metareferenceDB orm.MetaReferenceDB

	// fetch the metareference
	query := db.First(&metareferenceDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.MetaReferenceAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	metareferenceDB.CopyBasicFieldsFromMetaReference(&input.MetaReference)
	metareferenceDB.MetaReferencePointersEnconding = input.MetaReferencePointersEnconding

	query = db.Model(&metareferenceDB).Updates(metareferenceDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	metareferenceNew := new(models.MetaReference)
	metareferenceDB.CopyBasicFieldsToMetaReference(metareferenceNew)

	// get stage instance from DB instance, and call callback function
	metareferenceOld := (*orm.BackRepo.BackRepoMetaReference.Map_MetaReferenceDBID_MetaReferencePtr)[metareferenceDB.ID]
	if metareferenceOld != nil {
		models.AfterUpdateFromFront(&models.Stage, metareferenceOld, metareferenceNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the metareferenceDB
	c.JSON(http.StatusOK, metareferenceDB)
}

// DeleteMetaReference
//
// swagger:route DELETE /metareferences/{ID} metareferences deleteMetaReference
//
// # Delete a metareference
//
// default: genericError
//
//	200: metareferenceDBResponse
func DeleteMetaReference(c *gin.Context) {
	db := orm.BackRepo.BackRepoMetaReference.GetDB()

	// Get model if exist
	var metareferenceDB orm.MetaReferenceDB
	if err := db.First(&metareferenceDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&metareferenceDB)

	// get an instance (not staged) from DB instance, and call callback function
	metareferenceDeleted := new(models.MetaReference)
	metareferenceDB.CopyBasicFieldsToMetaReference(metareferenceDeleted)

	// get stage instance from DB instance, and call callback function
	metareferenceStaged := (*orm.BackRepo.BackRepoMetaReference.Map_MetaReferenceDBID_MetaReferencePtr)[metareferenceDB.ID]
	if metareferenceStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, metareferenceStaged, metareferenceDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
