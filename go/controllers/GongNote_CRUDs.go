// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongNote__dummysDeclaration__ models.GongNote
var __GongNote_time__dummyDeclaration time.Duration

// An GongNoteID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongNote updateGongNote deleteGongNote
type GongNoteID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongNoteInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongNote updateGongNote
type GongNoteInput struct {
	// The GongNote to submit or modify
	// in: body
	GongNote *orm.GongNoteAPI
}

// GetGongNotes
//
// swagger:route GET /gongnotes gongnotes getGongNotes
//
// # Get all gongnotes
//
// Responses:
// default: genericError
//
//	200: gongnoteDBResponse
func GetGongNotes(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongNote.GetDB()

	// source slice
	var gongnoteDBs []orm.GongNoteDB
	query := db.Find(&gongnoteDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gongnoteAPIs := make([]orm.GongNoteAPI, 0)

	// for each gongnote, update fields from the database nullable fields
	for idx := range gongnoteDBs {
		gongnoteDB := &gongnoteDBs[idx]
		_ = gongnoteDB
		var gongnoteAPI orm.GongNoteAPI

		// insertion point for updating fields
		gongnoteAPI.ID = gongnoteDB.ID
		gongnoteDB.CopyBasicFieldsToGongNote(&gongnoteAPI.GongNote)
		gongnoteAPI.GongNotePointersEnconding = gongnoteDB.GongNotePointersEnconding
		gongnoteAPIs = append(gongnoteAPIs, gongnoteAPI)
	}

	c.JSON(http.StatusOK, gongnoteAPIs)
}

// PostGongNote
//
// swagger:route POST /gongnotes gongnotes postGongNote
//
// Creates a gongnote
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostGongNote(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongNote.GetDB()

	// Validate input
	var input orm.GongNoteAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongnote
	gongnoteDB := orm.GongNoteDB{}
	gongnoteDB.GongNotePointersEnconding = input.GongNotePointersEnconding
	gongnoteDB.CopyBasicFieldsFromGongNote(&input.GongNote)

	query := db.Create(&gongnoteDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoGongNote.CheckoutPhaseOneInstance(&gongnoteDB)
	gongnote := (*orm.BackRepo.BackRepoGongNote.Map_GongNoteDBID_GongNotePtr)[gongnoteDB.ID]

	if gongnote != nil {
		models.AfterCreateFromFront(&models.Stage, gongnote)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gongnoteDB)
}

// GetGongNote
//
// swagger:route GET /gongnotes/{ID} gongnotes getGongNote
//
// Gets the details for a gongnote.
//
// Responses:
// default: genericError
//
//	200: gongnoteDBResponse
func GetGongNote(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongNote.GetDB()

	// Get gongnoteDB in DB
	var gongnoteDB orm.GongNoteDB
	if err := db.First(&gongnoteDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gongnoteAPI orm.GongNoteAPI
	gongnoteAPI.ID = gongnoteDB.ID
	gongnoteAPI.GongNotePointersEnconding = gongnoteDB.GongNotePointersEnconding
	gongnoteDB.CopyBasicFieldsToGongNote(&gongnoteAPI.GongNote)

	c.JSON(http.StatusOK, gongnoteAPI)
}

// UpdateGongNote
//
// swagger:route PATCH /gongnotes/{ID} gongnotes updateGongNote
//
// # Update a gongnote
//
// Responses:
// default: genericError
//
//	200: gongnoteDBResponse
func UpdateGongNote(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongNote.GetDB()

	// Get model if exist
	var gongnoteDB orm.GongNoteDB

	// fetch the gongnote
	query := db.First(&gongnoteDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongNoteAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gongnoteDB.CopyBasicFieldsFromGongNote(&input.GongNote)
	gongnoteDB.GongNotePointersEnconding = input.GongNotePointersEnconding

	query = db.Model(&gongnoteDB).Updates(gongnoteDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	gongnoteNew := new(models.GongNote)
	gongnoteDB.CopyBasicFieldsToGongNote(gongnoteNew)

	// get stage instance from DB instance, and call callback function
	gongnoteOld := (*orm.BackRepo.BackRepoGongNote.Map_GongNoteDBID_GongNotePtr)[gongnoteDB.ID]
	if gongnoteOld != nil {
		models.AfterUpdateFromFront(&models.Stage, gongnoteOld, gongnoteNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gongnoteDB
	c.JSON(http.StatusOK, gongnoteDB)
}

// DeleteGongNote
//
// swagger:route DELETE /gongnotes/{ID} gongnotes deleteGongNote
//
// # Delete a gongnote
//
// default: genericError
//
//	200: gongnoteDBResponse
func DeleteGongNote(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongNote.GetDB()

	// Get model if exist
	var gongnoteDB orm.GongNoteDB
	if err := db.First(&gongnoteDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongnoteDB)

	// get an instance (not staged) from DB instance, and call callback function
	gongnoteDeleted := new(models.GongNote)
	gongnoteDB.CopyBasicFieldsToGongNote(gongnoteDeleted)

	// get stage instance from DB instance, and call callback function
	gongnoteStaged := (*orm.BackRepo.BackRepoGongNote.Map_GongNoteDBID_GongNotePtr)[gongnoteDB.ID]
	if gongnoteStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, gongnoteStaged, gongnoteDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
