// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gong/go/models"
	"github.com/fullstack-lang/gong/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongLink__dummysDeclaration__ models.GongLink
var __GongLink_time__dummyDeclaration time.Duration

// An GongLinkID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongLink updateGongLink deleteGongLink
type GongLinkID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongLinkInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongLink updateGongLink
type GongLinkInput struct {
	// The GongLink to submit or modify
	// in: body
	GongLink *orm.GongLinkAPI
}

// GetGongLinks
//
// swagger:route GET /gonglinks gonglinks getGongLinks
//
// # Get all gonglinks
//
// Responses:
// default: genericError
//
//	200: gonglinkDBResponse
func GetGongLinks(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongLink.GetDB()

	// source slice
	var gonglinkDBs []orm.GongLinkDB
	query := db.Find(&gonglinkDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gonglinkAPIs := make([]orm.GongLinkAPI, 0)

	// for each gonglink, update fields from the database nullable fields
	for idx := range gonglinkDBs {
		gonglinkDB := &gonglinkDBs[idx]
		_ = gonglinkDB
		var gonglinkAPI orm.GongLinkAPI

		// insertion point for updating fields
		gonglinkAPI.ID = gonglinkDB.ID
		gonglinkDB.CopyBasicFieldsToGongLink(&gonglinkAPI.GongLink)
		gonglinkAPI.GongLinkPointersEnconding = gonglinkDB.GongLinkPointersEnconding
		gonglinkAPIs = append(gonglinkAPIs, gonglinkAPI)
	}

	c.JSON(http.StatusOK, gonglinkAPIs)
}

// PostGongLink
//
// swagger:route POST /gonglinks gonglinks postGongLink
//
// Creates a gonglink
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostGongLink(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongLink.GetDB()

	// Validate input
	var input orm.GongLinkAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gonglink
	gonglinkDB := orm.GongLinkDB{}
	gonglinkDB.GongLinkPointersEnconding = input.GongLinkPointersEnconding
	gonglinkDB.CopyBasicFieldsFromGongLink(&input.GongLink)

	query := db.Create(&gonglinkDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoGongLink.CheckoutPhaseOneInstance(&gonglinkDB)
	gonglink := (*orm.BackRepo.BackRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[gonglinkDB.ID]

	if gonglink != nil {
		models.AfterCreateFromFront(&models.Stage, gonglink)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gonglinkDB)
}

// GetGongLink
//
// swagger:route GET /gonglinks/{ID} gonglinks getGongLink
//
// Gets the details for a gonglink.
//
// Responses:
// default: genericError
//
//	200: gonglinkDBResponse
func GetGongLink(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongLink.GetDB()

	// Get gonglinkDB in DB
	var gonglinkDB orm.GongLinkDB
	if err := db.First(&gonglinkDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gonglinkAPI orm.GongLinkAPI
	gonglinkAPI.ID = gonglinkDB.ID
	gonglinkAPI.GongLinkPointersEnconding = gonglinkDB.GongLinkPointersEnconding
	gonglinkDB.CopyBasicFieldsToGongLink(&gonglinkAPI.GongLink)

	c.JSON(http.StatusOK, gonglinkAPI)
}

// UpdateGongLink
//
// swagger:route PATCH /gonglinks/{ID} gonglinks updateGongLink
//
// # Update a gonglink
//
// Responses:
// default: genericError
//
//	200: gonglinkDBResponse
func UpdateGongLink(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongLink.GetDB()

	// Get model if exist
	var gonglinkDB orm.GongLinkDB

	// fetch the gonglink
	query := db.First(&gonglinkDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongLinkAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gonglinkDB.CopyBasicFieldsFromGongLink(&input.GongLink)
	gonglinkDB.GongLinkPointersEnconding = input.GongLinkPointersEnconding

	query = db.Model(&gonglinkDB).Updates(gonglinkDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	gonglinkNew := new(models.GongLink)
	gonglinkDB.CopyBasicFieldsToGongLink(gonglinkNew)

	// get stage instance from DB instance, and call callback function
	gonglinkOld := (*orm.BackRepo.BackRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[gonglinkDB.ID]
	if gonglinkOld != nil {
		models.AfterUpdateFromFront(&models.Stage, gonglinkOld, gonglinkNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gonglinkDB
	c.JSON(http.StatusOK, gonglinkDB)
}

// DeleteGongLink
//
// swagger:route DELETE /gonglinks/{ID} gonglinks deleteGongLink
//
// # Delete a gonglink
//
// default: genericError
//
//	200: gonglinkDBResponse
func DeleteGongLink(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongLink.GetDB()

	// Get model if exist
	var gonglinkDB orm.GongLinkDB
	if err := db.First(&gonglinkDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gonglinkDB)

	// get an instance (not staged) from DB instance, and call callback function
	gonglinkDeleted := new(models.GongLink)
	gonglinkDB.CopyBasicFieldsToGongLink(gonglinkDeleted)

	// get stage instance from DB instance, and call callback function
	gonglinkStaged := (*orm.BackRepo.BackRepoGongLink.Map_GongLinkDBID_GongLinkPtr)[gonglinkDB.ID]
	if gonglinkStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, gonglinkStaged, gonglinkDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
