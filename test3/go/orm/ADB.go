// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gong/test3/go/db"
	"github.com/fullstack-lang/gong/test3/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_sql sql.NullBool
var dummy_A_time time.Duration
var dummy_A_sort sort.Float64Slice

// AAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model aAPI
type AAPI struct {
	gorm.Model

	models.A_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	APointersEncoding APointersEncoding
}

// APointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type APointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ADB describes a a in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model aDB
type ADB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field aDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	APointersEncoding
}

// ADBs arrays aDBs
// swagger:response aDBsResponse
type ADBs []ADB

// ADBResponse provides response
// swagger:response aDBResponse
type ADBResponse struct {
	ADB
}

// AWOP is a A without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAStruct struct {
	// stores ADB according to their gorm ID
	Map_ADBID_ADB map[uint]*ADB

	// stores ADB ID according to A address
	Map_APtr_ADBID map[*models.A]uint

	// stores A according to their gorm ID
	Map_ADBID_APtr map[uint]*models.A

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoA *BackRepoAStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA.stage
	return
}

func (backRepoA *BackRepoAStruct) GetDB() db.DBInterface {
	return backRepoA.db
}

// GetADBFromAPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA *BackRepoAStruct) GetADBFromAPtr(a *models.A) (aDB *ADB) {
	id := backRepoA.Map_APtr_ADBID[a]
	aDB = backRepoA.Map_ADBID_ADB[id]
	return
}

// BackRepoA.CommitPhaseOne commits all staged instances of A to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA *BackRepoAStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a := range stage.As {
		backRepoA.CommitPhaseOneInstance(a)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a := range backRepoA.Map_ADBID_APtr {
		if _, ok := stage.As[a]; !ok {
			backRepoA.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA.CommitDeleteInstance commits deletion of A to the BackRepo
func (backRepoA *BackRepoAStruct) CommitDeleteInstance(id uint) (Error error) {

	a := backRepoA.Map_ADBID_APtr[id]

	// a is not staged anymore, remove aDB
	aDB := backRepoA.Map_ADBID_ADB[id]
	db, _ := backRepoA.db.Unscoped()
	_, err := db.Delete(&aDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoA.Map_APtr_ADBID, a)
	delete(backRepoA.Map_ADBID_APtr, id)
	delete(backRepoA.Map_ADBID_ADB, id)

	return
}

// BackRepoA.CommitPhaseOneInstance commits a staged instances of A to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA *BackRepoAStruct) CommitPhaseOneInstance(a *models.A) (Error error) {

	// check if the a is not commited yet
	if _, ok := backRepoA.Map_APtr_ADBID[a]; ok {
		return
	}

	// initiate a
	var aDB ADB
	aDB.CopyBasicFieldsFromA(a)

	_, err := backRepoA.db.Create(&aDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoA.Map_APtr_ADBID[a] = aDB.ID
	backRepoA.Map_ADBID_APtr[aDB.ID] = a
	backRepoA.Map_ADBID_ADB[aDB.ID] = &aDB

	return
}

// BackRepoA.CommitPhaseTwo commits all staged instances of A to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA *BackRepoAStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a := range backRepoA.Map_ADBID_APtr {
		backRepoA.CommitPhaseTwoInstance(backRepo, idx, a)
	}

	return
}

// BackRepoA.CommitPhaseTwoInstance commits {{structname }} of models.A to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA *BackRepoAStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a *models.A) (Error error) {

	// fetch matching aDB
	if aDB, ok := backRepoA.Map_ADBID_ADB[idx]; ok {

		aDB.CopyBasicFieldsFromA(a)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoA.db.Save(&aDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A intance %s", a.Name))
		return err
	}

	return
}

// BackRepoA.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA *BackRepoAStruct) CheckoutPhaseOne() (Error error) {

	aDBArray := make([]ADB, 0)
	_, err := backRepoA.db.Find(&aDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	aInstancesToBeRemovedFromTheStage := make(map[*models.A]any)
	for key, value := range backRepoA.stage.As {
		aInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, aDB := range aDBArray {
		backRepoA.CheckoutPhaseOneInstance(&aDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a, ok := backRepoA.Map_ADBID_APtr[aDB.ID]
		if ok {
			delete(aInstancesToBeRemovedFromTheStage, a)
		}
	}

	// remove from stage and back repo's 3 maps all as that are not in the checkout
	for a := range aInstancesToBeRemovedFromTheStage {
		a.Unstage(backRepoA.GetStage())

		// remove instance from the back repo 3 maps
		aID := backRepoA.Map_APtr_ADBID[a]
		delete(backRepoA.Map_APtr_ADBID, a)
		delete(backRepoA.Map_ADBID_ADB, aID)
		delete(backRepoA.Map_ADBID_APtr, aID)
	}

	return
}

// CheckoutPhaseOneInstance takes a aDB that has been found in the DB, updates the backRepo and stages the
// models version of the aDB
func (backRepoA *BackRepoAStruct) CheckoutPhaseOneInstance(aDB *ADB) (Error error) {

	a, ok := backRepoA.Map_ADBID_APtr[aDB.ID]
	if !ok {
		a = new(models.A)

		backRepoA.Map_ADBID_APtr[aDB.ID] = a
		backRepoA.Map_APtr_ADBID[a] = aDB.ID

		// append model store with the new element
		a.Name = aDB.Name_Data.String
		a.Stage(backRepoA.GetStage())
	}
	aDB.CopyBasicFieldsToA(a)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a.Stage(backRepoA.GetStage())

	// preserve pointer to aDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ADBID_ADB)[aDB hold variable pointers
	aDB_Data := *aDB
	preservedPtrToA := &aDB_Data
	backRepoA.Map_ADBID_ADB[aDB.ID] = preservedPtrToA

	return
}

// BackRepoA.CheckoutPhaseTwo Checkouts all staged instances of A to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA *BackRepoAStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, aDB := range backRepoA.Map_ADBID_ADB {
		backRepoA.CheckoutPhaseTwoInstance(backRepo, aDB)
	}
	return
}

// BackRepoA.CheckoutPhaseTwoInstance Checkouts staged instances of A to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA *BackRepoAStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, aDB *ADB) (Error error) {

	a := backRepoA.Map_ADBID_APtr[aDB.ID]

	aDB.DecodePointers(backRepo, a)

	return
}

func (aDB *ADB) DecodePointers(backRepo *BackRepoStruct, a *models.A) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA allows commit of a single a (if already staged)
func (backRepo *BackRepoStruct) CommitA(a *models.A) {
	backRepo.BackRepoA.CommitPhaseOneInstance(a)
	if id, ok := backRepo.BackRepoA.Map_APtr_ADBID[a]; ok {
		backRepo.BackRepoA.CommitPhaseTwoInstance(backRepo, id, a)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA allows checkout of a single a (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA(a *models.A) {
	// check if the a is staged
	if _, ok := backRepo.BackRepoA.Map_APtr_ADBID[a]; ok {

		if id, ok := backRepo.BackRepoA.Map_APtr_ADBID[a]; ok {
			var aDB ADB
			aDB.ID = id

			if _, err := backRepo.BackRepoA.db.First(&aDB, id); err != nil {
				log.Fatalln("CheckoutA : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA.CheckoutPhaseOneInstance(&aDB)
			backRepo.BackRepoA.CheckoutPhaseTwoInstance(backRepo, &aDB)
		}
	}
}

// CopyBasicFieldsFromA
func (aDB *ADB) CopyBasicFieldsFromA(a *models.A) {
	// insertion point for fields commit

	aDB.Name_Data.String = a.Name
	aDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_WOP
func (aDB *ADB) CopyBasicFieldsFromA_WOP(a *models.A_WOP) {
	// insertion point for fields commit

	aDB.Name_Data.String = a.Name
	aDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAWOP
func (aDB *ADB) CopyBasicFieldsFromAWOP(a *AWOP) {
	// insertion point for fields commit

	aDB.Name_Data.String = a.Name
	aDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA
func (aDB *ADB) CopyBasicFieldsToA(a *models.A) {
	// insertion point for checkout of basic fields (back repo to stage)
	a.Name = aDB.Name_Data.String
}

// CopyBasicFieldsToA_WOP
func (aDB *ADB) CopyBasicFieldsToA_WOP(a *models.A_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a.Name = aDB.Name_Data.String
}

// CopyBasicFieldsToAWOP
func (aDB *ADB) CopyBasicFieldsToAWOP(a *AWOP) {
	a.ID = int(aDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a.Name = aDB.Name_Data.String
}

// Backup generates a json file from a slice of all ADB instances in the backrepo
func (backRepoA *BackRepoAStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ADB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ADB, 0)
	for _, aDB := range backRepoA.Map_ADBID_ADB {
		forBackup = append(forBackup, aDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A file", err.Error())
	}
}

// Backup generates a json file from a slice of all ADB instances in the backrepo
func (backRepoA *BackRepoAStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ADB, 0)
	for _, aDB := range backRepoA.Map_ADBID_ADB {
		forBackup = append(forBackup, aDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_Fields, -1)
	for _, aDB := range forBackup {

		var aWOP AWOP
		aDB.CopyBasicFieldsToAWOP(&aWOP)

		row := sh.AddRow()
		row.WriteStruct(&aWOP, -1)
	}
}

// RestoreXL from the "A" sheet all ADB instances
func (backRepoA *BackRepoAStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA.rowVisitorA)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA *BackRepoAStruct) rowVisitorA(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var aWOP AWOP
		row.ReadStruct(&aWOP)

		// add the unmarshalled struct to the stage
		aDB := new(ADB)
		aDB.CopyBasicFieldsFromAWOP(&aWOP)

		aDB_ID_atBackupTime := aDB.ID
		aDB.ID = 0
		_, err := backRepoA.db.Create(aDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA.Map_ADBID_ADB[aDB.ID] = aDB
		BackRepoAid_atBckpTime_newID[aDB_ID_atBackupTime] = aDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ADB.json" in dirPath that stores an array
// of ADB and stores it in the database
// the map BackRepoAid_atBckpTime_newID is updated accordingly
func (backRepoA *BackRepoAStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ADB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ADB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ADBID_ADB
	for _, aDB := range forRestore {

		aDB_ID_atBackupTime := aDB.ID
		aDB.ID = 0
		_, err := backRepoA.db.Create(aDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA.Map_ADBID_ADB[aDB.ID] = aDB
		BackRepoAid_atBckpTime_newID[aDB_ID_atBackupTime] = aDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A>id_atBckpTime_newID
// to compute new index
func (backRepoA *BackRepoAStruct) RestorePhaseTwo() {

	for _, aDB := range backRepoA.Map_ADBID_ADB {

		// next line of code is to avert unused variable compilation error
		_ = aDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoA.db.Model(aDB)
		_, err := db.Updates(*aDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoA.ResetReversePointers commits all staged instances of A to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA *BackRepoAStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a := range backRepoA.Map_ADBID_APtr {
		backRepoA.ResetReversePointersInstance(backRepo, idx, a)
	}

	return
}

func (backRepoA *BackRepoAStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a *models.A) (Error error) {

	// fetch matching aDB
	if aDB, ok := backRepoA.Map_ADBID_ADB[idx]; ok {
		_ = aDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAid_atBckpTime_newID map[uint]uint
