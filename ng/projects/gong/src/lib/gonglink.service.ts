// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { GongLinkDB } from './gonglink-db';

// insertion point for imports
import { GongNoteDB } from './gongnote-db'

@Injectable({
  providedIn: 'root'
})
export class GongLinkService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  GongLinkServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private gonglinksUrl: string

  constructor(
    private http: HttpClient,
    private location: Location,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.gonglinksUrl = origin + '/api/github.com/fullstack-lang/gong/go/v1/gonglinks';
  }

  /** GET gonglinks from the server */
  getGongLinks(): Observable<GongLinkDB[]> {
    return this.http.get<GongLinkDB[]>(this.gonglinksUrl)
      .pipe(
        tap(_ => this.log('fetched gonglinks')),
        catchError(this.handleError<GongLinkDB[]>('getGongLinks', []))
      );
  }

  /** GET gonglink by id. Will 404 if id not found */
  getGongLink(id: number): Observable<GongLinkDB> {
    const url = `${this.gonglinksUrl}/${id}`;
    return this.http.get<GongLinkDB>(url).pipe(
      tap(_ => this.log(`fetched gonglink id=${id}`)),
      catchError(this.handleError<GongLinkDB>(`getGongLink id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new gonglink to the server */
  postGongLink(gonglinkdb: GongLinkDB): Observable<GongLinkDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let _GongNote_Links_reverse = gonglinkdb.GongNote_Links_reverse
    gonglinkdb.GongNote_Links_reverse = new GongNoteDB

    return this.http.post<GongLinkDB>(this.gonglinksUrl, gonglinkdb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        gonglinkdb.GongNote_Links_reverse = _GongNote_Links_reverse
        this.log(`posted gonglinkdb id=${gonglinkdb.ID}`)
      }),
      catchError(this.handleError<GongLinkDB>('postGongLink'))
    );
  }

  /** DELETE: delete the gonglinkdb from the server */
  deleteGongLink(gonglinkdb: GongLinkDB | number): Observable<GongLinkDB> {
    const id = typeof gonglinkdb === 'number' ? gonglinkdb : gonglinkdb.ID;
    const url = `${this.gonglinksUrl}/${id}`;

    return this.http.delete<GongLinkDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted gonglinkdb id=${id}`)),
      catchError(this.handleError<GongLinkDB>('deleteGongLink'))
    );
  }

  /** PUT: update the gonglinkdb on the server */
  updateGongLink(gonglinkdb: GongLinkDB): Observable<GongLinkDB> {
    const id = typeof gonglinkdb === 'number' ? gonglinkdb : gonglinkdb.ID;
    const url = `${this.gonglinksUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let _GongNote_Links_reverse = gonglinkdb.GongNote_Links_reverse
    gonglinkdb.GongNote_Links_reverse = new GongNoteDB

    return this.http.put<GongLinkDB>(url, gonglinkdb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        gonglinkdb.GongNote_Links_reverse = _GongNote_Links_reverse
        this.log(`updated gonglinkdb id=${gonglinkdb.ID}`)
      }),
      catchError(this.handleError<GongLinkDB>('updateGongLink'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
